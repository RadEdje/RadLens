// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({295:[function(require,module,exports) {
var global = arguments[3];
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);

},{}],161:[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = require("./runtime");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

},{"./runtime":295}],79:[function(require,module,exports) {
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":161}],54:[function(require,module,exports) {

},{}],194:[function(require,module,exports) {
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],195:[function(require,module,exports) {
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],101:[function(require,module,exports) {
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_to-integer":194,"./_defined":195}],208:[function(require,module,exports) {
module.exports = true;

},{}],107:[function(require,module,exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],61:[function(require,module,exports) {
var core = module.exports = { version: '2.5.6' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],163:[function(require,module,exports) {
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],146:[function(require,module,exports) {
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":163}],216:[function(require,module,exports) {
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],294:[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":216}],215:[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],202:[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":215}],299:[function(require,module,exports) {
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_is-object":216,"./_global":107}],304:[function(require,module,exports) {
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":202,"./_fails":215,"./_dom-create":299}],303:[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":216}],197:[function(require,module,exports) {
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":294,"./_ie8-dom-define":304,"./_to-primitive":303,"./_descriptors":202}],205:[function(require,module,exports) {
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],108:[function(require,module,exports) {
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_object-dp":197,"./_property-desc":205,"./_descriptors":202}],157:[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],83:[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var has = require('./_has');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":107,"./_core":61,"./_ctx":146,"./_hide":108,"./_has":157}],209:[function(require,module,exports) {
module.exports = require('./_hide');

},{"./_hide":108}],109:[function(require,module,exports) {
module.exports = {};

},{}],301:[function(require,module,exports) {
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],290:[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":301}],186:[function(require,module,exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_iobject":290,"./_defined":195}],150:[function(require,module,exports) {
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":194}],332:[function(require,module,exports) {
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":194}],331:[function(require,module,exports) {
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-iobject":186,"./_to-length":150,"./_to-absolute-index":332}],213:[function(require,module,exports) {

var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":61,"./_global":107,"./_library":208}],214:[function(require,module,exports) {
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],298:[function(require,module,exports) {
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":213,"./_uid":214}],319:[function(require,module,exports) {
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_has":157,"./_to-iobject":186,"./_array-includes":331,"./_shared-key":298}],297:[function(require,module,exports) {
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],262:[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_object-keys-internal":319,"./_enum-bug-keys":297}],296:[function(require,module,exports) {
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_object-dp":197,"./_an-object":294,"./_object-keys":262,"./_descriptors":202}],300:[function(require,module,exports) {
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":107}],156:[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":294,"./_object-dps":296,"./_enum-bug-keys":297,"./_shared-key":298,"./_dom-create":299,"./_html":300}],110:[function(require,module,exports) {
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_shared":213,"./_uid":214,"./_global":107}],211:[function(require,module,exports) {
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_object-dp":197,"./_has":157,"./_wks":110}],210:[function(require,module,exports) {
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_object-create":156,"./_property-desc":205,"./_set-to-string-tag":211,"./_hide":108,"./_wks":110}],147:[function(require,module,exports) {
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":195}],212:[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":157,"./_to-object":147,"./_shared-key":298}],102:[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_library":208,"./_export":83,"./_redefine":209,"./_hide":108,"./_iterators":109,"./_iter-create":210,"./_set-to-string-tag":211,"./_object-gpo":212,"./_wks":110}],55:[function(require,module,exports) {
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_string-at":101,"./_iter-define":102}],204:[function(require,module,exports) {
module.exports = function () { /* empty */ };

},{}],200:[function(require,module,exports) {
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],106:[function(require,module,exports) {
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":204,"./_iter-step":200,"./_iterators":109,"./_to-iobject":186,"./_iter-define":102}],56:[function(require,module,exports) {

require('./es6.array.iterator');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var TO_STRING_TAG = require('./_wks')('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

},{"./es6.array.iterator":106,"./_global":107,"./_hide":108,"./_iterators":109,"./_wks":110}],159:[function(require,module,exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":301,"./_wks":110}],199:[function(require,module,exports) {
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],148:[function(require,module,exports) {
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":294}],149:[function(require,module,exports) {
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":109,"./_wks":110}],152:[function(require,module,exports) {
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":159,"./_wks":110,"./_iterators":109,"./_core":61}],164:[function(require,module,exports) {
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_ctx":146,"./_iter-call":148,"./_is-array-iter":149,"./_an-object":294,"./_to-length":150,"./core.get-iterator-method":152}],283:[function(require,module,exports) {
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_an-object":294,"./_a-function":163,"./_wks":110}],323:[function(require,module,exports) {
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],291:[function(require,module,exports) {


var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_ctx":146,"./_invoke":323,"./_html":300,"./_dom-create":299,"./_global":107,"./_cof":301}],292:[function(require,module,exports) {


var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_global":107,"./_task":291,"./_cof":301}],286:[function(require,module,exports) {
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":163}],287:[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],293:[function(require,module,exports) {

var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":107}],284:[function(require,module,exports) {
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":294,"./_is-object":216,"./_new-promise-capability":286}],198:[function(require,module,exports) {
var hide = require('./_hide');
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

},{"./_hide":108}],201:[function(require,module,exports) {

'use strict';
var global = require('./_global');
var core = require('./_core');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_global":107,"./_core":61,"./_object-dp":197,"./_descriptors":202,"./_wks":110}],153:[function(require,module,exports) {
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":110}],143:[function(require,module,exports) {


'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_library":208,"./_global":107,"./_ctx":146,"./_classof":159,"./_export":83,"./_is-object":216,"./_a-function":163,"./_an-instance":199,"./_for-of":164,"./_species-constructor":283,"./_task":291,"./_microtask":292,"./_new-promise-capability":286,"./_perform":287,"./_user-agent":293,"./_promise-resolve":284,"./_wks":110,"./_redefine-all":198,"./_set-to-string-tag":211,"./_set-species":201,"./_core":61,"./_iter-detect":153}],144:[function(require,module,exports) {

// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_export":83,"./_core":61,"./_global":107,"./_species-constructor":283,"./_promise-resolve":284}],145:[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });

},{"./_export":83,"./_new-promise-capability":286,"./_perform":287}],76:[function(require,module,exports) {
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
require('../modules/es7.promise.finally');
require('../modules/es7.promise.try');
module.exports = require('../modules/_core').Promise;

},{"../modules/es6.object.to-string":54,"../modules/es6.string.iterator":55,"../modules/web.dom.iterable":56,"../modules/es6.promise":143,"../modules/es7.promise.finally":144,"../modules/es7.promise.try":145,"../modules/_core":61}],33:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":76}],13:[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var _promise = require("../core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};
},{"../core-js/promise":33}],203:[function(require,module,exports) {
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_uid":214,"./_is-object":216,"./_has":157,"./_object-dp":197,"./_fails":215}],104:[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":216}],103:[function(require,module,exports) {
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_object-dp":197,"./_object-create":156,"./_redefine-all":198,"./_ctx":146,"./_an-instance":199,"./_for-of":164,"./_iter-define":102,"./_iter-step":200,"./_set-species":201,"./_descriptors":202,"./_meta":203,"./_validate-collection":104}],327:[function(require,module,exports) {
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":301}],330:[function(require,module,exports) {
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-object":216,"./_is-array":327,"./_wks":110}],317:[function(require,module,exports) {
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":330}],217:[function(require,module,exports) {
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_ctx":146,"./_iobject":290,"./_to-object":147,"./_to-length":150,"./_array-species-create":317}],105:[function(require,module,exports) {

'use strict';
var global = require('./_global');
var $export = require('./_export');
var meta = require('./_meta');
var fails = require('./_fails');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var setToStringTag = require('./_set-to-string-tag');
var dP = require('./_object-dp').f;
var each = require('./_array-methods')(0);
var DESCRIPTORS = require('./_descriptors');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function (target, iterable) {
      anInstance(target, C, NAME, '_c');
      target._c = new Base();
      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
        anInstance(this, C, KEY);
        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    IS_WEAK || dP(C.prototype, 'size', {
      get: function () {
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_global":107,"./_export":83,"./_meta":203,"./_fails":215,"./_hide":108,"./_redefine-all":198,"./_for-of":164,"./_an-instance":199,"./_is-object":216,"./_set-to-string-tag":211,"./_object-dp":197,"./_array-methods":217,"./_descriptors":202}],57:[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection-strong":103,"./_validate-collection":104,"./_collection":105}],160:[function(require,module,exports) {
var forOf = require('./_for-of');

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":164}],84:[function(require,module,exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof');
var from = require('./_array-from-iterable');
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

},{"./_classof":159,"./_array-from-iterable":160}],58:[function(require,module,exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });

},{"./_export":83,"./_collection-to-json":84}],86:[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};

},{"./_export":83}],59:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
require('./_set-collection-of')('Set');

},{"./_set-collection-of":86}],87:[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');
var aFunction = require('./_a-function');
var ctx = require('./_ctx');
var forOf = require('./_for-of');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};

},{"./_export":83,"./_a-function":163,"./_ctx":146,"./_for-of":164}],60:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
require('./_set-collection-from')('Set');

},{"./_set-collection-from":87}],40:[function(require,module,exports) {
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.set');
require('../modules/es7.set.to-json');
require('../modules/es7.set.of');
require('../modules/es7.set.from');
module.exports = require('../modules/_core').Set;

},{"../modules/es6.object.to-string":54,"../modules/es6.string.iterator":55,"../modules/web.dom.iterable":56,"../modules/es6.set":57,"../modules/es7.set.to-json":58,"../modules/es7.set.of":59,"../modules/es7.set.from":60,"../modules/_core":61}],14:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/set"), __esModule: true };
},{"core-js/library/fn/set":40}],68:[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection-strong":103,"./_validate-collection":104,"./_collection":105}],69:[function(require,module,exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });

},{"./_export":83,"./_collection-to-json":84}],70:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
require('./_set-collection-of')('Map');

},{"./_set-collection-of":86}],71:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
require('./_set-collection-from')('Map');

},{"./_set-collection-from":87}],42:[function(require,module,exports) {
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.map');
require('../modules/es7.map.to-json');
require('../modules/es7.map.of');
require('../modules/es7.map.from');
module.exports = require('../modules/_core').Map;

},{"../modules/es6.object.to-string":54,"../modules/es6.string.iterator":55,"../modules/web.dom.iterable":56,"../modules/es6.map":68,"../modules/es7.map.to-json":69,"../modules/es7.map.of":70,"../modules/es7.map.from":71,"../modules/_core":61}],15:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/map"), __esModule: true };
},{"core-js/library/fn/map":42}],100:[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],67:[function(require,module,exports) {
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":83,"./_math-expm1":100}],41:[function(require,module,exports) {
require('../../modules/es6.math.tanh');
module.exports = require('../../modules/_core').Math.tanh;

},{"../../modules/es6.math.tanh":67,"../../modules/_core":61}],16:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/math/tanh"), __esModule: true };
},{"core-js/library/fn/math/tanh":41}],151:[function(require,module,exports) {
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":197,"./_property-desc":205}],74:[function(require,module,exports) {
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_ctx":146,"./_export":83,"./_to-object":147,"./_iter-call":148,"./_is-array-iter":149,"./_to-length":150,"./_create-property":151,"./core.get-iterator-method":152,"./_iter-detect":153}],43:[function(require,module,exports) {
require('../../modules/es6.string.iterator');
require('../../modules/es6.array.from');
module.exports = require('../../modules/_core').Array.from;

},{"../../modules/es6.string.iterator":55,"../../modules/es6.array.from":74,"../../modules/_core":61}],17:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };
},{"core-js/library/fn/array/from":43}],288:[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],289:[function(require,module,exports) {
exports.f = {}.propertyIsEnumerable;

},{}],141:[function(require,module,exports) {
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_object-keys":262,"./_object-gops":288,"./_object-pie":289,"./_to-object":147,"./_iobject":290,"./_fails":215}],75:[function(require,module,exports) {
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":83,"./_object-assign":141}],44:[function(require,module,exports) {
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;

},{"../../modules/es6.object.assign":75,"../../modules/_core":61}],18:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":44}],80:[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":83,"./_object-create":156}],46:[function(require,module,exports) {
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};

},{"../../modules/es6.object.create":80,"../../modules/_core":61}],19:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":46}],187:[function(require,module,exports) {
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_object-pie":289,"./_property-desc":205,"./_to-iobject":186,"./_to-primitive":303,"./_has":157,"./_ie8-dom-define":304,"./_descriptors":202}],154:[function(require,module,exports) {
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_is-object":216,"./_an-object":294,"./_ctx":146,"./_object-gopd":187}],78:[function(require,module,exports) {
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":83,"./_set-proto":154}],45:[function(require,module,exports) {
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;

},{"../../modules/es6.object.set-prototype-of":78,"../../modules/_core":61}],20:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":45}],47:[function(require,module,exports) {
var core = require('../../modules/_core');
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};

},{"../../modules/_core":61}],21:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };
},{"core-js/library/fn/json/stringify":47}],97:[function(require,module,exports) {
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":83}],52:[function(require,module,exports) {
require('../../modules/es6.math.atanh');
module.exports = require('../../modules/_core').Math.atanh;

},{"../../modules/es6.math.atanh":97,"../../modules/_core":61}],22:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/math/atanh"), __esModule: true };
},{"core-js/library/fn/math/atanh":52}],162:[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],85:[function(require,module,exports) {
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":83,"./_math-log1p":162}],49:[function(require,module,exports) {
require('../../modules/es6.math.acosh');
module.exports = require('../../modules/_core').Math.acosh;

},{"../../modules/es6.math.acosh":85,"../../modules/_core":61}],23:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/math/acosh"), __esModule: true };
},{"core-js/library/fn/math/acosh":49}],82:[function(require,module,exports) {
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":83}],48:[function(require,module,exports) {
require('../../modules/es6.math.asinh');
module.exports = require('../../modules/_core').Math.asinh;

},{"../../modules/es6.math.asinh":82,"../../modules/_core":61}],24:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/math/asinh"), __esModule: true };
},{"core-js/library/fn/math/asinh":48}],99:[function(require,module,exports) {
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":83}],53:[function(require,module,exports) {
require('../../modules/es6.math.cosh');
module.exports = require('../../modules/_core').Math.cosh;

},{"../../modules/es6.math.cosh":99,"../../modules/_core":61}],25:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/math/cosh"), __esModule: true };
},{"core-js/library/fn/math/cosh":53}],134:[function(require,module,exports) {
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":83,"./_math-expm1":100,"./_fails":215}],63:[function(require,module,exports) {
require('../../modules/es6.math.sinh');
module.exports = require('../../modules/_core').Math.sinh;

},{"../../modules/es6.math.sinh":134,"../../modules/_core":61}],26:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/math/sinh"), __esModule: true };
},{"core-js/library/fn/math/sinh":63}],98:[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":83,"./_math-log1p":162}],62:[function(require,module,exports) {
require('../../modules/es6.math.log1p');
module.exports = require('../../modules/_core').Math.log1p;

},{"../../modules/es6.math.log1p":98,"../../modules/_core":61}],27:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/math/log1p"), __esModule: true };
},{"core-js/library/fn/math/log1p":62}],140:[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":83,"./_math-expm1":100}],66:[function(require,module,exports) {
require('../../modules/es6.math.expm1');
module.exports = require('../../modules/_core').Math.expm1;

},{"../../modules/es6.math.expm1":140,"../../modules/_core":61}],28:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/math/expm1"), __esModule: true };
},{"core-js/library/fn/math/expm1":66}],188:[function(require,module,exports) {
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_export":83,"./_core":61,"./_fails":215}],142:[function(require,module,exports) {
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_to-object":147,"./_object-keys":262,"./_object-sap":188}],73:[function(require,module,exports) {
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;

},{"../../modules/es6.object.keys":142,"../../modules/_core":61}],29:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":73}],285:[function(require,module,exports) {
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_redefine-all":198,"./_meta":203,"./_an-object":294,"./_is-object":216,"./_an-instance":199,"./_for-of":164,"./_array-methods":217,"./_has":157,"./_validate-collection":104}],137:[function(require,module,exports) {
'use strict';
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var fails = require('./_fails');
var validate = require('./_validate-collection');
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":217,"./_redefine":209,"./_meta":203,"./_object-assign":141,"./_collection-weak":285,"./_is-object":216,"./_fails":215,"./_validate-collection":104,"./_collection":105}],138:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
require('./_set-collection-of')('WeakMap');

},{"./_set-collection-of":86}],139:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
require('./_set-collection-from')('WeakMap');

},{"./_set-collection-from":87}],72:[function(require,module,exports) {
require('../modules/es6.object.to-string');
require('../modules/web.dom.iterable');
require('../modules/es6.weak-map');
require('../modules/es7.weak-map.of');
require('../modules/es7.weak-map.from');
module.exports = require('../modules/_core').WeakMap;

},{"../modules/es6.object.to-string":54,"../modules/web.dom.iterable":56,"../modules/es6.weak-map":137,"../modules/es7.weak-map.of":138,"../modules/es7.weak-map.from":139,"../modules/_core":61}],30:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/weak-map"), __esModule: true };
},{"core-js/library/fn/weak-map":72}],155:[function(require,module,exports) {
exports.f = require('./_wks');

},{"./_wks":110}],77:[function(require,module,exports) {
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');

},{"../../modules/es6.string.iterator":55,"../../modules/web.dom.iterable":56,"../../modules/_wks-ext":155}],31:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":77}],324:[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_global":107,"./_core":61,"./_library":208,"./_wks-ext":155,"./_object-dp":197}],326:[function(require,module,exports) {
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-keys":262,"./_object-gops":288,"./_object-pie":289}],329:[function(require,module,exports) {
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_object-keys-internal":319,"./_enum-bug-keys":297}],328:[function(require,module,exports) {
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_to-iobject":186,"./_object-gopn":329}],305:[function(require,module,exports) {

'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_global":107,"./_has":157,"./_descriptors":202,"./_export":83,"./_redefine":209,"./_meta":203,"./_fails":215,"./_shared":213,"./_set-to-string-tag":211,"./_uid":214,"./_wks":110,"./_wks-ext":155,"./_wks-define":324,"./_enum-keys":326,"./_is-array":327,"./_an-object":294,"./_is-object":216,"./_to-iobject":186,"./_to-primitive":303,"./_property-desc":205,"./_object-create":156,"./_object-gopn-ext":328,"./_object-gopd":187,"./_object-dp":197,"./_object-keys":262,"./_object-gopn":329,"./_object-pie":289,"./_object-gops":288,"./_library":208,"./_hide":108}],306:[function(require,module,exports) {
require('./_wks-define')('asyncIterator');

},{"./_wks-define":324}],307:[function(require,module,exports) {
require('./_wks-define')('observable');

},{"./_wks-define":324}],193:[function(require,module,exports) {
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;

},{"../../modules/es6.symbol":305,"../../modules/es6.object.to-string":54,"../../modules/es7.symbol.async-iterator":306,"../../modules/es7.symbol.observable":307,"../../modules/_core":61}],32:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":193}],158:[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_export":83,"./_descriptors":202,"./_object-dp":197}],81:[function(require,module,exports) {
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};

},{"../../modules/es6.object.define-property":158,"../../modules/_core":61}],34:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":81}],93:[function(require,module,exports) {
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_to-iobject":186,"./_object-gopd":187,"./_object-sap":188}],51:[function(require,module,exports) {
require('../../modules/es6.object.get-own-property-descriptor');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyDescriptor(it, key) {
  return $Object.getOwnPropertyDescriptor(it, key);
};

},{"../../modules/es6.object.get-own-property-descriptor":93,"../../modules/_core":61}],35:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":51}],36:[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol/iterator":31,"../core-js/symbol":32}],11:[function(require,module,exports) {
var define;
var global = arguments[3];
"use strict";

var _set = require("babel-runtime/core-js/set");

var _set2 = _interopRequireDefault(_set);

var _map = require("babel-runtime/core-js/map");

var _map2 = _interopRequireDefault(_map);

var _tanh = require("babel-runtime/core-js/math/tanh");

var _tanh2 = _interopRequireDefault(_tanh);

var _from = require("babel-runtime/core-js/array/from");

var _from2 = _interopRequireDefault(_from);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _create = require("babel-runtime/core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _atanh = require("babel-runtime/core-js/math/atanh");

var _atanh2 = _interopRequireDefault(_atanh);

var _acosh = require("babel-runtime/core-js/math/acosh");

var _acosh2 = _interopRequireDefault(_acosh);

var _asinh = require("babel-runtime/core-js/math/asinh");

var _asinh2 = _interopRequireDefault(_asinh);

var _cosh = require("babel-runtime/core-js/math/cosh");

var _cosh2 = _interopRequireDefault(_cosh);

var _sinh = require("babel-runtime/core-js/math/sinh");

var _sinh2 = _interopRequireDefault(_sinh);

var _log1p = require("babel-runtime/core-js/math/log1p");

var _log1p2 = _interopRequireDefault(_log1p);

var _expm = require("babel-runtime/core-js/math/expm1");

var _expm2 = _interopRequireDefault(_expm);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _weakMap = require("babel-runtime/core-js/weak-map");

var _weakMap2 = _interopRequireDefault(_weakMap);

var _iterator = require("babel-runtime/core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("babel-runtime/core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _defineProperty = require("babel-runtime/core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getOwnPropertyDescriptor = require("babel-runtime/core-js/object/get-own-property-descriptor");

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

!function (e) {
  if ("object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).tf = e();
  }
}(function () {
  return function () {
    function e(t, n, r) {
      function i(o, s) {
        if (!n[o]) {
          if (!t[o]) {
            var u = "function" == typeof require && require;if (!s && u) return u(o, !0);if (a) return a(o, !0);var l = new Error("Cannot find module '" + o + "'");throw l.code = "MODULE_NOT_FOUND", l;
          }var c = n[o] = { exports: {} };t[o][0].call(c.exports, function (e) {
            var n = t[o][1][e];return i(n || e);
          }, c, c.exports, e, t, n, r);
        }return n[o].exports;
      }for (var a = "function" == typeof require && require, o = 0; o < r.length; o++) {
        i(r[o]);
      }return i;
    }return e;
  }()({ 1: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("./doc"),
          a = function () {
        function e() {}return e.nextFrame = function () {
          return new _promise2.default(function (e) {
            return requestAnimationFrame(function () {
              return e();
            });
          });
        }, r([i.doc({ heading: "Performance", subheading: "Timing" })], e, "nextFrame", null), e;
      }();n.BrowserUtil = a;
    }, { "./doc": 3 }], 2: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 }), n.isMobile = function () {
        var e = navigator.userAgent || navigator.vendor || window.opera;return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4))
        );
      };
    }, {}], 3: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 }), n.doc = function (e) {
        return function () {
          for (var e = [], t = 0; t < arguments.length; t++) {
            e[t] = arguments[t];
          }
        };
      };
    }, {}], 4: [function (e, t, n) {
      "use strict";
      var r = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          i = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var a = e("./environment"),
          o = e("./globals"),
          s = e("./ops/ops"),
          u = e("./profiler"),
          l = e("./tape"),
          c = e("./tensor"),
          p = e("./util"),
          h = function () {
        function e(e, t) {
          this.backend = e, this.safeMode = t, this.registeredVariables = {}, this.refCounter = new _weakMap2.default(), this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numDataBuffers = 0, this.gradientScopeCount = 0, this.customGradientDepth = 0, this.activeScope = { keep: [], track: [] }, this.scopeStack = [this.activeScope], this.profiler = new u.Profiler(e);
        }return e.prototype.runKernel = function (e, t, n) {
          var r,
              i = this,
              o = [],
              s = function s(e) {
            return o.push(e), e;
          },
              u = this.activeScope.name;if (this.customGradientDepth++, r = a.ENV.get("DEBUG") ? this.profiler.profileKernel(u, function () {
            return e(i.backend, s);
          }) : e(this.backend, s), this.customGradientDepth--, this.shouldRecord()) {
            var l = { id: this.nextTapeNodeId++, name: u, inputs: t, output: r };null != n && (l.gradient = function (e) {
              return n(e, o);
            }), this.activeTape.push(l);
          }return r;
        }, e.prototype.registerTensor = function (e) {
          var t = this.refCounter.has(e.dataId) ? this.refCounter.get(e.dataId) : 0;this.numTensors++, 0 === t && (this.numDataBuffers++, this.numBytes += p.sizeFromShape(e.shape) * p.bytesPerElement(e.dtype), this.backend.register(e.dataId, e.shape, e.dtype)), this.refCounter.set(e.dataId, t + 1), e instanceof c.Variable || this.track(e);
        }, e.prototype.registerVariable = function (e) {
          if (null != this.registeredVariables[e.name]) throw new Error("Variable with name " + e.name + " was already registered");this.registeredVariables[e.name] = e;
        }, e.prototype.disposeTensor = function (e) {
          if (this.refCounter.has(e.dataId)) {
            this.numTensors--;var t = this.refCounter.get(e.dataId);t <= 1 ? (this.refCounter.delete(e.dataId), this.backend.disposeData(e.dataId), this.numDataBuffers--, this.numBytes -= p.sizeFromShape(e.shape) * p.bytesPerElement(e.dtype)) : this.refCounter.set(e.dataId, t - 1);
          }
        }, e.prototype.memory = function () {
          var e = this.backend.memory();return e.numTensors = this.numTensors, e.numDataBuffers = this.numDataBuffers, e.numBytes = this.numBytes, e;
        }, e.prototype.shouldRecord = function () {
          return null != this.activeTape && 0 === this.customGradientDepth;
        }, e.prototype.addTapeNode = function (e, t, n) {
          var r = {};e.forEach(function (e, t) {
            r[t] = e;
          });var i = { id: this.nextTapeNodeId++, name: this.activeScope.name, inputs: r, output: t, gradient: function gradient(e) {
              var t = {};return n(e).forEach(function (e, n) {
                t[n] = function () {
                  return e;
                };
              }), t;
            } };this.activeTape.push(i);
        }, e.prototype.keep = function (e) {
          if (1 === this.scopeStack.length && a.ENV.engine.safeMode) throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {...}) to avoid memory leaks.");return this.activeScope.keep.push(e), e;
        }, e.prototype.startScope = function (e, t) {
          void 0 === t && (t = !1), t && 0 === this.gradientScopeCount && (this.activeTape = []), t && this.gradientScopeCount++;var n = { keep: [], track: [] };e && (n.name = e), this.scopeStack.push(n), this.activeScope = n;
        }, e.prototype.endScope = function (e, t) {
          var n = this;void 0 === t && (t = !1), t && 0 === --this.gradientScopeCount && (this.activeTape = null);var r = this.activeScope.keep,
              i = p.extractTensorsFromContainer(e);r = r.concat(i);for (var a = 0; a < this.activeScope.track.length; a++) {
            var o = this.activeScope.track[a];p.isTensorInList(o, r) || (null != this.activeTape ? i.push(o) : o.dispose());
          }this.scopeStack.pop(), this.activeScope = 0 === this.scopeStack.length ? { keep: [], track: [] } : this.scopeStack[this.scopeStack.length - 1], i.forEach(function (e) {
            p.isTensorInList(e, n.activeScope.keep) || n.track(e);
          });
        }, e.prototype.dispose = function () {}, e.prototype.gradients = function (e, t, n, r) {
          var i = this;return void 0 === r && (r = !1), p.assert(t.length > 0, "gradients() received an empty list of xs."), o.tidy("gradients", function () {
            var a = e();p.assert(a instanceof c.Tensor, "The result y returned by f() must be a tensor.");var o = l.getFilteredNodesXToY(i.activeTape, t, a);if (!r && 0 === o.length && t.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");var u = {};return u[a.id] = null == n ? s.ones(a.shape) : n, l.backpropagateGradients(u, o), { value: a, grads: t.map(function (e) {
                return u[e.id];
              }) };
          }, !0);
        }, e.prototype.customGrad = function (e) {
          var t = this;return p.assert(p.isFunction(e), "The f passed in customGrad(f) must be a function."), function () {
            for (var n = [], r = 0; r < arguments.length; r++) {
              n[r] = arguments[r];
            }p.assert(n.every(function (e) {
              return e instanceof c.Tensor;
            }), "The args passed in customGrad(f)(x1, x2,...) must all be tensors"), t.customGradientDepth++;var i,
                a = o.tidy(e.name, function () {
              var t = e.apply(void 0, n),
                  r = t.value,
                  a = t.gradFunc;return p.assert(r instanceof c.Tensor, "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), p.assert(p.isFunction(a), "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), i = a, r;
            }, !0);if (t.customGradientDepth--, t.shouldRecord()) {
              t.addTapeNode(n, a, function (e) {
                var t = i(e),
                    r = Array.isArray(t) ? t : [t];return p.assert(r.length === n.length, "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), p.assert(r.every(function (e) {
                  return e instanceof c.Tensor;
                }), "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."), r;
              });
            }return a;
          };
        }, e.prototype.write = function (e, t) {
          this.backend.write(e, t);
        }, e.prototype.readSync = function (e) {
          return this.backend.readSync(e);
        }, e.prototype.read = function (e) {
          return this.backend.read(e);
        }, e.prototype.fromPixels = function (e, t) {
          return this.backend.fromPixels(e, t);
        }, e.prototype.time = function (e) {
          return r(this, void 0, void 0, function () {
            var t, n;return i(this, function (r) {
              switch (r.label) {case 0:
                  return t = performance.now(), [4, this.backend.time(e)];case 1:
                  return n = r.sent(), n.wallMs = performance.now() - t, [2, n];}
            });
          });
        }, e.prototype.track = function (e) {
          if (1 === this.scopeStack.length && this.safeMode) throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {op();...}); to avoid memory leaks.");return this.activeScope.track.push(e), e;
        }, e;
      }();n.Engine = h;
    }, { "./environment": 5, "./globals": 6, "./ops/ops": 66, "./profiler": 87, "./tape": 88, "./tensor": 89, "./util": 95 }], 5: [function (e, t, n) {
      (function (t) {
        "use strict";
        function r(e, t) {
          return null != e.getExtension(t);
        }function i(e) {
          if (0 === e) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var t = document.createElement("canvas");return 1 === e ? t.getContext("webgl") || t.getContext("experimental-webgl") : t.getContext("webgl2");
        }function a(e) {
          if (null != e) {
            var t = e.getExtension("WEBGL_lose_context");if (null == t) throw new Error("Extension WEBGL_lose_context not supported on this browser.");t.loseContext();
          }
        }function o(e) {
          var t = i(e);return null != t && (a(t), !0);
        }function s(e) {
          if (0 === e) return 0;var t,
              n = i(e);return t = r(n, "EXT_disjoint_timer_query_webgl2") && 2 === e ? 2 : r(n, "EXT_disjoint_timer_query") ? 1 : 0, null != n && a(n), t;
        }function u(e) {
          if (0 === e) return !1;var t = i(e);if (1 === e) {
            if (!r(t, "OES_texture_float")) return !1;
          } else if (!r(t, "EXT_color_buffer_float")) return !1;var n = t.createFramebuffer(),
              o = t.createTexture();t.bindTexture(t.TEXTURE_2D, o);var s = 2 === e ? t.RGBA32F : t.RGBA;t.texImage2D(t.TEXTURE_2D, 0, s, 1, 1, 0, t.RGBA, t.FLOAT, null), t.bindFramebuffer(t.FRAMEBUFFER, n), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, o, 0);var u = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;t.readPixels(0, 0, 1, 1, t.RGBA, t.FLOAT, new Float32Array(4));var l = t.getError() === t.NO_ERROR;return a(t), u && l;
        }function l(e) {
          if (e > 0) return !1;if (2 !== e) return !1;var t = i(e),
              n = r(t, "WEBGL_get_buffer_sub_data_async");return a(t), n;
        }function c() {
          var e = {};if ("undefined" == typeof window) return e;var t = v.getQueryParams(window.location.search);if (b in t) {
            var r = {};t[b].split(",").forEach(function (e) {
              var t = e.split(":"),
                  n = t[0],
                  i = t[1];r[n] = i;
            }), n.URL_PROPERTIES.forEach(function (t) {
              t.name in r && (console.log("Setting feature override from URL " + t.name + ": " + r[t.name]), t.type === d.NUMBER ? e[t.name] = +r[t.name] : t.type === d.BOOLEAN ? e[t.name] = "true" === r[t.name] : t.type === d.STRING ? e[t.name] = r[t.name] : console.warn("Unknown URL param: " + t.name + "."));
            });
          }return e;
        }function p() {
          var e;if ("undefined" != typeof window) e = window;else {
            if (void 0 === t) throw new Error("Could not find a global object");e = t;
          }return e;
        }var h = this && this.__decorate || function (e, t, n, r) {
          var i,
              a = arguments.length,
              o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
            (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
          }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
        };Object.defineProperty(n, "__esModule", { value: !0 });var d,
            f = e("./device_util"),
            g = e("./doc"),
            m = e("./engine"),
            v = e("./util");!function (e) {
          e[e.NUMBER = 0] = "NUMBER", e[e.BOOLEAN = 1] = "BOOLEAN", e[e.STRING = 2] = "STRING";
        }(d = n.Type || (n.Type = {})), n.URL_PROPERTIES = [{ name: "DEBUG", type: d.BOOLEAN }, { name: "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", type: d.NUMBER }, { name: "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", type: d.BOOLEAN }, { name: "WEBGL_VERSION", type: d.NUMBER }, { name: "WEBGL_FLOAT_TEXTURE_ENABLED", type: d.BOOLEAN }, { name: "WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED", type: d.BOOLEAN }, { name: "BACKEND", type: d.STRING }];var y = function () {
          function e(e) {
            this.features = {}, this.registry = {}, null != e && (this.features = e), this.get("DEBUG") && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
          }return e.setBackend = function (e, t) {
            if (void 0 === t && (t = !1), !(e in n.ENV.registry)) throw new Error("Backend type '" + e + "' not found in registry");n.ENV.initBackend(e, t);
          }, e.getBackend = function () {
            return n.ENV.initDefaultBackend(), n.ENV.currentBackend;
          }, e.memory = function () {
            return n.ENV.engine.memory();
          }, e.prototype.get = function (e) {
            return e in this.features ? this.features[e] : (this.features[e] = this.evaluateFeature(e), this.features[e]);
          }, e.prototype.set = function (e, t) {
            this.features[e] = t;
          }, e.prototype.getBestBackendType = function () {
            var e = this;if (0 === (0, _keys2.default)(this.registry).length) throw new Error("No backend found in registry.");return (0, _keys2.default)(this.registry).map(function (t) {
              return { name: t, entry: e.registry[t] };
            }).sort(function (e, t) {
              return t.entry.priority - e.entry.priority;
            })[0].name;
          }, e.prototype.evaluateFeature = function (e) {
            if ("DEBUG" === e) return !1;if ("BACKEND" === e) return this.getBestBackendType();if ("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION" === e) {
              var t = this.get("WEBGL_VERSION");return 0 === t ? 0 : s(t);
            }if ("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE" === e) return this.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !f.isMobile();if ("WEBGL_VERSION" === e) return o(2) ? 2 : o(1) ? 1 : 0;if ("WEBGL_FLOAT_TEXTURE_ENABLED" === e) return u(this.get("WEBGL_VERSION"));if ("WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED" === e) return l(this.get("WEBGL_VERSION"));throw new Error("Unknown feature " + e + ".");
          }, e.prototype.setFeatures = function (e) {
            this.features = e;
          }, e.prototype.reset = function () {
            this.features = c(), null != this.globalEngine && (this.globalEngine.dispose(), this.globalEngine = null);
          }, e.prototype.initBackend = function (e, t) {
            void 0 === t && (t = !1), this.currentBackend = e, null != this.globalEngine && this.globalEngine.dispose();var r = n.ENV.findBackend(e);this.globalEngine = new m.Engine(r, t);
          }, e.prototype.findBackend = function (e) {
            return e in this.registry ? this.registry[e].backend : null;
          }, e.prototype.registerBackend = function (e, t, n) {
            void 0 === n && (n = 1), e in this.registry && console.warn(e + " backend was already registered");try {
              var r = t();return this.registry[e] = { backend: r, priority: n }, !0;
            } catch (e) {
              return console.warn(e.message), !1;
            }
          }, e.prototype.removeBackend = function (e) {
            if (!(e in this.registry)) throw new Error(e + " backend not found in registry");this.registry[e].backend.dispose(), delete this.registry[e];
          }, Object.defineProperty(e.prototype, "engine", { get: function get() {
              return this.initDefaultBackend(), this.globalEngine;
            }, enumerable: !0, configurable: !0 }), e.prototype.initDefaultBackend = function () {
            null == this.globalEngine && this.initBackend(n.ENV.get("BACKEND"), !1);
          }, h([g.doc({ heading: "Environment" })], e, "setBackend", null), h([g.doc({ heading: "Environment" })], e, "getBackend", null), h([g.doc({ heading: "Performance", subheading: "Memory" })], e, "memory", null), e;
        }();n.Environment = y;var b = "tfjsflags";n.ENV = function () {
          var e = p();return e.ENV = e.ENV || new y(c()), e.ENV;
        }();
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, { "./device_util": 2, "./doc": 3, "./engine": 4, "./util": 95 }], 6: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("./gradients"),
          i = e("./tracking");n.tidy = i.Tracking.tidy, n.keep = i.Tracking.keep, n.dispose = i.Tracking.dispose, n.time = i.Tracking.time, n.grad = r.Gradients.grad, n.valueAndGrad = r.Gradients.valueAndGrad, n.grads = r.Gradients.grads, n.valueAndGrads = r.Gradients.valueAndGrads, n.variableGrads = r.Gradients.variableGrads, n.customGrad = r.Gradients.customGrad;
    }, { "./gradients": 7, "./tracking": 92 }], 7: [function (e, t, n) {
      "use strict";
      function r(e) {
        if (e.filter(function (e) {
          return null == e;
        }).length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
      }var i = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var a = e("./doc"),
          o = e("./environment"),
          s = e("./globals"),
          u = e("./tensor"),
          l = e("./util"),
          c = function () {
        function e() {}return e.gradScope = function (e, t) {
          return s.tidy(e, t, !0);
        }, e.grad = function (e) {
          return l.assert(l.isFunction(e), "The f passed in grad(f) must be a function"), function (t, n) {
            l.assert(t instanceof u.Tensor, "The x passed in grad(f)(x) must be a tensor"), l.assert(null == n || n instanceof u.Tensor, "The dy passed in grad(f)(x, dy) must be a tensor");var i = o.ENV.engine.gradients(function () {
              return e(t);
            }, [t], n),
                a = i.value,
                s = i.grads;return null != n && l.assertShapesMatch(a.shape, n.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), a.dispose(), r(s), s[0];
          };
        }, e.grads = function (e) {
          return l.assert(l.isFunction(e), "The f passed in grads(f) must be a function"), function (t, n) {
            l.assert(Array.isArray(t) && t.every(function (e) {
              return e instanceof u.Tensor;
            }), "The args passed in grads(f)(args) must be an array of tensors"), l.assert(null == n || n instanceof u.Tensor, "The dy passed in grads(f)(args, dy) must be a tensor");var i = o.ENV.engine.gradients(function () {
              return e.apply(void 0, t);
            }, t, n),
                a = i.value,
                s = i.grads;return null != n && l.assertShapesMatch(a.shape, n.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), a.dispose(), r(s), s;
          };
        }, e.valueAndGrad = function (e) {
          return l.assert(l.isFunction(e), "The f passed in valueAndGrad(f) must be a function"), function (t, n) {
            l.assert(t instanceof u.Tensor, "The x passed in valueAndGrad(f)(x) must be a tensor"), l.assert(null == n || n instanceof u.Tensor, "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");var i = o.ENV.engine.gradients(function () {
              return e(t);
            }, [t], n),
                a = i.grads,
                s = i.value;return r(a), { grad: a[0], value: s };
          };
        }, e.valueAndGrads = function (e) {
          return l.assert(l.isFunction(e), "The f passed in valueAndGrads(f) must be a function"), function (t, n) {
            l.assert(Array.isArray(t) && t.every(function (e) {
              return e instanceof u.Tensor;
            }), "The args passed in valueAndGrads(f)(args) must be array of tensors"), l.assert(null == n || n instanceof u.Tensor, "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");var i = o.ENV.engine.gradients(function () {
              return e.apply(void 0, t);
            }, t, n);return null != n && l.assertShapesMatch(i.value.shape, n.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), r(i.grads), i;
          };
        }, e.variableGrads = function (e, t) {
          if (l.assert(l.isFunction(e), "The f passed in variableGrads(f) must be a function"), l.assert(null == t || Array.isArray(t) && t.every(function (e) {
            return e instanceof u.Variable;
          }), "The varList passed in variableGrads(f, varList) must be an array of variables"), null == t) {
            t = [];for (var n in o.ENV.engine.registeredVariables) {
              t.push(o.ENV.engine.registeredVariables[n]);
            }
          }var r = t.length;t = t.filter(function (e) {
            return e.trainable;
          }), l.assert(t.length > 0, "variableGrads() expects at least one of the input variables to be trainable, but none of the " + r + " variables is trainable.");var i = o.ENV.engine.gradients(e, t, null, !0),
              a = i.value,
              s = i.grads;l.assert(s.some(function (e) {
            return null != e;
          }), "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), l.assert(0 === a.rank, "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" + a.rank + " tensor");var c = {};return t.forEach(function (e, t) {
            null != s[t] && (c[e.name] = s[t]);
          }), { value: a, grads: c };
        }, e.customGrad = function (e) {
          return o.ENV.engine.customGrad(e);
        }, i([a.doc({ heading: "Training", subheading: "Gradients" })], e, "grad", null), i([a.doc({ heading: "Training", subheading: "Gradients" })], e, "grads", null), i([a.doc({ heading: "Training", subheading: "Gradients" })], e, "valueAndGrad", null), i([a.doc({ heading: "Training", subheading: "Gradients" })], e, "valueAndGrads", null), i([a.doc({ heading: "Training", subheading: "Gradients" })], e, "variableGrads", null), i([a.doc({ heading: "Training", subheading: "Gradients" })], e, "customGrad", null), e;
      }();n.Gradients = c;
    }, { "./doc": 3, "./environment": 5, "./globals": 6, "./tensor": 89, "./util": 95 }], 8: [function (e, t, n) {
      "use strict";
      function r(e) {
        for (var t in e) {
          n.hasOwnProperty(t) || (n[t] = e[t]);
        }
      }Object.defineProperty(n, "__esModule", { value: !0 }), e("./kernels/backend_webgl"), e("./kernels/backend_cpu");var i = e("./browser_util"),
          a = e("./environment");n.environment = a;var o = e("./environment"),
          s = e("./kernels/webgl/gpgpu_util"),
          u = e("./kernels/webgl/webgl_util"),
          l = e("./test_util");n.test_util = l;var c = e("./util");n.util = c;var p = e("./version");n.version_core = p.version;var h = e("./optimizers/adadelta_optimizer");n.AdadeltaOptimizer = h.AdadeltaOptimizer;var d = e("./optimizers/adagrad_optimizer");n.AdagradOptimizer = d.AdagradOptimizer;var f = e("./optimizers/adam_optimizer");n.AdamOptimizer = f.AdamOptimizer;var g = e("./optimizers/adamax_optimizer");n.AdamaxOptimizer = g.AdamaxOptimizer;var m = e("./optimizers/momentum_optimizer");n.MomentumOptimizer = m.MomentumOptimizer;var v = e("./optimizers/optimizer");n.Optimizer = v.Optimizer;var y = e("./optimizers/rmsprop_optimizer");n.RMSPropOptimizer = y.RMSPropOptimizer;var b = e("./optimizers/sgd_optimizer");n.SGDOptimizer = b.SGDOptimizer;var w = e("./tensor");n.Tensor = w.Tensor, n.TensorBuffer = w.TensorBuffer, n.variable = w.variable, n.Variable = w.Variable;var x = e("./types");n.Rank = x.Rank;var A = e("./weights_loader");n.loadWeights = A.loadWeights, r(e("./ops/ops"));var E = e("./ops/loss_ops");n.Reduction = E.Reduction, r(e("./train")), r(e("./globals"));var _ = e("./environment");n.ENV = _.ENV, n.Environment = _.Environment, n.setBackend = o.Environment.setBackend, n.getBackend = o.Environment.getBackend, n.memory = o.Environment.memory;var T = e("./doc");n.doc = T.doc, n.nextFrame = i.BrowserUtil.nextFrame, n.webgl = { webgl_util: u, gpgpu_util: s };
    }, { "./browser_util": 1, "./doc": 3, "./environment": 5, "./globals": 6, "./kernels/backend_cpu": 9, "./kernels/backend_webgl": 11, "./kernels/webgl/gpgpu_util": 25, "./kernels/webgl/webgl_util": 45, "./ops/loss_ops": 59, "./ops/ops": 66, "./optimizers/adadelta_optimizer": 78, "./optimizers/adagrad_optimizer": 79, "./optimizers/adam_optimizer": 80, "./optimizers/adamax_optimizer": 81, "./optimizers/momentum_optimizer": 82, "./optimizers/optimizer": 83, "./optimizers/rmsprop_optimizer": 85, "./optimizers/sgd_optimizer": 86, "./tensor": 89, "./test_util": 91, "./train": 93, "./types": 94, "./util": 95, "./version": 96, "./weights_loader": 97 }], 9: [function (e, t, n) {
      "use strict";
      var r = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          i = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var a = e("seedrandom"),
          o = e("../environment"),
          s = e("../ops/axis_util"),
          u = e("../ops/broadcast_util"),
          l = e("../ops/concat_util"),
          c = e("../ops/ops"),
          p = e("../ops/ops"),
          h = e("../ops/selu_util"),
          d = e("../ops/erf_util"),
          f = e("../tensor"),
          g = e("../types"),
          m = e("../util"),
          v = e("./backend_util"),
          y = function () {
        function e() {
          this.data = new _weakMap2.default(), "undefined" != typeof document && (this.canvas = document.createElement("canvas"));
        }return e.prototype.register = function (e, t, n) {
          if (this.data.has(e)) throw new Error("Data buffer is already registered");this.data.set(e, null);
        }, e.prototype.write = function (e, t) {
          if (null == t) throw new Error("MathBackendCPU.write(): values can not be null");this.throwIfNoData(e), this.data.set(e, t);
        }, e.prototype.fromPixels = function (e, t) {
          if (null == e) throw new Error("MathBackendCPU.writePixels(): pixels can not be null");var n;if (e instanceof ImageData) n = e.data;else if (e instanceof HTMLCanvasElement) n = e.getContext("2d").getImageData(0, 0, e.width, e.height).data;else {
            if (!(e instanceof HTMLImageElement || e instanceof HTMLVideoElement)) throw new Error("pixels is of unknown type: " + e.constructor.name);if (null == this.canvas) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");this.canvas.width = e.width, this.canvas.height = e.height, this.canvas.getContext("2d").drawImage(e, 0, 0, e.width, e.height), n = this.canvas.getContext("2d").getImageData(0, 0, e.width, e.height).data;
          }var r;if (4 === t) r = new Int32Array(n);else {
            var i = e.width * e.height;r = new Int32Array(i * t);for (var a = 0; a < i; a++) {
              for (var o = 0; o < t; ++o) {
                r[a * t + o] = n[4 * a + o];
              }
            }
          }var s = [e.height, e.width, t];return p.tensor3d(r, s, "int32");
        }, e.prototype.read = function (e) {
          return r(this, void 0, void 0, function () {
            return i(this, function (t) {
              return [2, this.readSync(e)];
            });
          });
        }, e.prototype.readSync = function (e) {
          return this.throwIfNoData(e), this.data.get(e);
        }, e.prototype.disposeData = function (e) {
          this.data.has(e) && this.data.delete(e);
        }, e.prototype.time = function (e) {
          return r(this, void 0, void 0, function () {
            var t, n;return i(this, function (r) {
              return t = performance.now(), e(), n = performance.now() - t, [2, { kernelMs: n }];
            });
          });
        }, e.prototype.memory = function () {
          return { unreliable: !0 };
        }, e.prototype.throwIfNoData = function (e) {
          if (!this.data.has(e)) throw new Error("CPU backend: No data found for this tensor. Did you change your backend in the middle of the program? New backends can't use Tensors created with previous backends");
        }, e.prototype.slice = function (e, t, n) {
          for (var r = c.buffer(n, e.dtype), i = 0; i < r.size; ++i) {
            var a = r.indexToLoc(i),
                o = a.map(function (e, n) {
              return e + t[n];
            });r.set.apply(r, [e.get.apply(e, o)].concat(a));
          }return r.toTensor();
        }, e.prototype.reverse = function (e, t) {
          for (var n = c.buffer(e.shape, e.dtype), r = e.buffer(), i = 0; i < n.size; i++) {
            !function (i) {
              var a = n.indexToLoc(i),
                  o = a.slice();t.forEach(function (t) {
                return o[t] = e.shape[t] - 1 - o[t];
              }), n.set.apply(n, [r.get.apply(r, o)].concat(a));
            }(i);
          }return n.toTensor();
        }, e.prototype.concat = function (e, t) {
          var n = l.computeOutShape(e.shape, t.shape, 1),
              r = c.buffer(n, e.dtype);if (1 === e.shape[0] && 1 === t.shape[0]) {
            var i = e.dataSync(),
                a = t.dataSync(),
                o = r.values;return o.set(i, 0), o.set(a, e.size), r.toTensor();
          }for (var s = 0; s < n[0]; ++s) {
            for (u = 0; u < e.shape[1]; ++u) {
              r.set(e.get(s, u), s, u);
            }for (var u = 0; u < t.shape[1]; ++u) {
              r.set(t.get(s, u), s, u + e.shape[1]);
            }
          }return r.toTensor();
        }, e.prototype.neg = function (e) {
          return this.multiply(c.scalar(-1), e);
        }, e.prototype.add = function (e, t) {
          return this.broadcastedBinaryOp(e, t, g.upcastType(e.dtype, t.dtype), function (e, t) {
            return e + t;
          });
        }, e.prototype.subtract = function (e, t) {
          return this.broadcastedBinaryOp(e, t, g.upcastType(e.dtype, t.dtype), function (e, t) {
            return e - t;
          });
        }, e.prototype.pow = function (e, t) {
          return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
            return Math.pow(e, t);
          });
        }, e.prototype.matMul = function (e, t, n, r) {
          for (var i = n ? e.shape[0] : e.shape[1], a = n ? e.shape[1] : e.shape[0], o = r ? t.shape[0] : t.shape[1], s = e.dataSync(), u = t.dataSync(), l = n ? [1, e.strides[0]] : [e.strides[0], 1], p = l[0], h = l[1], d = r ? [t.strides[0], 1] : [1, t.strides[0]], f = d[0], g = d[1], m = a * p, v = o * f, y = new Float32Array(a * o), b = 0, w = 0; w < m; w += p) {
            for (var x = 0; x < v; x += f) {
              for (var A = w, E = x, _ = 0, T = 0; T < i; ++T) {
                _ += s[A] * u[E], A += h, E += g;
              }y[b++] = _;
            }
          }return c.tensor2d(y, [a, o]);
        }, e.prototype.multiply = function (e, t) {
          return this.broadcastedBinaryOp(e, t, g.upcastType(e.dtype, t.dtype), function (e, t) {
            return e * t;
          });
        }, e.prototype.divide = function (e, t) {
          var n, r;return "int32" === e.dtype && "int32" === t.dtype ? (r = "int32", n = function n(e, t) {
            return Math.floor(e / t);
          }) : (r = "float32", n = function n(e, t) {
            return e / t;
          }), this.broadcastedBinaryOp(e, t, r, n);
        }, e.prototype.sum = function (e, t) {
          s.assertAxesAreInnerMostDims("sum", t, e.rank);for (var n = s.computeOutAndReduceShapes(e.shape, t), r = n[0], i = n[1], a = g.upcastType(e.dtype, "int32"), o = c.zeros(r, a), u = m.sizeFromShape(i), l = o.dataSync(), p = e.dataSync(), h = 0; h < l.length; ++h) {
            for (var d = h * u, f = 0, v = 0; v < u; ++v) {
              f += p[d + v];
            }l[h] = f;
          }return o;
        }, e.prototype.argMin = function (e, t) {
          var n = [t];s.assertAxesAreInnerMostDims("argMin", n, e.rank);for (var r = s.computeOutAndReduceShapes(e.shape, n), i = r[0], a = r[1], o = c.zeros(i, "int32"), u = m.sizeFromShape(a), l = o.dataSync(), p = e.dataSync(), h = 0; h < l.length; ++h) {
            for (var d = h * u, f = p[d], g = 0, v = 0; v < u; ++v) {
              var y = p[d + v];y < f && (f = y, g = v);
            }l[h] = g;
          }return o;
        }, e.prototype.argMax = function (e, t) {
          var n = [t];s.assertAxesAreInnerMostDims("argMax", n, e.rank);for (var r = s.computeOutAndReduceShapes(e.shape, n), i = r[0], a = r[1], o = c.zeros(i, "int32"), u = m.sizeFromShape(a), l = o.dataSync(), p = e.dataSync(), h = 0; h < l.length; ++h) {
            for (var d = h * u, f = p[d], g = 0, v = 0; v < u; ++v) {
              var y = p[d + v];y > f && (f = y, g = v);
            }l[h] = g;
          }return o;
        }, e.prototype.equal = function (e, t) {
          return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
            return e === t ? 1 : 0;
          });
        }, e.prototype.notEqual = function (e, t) {
          return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
            return e !== t ? 1 : 0;
          });
        }, e.prototype.less = function (e, t) {
          return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
            return e < t ? 1 : 0;
          });
        }, e.prototype.lessEqual = function (e, t) {
          return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
            return e <= t ? 1 : 0;
          });
        }, e.prototype.greater = function (e, t) {
          return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
            return e > t ? 1 : 0;
          });
        }, e.prototype.greaterEqual = function (e, t) {
          return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
            return e >= t ? 1 : 0;
          });
        }, e.prototype.logicalNot = function (e) {
          for (var t = e.dataSync(), n = new Int32Array(t.length), r = 0; r < t.length; ++r) {
            n[r] = t[r] ? 0 : 1;
          }return f.Tensor.make(e.shape, { values: n }, "bool");
        }, e.prototype.logicalAnd = function (e, t) {
          return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
            return e && t;
          });
        }, e.prototype.logicalOr = function (e, t) {
          return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
            return e || t;
          });
        }, e.prototype.where = function (e, t, n, r) {
          for (var i = e.dataSync(), a = t.dataSync(), o = n.dataSync(), s = c.zeros(t.shape, r), u = s.dataSync(), l = 0, p = 0 === e.rank || e.rank > 1 || 1 === t.rank ? 1 : t.shape[1], h = 0; h < i.length; h++) {
            for (var d = 0; d < p; d++) {
              1 === i[h] ? u[l++] = a[h] : u[l++] = o[h];
            }
          }return s;
        }, e.prototype.topKValues = function (e, t) {
          return this.topK(e, t).values;
        }, e.prototype.topKIndices = function (e, t) {
          return this.topK(e, t).indices;
        }, e.prototype.topK = function (e, t) {
          for (var n = e.dataSync(), r = [], i = 0; i < n.length; i++) {
            r.push({ value: n[i], index: i });
          }r.sort(function (e, t) {
            return t.value - e.value;
          });for (var a = m.getTypedArrayFromDType(e.dtype, t), o = new Int32Array(t), i = 0; i < t; i++) {
            a[i] = r[i].value, o[i] = r[i].index;
          }return { values: c.tensor1d(a, e.dtype), indices: c.tensor1d(o, "int32") };
        }, e.prototype.min = function (e, t) {
          s.assertAxesAreInnerMostDims("min", t, e.rank);for (var n = s.computeOutAndReduceShapes(e.shape, t), r = n[0], i = n[1], a = c.zeros(r, e.dtype), o = m.sizeFromShape(i), u = a.dataSync(), l = e.dataSync(), p = 0; p < u.length; ++p) {
            for (var h = p * o, d = l[0], f = 0; f < o; ++f) {
              var g = l[h + f];g < d && (d = g);
            }u[p] = d;
          }return a;
        }, e.prototype.minimum = function (e, t) {
          return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
            return Math.min(e, t);
          });
        }, e.prototype.mod = function (e, t) {
          return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
            var n = e % t;return e < 0 && t < 0 || e >= 0 && t >= 0 ? n : (n + t) % t;
          });
        }, e.prototype.max = function (e, t) {
          s.assertAxesAreInnerMostDims("max", t, e.rank);for (var n = s.computeOutAndReduceShapes(e.shape, t), r = n[0], i = n[1], a = c.zeros(r, e.dtype), o = m.sizeFromShape(i), u = a.dataSync(), l = e.dataSync(), p = 0; p < u.length; ++p) {
            for (var h = p * o, d = l[h], f = 0; f < o; ++f) {
              var g = l[h + f];g > d && (d = g);
            }u[p] = d;
          }return a;
        }, e.prototype.maximum = function (e, t) {
          return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
            return Math.max(e, t);
          });
        }, e.prototype.squaredDifference = function (e, t) {
          return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
            var n = e - t;return n * n;
          });
        }, e.prototype.ceil = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            n[r] = Math.ceil(t[r]);
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.floor = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            n[r] = Math.floor(t[r]);
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.sign = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            t[r] < 0 ? n[r] = -1 : t[r] > 0 ? n[r] = 1 : n[r] = 0;
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.round = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            var i = Math.floor(t[r]);t[r] - i < .5 ? n[r] = Math.floor(t[r]) : t[r] - i > .5 ? n[r] = Math.ceil(t[r]) : n[r] = i % 2 == 0 ? i : i + 1;
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.exp = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            n[r] = Math.exp(t[r]);
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.expm1 = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            n[r] = (0, _expm2.default)(t[r]);
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.log = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            var i = t[r];n[r] = Math.log(i);
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.log1p = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            var i = t[r];n[r] = (0, _log1p2.default)(i);
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.sqrt = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            var i = t[r];n[r] = Math.sqrt(i);
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.rsqrt = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            var i = t[r];n[r] = 1 / Math.sqrt(i);
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.square = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            var i = t[r];n[r] = i * i;
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.reciprocal = function (e) {
          for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
            n[r] = 1 / t[r];
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.relu = function (e) {
          for (var t = c.zeros(e.shape, e.dtype), n = t.dataSync(), r = e.dataSync(), i = 0; i < r.length; ++i) {
            n[i] = Math.max(0, r[i]);
          }return t;
        }, e.prototype.elu = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            var i = n[r];t[r] = i >= 0 ? i : Math.exp(i) - 1;
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.eluDer = function (e, t) {
          for (var n = new Float32Array(t.size), r = t.dataSync(), i = e.dataSync(), a = 0; a < r.length; ++a) {
            var o = r[a];n[a] = o >= 1 ? i[a] : i[a] * (o + 1);
          }return f.Tensor.make(t.shape, { values: n });
        }, e.prototype.selu = function (e) {
          for (var t = h.SELU_SCALEALPHA, n = h.SELU_SCALE, r = new Float32Array(e.size), i = e.dataSync(), a = 0; a < i.length; ++a) {
            var o = i[a];r[a] = o >= 0 ? n * o : t * (Math.exp(o) - 1);
          }return f.Tensor.make(e.shape, { values: r });
        }, e.prototype.clip = function (e, t, n) {
          for (var r = new Float32Array(e.size), i = e.dataSync(), a = 0; a < i.length; ++a) {
            r[a] = Math.min(n, Math.max(t, i[a]));
          }return f.Tensor.make(e.shape, { values: r });
        }, e.prototype.abs = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = Math.abs(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.int = function (e) {
          for (var t = new Int32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = n[r];
          }return f.Tensor.make(e.shape, { values: t }, "int32");
        }, e.prototype.sigmoid = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = 1 / (1 + Math.exp(-n[r]));
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.softplus = function (e) {
          for (var t = Math.log(1.1920928955078125e-7) + 2, n = new Float32Array(e.size), r = e.dataSync(), i = 0; i < r.length; ++i) {
            var a = r[i] > -t,
                o = r[i] < t,
                s = Math.exp(r[i]),
                u = void 0;u = o ? s : a ? r[i] : Math.log(1 + s), n[i] = u;
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.sin = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = Math.sin(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.cos = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = Math.cos(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.tan = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = Math.tan(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.asin = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = Math.asin(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.acos = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = Math.acos(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.atan = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = Math.atan(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.atan2 = function (e, t) {
          return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
            return Math.atan2(e, t);
          });
        }, e.prototype.sinh = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = (0, _sinh2.default)(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.cosh = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = (0, _cosh2.default)(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.tanh = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = m.tanh(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.asinh = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = (0, _asinh2.default)(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.acosh = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = (0, _acosh2.default)(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.atanh = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
            t[r] = (0, _atanh2.default)(n[r]);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.erf = function (e) {
          for (var t = new Float32Array(e.size), n = e.dataSync(), r = d.ERF_P, i = d.ERF_A1, a = d.ERF_A2, o = d.ERF_A3, s = d.ERF_A4, u = d.ERF_A5, l = 0; l < n.length; ++l) {
            var c = n[l],
                p = 1 / (1 + r * c);t[l] = 1 - ((((u * p + s) * p + o) * p + a) * p + i) * p * Math.exp(-c * c);
          }return f.Tensor.make(e.shape, { values: t });
        }, e.prototype.step = function (e, t) {
          void 0 === t && (t = 0);for (var n = new Float32Array(e.size), r = e.dataSync(), i = 0; i < r.length; ++i) {
            var a = r[i];isNaN(a) ? n[i] = NaN : n[i] = a > 0 ? 1 : t;
          }return f.Tensor.make(e.shape, { values: n });
        }, e.prototype.conv2d = function (e, t, n) {
          for (var r = n.filterHeight, i = n.filterWidth, a = n.dilationHeight, o = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, l = c.buffer(n.outShape, e.dtype), p = 0; p < n.batchSize; ++p) {
            for (var h = 0; h < n.outChannels; ++h) {
              for (var d = 0; d < n.outHeight; ++d) {
                for (var f = d * n.strideHeight - s, g = 0; g < n.outWidth; ++g) {
                  for (var m = g * n.strideWidth - u, v = 0, y = 0; y < r; y++) {
                    var b = f + y * a;if (!(b < 0 || b >= n.inHeight)) for (var w = 0; w < i; w++) {
                      var x = m + w * o;if (!(x < 0 || x >= n.inWidth)) for (var A = 0; A < n.inChannels; ++A) {
                        v += e.get(p, b, x, A) * t.get(y, w, A, h);
                      }
                    }
                  }l.set(v, p, d, g, h);
                }
              }
            }
          }return l.toTensor();
        }, e.prototype.conv2dDerInput = function (e, t, n) {
          for (var r = n.filterHeight, i = n.filterWidth, a = r - 1 - n.padInfo.top, o = i - 1 - n.padInfo.left, s = n.strideHeight, u = n.strideWidth, l = c.buffer(n.inShape, "float32"), p = 0; p < n.batchSize; ++p) {
            for (var h = 0; h < n.inChannels; ++h) {
              for (var d = 0; d < n.inHeight; ++d) {
                for (var f = d - o, g = Math.max(0, Math.ceil(f / s)), m = Math.min(n.outHeight, (r + f) / s), v = 0; v < n.inWidth; ++v) {
                  for (var y = v - a, b = Math.max(0, Math.ceil(y / u)), w = Math.min(n.outWidth, (i + y) / u), x = 0, A = g; A < m; ++A) {
                    for (var E = A * s - f, _ = b; _ < w; ++_) {
                      for (var T = _ * u - y, S = 0; S < n.outChannels; ++S) {
                        x += e.get(p, A, _, S) * t.get(r - 1 - E, i - 1 - T, h, S);
                      }
                    }
                  }l.set(x, p, d, v, h);
                }
              }
            }
          }return l.toTensor();
        }, e.prototype.conv2dDerFilter = function (e, t, n) {
          for (var r = n.strideHeight, i = n.strideWidth, a = n.filterHeight, o = n.filterWidth, s = c.buffer(n.filterShape, "float32"), u = n.padInfo.left, l = n.padInfo.top, p = 0; p < a; ++p) {
            for (var h = Math.max(0, Math.ceil((l - p) / r)), d = Math.min(n.outHeight, (n.inHeight + l - p) / r), f = 0; f < o; ++f) {
              for (var g = Math.max(0, Math.ceil((u - f) / i)), m = Math.min(n.outWidth, (n.inWidth + u - f) / i), v = 0; v < n.inChannels; ++v) {
                for (var y = 0; y < n.outChannels; ++y) {
                  for (var b = 0, w = 0; w < n.batchSize; ++w) {
                    for (var x = h; x < d; ++x) {
                      for (var A = p + x * r - l, E = g; E < m; ++E) {
                        var _ = f + E * i - u;b += e.get(w, A, _, v) * t.get(w, x, E, y);
                      }
                    }
                  }s.set(b, p, f, v, y);
                }
              }
            }
          }return s.toTensor();
        }, e.prototype.depthwiseConv2D = function (e, t, n) {
          for (var r = n.filterHeight, i = n.filterWidth, a = n.dilationHeight, o = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, l = n.outChannels / n.inChannels, p = c.buffer(n.outShape, e.dtype), h = 0; h < n.batchSize; ++h) {
            for (var d = 0; d < n.inChannels; ++d) {
              for (var f = 0; f < n.outHeight; ++f) {
                for (var g = f * n.strideHeight - s, m = 0; m < n.outWidth; ++m) {
                  for (var v = m * n.strideWidth - u, y = 0; y < l; ++y) {
                    for (var b = 0, w = 0; w < r; ++w) {
                      var x = g + w * a;if (!(x < 0 || x >= n.inHeight)) for (var A = 0; A < i; ++A) {
                        var E = v + A * o;E < 0 || E >= n.inWidth || (b += e.get(h, x, E, d) * t.get(w, A, d, y));
                      }
                    }p.set(b, h, f, m, d * l + y);
                  }
                }
              }
            }
          }return p.toTensor();
        }, e.prototype.tile = function (e, t) {
          for (var n = new Array(e.rank), r = 0; r < n.length; r++) {
            n[r] = e.shape[r] * t[r];
          }for (var i = c.buffer(n, e.dtype), a = e.buffer(), r = 0; r < i.values.length; ++r) {
            for (var o = i.indexToLoc(r), s = new Array(e.rank), u = 0; u < s.length; u++) {
              s[u] = o[u] % e.shape[u];
            }var l = a.locToIndex(s);i.values[r] = a.values[l];
          }return i.toTensor();
        }, e.prototype.pad = function (e, t, n) {
          var r = t.map(function (t, n) {
            return t[0] + e.shape[n] + t[1];
          }),
              i = t.map(function (e) {
            return e[0];
          }),
              a = e.buffer(),
              o = c.buffer(r, e.dtype);0 !== n && o.values.fill(n);for (var s = 0; s < e.size; s++) {
            var u = a.indexToLoc(s),
                l = u.map(function (e, t) {
              return e + i[t];
            });o.set.apply(o, [e.get.apply(e, u)].concat(l));
          }return o.toTensor();
        }, e.prototype.transpose = function (e, t) {
          for (var n = new Array(e.rank), r = 0; r < n.length; r++) {
            n[r] = e.shape[t[r]];
          }for (var i = e.dataSync(), a = p.buffer(n, e.dtype), o = e.buffer(), r = 0; r < e.size; ++r) {
            for (var s = o.indexToLoc(r), u = new Array(s.length), l = 0; l < u.length; l++) {
              u[l] = s[t[l]];
            }var c = a.locToIndex(u);a.values[c] = i[r];
          }return a.toTensor();
        }, e.prototype.gather = function (e, t, n) {
          var r = e.shape.slice(),
              i = t.dataSync();r[n] = i.length;for (var a = p.buffer(r, e.dtype), o = e.buffer(), s = 0; s < a.size; ++s) {
            var u = a.indexToLoc(s),
                l = u.slice();l[n] = i[u[n]];var c = o.locToIndex(l);a.values[s] = o.values[c];
          }return a.toTensor();
        }, e.prototype.pool = function (e, t, n) {
          for (var r = t.strideHeight, i = t.strideWidth, a = t.filterHeight, o = t.filterWidth, s = c.buffer(t.outShape, "float32"), u = t.padInfo.top, l = t.padInfo.left, p = 0; p < t.batchSize; ++p) {
            for (var h = 0; h < t.inChannels; ++h) {
              for (var d = 0; d < t.outHeight; ++d) {
                for (var f = d * r - u, g = Math.max(0, f), m = Math.min(t.inHeight, a + f), v = 0; v < t.outWidth; ++v) {
                  for (var y = v * i - l, b = Math.max(0, y), w = Math.min(t.inWidth, o + y), x = "max" === n ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, A = 0, E = 0, _ = g; _ < m; ++_) {
                    for (var T = b; T < w; ++T) {
                      var S = e.get(p, _, T, h);"max" === n && S > x ? x = S : "avg" === n && (A += S, E++);
                    }if (isNaN(x)) break;
                  }s.set("avg" === n ? A / E : x, p, d, v, h);
                }
              }
            }
          }return s.toTensor();
        }, e.prototype.maxPool = function (e, t) {
          return this.pool(e, t, "max");
        }, e.prototype.maxPoolPositions = function (e, t) {
          for (var n = c.buffer(t.outShape, "int32"), r = t.strideHeight, i = t.strideWidth, a = t.filterHeight, o = t.filterWidth, s = t.padInfo.top, u = t.padInfo.left, l = 0; l < t.batchSize; ++l) {
            for (var p = 0; p < t.inChannels; ++p) {
              for (var h = 0; h < t.outHeight; ++h) {
                for (var d = h * r - s, f = Math.max(0, d), g = Math.min(t.inHeight, a + d), m = 0; m < t.outWidth; ++m) {
                  for (var v = m * i - u, y = Math.max(0, v), b = Math.min(t.inWidth, o + v), w = Number.NEGATIVE_INFINITY, x = -1, A = f; A < g; ++A) {
                    for (var E = A - d, _ = y; _ < b; ++_) {
                      var T = _ - v,
                          S = e.get(l, A, _, p);S > w && (w = S, x = E * o + T);
                    }
                  }n.set(x, l, h, m, p);
                }
              }
            }
          }return n.toTensor();
        }, e.prototype.maxPoolBackprop = function (e, t, n, r) {
          for (var i = this.maxPoolPositions(t, r), a = r.strideHeight, o = r.strideWidth, s = r.filterHeight, u = r.filterWidth, l = u - 1 - r.padInfo.left, p = s - 1 - r.padInfo.top, h = c.buffer(t.shape, "float32"), d = 0; d < r.batchSize; ++d) {
            for (var f = 0; f < r.inChannels; ++f) {
              for (var g = 0; g < r.inHeight; ++g) {
                for (var m = 0; m < r.inWidth; ++m) {
                  for (var v = g - p, y = m - l, b = 0, w = 0; w < s; ++w) {
                    var x = (v + w) / a;if (!(x < 0 || x >= r.outHeight || Math.floor(x) !== x)) for (var A = 0; A < u; ++A) {
                      var E = (y + A) / o;if (!(E < 0 || E >= r.outWidth || Math.floor(E) !== E)) {
                        var _ = s * u - 1 - i.get(d, x, E, f) === w * u + A ? 1 : 0;0 !== _ && (b += e.get(d, x, E, f) * _);
                      }
                    }
                  }h.set(b, d, g, m, f);
                }
              }
            }
          }return h.toTensor();
        }, e.prototype.avgPoolBackprop = function (e, t, n) {
          for (var r = n.strideHeight, i = n.strideWidth, a = n.filterHeight, o = n.filterWidth, s = o - 1 - n.padInfo.left, u = a - 1 - n.padInfo.top, l = c.buffer(t.shape, "float32"), p = 1 / (a * o), h = 0; h < n.batchSize; ++h) {
            for (var d = 0; d < n.inChannels; ++d) {
              for (var f = 0; f < n.inHeight; ++f) {
                for (var g = 0; g < n.inWidth; ++g) {
                  for (var m = f - u, v = g - s, y = 0, b = 0; b < a; ++b) {
                    var w = (m + b) / r;if (!(w < 0 || w >= n.outHeight || Math.floor(w) !== w)) for (var x = 0; x < o; ++x) {
                      var A = (v + x) / i;A < 0 || A >= n.outWidth || Math.floor(A) !== A || (y += e.get(h, w, A, d));
                    }
                  }l.set(y * p, h, f, g, d);
                }
              }
            }
          }return l.toTensor();
        }, e.prototype.cast = function (e, t) {
          return v.castTensor(e, t, this);
        }, e.prototype.reshape = function (e, t) {
          return v.reshapeTensor(e, t);
        }, e.prototype.avgPool = function (e, t) {
          return this.pool(e, t, "avg").toFloat();
        }, e.prototype.resizeBilinear = function (e, t, n, r) {
          for (var i = e.shape, a = i[0], o = i[1], s = i[2], u = i[3], l = c.buffer([a, t, n, u], e.dtype), p = r ? [o - 1, s - 1] : [o, s], h = r ? [t - 1, n - 1] : [t, n], d = 0; d < a; d++) {
            for (var f = 0; f < t; f++) {
              for (var g = 0; g < n; g++) {
                for (var m = 0; m < u; m++) {
                  var v = p[0] * f / h[0],
                      y = p[1] * g / h[1],
                      b = Math.floor(v),
                      w = Math.min(o - 1, Math.ceil(v)),
                      x = Math.floor(y),
                      A = Math.min(s - 1, Math.ceil(y)),
                      E = e.get(d, b, x, m),
                      _ = e.get(d, w, x, m),
                      T = y - x,
                      S = E + (e.get(d, b, A, m) - E) * T,
                      C = S + (_ + (e.get(d, w, A, m) - _) * T - S) * (v - b);l.set(C, d, f, g, m);
                }
              }
            }
          }return l.toTensor();
        }, e.prototype.resizeNearestNeighbor = function (e, t, n, r) {
          for (var i = e.shape, a = i[0], o = i[1], s = i[2], u = i[3], l = c.buffer([a, t, n, u], e.dtype), p = r ? [o - 1, s - 1] : [o, s], h = r ? [t - 1, n - 1] : [t, n], d = 0; d < a; d++) {
            for (var f = 0; f < t; f++) {
              for (var g = 0; g < n; g++) {
                for (var m = 0; m < u; m++) {
                  var v = p[0] * f / h[0],
                      y = p[1] * g / h[1],
                      b = Math.min(o - 1, Math.round(v)),
                      w = Math.min(s - 1, Math.round(y)),
                      x = e.get(d, b, w, m);l.set(x, d, f, g, m);
                }
              }
            }
          }return l.toTensor();
        }, e.prototype.batchNormalization = function (e, t, n, r, i, a) {
          for (var o = e.dataSync(), s = t.dataSync(), u = n.dataSync(), l = i ? i.dataSync() : new Float32Array([1]), c = a ? a.dataSync() : new Float32Array([0]), h = new Float32Array(o.length), d = 0; d < o.length; d++) {
            h[d] = c[d % c.length] + (o[d] - s[d % s.length]) * l[d % l.length] / Math.sqrt(u[d % u.length] + r);
          }return p.tensor4d(h, e.shape);
        }, e.prototype.localResponseNormalization4D = function (e, t, n, r, i) {
          for (var a = c.buffer(e.shape, "float32"), o = t, s = a.shape[3] - 1, u = 0; u < a.shape[0]; u++) {
            for (var l = 0; l <= a.shape[1]; l++) {
              for (var p = 0; p < a.shape[2]; p++) {
                for (var h = 0; h < a.shape[3]; h++) {
                  var d = function (t, n, r, i) {
                    for (var a = 0, u = Math.max(0, i - o); u <= Math.min(i + o, s); u++) {
                      var l = e.get(t, n, r, u);a += l * l;
                    }return a;
                  }(u, l, p, h),
                      f = e.get(u, l, p, h) * Math.pow(n + r * d, -i);a.set(f, u, l, p, h);
                }
              }
            }
          }return a.toTensor();
        }, e.prototype.multinomial = function (e, t, n, r) {
          for (var i = t ? e : c.softmax(e), o = i.shape[0], s = i.shape[1], u = c.zeros([o, n], "int32"), l = u.dataSync(), p = i.dataSync(), h = 0; h < o; ++h) {
            var d = h * s,
                f = new Float32Array(s - 1);f[0] = p[d];for (var g = 1; g < f.length; ++g) {
              f[g] = f[g - 1] + p[d + g];
            }for (var m = a.alea(r.toString()), v = h * n, y = 0; y < n; ++y) {
              var b = m();l[v + y] = f.length;for (var w = 0; w < f.length; w++) {
                if (b < f[w]) {
                  l[v + y] = w;break;
                }
              }
            }
          }return u;
        }, e.prototype.oneHot = function (e, t, n, r) {
          var i = new Float32Array(e.size * t);i.fill(r);for (var a = 0; a < e.size; ++a) {
            i[a * t + e.get(a)] = n;
          }return c.tensor2d(i, [e.size, t]);
        }, e.prototype.broadcastedBinaryOp = function (e, t, n, r) {
          for (var i = u.assertAndGetBroadcastShape(e.shape, t.shape), a = c.buffer(i, n), o = e.dataSync(), s = t.dataSync(), l = u.getBroadcastDims(e.shape, i), p = u.getBroadcastDims(t.shape, i), h = e.buffer(), d = t.buffer(), f = 0; f < a.values.length; ++f) {
            !function (n) {
              var i = a.indexToLoc(n),
                  u = i.slice(-e.rank);l.forEach(function (e) {
                return u[e] = 0;
              });var c = h.locToIndex(u),
                  f = i.slice(-t.rank);p.forEach(function (e) {
                return f[e] = 0;
              });var g = d.locToIndex(f);a.values[n] = r(o[c], s[g]);
            }(f);
          }return a.toTensor();
        }, e.prototype.dispose = function () {}, e;
      }();n.MathBackendCPU = y, o.ENV.registerBackend("cpu", function () {
        return new y();
      }, 1);
    }, { "../environment": 5, "../ops/axis_util": 47, "../ops/broadcast_util": 50, "../ops/concat_util": 53, "../ops/erf_util": 56, "../ops/ops": 66, "../ops/selu_util": 72, "../tensor": 89, "../types": 94, "../util": 95, "./backend_util": 10, seedrandom: 135 }], 10: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e(".."),
          i = e("../ops/array_ops");n.castTensor = function (e, t, n) {
        if (!r.util.hasEncodingLoss(e.dtype, t)) return r.Tensor.make(e.shape, { dataId: e.dataId }, t);if ("int32" === t) return n.int(e);if ("bool" === t) return n.notEqual(e, i.ArrayOps.scalar(0, e.dtype));throw new Error("Error in Cast: unknown dtype argument (" + t + ")");
      }, n.reshapeTensor = function (e, t) {
        return r.Tensor.make(t, { dataId: e.dataId }, e.dtype);
      };
    }, { "..": 8, "../ops/array_ops": 46 }], 11: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        if ("float32" === t) return e;if ("int32" === t || "bool" === t) {
          for (var n = "int32" === t ? new Int32Array(e.length) : new Uint8Array(e.length), r = 0; r < n.length; ++r) {
            n[r] = Math.round(e[r]);
          }return n;
        }throw new Error("Unknown dtype " + t);
      }function i(e, t) {
        return e instanceof Float32Array ? e : new Float32Array(e);
      }var a = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          o = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var s = e("../environment"),
          u = e("../ops/axis_util"),
          l = e("../ops/ops"),
          c = e("../ops/reduce_util"),
          p = e("../tensor"),
          h = e("../types"),
          d = e("../util"),
          f = e("./backend_util"),
          g = e("./webgl/argminmax_gpu"),
          m = e("./webgl/avg_pool_backprop_gpu"),
          v = e("./webgl/batchnorm_gpu"),
          y = e("./webgl/binaryop_gpu"),
          b = e("./webgl/binaryop_gpu"),
          w = e("./webgl/clip_gpu"),
          x = e("./webgl/concat_gpu"),
          A = e("./webgl/conv_backprop_gpu"),
          E = e("./webgl/conv_gpu"),
          _ = e("./webgl/conv_gpu_depthwise"),
          T = e("./webgl/from_pixels_gpu"),
          S = e("./webgl/gather_gpu"),
          C = e("./webgl/gpgpu_context"),
          O = e("./webgl/gpgpu_math"),
          k = e("./webgl/logical_gpu"),
          R = e("./webgl/lrn_gpu"),
          N = e("./webgl/max_pool_backprop_gpu"),
          I = e("./webgl/mulmat_gpu"),
          z = e("./webgl/multinomial_gpu"),
          M = e("./webgl/onehot_gpu"),
          D = e("./webgl/pad_gpu"),
          P = e("./webgl/pool_gpu"),
          L = e("./webgl/reduce_gpu"),
          F = e("./webgl/resize_bilinear_gpu"),
          V = e("./webgl/resize_nearest_neighbor_gpu"),
          B = e("./webgl/reverse_gpu"),
          U = e("./webgl/slice_gpu"),
          j = e("./webgl/tex_util"),
          G = e("./webgl/texture_manager"),
          W = e("./webgl/tile_gpu"),
          q = e("./webgl/transpose_gpu"),
          H = e("./webgl/unaryop_gpu"),
          K = e("./webgl/unaryop_gpu"),
          X = e("./webgl/webgl_util"),
          Y = function () {
        function e(e, t) {
          if (void 0 === t && (t = !0), this.gpgpu = e, this.delayedStorage = t, this.texData = new _weakMap2.default(), this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.binaryCache = {}, this.disposed = !1, s.ENV.get("WEBGL_VERSION") < 1) throw new Error("WebGL is not supported on this device");null == e ? (this.gpgpu = new C.GPGPUContext(), this.gpgpuCreatedLocally = !0) : this.gpgpuCreatedLocally = !1, "undefined" != typeof document && (this.canvas = document.createElement("canvas")), this.textureManager = new G.TextureManager(this.gpgpu);
        }return e.prototype.register = function (e, t, n) {
          if (this.texData.has(e)) throw new Error("Data buffer is already registered");this.texData.set(e, { shape: t, dtype: n, values: null, texture: null, texShape: null, texType: j.TextureType.FLOAT });
        }, e.prototype.fromPixels = function (e, t) {
          if (null == e) throw new Error("MathBackendWebGL.writePixels(): pixels can not be null");var n = [e.height, e.width],
              r = [e.height, e.width, t];if (e instanceof HTMLVideoElement) {
            if (null == this.canvas) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");this.canvas.width = e.width, this.canvas.height = e.height, this.canvas.getContext("2d").drawImage(e, 0, 0, e.width, e.height), e = this.canvas;
          }var i = p.Tensor.make(n, {}, "int32");this.texData.get(i.dataId).texType = j.TextureType.UNSIGNED_BYTE, this.gpgpu.uploadPixelDataToTexture(this.getTexture(i.dataId), e);var a = new T.FromPixelsProgram(r),
              o = this.compileAndRun(a, [i]);return i.dispose(), o;
        }, e.prototype.write = function (e, t) {
          if (null == t) throw new Error("MathBackendWebGL.write(): values can not be null");this.throwIfNoData(e);var n = this.texData.get(e),
              r = n.texture,
              i = n.texShape,
              a = n.texType;null != r && (this.textureManager.releaseTexture(r, i, a), n.texture = null, n.texShape = null), n.values = t, this.delayedStorage || this.uploadToGPU(e);
        }, e.prototype.readSync = function (e) {
          this.throwIfNoData(e);var t = this.texData.get(e),
              n = t.texture,
              r = t.values,
              i = t.texShape;if (null != r) return this.cacheOnCPU(e), r;var a,
              o = null != this.activeTimers;o && (a = performance.now());var s = this.gpgpu.downloadMatrixFromTexture(n, i[0], i[1]);return o && (this.downloadWaitMs += performance.now() - a), this.cacheOnCPU(e, s), t.values;
        }, e.prototype.read = function (e) {
          return a(this, void 0, void 0, function () {
            var t, n, r, i, a;return o(this, function (o) {
              switch (o.label) {case 0:
                  return this.throwIfNoData(e), t = this.texData.get(e), n = t.texture, r = t.values, i = t.texShape, null != r ? (this.cacheOnCPU(e), [2, r]) : s.ENV.get("WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED") ? [4, this.gpgpu.downloadMatrixFromTextureAsync(n, i[0], i[1])] : [3, 2];case 1:
                  return a = o.sent(), this.cacheOnCPU(e, a), [2, t.values];case 2:
                  return 0 === s.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? [2, this.readSync(e)] : [4, this.gpgpu.runQuery(function () {})];case 3:
                  return o.sent(), [2, this.readSync(e)];}
            });
          });
        }, e.prototype.time = function (e) {
          return a(this, void 0, void 0, function () {
            var t, n, r, i, a, s;return o(this, function (o) {
              switch (o.label) {case 0:
                  return t = this.activeTimers, n = [], r = !1, null == this.programTimersStack ? (this.programTimersStack = n, r = !0) : this.activeTimers.push(n), this.activeTimers = n, e(), i = d.flatten(this.activeTimers), this.activeTimers = t, r && (this.programTimersStack = null), [4, _promise2.default.all(i).then(function (e) {
                    var t = 0;return e.forEach(function (e) {
                      return t += e;
                    }), t;
                  })];case 1:
                  return a = o.sent(), s = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: a, wallMs: null }, this.uploadWaitMs = 0, this.downloadWaitMs = 0, [2, s];}
            });
          });
        }, e.prototype.memory = function () {
          return { unreliable: !1 };
        }, e.prototype.startTimer = function () {
          return s.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? this.gpgpu.beginQuery() : { startMs: performance.now(), endMs: null };
        }, e.prototype.endTimer = function (e) {
          return s.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = performance.now(), e);
        }, e.prototype.getQueryTime = function (e) {
          return a(this, void 0, void 0, function () {
            var t;return o(this, function (n) {
              return s.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? [2, this.gpgpu.pollQueryTime(e)] : (t = e, [2, t.endMs - t.startMs]);
            });
          });
        }, e.prototype.disposeData = function (e) {
          if (this.texData.has(e)) {
            var t = this.texData.get(e),
                n = t.texture,
                r = t.texShape,
                i = t.texType;null != n && this.textureManager.releaseTexture(n, r, i), this.texData.delete(e);
          }
        }, e.prototype.getTexture = function (e) {
          return this.uploadToGPU(e), this.texData.get(e).texture;
        }, e.prototype.getTextureData = function (e) {
          return this.uploadToGPU(e), this.texData.get(e);
        }, e.prototype.getGPGPUContext = function () {
          return this.gpgpu;
        }, e.prototype.slice = function (e, t, n) {
          var r = new U.SliceProgram(n),
              i = r.getCustomSetupFunc(t);return this.compileAndRun(r, [e], null, i);
        }, e.prototype.reverse = function (e, t) {
          var n = new B.ReverseProgram(e.shape, t);return this.compileAndRun(n, [e]);
        }, e.prototype.concat = function (e, t) {
          var n = new x.ConcatProgram(e.shape, t.shape);return this.compileAndRun(n, [e, t]);
        }, e.prototype.neg = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.NEG);return this.compileAndRun(t, [e]);
        }, e.prototype.matMul = function (e, t, n, r) {
          var i = new I.MatMulProgram(e.shape, t.shape, n, r);return this.compileAndRun(i, [e, t]);
        }, e.prototype.multiply = function (e, t) {
          var n = new b.BinaryOpProgram(y.MUL, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, h.upcastType(e.dtype, t.dtype));return this.compileAndRun(n, [e, t], r);
        }, e.prototype.batchNormalization = function (e, t, n, r, i, a) {
          var o = [e, t, n],
              s = null;null != a && (s = a.shape, o.push(a));var u = null;null != i && (u = i.shape, o.push(i));var l = new v.BatchNormProgram(e.shape, t.shape, n.shape, s, u, r);return this.compileAndRun(l, o);
        }, e.prototype.localResponseNormalization4D = function (e, t, n, r, i) {
          var a = new R.LRNProgram(e.shape, t, n, r, i);return this.compileAndRun(a, [e]);
        }, e.prototype.tile = function (e, t) {
          var n = new W.TileProgram(e.shape, t);return this.compileAndRun(n, [e]);
        }, e.prototype.pad = function (e, t, n) {
          var r = new D.PadProgram(e.shape, t, n);return this.compileAndRun(r, [e]);
        }, e.prototype.transpose = function (e, t) {
          var n = new q.TransposeProgram(e.shape, t);return this.compileAndRun(n, [e]);
        }, e.prototype.gather = function (e, t, n) {
          var r = new S.GatherProgram(e.shape, t.size, n);return this.compileAndRun(r, [e, t]);
        }, e.prototype.reduce = function (e, t, n) {
          var r = e.shape[0],
              i = e.shape[1],
              a = { windowSize: c.computeOptimalWindowSize(i), inSize: i, batchSize: r },
              o = new L.ReduceProgram(a, t),
              s = o.outputShape,
              u = s[0],
              l = s[1],
              p = this.makeOutputArray([u, l], n);return this.compileAndRun(o, [e], p), 1 === p.shape[1] ? p : this.reduce(p, t, n);
        }, e.prototype.argReduce = function (e, t, n) {
          void 0 === n && (n = null);var r = e.shape[0],
              i = e.shape[1];null != n && (r = n.shape[0], i = n.shape[1]);var a = { windowSize: c.computeOptimalWindowSize(i), inSize: i, batchSize: r },
              o = new g.ArgMinMaxProgram(a, t, null == n),
              s = o.outputShape,
              u = s[0],
              l = s[1],
              p = this.makeOutputArray([u, l], "int32"),
              h = [e];return null != n && h.push(n), this.compileAndRun(o, h, p), 1 === p.shape[1] ? p : this.argReduce(e, t, p);
        }, e.prototype.sum = function (e, t) {
          u.assertAxesAreInnerMostDims("sum", t, e.rank);var n = u.computeOutAndReduceShapes(e.shape, t),
              r = n[0],
              i = n[1],
              a = d.sizeFromShape(i),
              o = e.as2D(-1, a),
              s = h.sumOutType(e.dtype);return this.reduce(o, "sum", s).reshape(r);
        }, e.prototype.argMin = function (e, t) {
          var n = [t];u.assertAxesAreInnerMostDims("argMin", n, e.rank);var r = u.computeOutAndReduceShapes(e.shape, n),
              i = r[0],
              a = r[1],
              o = d.sizeFromShape(a),
              s = e.as2D(-1, o);return this.argReduce(s, "min").reshape(i);
        }, e.prototype.argMax = function (e, t) {
          var n = [t];u.assertAxesAreInnerMostDims("argMax", n, e.rank);var r = u.computeOutAndReduceShapes(e.shape, n),
              i = r[0],
              a = r[1],
              o = d.sizeFromShape(a),
              s = e.as2D(-1, o);return this.argReduce(s, "max").reshape(i);
        }, e.prototype.equal = function (e, t) {
          var n = new b.BinaryOpProgram(y.EQUAL, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
        }, e.prototype.notEqual = function (e, t) {
          var n = new b.BinaryOpProgram(y.NOT_EQUAL, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
        }, e.prototype.less = function (e, t) {
          var n = new b.BinaryOpProgram(y.LESS, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
        }, e.prototype.lessEqual = function (e, t) {
          var n = new b.BinaryOpProgram(y.LESS_EQUAL, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
        }, e.prototype.greater = function (e, t) {
          var n = new b.BinaryOpProgram(y.GREATER, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
        }, e.prototype.greaterEqual = function (e, t) {
          var n = new b.BinaryOpProgram(y.GREATER_EQUAL, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
        }, e.prototype.logicalNot = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.LOGICAL_NOT);return this.compileAndRun(t, [e]);
        }, e.prototype.logicalAnd = function (e, t) {
          var n = new b.BinaryOpProgram(y.LOGICAL_AND, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
        }, e.prototype.logicalOr = function (e, t) {
          var n = new b.BinaryOpProgram(y.LOGICAL_OR, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
        }, e.prototype.where = function (e, t, n, r) {
          var i = new k.WhereProgram(e.rank, t.shape, t.rank),
              a = this.makeOutputArray(i.outputShape, r);return this.compileAndRun(i, [e, t, n], a);
        }, e.prototype.topKValues = function (e, t) {
          throw new Error("topKValues GPU not yet implemented!");
        }, e.prototype.topKIndices = function (e, t) {
          throw new Error("topKIndices GPU not yet implemented!");
        }, e.prototype.min = function (e, t) {
          u.assertAxesAreInnerMostDims("min", t, e.rank);var n = u.computeOutAndReduceShapes(e.shape, t),
              r = n[0],
              i = n[1],
              a = d.sizeFromShape(i),
              o = e.as2D(-1, a);return this.reduce(o, "min", o.dtype).reshape(r);
        }, e.prototype.minimum = function (e, t) {
          var n = new b.BinaryOpProgram(y.MIN, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
        }, e.prototype.mod = function (e, t) {
          var n = new b.BinaryOpProgram(y.MOD, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
        }, e.prototype.max = function (e, t) {
          u.assertAxesAreInnerMostDims("max", t, e.rank);var n = u.computeOutAndReduceShapes(e.shape, t),
              r = n[0],
              i = n[1],
              a = d.sizeFromShape(i),
              o = e.as2D(-1, a);return this.reduce(o, "max", o.dtype).reshape(r);
        }, e.prototype.maximum = function (e, t) {
          var n = new b.BinaryOpProgram(y.MAX, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
        }, e.prototype.squaredDifference = function (e, t) {
          var n = new b.BinaryOpProgram(y.SQUARED_DIFFERENCE, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
        }, e.prototype.divide = function (e, t) {
          var n, r;"int32" === e.dtype && "int32" === t.dtype ? (n = y.INT_DIV, r = "int32") : (n = y.DIV, r = "float32");var i = new b.BinaryOpProgram(n, e.shape, t.shape),
              a = this.makeOutputArray(i.outputShape, r);return this.compileAndRun(i, [e, t], a);
        }, e.prototype.add = function (e, t) {
          var n = new b.BinaryOpProgram(y.ADD, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, h.upcastType(e.dtype, t.dtype));return this.compileAndRun(n, [e, t], r);
        }, e.prototype.subtract = function (e, t) {
          var n = new b.BinaryOpProgram(y.SUB, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, h.upcastType(e.dtype, t.dtype));return this.compileAndRun(n, [e, t], r);
        }, e.prototype.pow = function (e, t) {
          var n = new b.BinaryOpProgram(y.POW, e.shape, t.shape),
              r = this.makeOutputArray(n.outputShape, h.upcastType(e.dtype, t.dtype));return this.compileAndRun(n, [e, t], r);
        }, e.prototype.ceil = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.CEIL);return this.compileAndRun(t, [e]);
        }, e.prototype.floor = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.FLOOR);return this.compileAndRun(t, [e]);
        }, e.prototype.sign = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.SIGN);return this.compileAndRun(t, [e]);
        }, e.prototype.round = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ROUND);return this.compileAndRun(t, [e]);
        }, e.prototype.exp = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.EXP);return this.compileAndRun(t, [e]);
        }, e.prototype.expm1 = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.EXPM1);return this.compileAndRun(t, [e]);
        }, e.prototype.log = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.LOG);return this.compileAndRun(t, [e]);
        }, e.prototype.log1p = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.LOG1P);return this.compileAndRun(t, [e]);
        }, e.prototype.sqrt = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.SQRT);return this.compileAndRun(t, [e]);
        }, e.prototype.rsqrt = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.RSQRT);return this.compileAndRun(t, [e]);
        }, e.prototype.square = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.SQUARE);return this.compileAndRun(t, [e]);
        }, e.prototype.reciprocal = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.RECIPROCAL);return this.compileAndRun(t, [e]);
        }, e.prototype.relu = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.RELU);return this.compileAndRun(t, [e]);
        }, e.prototype.elu = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ELU);return this.compileAndRun(t, [e]);
        }, e.prototype.eluDer = function (e, t) {
          var n = new b.BinaryOpProgram(y.ELU_DER, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
        }, e.prototype.selu = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.SELU);return this.compileAndRun(t, [e]);
        }, e.prototype.int = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.TO_INT),
              n = this.makeOutputArray(t.outputShape, "int32");return this.compileAndRun(t, [e], n);
        }, e.prototype.clip = function (e, t, n) {
          var r = new w.ClipProgram(e.shape, t, n);return this.compileAndRun(r, [e]);
        }, e.prototype.abs = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ABS);return this.compileAndRun(t, [e]);
        }, e.prototype.sigmoid = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.SIGMOID);return this.compileAndRun(t, [e]);
        }, e.prototype.softplus = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.SOFTPLUS);return this.compileAndRun(t, [e]);
        }, e.prototype.sin = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.SIN);return this.compileAndRun(t, [e]);
        }, e.prototype.cos = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.COS);return this.compileAndRun(t, [e]);
        }, e.prototype.tan = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.TAN);return this.compileAndRun(t, [e]);
        }, e.prototype.asin = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ASIN);return this.compileAndRun(t, [e]);
        }, e.prototype.acos = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ACOS);return this.compileAndRun(t, [e]);
        }, e.prototype.atan = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ATAN);return this.compileAndRun(t, [e]);
        }, e.prototype.atan2 = function (e, t) {
          var n = new b.BinaryOpProgram(y.ATAN2, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
        }, e.prototype.sinh = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.SINH);return this.compileAndRun(t, [e]);
        }, e.prototype.cosh = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.COSH);return this.compileAndRun(t, [e]);
        }, e.prototype.tanh = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.TANH);return this.compileAndRun(t, [e]);
        }, e.prototype.asinh = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ASINH);return this.compileAndRun(t, [e]);
        }, e.prototype.acosh = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ACOSH);return this.compileAndRun(t, [e]);
        }, e.prototype.atanh = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ATANH);return this.compileAndRun(t, [e]);
        }, e.prototype.erf = function (e) {
          var t = new K.UnaryOpProgram(e.shape, H.ERF);return this.compileAndRun(t, [e]);
        }, e.prototype.step = function (e, t) {
          var n = new K.UnaryOpProgram(e.shape, H.STEP(t));return this.compileAndRun(n, [e]);
        }, e.prototype.conv2d = function (e, t, n) {
          var r = new E.Conv2DProgram(n);return this.compileAndRun(r, [e, t]);
        }, e.prototype.conv2dDerInput = function (e, t, n) {
          var r = new A.Conv2DDerInputProgram(n);return this.compileAndRun(r, [e, t]);
        }, e.prototype.conv2dDerFilter = function (e, t, n) {
          var r = new A.Conv2DDerFilterProgram(n);return this.compileAndRun(r, [e, t]);
        }, e.prototype.depthwiseConv2D = function (e, t, n) {
          var r = new _.DepthwiseConv2DProgram(n);return this.compileAndRun(r, [e, t]);
        }, e.prototype.maxPool = function (e, t) {
          var n = new P.Pool2DProgram(t, "max", !1),
              r = this.makeOutputArray(n.outputShape, e.dtype);return this.compileAndRun(n, [e], r);
        }, e.prototype.avgPool = function (e, t) {
          var n = new P.Pool2DProgram(t, "avg", !1),
              r = this.makeOutputArray(n.outputShape, "float32");return this.compileAndRun(n, [e], r);
        }, e.prototype.maxPoolBackprop = function (e, t, n, r) {
          var i = new P.Pool2DProgram(r, "max", !0),
              a = this.compileAndRun(i, [t]),
              o = new N.MaxPool2DBackpropProgram(r),
              s = this.makeOutputArray(o.outputShape, t.dtype),
              u = this.compileAndRun(o, [e, a], s);return a.dispose(), u;
        }, e.prototype.avgPoolBackprop = function (e, t, n) {
          var r = new m.AvgPool2DBackpropProgram(n),
              i = this.makeOutputArray(r.outputShape, t.dtype);return this.compileAndRun(r, [e], i);
        }, e.prototype.cast = function (e, t) {
          return f.castTensor(e, t, this);
        }, e.prototype.reshape = function (e, t) {
          return f.reshapeTensor(e, t);
        }, e.prototype.resizeBilinear = function (e, t, n, r) {
          var i = new F.ResizeBilinearProgram(e.shape, t, n, r);return this.compileAndRun(i, [e]);
        }, e.prototype.resizeNearestNeighbor = function (e, t, n, r) {
          var i = new V.ResizeNearestNeighborProgram(e.shape, t, n, r);return this.compileAndRun(i, [e]);
        }, e.prototype.multinomial = function (e, t, n, r) {
          var i = t ? e : l.softmax(e),
              a = i.shape[0],
              o = i.shape[1],
              s = new z.MultinomialProgram(a, o, n),
              u = this.makeOutputArray(s.outputShape, "int32"),
              c = s.getCustomSetupFunc(r);return this.compileAndRun(s, [i], u, c);
        }, e.prototype.oneHot = function (e, t, n, r) {
          var i = new M.OneHotProgram(e.size, t, n, r);return this.compileAndRun(i, [e]);
        }, e.prototype.makeOutputArray = function (e, t) {
          return p.Tensor.make(e, {}, t);
        }, e.prototype.compileAndRun = function (e, t, n, r) {
          var i = this;null == n && (n = this.makeOutputArray(e.outputShape, t[0].dtype));var a = t.map(function (e) {
            return i.uploadToGPU(e.dataId), { tensor: e, texData: i.texData.get(e.dataId) };
          });this.uploadToGPU(n.dataId);var o,
              s = { tensor: n, texData: this.texData.get(n.dataId) },
              u = O.makeShaderKey(e, a, s),
              l = this.getAndSaveBinary(u, function () {
            return O.compileProgram(i.gpgpu, e, a, s);
          }),
              c = null != this.activeTimers;return c && (o = this.startTimer()), O.runProgram(l, a, s, r), c && (o = this.endTimer(o), this.activeTimers.push(this.getQueryTime(o))), n;
        }, e.prototype.getAndSaveBinary = function (e, t) {
          return e in this.binaryCache || (this.binaryCache[e] = t()), this.binaryCache[e];
        }, e.prototype.getTextureManager = function () {
          return this.textureManager;
        }, e.prototype.dispose = function () {
          if (!this.disposed) {
            for (var e in this.binaryCache) {
              this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram);
            }this.textureManager.dispose(), this.canvas.remove(), this.gpgpuCreatedLocally && this.gpgpu.dispose(), this.disposed = !0;
          }
        }, e.prototype.throwIfNoData = function (e) {
          if (!this.texData.has(e)) throw new Error("WebGL backend: No data found for this tensor. Did you change your backend in the middle of the program? New backends can't use Tensors created with previous backends");
        }, e.prototype.uploadToGPU = function (e) {
          this.throwIfNoData(e);var t = this.texData.get(e),
              n = t.shape,
              r = t.values,
              a = t.texture,
              o = (t.dtype, t.texType);if (null == a) {
            var s,
                u = null != this.activeTimers;u && (s = performance.now());var l = X.getTextureShapeFromLogicalShape(this.gpgpu.gl, n);t.texShape = l;var c = this.textureManager.acquireTexture(l, o);t.texture = c, null != r && (this.gpgpu.uploadMatrixToTexture(c, l[0], l[1], i(r)), t.values = null, u && (this.uploadWaitMs += performance.now() - s));
          }
        }, e.prototype.cacheOnCPU = function (e, t) {
          var n = this.delayedStorage,
              i = this.texData.get(e),
              a = i.texture,
              o = i.texShape,
              s = i.dtype,
              u = i.texType;n && null != a && (this.textureManager.releaseTexture(a, o, u), i.texture = null, i.texShape = null), null != t && (i.values = r(t, s));
        }, e;
      }();n.MathBackendWebGL = Y, s.ENV.registerBackend("webgl", function () {
        return new Y();
      }, 2);
    }, { "../environment": 5, "../ops/axis_util": 47, "../ops/ops": 66, "../ops/reduce_util": 69, "../tensor": 89, "../types": 94, "../util": 95, "./backend_util": 10, "./webgl/argminmax_gpu": 12, "./webgl/avg_pool_backprop_gpu": 13, "./webgl/batchnorm_gpu": 14, "./webgl/binaryop_gpu": 15, "./webgl/clip_gpu": 16, "./webgl/concat_gpu": 17, "./webgl/conv_backprop_gpu": 18, "./webgl/conv_gpu": 19, "./webgl/conv_gpu_depthwise": 20, "./webgl/from_pixels_gpu": 21, "./webgl/gather_gpu": 22, "./webgl/gpgpu_context": 23, "./webgl/gpgpu_math": 24, "./webgl/logical_gpu": 26, "./webgl/lrn_gpu": 27, "./webgl/max_pool_backprop_gpu": 28, "./webgl/mulmat_gpu": 29, "./webgl/multinomial_gpu": 30, "./webgl/onehot_gpu": 31, "./webgl/pad_gpu": 32, "./webgl/pool_gpu": 33, "./webgl/reduce_gpu": 34, "./webgl/resize_bilinear_gpu": 35, "./webgl/resize_nearest_neighbor_gpu": 36, "./webgl/reverse_gpu": 37, "./webgl/slice_gpu": 39, "./webgl/tex_util": 40, "./webgl/texture_manager": 41, "./webgl/tile_gpu": 42, "./webgl/transpose_gpu": 43, "./webgl/unaryop_gpu": 44, "./webgl/webgl_util": 45 }], 12: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e, t, n) {
          this.variableNames = ["A"];var r = e.windowSize,
              i = e.batchSize,
              a = e.inSize,
              o = Math.ceil(a / r);n || this.variableNames.push("bestIndicesA"), this.outputShape = [i, o];var s = "max" === t ? ">" : "<",
              u = n ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + r + ";\n\n        int bestIndex = 0;\n        float bestValue = getA(batch, inOffset);\n\n        for (int i = 0; i < " + r + "; i++) {\n          int inIdx = " + u + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + s + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
        };
      }();n.ArgMinMaxProgram = r;
    }, {}], 13: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e) {
          this.variableNames = ["dy"], this.outputShape = e.inShape;var t = e.filterHeight,
              n = e.filterWidth,
              r = e.strideHeight,
              i = e.strideWidth,
              a = t - 1 - e.padInfo.top,
              o = n - 1 - e.padInfo.left,
              s = 1 / (t * n);this.userCode = "\n      const ivec2 pads = ivec2(" + a + ", " + o + ");\n      const float avgMultiplier = float(" + s + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + n + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + i + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        };
      }();n.AvgPool2DBackpropProgram = r;
    }, {}], 14: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("../../ops/broadcast_util"),
          i = function () {
        return function (e, t, n, i, a, o) {
          this.outputShape = [], this.supportsBroadcasting = !0, this.variableNames = ["x", "mean", "variance"], r.assertAndGetBroadcastShape(e, t), r.assertAndGetBroadcastShape(e, n);var s = "0.0";null != i && (r.assertAndGetBroadcastShape(e, i), this.variableNames.push("offset"), s = "getOffsetAtOutCoords()");var u = "1.0";null != a && (r.assertAndGetBroadcastShape(e, a), this.variableNames.push("scale"), u = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + s + ";\n        float scale = " + u + ";\n        float inv = scale * inversesqrt(variance + float(" + o + "));\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
        };
      }();n.BatchNormProgram = i;
    }, { "../../ops/broadcast_util": 50 }], 15: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("../../ops/broadcast_util"),
          i = "\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n";n.ADD = "return a + b;", n.SUB = "return a - b;", n.MUL = "return a * b;", n.DIV = "return a / b;", n.INT_DIV = "\n  float resultSign = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  int result = ia / ib;\n  int amodb = ia - ib * result;\n\n  if (resultSign < 0.0 && amodb != 0) {\n    result -= 1;\n  }\n  return float(result);\n", n.POW = "\n  return (round(mod(b, 2.0)) == 0 || round(mod(b, 2.0)) == 2) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n", n.SQUARED_DIFFERENCE = "return (a - b) * (a - b);", n.EQUAL = "return float(a == b);", n.NOT_EQUAL = "return float(a != b);", n.LESS = "return float(a < b);", n.LESS_EQUAL = "return float(a <= b);", n.GREATER = "return float(a > b);", n.GREATER_EQUAL = "return float(a >= b);", n.LOGICAL_AND = "return float(a >= 1.0 && b >= 1.0);", n.LOGICAL_OR = "return float(a >= 1.0 || b >= 1.0);", n.MAX = i + "\n  return max(a, b);\n", n.MIN = i + "\n  return min(a, b);\n", n.MOD = "return mod(a, b);", n.ATAN2 = i + "\n  return atan(a, b);\n", n.ELU_DER = "return (b >= 1.0) ? a : a * (b + 1.0);";var a = function () {
        return function (e, t, n) {
          this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.outputShape = r.assertAndGetBroadcastShape(t, n), this.userCode = "\n      float binaryOperation(float a, float b) {\n        " + e + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
        };
      }();n.BinaryOpProgram = a;
    }, { "../../ops/broadcast_util": 50 }], 16: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e, t, n) {
          this.variableNames = ["A"], this.outputShape = e;var r = t.toFixed(20),
              i = n.toFixed(20);this.userCode = "\n      void main() {\n        float value = getAAtOutCoords();\n        if (isNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, " + r + ", " + i + "));\n      }\n    ";
        };
      }();n.ClipProgram = r;
    }, {}], 17: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("../../ops/concat_util"),
          i = function () {
        return function (e, t) {
          this.variableNames = ["A", "B"], this.outputShape = [], this.outputShape = r.computeOutShape(e, t, 1), this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        float value = 0.0;\n        if (yC < " + e[1] + ") {\n          value = getA(yR, yC);\n        } else {\n          yC -= " + e[1] + ";\n          value = getB(yR, yC);\n        }\n\n        setOutput(value);\n      }\n    ";
        };
      }();n.ConcatProgram = i;
    }, { "../../ops/concat_util": 53 }], 18: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e) {
          this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;var t = e.strideHeight,
              n = e.strideWidth,
              r = e.padInfo.top,
              i = e.padInfo.left;this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + e.batchSize + "; b++) {\n          for (int yR = 0; yR < " + e.outHeight + "; yR++) {\n            int xR = wR + yR * " + t + " - " + r + ";\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + e.outWidth + "; yC++) {\n              int xC = wC + yC * " + n + " - " + i + ";\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        };
      }();n.Conv2DDerFilterProgram = r;var i = function () {
        return function (e) {
          this.variableNames = ["dy", "W"], this.outputShape = e.inShape;var t = e.filterHeight,
              n = e.filterWidth,
              r = e.strideHeight,
              i = e.strideWidth,
              a = t - 1 - e.padInfo.top,
              o = n - 1 - e.padInfo.left;this.userCode = "\n      const ivec2 pads = ivec2(" + a + ", " + o + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + t + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + i + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + e.outChannels + "; d2++) {\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        };
      }();n.Conv2DDerInputProgram = i;
    }, {}], 19: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e) {
          this.variableNames = ["x", "W"], this.outputShape = e.outShape;var t = e.padInfo.top,
              n = e.padInfo.left,
              r = e.strideHeight,
              i = e.strideWidth,
              a = e.dilationHeight,
              o = e.dilationWidth,
              s = e.filterHeight,
              u = e.filterWidth,
              l = 4 * Math.floor(e.inChannels / 4),
              c = e.inChannels % 4;this.userCode = "\n      const ivec2 strides = ivec2(" + r + ", " + i + ");\n      const ivec2 pads = ivec2(" + t + ", " + n + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s + "; wR++) {\n          int xR = xRCorner + wR * " + a + ";\n\n          if (xR < 0 || xR >= " + e.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + u + "; wC++) {\n            int xC = xCCorner + wC * " + o + ";\n\n            if (xC < 0 || xC >= " + e.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + l + "; d1 += 4) {\n              vec4 xValues = vec4(\n                getX(batch, xR, xC, d1),\n                getX(batch, xR, xC, d1 + 1),\n                getX(batch, xR, xC, d1 + 2),\n                getX(batch, xR, xC, d1 + 3)\n              );\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              dotProd += dot(xValues, wValues);\n            }\n\n            if (" + (1 === c) + ") {\n              dotProd +=\n                getX(batch, xR, xC, " + l + ") *\n                getW(wR, wC, " + l + ", d2);\n            } else if (" + (2 === c) + ") {\n              vec2 xValues = vec2(\n                getX(batch, xR, xC, " + l + "),\n                getX(batch, xR, xC, " + l + " + 1)\n              );\n              vec2 wValues = vec2(\n                getW(wR, wC, " + l + ", d2),\n                getW(wR, wC, " + l + " + 1, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            } else if (" + (3 === c) + ") {\n              vec3 xValues = vec3(\n                getX(batch, xR, xC, " + l + "),\n                getX(batch, xR, xC, " + l + " + 1),\n                getX(batch, xR, xC, " + l + " + 2)\n              );\n              vec3 wValues = vec3(\n                getW(wR, wC, " + l + ", d2),\n                getW(wR, wC, " + l + " + 1, d2),\n                getW(wR, wC, " + l + " + 2, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        };
      }();n.Conv2DProgram = r;
    }, {}], 20: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e) {
          this.variableNames = ["x", "W"], this.outputShape = e.outShape;var t = e.inHeight,
              n = e.inWidth,
              r = e.padInfo.top,
              i = e.padInfo.left,
              a = e.strideHeight,
              o = e.strideWidth,
              s = e.dilationHeight,
              u = e.dilationWidth,
              l = e.filterHeight,
              c = e.filterWidth,
              p = e.outChannels / e.inChannels;this.userCode = "\n      const ivec2 strides = ivec2(" + a + ", " + o + ");\n      const ivec2 pads = ivec2(" + r + ", " + i + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + p + ";\n        int q = d2 - d1 * " + p + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + l + "; wR++) {\n          int xR = xRCorner + wR * " + s + ";\n\n          if (xR < 0 || xR >= " + t + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + c + "; wC++) {\n            int xC = xCCorner + wC * " + u + ";\n\n            if (xC < 0 || xC >= " + n + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        };
      }();n.DepthwiseConv2DProgram = r;
    }, {}], 21: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e) {
          this.variableNames = ["A"];var t = e[0],
              n = e[1];this.outputShape = e, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + n + ".0, " + t + ".0);\n\n        vec4 values = texture2D(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
        };
      }();n.FromPixelsProgram = r;
    }, {}], 22: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        var n = e.length;if (n > 4) throw Error("Gather for rank " + n + " is not yet supported");if (1 === n) return "int(getIndices(resRC))";for (var r = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], i = [], a = 0; a < e.length; a++) {
          a === t ? i.push("int(getIndices(" + r[a] + "))") : i.push("" + r[a]);
        }return i.join();
      }Object.defineProperty(n, "__esModule", { value: !0 });var i = e("./shader_compiler"),
          a = function () {
        return function (e, t, n) {
          this.variableNames = ["A", "indices"];var a = e.slice();a[n] = t, this.outputShape = a, this.rank = a.length;var o = i.getCoordsDataType(this.rank),
              s = r(e, n);this.userCode = "\n      void main() {\n        " + o + " resRC = getOutputCoords();\n        setOutput(getA(" + s + "));\n      }\n    ";
        };
      }();n.GatherProgram = a;
    }, { "./shader_compiler": 38 }], 23: [function (e, t, n) {
      "use strict";
      var r = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          i = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var a = e("../../environment"),
          o = e("../../util"),
          s = e("./gpgpu_util"),
          u = e("./tex_util"),
          l = e("./webgl_util"),
          c = function () {
        function e(e) {
          this.outputTexture = null, this.program = null, this.disposed = !1, this.autoDebugValidate = !1, this.vertexAttrsAreBound = !1, this.gl = null != e ? e : s.createWebGLContext(), 1 === a.ENV.get("WEBGL_VERSION") ? (this.textureFloatExtension = l.getExtensionOrThrow(this.gl, "OES_texture_float"), this.colorBufferFloatExtension = this.gl.getExtension("WEBGL_color_buffer_float")) : this.colorBufferFloatExtension = l.getExtensionOrThrow(this.gl, "EXT_color_buffer_float"), this.loseContextExtension = l.getExtensionOrThrow(this.gl, "WEBGL_lose_context"), a.ENV.get("WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED") && (this.getBufferSubDataAsyncExtension = this.gl.getExtension("WEBGL_get_buffer_sub_data_async")), this.vertexBuffer = s.createVertexBuffer(this.gl), this.indexBuffer = s.createIndexBuffer(this.gl), this.framebuffer = l.createFramebuffer(this.gl);
        }return e.prototype.dispose = function () {
          var e = this;if (!this.disposed) {
            null != this.program && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), null != this.outputTexture && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var t = this.gl;l.callAndCheck(t, function () {
              return t.finish();
            }), l.callAndCheck(t, function () {
              return t.bindFramebuffer(t.FRAMEBUFFER, null);
            }), l.callAndCheck(t, function () {
              return t.deleteFramebuffer(e.framebuffer);
            }), l.callAndCheck(t, function () {
              return t.bindBuffer(t.ARRAY_BUFFER, null);
            }), l.callAndCheck(t, function () {
              return t.deleteBuffer(e.vertexBuffer);
            }), l.callAndCheck(t, function () {
              return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null);
            }), l.callAndCheck(t, function () {
              return t.deleteBuffer(e.indexBuffer);
            }), this.loseContextExtension.loseContext(), this.disposed = !0;
          }
        }, e.prototype.enableAutomaticDebugValidation = function (e) {
          this.autoDebugValidate = e, l.enableDebugWebGLErrorChecking(e);
        }, e.prototype.createMatrixTexture = function (e, t) {
          return this.throwIfDisposed(), s.createMatrixTexture(this.gl, e, t);
        }, e.prototype.uploadPixelDataToTexture = function (e, t) {
          this.throwIfDisposed(), s.uploadPixelDataToTexture(this.gl, e, t);
        }, e.prototype.createPackedMatrixTexture = function (e, t) {
          return this.throwIfDisposed(), s.createPackedMatrixTexture(this.gl, e, t);
        }, e.prototype.deleteMatrixTexture = function (e) {
          var t = this;this.throwIfDisposed(), this.outputTexture === e && (l.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer), this.outputTexture = null), l.callAndCheck(this.gl, function () {
            return t.gl.deleteTexture(e);
          });
        }, e.prototype.uploadMatrixToTexture = function (e, t, n, r) {
          this.throwIfDisposed();return s.uploadMatrixToTexture(this.gl, e, t, n, r, 1);
        }, e.prototype.uploadMatrixToPackedTexture = function (e, t, n, r) {
          return this.throwIfDisposed(), s.uploadMatrixToPackedTexture(this.gl, e, t, n, r);
        }, e.prototype.downloadMatrixFromTexture = function (e, t, n) {
          var r = this;return this.downloadMatrixDriver(e, function () {
            return s.downloadMatrixFromOutputTexture(r.gl, t, n);
          });
        }, e.prototype.downloadMatrixFromTextureAsync = function (e, t, n) {
          return r(this, void 0, void 0, function () {
            var r = this;return i(this, function (i) {
              if (null == this.getBufferSubDataAsyncExtension) throw new Error("Cannot download matrix from output texture asynchronously, WEBGL_get_buffer_sub_data_async is not enabled.");return [2, this.downloadMatrixDriverAsync(e, function () {
                return s.downloadMatrixFromOutputTextureAsync(r.gl, r.getBufferSubDataAsyncExtension, t, n);
              })];
            });
          });
        }, e.prototype.downloadMatrixFromRGBAColorTexture = function (e, t, n, r) {
          var i = this;return this.downloadMatrixDriver(e, function () {
            return s.downloadMatrixFromRGBAColorTexture(i.gl, t, n, r);
          });
        }, e.prototype.downloadMatrixFromPackedTexture = function (e, t, n) {
          var r = this;return this.downloadMatrixDriver(e, function () {
            return s.downloadMatrixFromPackedOutputTexture(r.gl, t, n);
          });
        }, e.prototype.createProgram = function (e) {
          this.throwIfDisposed();var t = this.gl,
              n = l.createFragmentShader(t, e),
              r = s.createVertexShader(t),
              i = l.createProgram(t);return l.callAndCheck(t, function () {
            return t.attachShader(i, r);
          }), l.callAndCheck(t, function () {
            return t.attachShader(i, n);
          }), l.linkProgram(t, i), this.autoDebugValidate && l.validateProgram(t, i), this.vertexAttrsAreBound || (this.setProgram(i), this.vertexAttrsAreBound = s.bindVertexProgramAttributeStreams(t, this.program, this.vertexBuffer)), i;
        }, e.prototype.deleteProgram = function (e) {
          var t = this;this.throwIfDisposed(), e === this.program && (this.program = null), null != e && l.callAndCheck(this.gl, function () {
            return t.gl.deleteProgram(e);
          });
        }, e.prototype.setProgram = function (e) {
          var t = this;this.throwIfDisposed(), this.program = e, null != this.program && this.autoDebugValidate && l.validateProgram(this.gl, this.program), l.callAndCheck(this.gl, function () {
            return t.gl.useProgram(e);
          });
        }, e.prototype.getUniformLocation = function (e, t, n) {
          return void 0 === n && (n = !0), this.throwIfDisposed(), n ? l.getProgramUniformLocationOrThrow(this.gl, e, t) : l.getProgramUniformLocation(this.gl, e, t);
        }, e.prototype.getAttributeLocation = function (e, t) {
          var n = this;return this.throwIfDisposed(), l.callAndCheck(this.gl, function () {
            return n.gl.getAttribLocation(e, t);
          });
        }, e.prototype.getUniformLocationNoThrow = function (e, t) {
          return this.throwIfDisposed(), this.gl.getUniformLocation(e, t);
        }, e.prototype.setInputMatrixTexture = function (e, t, n) {
          this.throwIfDisposed(), this.throwIfNoProgram(), l.bindTextureToProgramUniformSampler(this.gl, this.program, e, t, n);
        }, e.prototype.setOutputMatrixTexture = function (e, t, n) {
          this.setOutputMatrixTextureDriver(e, n, t);
        }, e.prototype.setOutputPackedMatrixTexture = function (e, t, n) {
          this.throwIfDisposed();var r = u.getPackedMatrixTextureShapeWidthHeight(t, n),
              i = r[0],
              a = r[1];this.setOutputMatrixTextureDriver(e, i, a);
        }, e.prototype.setOutputMatrixWriteRegion = function (e, t, n, r) {
          this.setOutputMatrixWriteRegionDriver(n, e, r, t);
        }, e.prototype.setOutputPackedMatrixWriteRegion = function (e, t, n, r) {
          throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
        }, e.prototype.debugValidate = function () {
          null != this.program && l.validateProgram(this.gl, this.program), l.validateFramebuffer(this.gl);
        }, e.prototype.executeProgram = function () {
          this.throwIfDisposed(), this.throwIfNoProgram();var e = this.gl;this.autoDebugValidate && this.debugValidate(), l.callAndCheck(e, function () {
            return e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0);
          });
        }, e.prototype.blockUntilAllProgramsCompleted = function () {
          var e = this;this.throwIfDisposed(), l.callAndCheck(this.gl, function () {
            return e.gl.finish();
          });
        }, e.prototype.getQueryTimerExtension = function () {
          return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = l.getExtensionOrThrow(this.gl, 2 === a.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
        }, e.prototype.getQueryTimerExtensionWebGL2 = function () {
          return this.getQueryTimerExtension();
        }, e.prototype.getQueryTimerExtensionWebGL1 = function () {
          return this.getQueryTimerExtension();
        }, e.prototype.runQuery = function (e) {
          var t = this.beginQuery();return e(), this.endQuery(), this.pollQueryTime(t);
        }, e.prototype.beginQuery = function () {
          if (2 === a.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
            var e = this.gl,
                t = this.getQueryTimerExtensionWebGL2(),
                n = e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT, n), n;
          }var r = this.getQueryTimerExtensionWebGL1(),
              i = r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT, i), i;
        }, e.prototype.endQuery = function () {
          if (2 !== a.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
            var e = this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT);
          } else {
            var t = this.gl,
                n = this.getQueryTimerExtensionWebGL2();t.endQuery(n.TIME_ELAPSED_EXT);
          }
        }, e.prototype.isQueryAvailable = function (e, t) {
          if (0 === t) return !0;if (2 === t) {
            var n = this.gl,
                r = this.getQueryTimerExtensionWebGL2(),
                i = n.getQueryParameter(e, n.QUERY_RESULT_AVAILABLE),
                a = this.gl.getParameter(r.GPU_DISJOINT_EXT);return i && !a;
          }var i = (r = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(e, r.QUERY_RESULT_AVAILABLE_EXT),
              a = this.gl.getParameter(r.GPU_DISJOINT_EXT);return i && !a;
        }, e.prototype.pollQueryTime = function (e) {
          var t = this;return new _promise2.default(function (n, r) {
            var i = a.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION");o.repeatedTry(function () {
              return t.isQueryAvailable(e, i);
            }).then(function () {
              return n(t.getQueryTime(e, i));
            }).catch(function () {
              console.warn("Disjoint query timer never available."), n(-1);
            });
          });
        }, e.prototype.getQueryTime = function (e, t) {
          if (0 === t) return null;if (2 === t) {
            var n = this.gl;return (i = n.getQueryParameter(e, n.QUERY_RESULT)) / 1e6;
          }var r = this.getQueryTimerExtensionWebGL1(),
              i = r.getQueryObjectEXT(e, r.QUERY_RESULT_EXT);return i / 1e6;
        }, e.prototype.downloadMatrixDriverSetup = function (e) {
          this.throwIfDisposed(), l.bindColorTextureToFramebuffer(this.gl, e, this.framebuffer), this.autoDebugValidate && l.validateFramebuffer(this.gl);
        }, e.prototype.downloadMatrixDriverTeardown = function () {
          null != this.outputTexture ? (l.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer), this.autoDebugValidate && l.validateFramebuffer(this.gl)) : l.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
        }, e.prototype.downloadMatrixDriver = function (e, t) {
          this.downloadMatrixDriverSetup(e);var n = t();return this.downloadMatrixDriverTeardown(), n;
        }, e.prototype.downloadMatrixDriverAsync = function (e, t) {
          return r(this, void 0, void 0, function () {
            var n;return i(this, function (r) {
              switch (r.label) {case 0:
                  return this.downloadMatrixDriverSetup(e), [4, t()];case 1:
                  return n = r.sent(), this.downloadMatrixDriverTeardown(), [2, n];}
            });
          });
        }, e.prototype.setOutputMatrixTextureDriver = function (e, t, n) {
          this.throwIfDisposed();var r = this.gl;l.bindColorTextureToFramebuffer(r, e, this.framebuffer), this.autoDebugValidate && l.validateFramebuffer(r), this.outputTexture = e, l.callAndCheck(r, function () {
            return r.viewport(0, 0, t, n);
          }), l.callAndCheck(r, function () {
            return r.scissor(0, 0, t, n);
          });
        }, e.prototype.setOutputMatrixWriteRegionDriver = function (e, t, n, r) {
          var i = this;this.throwIfDisposed(), l.callAndCheck(this.gl, function () {
            return i.gl.scissor(e, t, n, r);
          });
        }, e.prototype.throwIfDisposed = function () {
          if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
        }, e.prototype.throwIfNoProgram = function () {
          if (null == this.program) throw new Error("No GPU program is currently set.");
        }, e;
      }();n.GPGPUContext = c;
    }, { "../../environment": 5, "../../util": 95, "./gpgpu_util": 25, "./tex_util": 40, "./webgl_util": 45 }], 24: [function (e, t, n) {
      "use strict";
      function r() {
        return !a.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED");
      }function i(e, t) {
        if (e.length !== t.length) throw Error("Binary was compiled with " + e.length + " inputs, but was executed with " + t.length + " inputs");e.forEach(function (e, n) {
          var r = e.logicalShape,
              i = e.texShape,
              a = t[n].tensor.shape,
              s = t[n].texData.texShape;if (!o.arraysEqual(r, a)) throw Error("Binary was compiled with different shapes than the current args. Shapes " + r + " and " + a + " must match");if (!o.arraysEqual(i, s)) throw Error("Binary was compiled with different texture shapes than the current args. Shape " + i + " and " + s + " must match");
        });
      }Object.defineProperty(n, "__esModule", { value: !0 });var a = e("../../environment"),
          o = e("../../util"),
          s = e("./shader_compiler"),
          u = "NaN";n.compileProgram = function (e, t, n, i) {
        for (var a = t.userCode, o = n.map(function (e, n) {
          var r = { logicalShape: e.tensor.shape, texShape: e.texData.texShape };return { name: t.variableNames[n], shapeInfo: r };
        }), l = o.map(function (e) {
          return e.shapeInfo;
        }), c = { logicalShape: i.tensor.shape, texShape: i.texData.texShape }, p = s.makeShader(o, c, a, !0 === t.supportsBroadcasting), h = e.createProgram(p), d = {}, f = 0; f < t.variableNames.length; f++) {
          var g = t.variableNames[f];d[g] = e.getUniformLocation(h, g);
        }r() && (d[u] = e.getUniformLocation(h, u, !1));return { program: t, source: p, webGLProgram: h, uniformLocations: d, gpgpu: e, inShapeInfos: l, outShapeInfo: c };
      }, n.runProgram = function (e, t, n, a) {
        i(e.inShapeInfos, t), i([e.outShapeInfo], [n]);var o = n.texData.texture,
            s = n.texData.texShape,
            l = e.gpgpu;l.setOutputMatrixTexture(o, s[0], s[1]), l.setProgram(e.webGLProgram), t.forEach(function (t, n) {
          var r = t.texData.texture,
              i = e.program.variableNames[n],
              a = e.uniformLocations[i];l.setInputMatrixTexture(r, a, n);
        }), r() && l.gl.uniform1f(e.uniformLocations[u], NaN), null != a && a(l, e.webGLProgram), l.executeProgram();
      }, n.makeShaderKey = function (e, t, n) {
        var r = "";t.concat(n).forEach(function (e) {
          r += e.tensor.shape + "_" + e.texData.texShape;
        });var i = e.userCode,
            a = (!0 === e.supportsBroadcasting).toString(),
            o = e.constructor.name;return o += "_" + a + "_" + r + "_" + i;
      };
    }, { "../../environment": 5, "../../util": 95, "./shader_compiler": 38 }], 25: [function (e, t, n) {
      "use strict";
      function r() {
        return { alpha: !1, antialias: !1, premultipliedAlpha: !1, preserveDrawingBuffer: !1, depth: !1, stencil: !1, failIfMajorPerformanceCaveat: !0 };
      }function i(e, t) {
        return d.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED") && 2 === d.ENV.get("WEBGL_VERSION") ? 4 === t ? e.RGBA32F : e.R32F : e.RGBA;
      }function a(e, t) {
        return d.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED") && 2 === d.ENV.get("WEBGL_VERSION") ? 4 === t ? e.RGBA : e.RED : e.RGBA;
      }function o(e) {
        return d.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED") ? e.FLOAT : e.UNSIGNED_BYTE;
      }function s(e, t, n, r) {
        g.validateTextureSize(e, t, n);var s = g.createTexture(e),
            u = e.TEXTURE_2D,
            l = i(e, r),
            c = a(e, r);return g.callAndCheck(e, function () {
          return e.bindTexture(u, s);
        }), g.callAndCheck(e, function () {
          return e.texParameteri(u, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE);
        }), g.callAndCheck(e, function () {
          return e.texParameteri(u, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE);
        }), g.callAndCheck(e, function () {
          return e.texParameteri(u, e.TEXTURE_MIN_FILTER, e.NEAREST);
        }), g.callAndCheck(e, function () {
          return e.texParameteri(u, e.TEXTURE_MAG_FILTER, e.NEAREST);
        }), g.callAndCheck(e, function () {
          return e.texImage2D(u, 0, l, t, n, 0, c, o(e), null);
        }), g.callAndCheck(e, function () {
          return e.bindTexture(e.TEXTURE_2D, null);
        }), s;
      }function u(e, t, n, r, i, s) {
        var u = a(e, s);g.validateTextureSize(e, n, r), g.callAndCheck(e, function () {
          return e.bindTexture(e.TEXTURE_2D, t);
        }), g.callAndCheck(e, function () {
          return e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, n, r, u, o(e), i);
        }), g.callAndCheck(e, function () {
          return e.bindTexture(e.TEXTURE_2D, null);
        });
      }function l(e, t, n) {
        return d.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED") ? new Float32Array(f.getUnpackedArraySizeFromMatrixSize(e * t, n)) : new Uint8Array(e * t * n);
      }function c(e, t, n, r) {
        if (d.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")) {
          var i = new Float32Array(t * n);return f.decodeMatrixFromUnpackedArray(e, i, r), i;
        }return f.decodeToFloatArray(e);
      }var p = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          h = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var d = e("../../environment"),
          f = e("./tex_util"),
          g = e("./webgl_util");n.getWebGLContextAttributes = r, n.createWebGLContext = function (e) {
        var t,
            n = r();return t = null != e ? g.createWebGLRenderingContextFromCanvas(e, n) : g.createWebGLRenderingContext(n), g.callAndCheck(t, function () {
          return t.disable(t.DEPTH_TEST);
        }), g.callAndCheck(t, function () {
          return t.disable(t.STENCIL_TEST);
        }), g.callAndCheck(t, function () {
          return t.disable(t.BLEND);
        }), g.callAndCheck(t, function () {
          return t.disable(t.DITHER);
        }), g.callAndCheck(t, function () {
          return t.disable(t.POLYGON_OFFSET_FILL);
        }), g.callAndCheck(t, function () {
          return t.disable(t.SAMPLE_COVERAGE);
        }), g.callAndCheck(t, function () {
          return t.enable(t.SCISSOR_TEST);
        }), g.callAndCheck(t, function () {
          return t.enable(t.CULL_FACE);
        }), g.callAndCheck(t, function () {
          return t.cullFace(t.BACK);
        }), t;
      }, n.createVertexShader = function (e) {
        return g.createVertexShader(e, "\n    precision highp float;\n    attribute vec3 clipSpacePos;\n    attribute vec2 uv;\n    varying vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }");
      }, n.createVertexBuffer = function (e) {
        var t = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);return g.createStaticVertexBuffer(e, t);
      }, n.createIndexBuffer = function (e) {
        var t = new Uint16Array([0, 1, 2, 2, 1, 3]);return g.createStaticIndexBuffer(e, t);
      }, n.createMatrixTexture = function (e, t, n) {
        var r = f.getUnpackedMatrixTextureShapeWidthHeight(t, n);return s(e, r[0], r[1], 1);
      }, n.createColorMatrixTexture = function (e, t, n) {
        var r = f.getColorMatrixTextureShapeWidthHeight(t, n);return s(e, r[0], r[1], 4);
      }, n.createPackedMatrixTexture = function (e, t, n) {
        var r = f.getPackedMatrixTextureShapeWidthHeight(t, n);return s(e, r[0], r[1], 4);
      }, n.bindVertexProgramAttributeStreams = function (e, t, n) {
        return g.callAndCheck(e, function () {
          return e.bindBuffer(e.ARRAY_BUFFER, n);
        }), g.bindVertexBufferToProgramAttribute(e, t, "clipSpacePos", n, 3, 20, 0) && g.bindVertexBufferToProgramAttribute(e, t, "uv", n, 2, 20, 12);
      }, n.uploadPixelDataToTexture = function (e, t, n) {
        g.callAndCheck(e, function () {
          return e.bindTexture(e.TEXTURE_2D, t);
        }), g.callAndCheck(e, function () {
          return e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, e.RGBA, e.UNSIGNED_BYTE, n);
        }), g.callAndCheck(e, function () {
          return e.bindTexture(e.TEXTURE_2D, null);
        });
      }, n.uploadMatrixToTexture = function (e, t, n, r, i, a) {
        var o,
            s = f.getUnpackedMatrixTextureShapeWidthHeight(n, r),
            l = s[0],
            c = s[1];if (d.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")) {
          var p = 1 === a ? g.getChannelsPerTexture() : a;1 === p ? o = i : (o = new Float32Array(f.getUnpackedArraySizeFromMatrixSize(i.length, p)), f.encodeMatrixToUnpackedArray(i, o, p));
        } else o = f.encodeFloatArray(i);u(e, t, l, c, o, a);
      }, n.uploadMatrixToPackedTexture = function (e, t, n, r, i) {
        var a = f.getPackedMatrixTextureShapeWidthHeight(n, r),
            o = a[0],
            s = a[1],
            l = new Float32Array(f.getPackedRGBAArraySizeFromMatrixShape(n, r));f.encodeMatrixToPackedRGBA(i, n, r, l);u(e, t, o, s, l, 4);
      }, n.downloadMatrixFromOutputTextureAsync = function (e, t, n, r) {
        return p(this, void 0, void 0, function () {
          var i, a, s, u, p;return h(this, function (h) {
            switch (h.label) {case 0:
                return i = e, a = 4, s = l(n, r, a), u = s instanceof Float32Array ? 4 * s.length : s, p = e.createBuffer(), g.callAndCheck(e, function () {
                  return e.bindBuffer(i.PIXEL_PACK_BUFFER, p);
                }), g.callAndCheck(e, function () {
                  return e.bufferData(i.PIXEL_PACK_BUFFER, u, e.STATIC_DRAW);
                }), g.callAndCheck(e, function () {
                  return i.readPixels(0, 0, r, n, e.RGBA, o(e), 0);
                }), [4, t.getBufferSubDataAsync(i.PIXEL_PACK_BUFFER, 0, s)];case 1:
                return h.sent(), [2, c(s, n, r, a)];}
          });
        });
      }, n.downloadMatrixFromOutputTexture = function (e, t, n) {
        var r = f.getUnpackedMatrixTextureShapeWidthHeight(t, n),
            i = r[0],
            a = r[1],
            s = l(t, n, 4);return g.callAndCheck(e, function () {
          return e.readPixels(0, 0, i, a, e.RGBA, o(e), s);
        }), c(s, t, n, 4);
      }, n.downloadMatrixFromRGBAColorTexture = function (e, t, n, r) {
        var i = t * n * 4,
            a = new Uint8Array(i);g.callAndCheck(e, function () {
          return e.readPixels(0, 0, n, t, e.RGBA, e.UNSIGNED_BYTE, a);
        });for (var o = new Float32Array(i), s = 0; s < a.length; s++) {
          o[s] = a[s];
        }var u = new Float32Array(t * n * r);return f.decodeMatrixFromUnpackedColorRGBAArray(o, u, r), u;
      }, n.downloadMatrixFromPackedOutputTexture = function (e, t, n) {
        var r = f.getPackedMatrixTextureShapeWidthHeight(t, n),
            i = r[0],
            a = r[1],
            s = new Float32Array(f.getPackedRGBAArraySizeFromMatrixShape(t, n));g.callAndCheck(e, function () {
          return e.readPixels(0, 0, i, a, e.RGBA, o(e), s);
        });var u = new Float32Array(t * n);return f.decodeMatrixFromPackedRGBA(s, t, n, u);
      };
    }, { "../../environment": 5, "./tex_util": 40, "./webgl_util": 45 }], 26: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("./shader_compiler"),
          i = function () {
        return function (e, t, n) {
          this.variableNames = ["c", "a", "b"], this.outputShape = t;var i, a;if (n > 4) throw Error("Where for rank " + n + " is not yet supported");if (1 === n) a = "resRC", i = "resRC";else {
            for (var o = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [], u = [], l = 0; l < t.length; l++) {
              u.push("" + o[l]), l < e && s.push("" + o[l]);
            }i = s.join(), a = u.join();
          }var c = r.getCoordsDataType(n);this.userCode = "\n      void main() {\n        " + c + " resRC = getOutputCoords();\n        float cVal = getC(" + i + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + a + "));\n        } else {\n          setOutput(getB(" + a + "));\n        }\n      }\n    ";
        };
      }();n.WhereProgram = i;
    }, { "./shader_compiler": 38 }], 27: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e, t, n, r, i) {
          this.variableNames = ["x"], this.outputShape = [];var a = t,
              o = e[3] - 1;this.outputShape = e;var s,
              u = "float(" + n + ") + float(" + r + ") * sum";s = .5 === i ? "inversesqrt(" + u + ")" : 1 === i ? "1.0/(" + u + ")" : "exp(log(" + u + ") * float(-" + i + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + a + "; j <= " + a + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + o + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + s + ";\n        setOutput(val);\n      }\n    ";
        };
      }();n.LRNProgram = r;
    }, {}], 28: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e) {
          this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;var t = e.filterHeight,
              n = e.filterWidth,
              r = e.strideHeight,
              i = e.strideWidth,
              a = t - 1 - e.padInfo.top,
              o = n - 1 - e.padInfo.left,
              s = t * n - 1;this.userCode = "\n      const ivec2 pads = ivec2(" + a + ", " + o + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + n + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + i + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + s + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + n + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        };
      }();n.MaxPool2DBackpropProgram = r;
    }, {}], 29: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e, t, n, r) {
          void 0 === n && (n = !1), void 0 === r && (r = !1), this.variableNames = ["matrixA", "matrixB"];var i = n ? e[1] : e[0],
              a = r ? t[0] : t[1],
              o = n ? e[0] : e[1];this.outputShape = [i, a];var s = function s(e, t) {
            return n ? t + " + " + e + ", aRow" : "aRow, " + t + " + " + e;
          },
              u = function u(e, t) {
            return r ? "bCol, " + t + " + " + e : t + " + " + e + ", bCol";
          },
              l = 4 * Math.floor(o / 4),
              c = o % 4;this.userCode = " float dotARowBCol(int aRow, int bCol) {\n      float result = 0.0;\n      for (int i = 0; i < " + l + "; i += 4) {\n        vec4 a = vec4(\n          getMatrixA(" + s(0, "i") + "),\n          getMatrixA(" + s(1, "i") + "),\n          getMatrixA(" + s(2, "i") + "),\n          getMatrixA(" + s(3, "i") + ")\n        );\n        vec4 b = vec4(\n          getMatrixB(" + u(0, "i") + "),\n          getMatrixB(" + u(1, "i") + "),\n          getMatrixB(" + u(2, "i") + "),\n          getMatrixB(" + u(3, "i") + ")\n        );\n\n        result += dot(a, b);\n      }\n\n      if (" + (1 === c) + ") {\n        result += getMatrixA(" + s(0, l) + ") *\n          getMatrixB(" + u(0, l) + ");\n      } else if (" + (2 === c) + ") {\n        vec2 a = vec2(\n          getMatrixA(" + s(0, l) + "),\n          getMatrixA(" + s(1, l) + ")\n        );\n        vec2 b = vec2(\n          getMatrixB(" + u(0, l) + "),\n          getMatrixB(" + u(1, l) + ")\n        );\n        result += dot(a, b);\n      } else if (" + (3 === c) + ") {\n        vec3 a = vec3(\n          getMatrixA(" + s(0, l) + "),\n          getMatrixA(" + s(1, l) + "),\n          getMatrixA(" + s(2, l) + ")\n        );\n        vec3 b = vec3(\n          getMatrixB(" + u(0, l) + "),\n          getMatrixB(" + u(1, l) + "),\n          getMatrixB(" + u(2, l) + ")\n        );\n        result += dot(a, b);\n      }\n\n      return result;\n    }\n\n    void main() {\n      ivec2 resRC = getOutputCoords();\n      setOutput(dotARowBCol(resRC.x, resRC.y));\n    }\n    ";
        };
      }();n.MatMulProgram = r;
    }, {}], 30: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        function e(e, t, n) {
          this.variableNames = ["probs"], this.outputShape = [e, n], this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (t - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (t - 1) + "));\n      }\n    ";
        }return e.prototype.getCustomSetupFunc = function (e) {
          var t = this;return function (n, r) {
            null == t.seedLoc && (t.seedLoc = n.getUniformLocation(r, "seed")), n.gl.uniform1f(t.seedLoc, e);
          };
        }, e;
      }();n.MultinomialProgram = r;
    }, {}], 31: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e, t, n, r) {
          this.variableNames = ["indices"], this.outputShape = [e, t], this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + r + "), float(" + n + "),\n                      float(index == coords.y)));\n      }\n    ";
        };
      }();n.OneHotProgram = r;
    }, {}], 32: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("./shader_compiler"),
          i = function () {
        return function (e, t, n) {
          this.variableNames = ["x"], this.outputShape = t.map(function (t, n) {
            return t[0] + e[n] + t[1];
          });var i = e.length,
              a = r.getCoordsDataType(i),
              o = t.map(function (e) {
            return e[0];
          }).join(","),
              s = t.map(function (t, n) {
            return t[0] + e[n];
          }).join(","),
              u = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, i);this.userCode = 1 !== i ? "\n      " + a + " start = " + a + "(" + o + ");\n      " + a + " end = " + a + "(" + s + ");\n\n      void main() {\n        " + a + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + n + "));\n        } else {\n          " + a + " coords = outC - start;\n          setOutput(getX(" + u + "));\n        }\n      }\n    " : "\n        int start = " + o + ";\n        int end = " + s + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + n + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
        };
      }();n.PadProgram = i;
    }, { "./shader_compiler": 38 }], 33: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e, t, n) {
          if (this.variableNames = ["x"], "avg" === t && n) throw new Error("Cannot compute positions for average pool.");var r = e.filterHeight,
              i = e.filterWidth,
              a = e.strideHeight,
              o = e.strideWidth,
              s = e.padInfo.top,
              u = e.padInfo.left;this.outputShape = e.outShape;var l = "avg" === t,
              c = "0.0";if (l || (c = "-1.0 / 0.0"), n) this.userCode = "\n        const ivec2 strides = ivec2(" + a + ", " + o + ");\n        const ivec2 pads = ivec2(" + s + ", " + u + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + r + "; wR++) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + i + "; wC++) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " + i + " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else {
            var p = t + "(" + t + "(" + t + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg" === t && (p = "avgValue / count");var h = 4 * Math.floor(i / 4),
                d = i % 4,
                f = "\n      if (" + l + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode = "\n      const ivec2 strides = ivec2(" + a + ", " + o + ");\n      const ivec2 pads = ivec2(" + s + ", " + u + ");\n      const float initializationValue = " + c + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + e.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + c + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + r + "; wR++) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + e.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + h + "; wC += 4) {\n            int xC = xCCorner + wC;\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              getValue(batch, xR, xC + 3, d)\n            );\n\n            " + f + "\n          }\n\n          int xC = xCCorner + " + h + ";\n          if (" + (1 === d) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + f + "\n          } else if (" + (2 === d) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + f + "\n          } else if (" + (3 === d) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              initializationValue\n            );\n\n            " + f + "\n          }\n        }\n        setOutput(" + p + ");\n      }\n    ";
          }
        };
      }();n.Pool2DProgram = r;
    }, {}], 34: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e, t) {
          this.variableNames = ["x"];var n = e.windowSize,
              r = e.batchSize,
              i = e.inSize,
              a = Math.ceil(i / n);this.outputShape = [r, a];var o = "sum" === t,
              s = "0.0";o || (s = "min" === t ? "1.0 / 0.0" : "-1.0 / 0.0");var u = "min" === t ? "min" : "max",
              l = t + "(" + t + "(" + t + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum" === t && (l = "sumValue");var c = 4 * Math.floor(n / 4),
              p = n % 4,
              h = "\n      if (" + o + ") {\n        sumValue += dot(values, ones);\n      } else {\n        minMaxValue = " + u + "(values, minMaxValue);\n      }\n    ",
              d = "";i % n > 0 && (d = "\n        if (inIdx < 0 || inIdx >= " + i + ") {\n          return initializationValue;\n        }\n      "), this.userCode = "\n      const float initializationValue = " + s + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + d + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + n + ";\n\n        vec4 minMaxValue = vec4(" + s + ");\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + c + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + h + "\n        }\n\n        int inIdx = inOffset + " + c + ";\n        if (" + (1 === p) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n          " + h + "\n        } else if (" + (2 === p) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n          " + h + "\n        } else if (" + (3 === p) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n          " + h + "\n        }\n        setOutput(" + l + ");\n      }\n    ";
        };
      }();n.ReduceProgram = r;
    }, {}], 35: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e, t, n, r) {
          this.variableNames = ["A"], this.outputShape = [];var i = e[0],
              a = e[1],
              o = e[2],
              s = e[3];this.outputShape = [i, t, n, s];var u = r ? [a - 1, o - 1] : [a, o],
              l = r ? [t - 1, n - 1] : [t, n];this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u[0] / l[0] + ",\n          " + u[1] / l[1] + ");\n      const vec2 inputShapeRC = vec2(" + a + ".0, " + o + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
        };
      }();n.ResizeBilinearProgram = r;
    }, {}], 36: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = function () {
        return function (e, t, n, r) {
          this.variableNames = ["A"], this.outputShape = [];var i = e[0],
              a = e[1],
              o = e[2],
              s = e[3];this.outputShape = [i, t, n, s];var u = r ? [a - 1, o - 1] : [a, o],
              l = r ? [t - 1, n - 1] : [t, n];this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u[0] / l[0] + ",\n          " + u[1] / l[1] + ");\n      const vec2 inputShapeRC = vec2(" + a + ".0, " + o + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + 0.5)));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
        };
      }();n.ResizeNearestNeighborProgram = r;
    }, {}], 37: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("./shader_compiler"),
          i = function () {
        return function (e, t) {
          this.variableNames = ["x"];var n = e.length;if (n > 4) throw new Error("WebGL backend: Reverse of rank-" + n + " tensor is not yet supported");if (this.outputShape = e, 1 !== n) {
            var i = function i(n) {
              return -1 !== t.indexOf(n) && 1 !== e[n] ? e[n] + " - coords[" + n + "] - 1" : "coords[" + n + "]";
            },
                a = e.map(function (e, t) {
              return i(t);
            }).join(","),
                o = r.getCoordsDataType(n);this.userCode = "\n      void main() {\n        " + o + " coords = getOutputCoords();\n        setOutput(getX(" + a + "));\n      }\n    ";
          } else this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + e[0] + " - coord - 1));\n        }\n      ";
        };
      }();n.ReverseProgram = i;
    }, { "./shader_compiler": 38 }], 38: [function (e, t, n) {
      "use strict";
      function r() {
        return A.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED") ? O : S;
      }function i() {
        return A.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED") ? k : C;
      }function a(e) {
        var t = e.shapeInfo.logicalShape;switch (t.length) {case 0:
            return h(e);case 1:
            return d(e);case 2:
            return f(e);case 3:
            return g(e);case 4:
            return m(e);default:
            throw new Error(t.length + "-D input sampling is not yet supported");}
      }function o(e, t, n) {
        var r = v(e);return r += a(e), (n || E.arraysEqual(e.shapeInfo.logicalShape, t.logicalShape)) && (r += b(e, t, n)), r;
      }function s(e, t) {
        switch (e.length) {case 0:
            return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:
            return u(e, t);case 2:
            return p(e, t);case 3:
            return l(e, t);case 4:
            return c(e, t);default:
            throw new Error(e.length + "-D output sampling is not yet supported");}
      }function u(e, t) {
        return 1 === t[0] ? "\n      int getOutputCoords() {\n        return int(resultUV.x * " + t[1] + ".0);\n      }\n    " : 1 === t[1] ? "\n      int getOutputCoords() {\n        return int(resultUV.y * " + t[0] + ".0);\n      }\n    " : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      return resTexRC.x * " + t[1] + " + resTexRC.y;\n    }\n  ";
      }function l(e, t) {
        var n = e[1] * e[2],
            r = e[2];return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      int r = index / " + n + ";\n      index -= r * " + n + ";\n      int c = index / " + r + ";\n      int d = index - c * " + r + ";\n      return ivec3(r, c, d);\n    }\n  ";
      }function c(e, t) {
        var n = e[3],
            r = e[2] * n,
            i = e[1] * r;return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n\n      int r = index / " + i + ";\n      index -= r * " + i + ";\n\n      int c = index / " + r + ";\n      index -= c * " + r + ";\n\n      int d = index / " + n + ";\n      int d2 = index - d * " + n + ";\n\n      return ivec4(r, c, d, d2);\n    }\n  ";
      }function p(e, t) {
        return E.arraysEqual(e, t) ? "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + t[0] + ", " + t[1] + "));\n      }\n    " : 1 === e[1] ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + t[0] + ", " + t[1] + "));\n        int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    " : 1 === e[0] ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + t[0] + ", " + t[1] + "));\n        int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    " : "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      int r = index / " + e[1] + ";\n      int c = index - r * " + e[1] + ";\n      return ivec2(r, c);\n    }\n  ";
      }function h(e) {
        var t = e.name;return "\n    float " + ("get" + t.charAt(0).toUpperCase() + t.slice(1)) + "() {\n      return sampleTexture(" + t + ", halfCR);\n    }\n  ";
      }function d(e) {
        var t = e.name,
            n = "get" + t.charAt(0).toUpperCase() + t.slice(1);return "\n    float " + n + "(int index) {\n      return " + n + "Flat(index);\n    }\n  ";
      }function f(e) {
        var t = e.shapeInfo.logicalShape,
            n = e.shapeInfo.texShape,
            r = e.name,
            i = "get" + r.charAt(0).toUpperCase() + r.slice(1),
            o = n[0],
            s = n[1];if (E.arraysEqual(t, n)) return "\n    float " + i + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + s + ".0, " + o + ".0);\n      return sampleTexture(" + r + ", uv);\n    }\n  ";var u = E.squeezeShape(t),
            l = u.newShape,
            c = u.keptDims,
            p = l;if (p.length < t.length) {
          var h = ["row", "col"];return "\n      " + a(w(e, p)) + "\n      float " + i + "(int row, int col) {\n        return " + i + "(" + x(h, c) + ");\n      }\n    ";
        }return 1 === s ? "\n    float " + i + "(int row, int col) {\n      int index = row * " + t[1] + " + col;\n      vec2 uv = vec2(0.5, (float(index) + 0.5) / " + o + ".0);\n      return sampleTexture(" + r + ", uv);\n    }\n  " : 1 === o ? "\n    float " + i + "(int row, int col) {\n      int index = row * " + t[1] + " + col;\n      vec2 uv = vec2((float(index) + 0.5) / " + s + ".0, 0.5);\n      return sampleTexture(" + r + ", uv);\n    }\n  " : "\n  float " + i + "(int row, int col) {\n    vec2 uv = UVfrom2D(" + o + ", " + s + ", " + t[1] + ", row, col);\n    return sampleTexture(" + r + ", uv);\n  }\n";
      }function g(e) {
        var t = e.shapeInfo.texShape,
            n = e.shapeInfo.logicalShape,
            r = e.name,
            i = "get" + r.charAt(0).toUpperCase() + r.slice(1),
            o = t[0],
            s = t[1],
            u = n[1] * n[2],
            l = n[2],
            c = E.squeezeShape(n),
            p = c.newShape,
            h = c.keptDims,
            d = p;if (d.length < n.length) {
          var f = ["row", "col", "depth"];return "\n        " + a(w(e, d)) + "\n        float " + i + "(int row, int col, int depth) {\n          return " + i + "(" + x(f, h) + ");\n        }\n      ";
        }return s === u ? "\n        float " + i + "(int row, int col, int depth) {\n          int texR = row;\n          int texC = col * " + l + " + depth;\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + s + ".0, " + o + ".0);\n          return sampleTexture(" + r + ", uv);\n        }\n      " : s === l ? "\n    float " + i + "(int row, int col, int depth) {\n      int texR = row * " + n[1] + " + col;\n      int texC = depth;\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + s + ".0, " + o + ".0);\n      return sampleTexture(" + r + ", uv);\n    }\n  " : "\n      float " + i + "(int row, int col, int depth) {\n        vec2 uv = UVfrom3D(\n            " + o + ", " + s + ", " + u + ", " + l + ", row, col, depth);\n        return sampleTexture(" + r + ", uv);\n      }\n  ";
      }function m(e) {
        var t = e.shapeInfo.logicalShape,
            n = e.shapeInfo.texShape,
            r = e.name,
            i = "get" + r.charAt(0).toUpperCase() + r.slice(1),
            o = n[0],
            s = n[1],
            u = t[3],
            l = t[2] * u,
            c = t[1] * l,
            p = E.squeezeShape(t),
            h = p.newShape,
            d = p.keptDims;if (h.length < t.length) {
          var f = ["row", "col", "depth", "depth2"];return "\n      " + a(w(e, h)) + "\n      float " + i + "(int row, int col, int depth, int depth2) {\n        return " + i + "(" + x(f, d) + ");\n      }\n    ";
        }return s === c ? "\n      float " + i + "(int row, int col, int depth, int depth2) {\n        int texR = row;\n        int texC = col * " + l + " + depth * " + u + " + depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + s + ".0, " + o + ".0);\n        return sampleTexture(" + r + ", uv);\n      }\n    " : s === u ? "\n      float " + i + "(int row, int col, int depth, int depth2) {\n        int texR = row * " + t[1] * t[2] + " + col * " + t[2] + " + depth;\n        int texC = depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + s + ".0, " + o + ".0);\n        return sampleTexture(" + r + ", uv);\n      }\n    " : "\n    float " + i + "(int row, int col, int depth, int depth2) {\n      vec2 uv = UVfrom4D(" + o + ", " + s + ", " + c + ", " + l + ",\n          " + u + ", row, col, depth, depth2);\n      return sampleTexture(" + r + ", uv);\n    }\n  ";
      }function v(e) {
        var t = e.name,
            n = e.shapeInfo.texShape,
            r = "get" + t.charAt(0).toUpperCase() + t.slice(1) + "Flat",
            i = n[0],
            a = n[1];return 1 === a && 1 === i ? "\n      float " + r + "(int index) {\n        return sampleTexture(" + t + ", halfCR);\n      }\n    " : 1 === a ? "\n      float " + r + "(int index) {\n        vec2 uv = vec2(0.5, (float(index) + 0.5) / " + i + ".0);\n        return sampleTexture(" + t + ", uv);\n      }\n    " : 1 === i ? "\n      float " + r + "(int index) {\n        vec2 uv = vec2((float(index) + 0.5) / " + a + ".0, 0.5);\n        return sampleTexture(" + t + ", uv);\n      }\n    " : "\n    float " + r + "(int index) {\n      vec2 uv = UVfrom1D(" + i + ", " + a + ", index);\n      return sampleTexture(" + t + ", uv);\n    }\n  ";
      }function y(e, t, n, r) {
        var i = e.shapeInfo.logicalShape.length,
            a = t.logicalShape.length,
            o = "int";2 === a ? o = "ivec2" : 3 === a ? o = "ivec3" : 4 === a && (o = "ivec4");var s,
            u = _.getBroadcastDims(e.shapeInfo.logicalShape, t.logicalShape),
            l = a - i;s = 0 === i ? "" : a < 2 && u.length >= 1 ? "coords = 0;" : u.map(function (e) {
          return "coords[" + (e + l) + "] = 0;";
        }).join("\n");var c = "";return c = a < 2 && i > 0 ? "coords" : e.shapeInfo.logicalShape.map(function (e, t) {
          return "coords[" + (t + l) + "]";
        }).join(", "), "\n    float " + r + "() {\n      " + o + " coords = getOutputCoords();\n      " + s + "\n      return get" + n + "(" + c + ");\n    }\n  ";
      }function b(e, t, n) {
        var r = e.shapeInfo.texShape,
            i = e.name,
            a = i.charAt(0).toUpperCase() + i.slice(1),
            o = "get" + a + "AtOutCoords",
            s = _.getBroadcastDims(e.shapeInfo.logicalShape, t.logicalShape),
            u = e.shapeInfo.logicalShape.length,
            l = t.logicalShape.length,
            c = n && (l > u || s.length > 0),
            p = _.broadcastDimsAreOuter(s);if (c && !p) return y(e, t, a, o);var h = t.texShape;if (E.arraysEqual(r, h)) return "\n      float " + o + "() {\n        return sampleTexture(" + i + ", resultUV);\n      }\n    ";var d = E.sizeFromShape(r),
            f = "";return c && p && (f = "\n        int mainPart = index / " + d + ";\n        index -= mainPart * " + d + ";\n      "), "\n    float " + o + "() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + h[0] + ", " + h[1] + "));\n      int index = resTexRC.x * " + h[1] + " + resTexRC.y;\n      " + f + "\n      int texR = index / " + r[1] + ";\n      int texC = index - texR * " + r[1] + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) /\n                 vec2(" + r[1] + ".0, " + r[0] + ".0);\n\n      return sampleTexture(" + i + ", uv);\n    }\n  ";
      }function w(e, t) {
        var n = JSON.parse((0, _stringify2.default)(e));return n.shapeInfo.logicalShape = t, n;
      }function x(e, t) {
        return t.map(function (t) {
          return e[t];
        }).join(", ");
      }Object.defineProperty(n, "__esModule", { value: !0 });var A = e("../../environment"),
          E = e("../../util"),
          _ = e("../../ops/broadcast_util"),
          T = e("./tex_util");n.makeShader = function (e, t, n, a) {
        var u = r(),
            l = i(),
            c = e.map(function (e) {
          return "uniform sampler2D " + e.name + ";";
        }).join("\n"),
            p = e.map(function (e) {
          return o(e, t, a);
        }).join("\n"),
            h = t.texShape,
            d = s(t.logicalShape, h);return [R, u, l, c, d, p, n].join("\n");
      };var S = "\n  uniform float NaN;\n\n  const vec4 floatDeltas = vec4(\n      1.0,\n      1.0 / 255.0,\n      1.0 / (255.0 * 255.0),\n      1.0 / (255.0 * 255.0 * 255.0)\n  );\n  const float minValue = " + T.FLOAT_MIN + ".0;\n  const float maxValue = " + T.FLOAT_MAX + ".0;\n  const float range = (maxValue - minValue) / 255.0;\n  const vec2 dotRange = vec2(1.0, range);\n\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\n    vec4 sampleValue = texture2D(textureSampler, uv);\n    if (all(equal(sampleValue, vec4(" + T.BYTE_NAN_VALUE + ")))) {\n      return NaN;\n    }\n\n    vec4 encValue = floor(sampleValue * 255.0 + 0.5);\n    float decodedValue = dot(encValue, floatDeltas);\n    return dot(vec2(minValue, decodedValue), dotRange);\n  }\n",
          C = "\n  const vec4 floatPowers = vec4(\n    1.0,\n    255.0,\n    255.0 * 255.0,\n    255.0 * 255.0 * 255.0\n  );\n  const vec2 recipRange = vec2(1.0/range);\n  const vec2 recipRange255 = vec2(1.0/(maxValue - minValue));\n\n  void setOutput(float decodedValue) {\n    if (isNaN(decodedValue)) {\n      gl_FragColor = vec4(" + T.BYTE_NAN_VALUE + ");\n      return;\n    }\n\n    float a = dot(vec2(decodedValue, -minValue), recipRange);\n    float b = fract(a) * 255.0;\n    float c = fract(b) * 255.0;\n    float d = fract(c) * 255.0;\n    gl_FragColor = floor(vec4(a, b, c, d)) / 255.0;\n\n    // TODO(dsmilkov): Version above gets better accuracy but probably slower\n    // than the version below. Benchmark to determine if the accuracy is worth\n    // the cost.\n\n    // float normValue = dot(vec2(decodedValue, -minValue), recipRange255);\n    // vec4 f = normValue * floatPowers;\n    // gl_FragColor = floor(fract(f) * 255.0) / 255.0;\n  }\n",
          O = "\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\n    return texture2D(textureSampler, uv).r;\n  }\n",
          k = "\n  void setOutput(float val) {\n    gl_FragColor = vec4(val, 0, 0, 0);\n  }\n",
          R = "\n  precision highp float;\n  precision highp int;\n  varying vec2 resultUV;\n  const vec2 halfCR = vec2(0.5, 0.5);\n\n  bool isNaN(float val) {\n    float v1 = val * val;\n    float v2 = val * val;\n    return v1 == v2 ? false : true;\n  }\n\n  bool hasNaN(vec4 values) {\n    vec4 v1 = values * values;\n    vec4 v2 = values * values;\n    return any(notEqual(v1, v2));\n  }\n\n  float getNaN(vec4 values) {\n    return dot(vec4(1), values);\n  }\n\n  int round(float value) {\n    return int(floor(value + 0.5));\n  }\n\n  int imod(int x, int y) {\n    return x - y * (x / y);\n  }\n\n  const vec2 randomConst = vec2(\n    23.14069263277926, // e^pi (Gelfond's constant)\n     2.665144142690225 // 2^sqrt(2) (Gelfond–Schneider constant)\n  );\n\n  float random(float seed) {\n      return fract(cos(dot(resultUV * seed, randomConst)) * 12345.6789);\n  }\n\n  \nvec2 UVfrom1D(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n\n  \nvec2 UVfrom2D(int texNumR, int texNumC, int numC, int row, int col) {\n  int index = row * numC + col;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n\n  \nvec2 UVfrom3D(int texNumR, int texNumC, int stride0,\n    int stride1, int row, int col, int depth) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n\n  \nvec2 UVfrom4D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int row, int col, int depth,\n    int depth2) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n\n";n.getCoordsDataType = function (e) {
        if (e <= 1) return "int";if (2 === e) return "ivec2";if (3 === e) return "ivec3";if (4 === e) return "ivec4";throw Error("GPU for rank " + e + " is not yet supported");
      };
    }, { "../../environment": 5, "../../ops/broadcast_util": 50, "../../util": 95, "./tex_util": 40 }], 39: [function (e, t, n) {
      "use strict";
      function r(e) {
        if (1 === e) return "sourceLoc";if (2 === e) return "sourceLoc.x, sourceLoc.y";if (3 === e) return "sourceLoc.x, sourceLoc.y, sourceLoc.z";if (4 === e) return "sourceLoc.x, sourceLoc.y, sourceLoc.z, sourceLoc.w";throw Error("Slicing for rank " + e + " is not yet supported");
      }Object.defineProperty(n, "__esModule", { value: !0 });var i = e("./shader_compiler"),
          a = function () {
        function e(e) {
          this.variableNames = ["source"], this.outputShape = e, this.rank = e.length;var t = i.getCoordsDataType(this.rank),
              n = r(this.rank);this.userCode = "\n      uniform " + t + " start;\n\n      void main() {\n        " + t + " sourceLoc = start + getOutputCoords();\n        setOutput(getSource(" + n + "));\n      }\n    ";
        }return e.prototype.getCustomSetupFunc = function (e) {
          var t = this;if (e.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + e.length + ")");return function (n, r) {
            if (null != t.startLoc || (t.startLoc = n.getUniformLocationNoThrow(r, "start"), null != t.startLoc)) if (1 === t.rank) n.gl.uniform1i(t.startLoc, e[0]);else if (2 === t.rank) n.gl.uniform2i(t.startLoc, e[0], e[1]);else if (3 === t.rank) n.gl.uniform3i(t.startLoc, e[0], e[1], e[2]);else {
              if (4 !== t.rank) throw Error("Slicing for rank " + t.rank + " is not yet supported");n.gl.uniform4i(t.startLoc, e[0], e[1], e[2], e[3]);
            }
          };
        }, e;
      }();n.SliceProgram = a;
    }, { "./shader_compiler": 38 }], 40: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        return e * t;
      }function i(e, t) {
        if (e % t != 0) throw new Error("unpackedSize (" + e + ") must be a multiple of " + t);return e / t;
      }function a(e, t) {
        return [Math.ceil(t / 2), Math.ceil(e / 2)];
      }function o(e, t) {
        var n = a(e, t);return n[0] * n[1] * 4;
      }Object.defineProperty(n, "__esModule", { value: !0 });!function (e) {
        e[e.FLOAT = 0] = "FLOAT", e[e.UNSIGNED_BYTE = 1] = "UNSIGNED_BYTE";
      }(n.TextureType || (n.TextureType = {})), n.getUnpackedMatrixTextureShapeWidthHeight = function (e, t) {
        return [t, e];
      }, n.getUnpackedArraySizeFromMatrixSize = r, n.getColorMatrixTextureShapeWidthHeight = function (e, t) {
        return [4 * t, e];
      }, n.getMatrixSizeFromUnpackedArraySize = i, n.encodeMatrixToUnpackedArray = function (e, t, n) {
        var i = r(e.length, n);if (t.length < i) throw new Error("unpackedArray length (" + t.length + ") must be >= " + i);for (var a = 0, o = 0; o < e.length; ++o) {
          t[a] = e[o], a += n;
        }
      }, n.FLOAT_MAX = 2e4, n.FLOAT_MIN = -n.FLOAT_MAX;var s = (n.FLOAT_MAX - n.FLOAT_MIN) / 255,
          u = [1, 1 / 255, 1 / 65025, 1 / 16581375],
          l = [1, 255, 65025];n.BYTE_NAN_VALUE = 0, n.encodeFloatArray = function (e) {
        for (var t = new Uint8Array(4 * e.length), r = 0; r < t.length; r += 4) {
          !function (r) {
            var i = e[r / 4];if (isNaN(i)) return t[r] = n.BYTE_NAN_VALUE, t[r + 1] = n.BYTE_NAN_VALUE, t[r + 2] = n.BYTE_NAN_VALUE, t[r + 3] = n.BYTE_NAN_VALUE, "continue";var a = (i - n.FLOAT_MIN) / s,
                o = l.map(function (e) {
              return e * a;
            }).map(function (e) {
              return Math.floor(e % 1 * 255);
            });t[r] = Math.floor(a), t[r + 1] = o[0], t[r + 2] = o[1], t[r + 3] = o[2];
          }(r);
        }return t;
      }, n.decodeToFloatArray = function (e) {
        for (var t = new Float32Array(e.length / 4), r = 0; r < e.length; r += 4) {
          !function (r) {
            if (e[r] === n.BYTE_NAN_VALUE && e[r + 1] === n.BYTE_NAN_VALUE && e[r + 2] === n.BYTE_NAN_VALUE && e[r + 3] === n.BYTE_NAN_VALUE) return t[r / 4] = NaN, "continue";var i = 0;u.forEach(function (t, n) {
              i += t * e[r + n];
            });var a = i * s + n.FLOAT_MIN;t[r / 4] = a;
          }(r);
        }return t;
      }, n.decodeMatrixFromUnpackedArray = function (e, t, n) {
        var r = i(e.length, n);if (t.length < r) throw new Error("matrix length (" + t.length + ") must be >= " + r);for (var a = 0, o = 0; o < e.length; o += n) {
          t[a++] = e[o];
        }
      }, n.decodeMatrixFromUnpackedColorRGBAArray = function (e, t, n) {
        var r = e.length * n / 4;if (t.length < r) throw new Error("matrix length (" + t.length + ") must be >= " + r);for (var i = 0, a = 0; a < e.length; a += 4) {
          for (var o = 0; o < n; o++) {
            t[i++] = e[a + o];
          }
        }
      }, n.getPackedMatrixTextureShapeWidthHeight = a, n.getPackedRGBAArraySizeFromMatrixShape = o, n.encodeMatrixToPackedRGBA = function (e, t, n, r) {
        var i = o(t, n);if (r.length < i) throw new Error("packedRGBA length (" + r.length + ") must be >= " + i);for (var s = a(t, n), u = s[0], l = s[1], c = n % 2 == 1, p = t % 2 == 1, h = Math.floor(n / 2), d = Math.floor(t / 2), f = c ? 4 : 0, g = n, m = 0, v = 0; v < d; ++v) {
          for (var y = 2 * v * n, b = 0; b < h; ++b) {
            w = y + 2 * b, r[m] = e[w], r[m + 1] = e[w + 1], r[m + 2] = e[w + g], r[m + 3] = e[w + g + 1], m += 4;
          }m += f;
        }if (c) for (var w = n - 1, m = 4 * (u - 1), x = 2 * n, f = 4 * u, v = 0; v < d; ++v) {
          r[m] = e[w], r[m + 2] = e[w + n], w += x, m += f;
        }if (p) for (var w = (t - 1) * n, m = (l - 1) * u * 4, b = 0; b < h; ++b) {
          r[m++] = e[w++], r[m++] = e[w++], m += 2;
        }return c && p && (r[r.length - 4] = e[e.length - 1]), r;
      }, n.decodeMatrixFromPackedRGBA = function (e, t, n, r) {
        var i = t * n;if (i < r.length) throw new Error("matrix length (" + r.length + ") must be >= " + i);for (var o = n % 2 == 1, s = t % 2 == 1, u = Math.floor(n / 2), l = Math.floor(t / 2), c = a(t, n), p = c[0], h = c[1], d = o ? 4 : 0, f = n + (o ? 1 : 0), g = 0, m = 0, v = n, y = 0; y < l; ++y) {
          for (w = 0; w < u; ++w) {
            r[m++] = e[g++], r[m++] = e[g++], r[v++] = e[g++], r[v++] = e[g++];
          }g += d, m += f, v += f;
        }if (o) for (var g = 4 * (p - 1), b = n - 1, d = 4 * p, f = 2 * n, y = 0; y < l; ++y) {
          r[b] = e[g], r[b + n] = e[g + 2], g += d, b += f;
        }if (s) for (var g = (h - 1) * p * 4, b = (t - 1) * n, w = 0; w < u; ++w) {
          r[b++] = e[g++], r[b++] = e[g++], g += 2;
        }return o && s && (r[r.length - 1] = e[e.length - 4]), r;
      };
    }, {}], 41: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        return e[0] + "_" + e[1] + "_" + t;
      }Object.defineProperty(n, "__esModule", { value: !0 });var i = e("./tex_util"),
          a = function () {
        function e(e) {
          this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {}, this.logEnabled = !1, this.allocatedTextures = [], this.usedTextureCount = {};
        }return e.prototype.acquireTexture = function (e, t) {
          void 0 === t && (t = i.TextureType.FLOAT);var n = r(e, t);if (n in this.freeTextures || (this.freeTextures[n] = []), n in this.usedTextureCount || (this.usedTextureCount[n] = 0), this.usedTextureCount[n]++, this.freeTextures[n].length > 0) return this.numFreeTextures--, this.numUsedTextures++, this.log(), this.freeTextures[n].shift();this.numUsedTextures++, this.log();var a = this.gpgpu.createMatrixTexture(e[0], e[1]);return this.allocatedTextures.push(a), a;
        }, e.prototype.releaseTexture = function (e, t, n) {
          void 0 === n && (n = i.TextureType.FLOAT);var a = r(t, n);a in this.freeTextures || (this.freeTextures[a] = []), this.freeTextures[a].push(e), this.numFreeTextures++, this.numUsedTextures--, this.usedTextureCount[a]--, this.log();
        }, e.prototype.log = function () {
          if (this.logEnabled) {
            var e = this.numFreeTextures + this.numUsedTextures;console.log("Free/Used", this.numFreeTextures + " / " + this.numUsedTextures, "(" + e + ")");
          }
        }, e.prototype.getNumUsedTextures = function () {
          return this.numUsedTextures;
        }, e.prototype.getNumFreeTextures = function () {
          return this.numFreeTextures;
        }, e.prototype.dispose = function () {
          var e = this;null != this.allocatedTextures && (this.allocatedTextures.forEach(function (t) {
            e.gpgpu.deleteMatrixTexture(t);
          }), this.freeTextures = null, this.allocatedTextures = null, this.usedTextureCount = null, this.numUsedTextures = 0, this.numFreeTextures = 0);
        }, e;
      }();n.TextureManager = a;
    }, { "./tex_util": 40 }], 42: [function (e, t, n) {
      "use strict";
      function r(e) {
        var t = e.length;if (t > 4) throw Error("Tile for rank " + t + " is not yet supported");if (1 === t) return "imod(resRC, " + e[0] + ")";for (var n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], r = [], i = 0; i < e.length; i++) {
          r.push("imod(" + n[i] + ", " + e[i] + ")");
        }return r.join();
      }Object.defineProperty(n, "__esModule", { value: !0 });var i = e("./shader_compiler"),
          a = function () {
        return function (e, t) {
          this.variableNames = ["A"];for (var n = new Array(e.length), a = 0; a < n.length; a++) {
            n[a] = e[a] * t[a];
          }this.outputShape = n, this.rank = n.length;var o = i.getCoordsDataType(this.rank),
              s = r(e);this.userCode = "\n      void main() {\n        " + o + " resRC = getOutputCoords();\n        setOutput(getA(" + s + "));\n      }\n    ";
        };
      }();n.TileProgram = a;
    }, { "./shader_compiler": 38 }], 43: [function (e, t, n) {
      "use strict";
      function r(e) {
        var t = e.length;if (t > 4) throw Error("Transpose for rank " + t + " is not yet supported");for (var n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], r = new Array(t), i = 0; i < e.length; i++) {
          r[e[i]] = n[i];
        }return r.join();
      }Object.defineProperty(n, "__esModule", { value: !0 });var i = e("./shader_compiler"),
          a = function () {
        return function (e, t) {
          this.variableNames = ["A"];for (var n = new Array(e.length), a = 0; a < n.length; a++) {
            n[a] = e[t[a]];
          }this.outputShape = n, this.rank = n.length;var o = i.getCoordsDataType(this.rank),
              s = r(t);this.userCode = "\n    void main() {\n      " + o + " resRC = getOutputCoords();\n      setOutput(getA(" + s + "));\n    }\n    ";
        };
      }();n.TransposeProgram = a;
    }, { "./shader_compiler": 38 }], 44: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("../../ops/selu_util"),
          i = e("../../ops/erf_util"),
          a = function () {
        return function (e, t) {
          this.variableNames = ["A"], this.outputShape = e, this.userCode = "\n      float unaryOperation(float x) {\n        " + t + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
        };
      }();n.UnaryOpProgram = a;var o = "if (isNaN(x)) return x;";n.ABS = "return abs(x);", n.RELU = "return (x < 0.0) ? 0.0 : x;", n.ELU = "return (x >= 0.0) ? x : (exp(x) - 1.0);", n.SELU = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + r.SELU_SCALEALPHA + ";\n  float scale = " + r.SELU_SCALE + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n", n.STEP = function (e) {
        return void 0 === e && (e = 0), o + "\n    return x > 0.0 ? 1.0 : float(" + e + ");\n  ";
      }, n.NEG = "return -x;", n.CEIL = "return ceil(x);", n.FLOOR = "return floor(x);", n.SIGN = "return sign(x);", n.ROUND = "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n", n.EXP = "return exp(x);", n.EXPM1 = "return exp(x) - 1.0;", n.LOG = "return log(x);", n.LOG1P = "return log(1.0 + x);", n.SQRT = "return sqrt(x);", n.RSQRT = "return inversesqrt(x);", n.SIGMOID = "return 1.0 / (1.0 + exp(-1.0 * x));", n.SOFTPLUS = "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n", n.SIN = "return sin(x);", n.COS = "return cos(x);", n.TAN = "return tan(x);", n.ASIN = "return asin(x);", n.ACOS = "return acos(x);", n.ATAN = o + "\n  return atan(x);\n", n.SINH = "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n", n.COSH = "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n", n.TANH = "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n", n.ASINH = "return log(x + sqrt(x * x + 1.0));", n.ACOSH = "return log(x + sqrt(x * x - 1.0));", n.ATANH = "return (log(1.0 + x) - log(1.0 - x)) / 2.0;", n.ERF = '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas, \n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ' + i.ERF_P + ";\n  float a1 = " + i.ERF_A1 + ";\n  float a2 = " + i.ERF_A2 + ";\n  float a3 = " + i.ERF_A3 + ";\n  float a4 = " + i.ERF_A4 + ";\n  float a5 = " + i.ERF_A5 + ";\n  \n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n", n.SQUARE = "return x * x;", n.RECIPROCAL = "return 1.0 / x;", n.LOGICAL_NOT = "return float(!(x >= 1.0));", n.TO_INT = "return float(int(x));";
    }, { "../../ops/erf_util": 56, "../../ops/selu_util": 72 }], 45: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        var n,
            r = g.ENV.get("WEBGL_VERSION");if (2 === r ? n = e.getContext("webgl2", t) : 1 === r && (n = e.getContext("webgl", t) || e.getContext("experimental-webgl", t)), 0 === r || null == n) throw new Error("This browser does not support WebGL.");return n;
      }function i(e, t) {
        var n = t();return a(e), n;
      }function a(e) {
        if (m) {
          var t = e.getError();if (t !== e.NO_ERROR) throw new Error("WebGL Error: " + o(e, t));
        }
      }function o(e, t) {
        switch (t) {case e.NO_ERROR:
            return "NO_ERROR";case e.INVALID_ENUM:
            return "INVALID_ENUM";case e.INVALID_VALUE:
            return "INVALID_VALUE";case e.INVALID_OPERATION:
            return "INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:
            return "INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:
            return "OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:
            return "CONTEXT_LOST_WEBGL";default:
            return "Unknown error code " + t;}
      }function s(e, t) {
        var n = v.exec(t);if (null == n) return console.log("Couldn't parse line number in error: " + t), void console.log(e);for (var r = +n[1], i = e.split("\n"), a = i.length.toString().length + 2, o = i.map(function (e, t) {
          return f.rightPad((t + 1).toString(), a) + e;
        }), s = 0, u = 0; u < o.length; u++) {
          s = Math.max(o[u].length, s);
        }var l = o.slice(0, r - 1),
            c = o.slice(r - 1, r),
            p = o.slice(r);console.log(l.join("\n")), console.log(t.split("\n")[0]), console.log("%c " + f.rightPad(c[0], s), "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(p.join("\n"));
      }function u(e) {
        return null != d ? d : d = i(e, function () {
          return e.getParameter(e.MAX_TEXTURE_SIZE);
        });
      }function l(e, t, n) {
        h(e, n), i(e, function () {
          return e.activeTexture(e.TEXTURE0 + n);
        }), i(e, function () {
          return e.bindTexture(e.TEXTURE_2D, t);
        });
      }function c(e, t) {
        switch (t) {case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
            return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:
            return "FRAMEBUFFER_UNSUPPORTED";default:
            return "unknown error " + t;}
      }function p(e, t, n) {
        var r = i(e, function () {
          return t();
        });if (null == r) throw new Error(n);return r;
      }function h(e, t) {
        var n = e.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1,
            r = t + e.TEXTURE0;if (r < e.TEXTURE0 || r > n) {
          var i = "[gl.TEXTURE0, gl.TEXTURE" + n + "]";throw new Error("textureUnit must be in " + i + ".");
        }
      }Object.defineProperty(n, "__esModule", { value: !0 });var d = null,
          f = e("../../util"),
          g = e("../../environment");n.createWebGLRenderingContext = function (e) {
        var t = document.createElement("canvas");return t.width = 1, t.height = 1, r(t, e);
      }, n.createWebGLRenderingContextFromCanvas = r, n.callAndCheck = i;var m = !1;n.enableDebugWebGLErrorChecking = function (e) {
        m = e;
      }, n.checkWebGLError = a, n.getWebGLErrorMessage = o, n.getExtensionOrThrow = function (e, t) {
        return p(e, function () {
          return e.getExtension(t);
        }, 'Extension "' + t + '" not supported on this browser.');
      }, n.createVertexShader = function (e, t) {
        var n = p(e, function () {
          return e.createShader(e.VERTEX_SHADER);
        }, "Unable to create vertex WebGLShader.");if (i(e, function () {
          return e.shaderSource(n, t);
        }), i(e, function () {
          return e.compileShader(n);
        }), !1 === e.getShaderParameter(n, e.COMPILE_STATUS)) throw console.log(e.getShaderInfoLog(n)), new Error("Failed to compile vertex shader.");return n;
      }, n.createFragmentShader = function (e, t) {
        var n = p(e, function () {
          return e.createShader(e.FRAGMENT_SHADER);
        }, "Unable to create fragment WebGLShader.");if (i(e, function () {
          return e.shaderSource(n, t);
        }), i(e, function () {
          return e.compileShader(n);
        }), !1 === e.getShaderParameter(n, e.COMPILE_STATUS)) throw s(t, e.getShaderInfoLog(n)), new Error("Failed to compile fragment shader.");return n;
      };var v = /ERROR: [0-9]+:([0-9]+):/g;n.createProgram = function (e) {
        return p(e, function () {
          return e.createProgram();
        }, "Unable to create WebGLProgram.");
      }, n.linkProgram = function (e, t) {
        if (i(e, function () {
          return e.linkProgram(t);
        }), !1 === e.getProgramParameter(t, e.LINK_STATUS)) throw console.log(e.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
      }, n.validateProgram = function (e, t) {
        if (i(e, function () {
          return e.validateProgram(t);
        }), !1 === e.getProgramParameter(t, e.VALIDATE_STATUS)) throw console.log(e.getProgramInfoLog(t)), new Error("Shader program validation failed.");
      }, n.createStaticVertexBuffer = function (e, t) {
        var n = p(e, function () {
          return e.createBuffer();
        }, "Unable to create WebGLBuffer");return i(e, function () {
          return e.bindBuffer(e.ARRAY_BUFFER, n);
        }), i(e, function () {
          return e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW);
        }), n;
      }, n.createStaticIndexBuffer = function (e, t) {
        var n = p(e, function () {
          return e.createBuffer();
        }, "Unable to create WebGLBuffer");return i(e, function () {
          return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, n);
        }), i(e, function () {
          return e.bufferData(e.ELEMENT_ARRAY_BUFFER, t, e.STATIC_DRAW);
        }), n;
      }, n.queryMaxTextureSize = u, n.getChannelsPerTexture = function () {
        return g.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED") && 2 === g.ENV.get("WEBGL_VERSION") ? 1 : 4;
      }, n.createTexture = function (e) {
        return p(e, function () {
          return e.createTexture();
        }, "Unable to create WebGLTexture.");
      }, n.validateTextureSize = function (e, t, n) {
        var r = u(e);if (t <= 0 || n <= 0) throw i = "[" + t + "x" + n + "]", new Error("Requested texture size " + i + " is invalid.");if (t > r || n > r) {
          var i = "[" + t + "x" + n + "]",
              a = "[" + r + "x" + r + "]";throw new Error("Requested texture size " + i + " greater than WebGL maximum on this browser / GPU " + a + ".");
        }
      }, n.createFramebuffer = function (e) {
        return p(e, function () {
          return e.createFramebuffer();
        }, "Unable to create WebGLFramebuffer.");
      }, n.bindVertexBufferToProgramAttribute = function (e, t, n, r, a, o, s) {
        var u = e.getAttribLocation(t, n);return -1 !== u && (i(e, function () {
          return e.bindBuffer(e.ARRAY_BUFFER, r);
        }), i(e, function () {
          return e.vertexAttribPointer(u, a, e.FLOAT, !1, o, s);
        }), i(e, function () {
          return e.enableVertexAttribArray(u);
        }), !0);
      }, n.bindTextureUnit = l, n.unbindTextureUnit = function (e, t) {
        h(e, t), i(e, function () {
          return e.activeTexture(e.TEXTURE0 + t);
        }), i(e, function () {
          return e.bindTexture(e.TEXTURE_2D, null);
        });
      }, n.getProgramUniformLocationOrThrow = function (e, t, n) {
        return p(e, function () {
          return e.getUniformLocation(t, n);
        }, 'uniform "' + n + '" not present in program.');
      }, n.getProgramUniformLocation = function (e, t, n) {
        return e.getUniformLocation(t, n);
      }, n.bindTextureToProgramUniformSampler = function (e, t, n, r, a) {
        i(e, function () {
          return l(e, n, a);
        }), i(e, function () {
          return e.uniform1i(r, a);
        });
      }, n.bindCanvasToFramebuffer = function (e) {
        i(e, function () {
          return e.bindFramebuffer(e.FRAMEBUFFER, null);
        }), i(e, function () {
          return e.viewport(0, 0, e.canvas.width, e.canvas.height);
        }), i(e, function () {
          return e.scissor(0, 0, e.canvas.width, e.canvas.height);
        });
      }, n.bindColorTextureToFramebuffer = function (e, t, n) {
        i(e, function () {
          return e.bindFramebuffer(e.FRAMEBUFFER, n);
        }), i(e, function () {
          return e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t, 0);
        });
      }, n.unbindColorTextureFromFramebuffer = function (e, t) {
        i(e, function () {
          return e.bindFramebuffer(e.FRAMEBUFFER, t);
        }), i(e, function () {
          return e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, null, 0);
        });
      }, n.validateFramebuffer = function (e) {
        var t = e.checkFramebufferStatus(e.FRAMEBUFFER);if (t !== e.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + c(e, t));
      }, n.getFramebufferErrorMessage = c, n.getTextureShapeFromLogicalShape = function (e, t) {
        2 !== t.length && (t = f.squeezeShape(t).newShape);var n = u(e),
            r = f.sizeFromShape(t);return t.length <= 1 && r <= n ? [r, 1] : 2 === t.length && t[0] <= n && t[1] <= n ? t : 3 === t.length && t[0] <= n && t[1] * t[2] <= n ? [t[0], t[1] * t[2]] : 4 === t.length && t[0] <= n && t[1] * t[2] * t[3] <= n ? [t[0], t[1] * t[2] * t[3]] : f.sizeToSquarishShape(r);
      };
    }, { "../../environment": 5, "../../util": 95 }], 46: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        if (null == t || "float32" === t) return new Float32Array(e);if ("int32" === t) return new Int32Array(e);if ("bool" === t) return new Uint8Array(e);throw new Error("Unknown data type $ {dtype}");
      }function i(e, t) {
        for (var n = r(e, t), i = 0; i < n.length; i++) {
          n[i] = 1;
        }return n;
      }function a(e, t) {
        return o(e, t) ? e : (Array.isArray(e) && (e = f.flatten(e)), f.copyTypedArray(e, t));
      }function o(e, t) {
        return e instanceof Float32Array && "float32" === t || e instanceof Int32Array && "int32" === t || e instanceof Uint8Array && "bool" === t;
      }var s = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      },
          u = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          l = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var c = e("../doc"),
          p = e("../environment"),
          h = e("../tensor"),
          d = e("../tensor_util"),
          f = e("../util"),
          g = e("./axis_util"),
          m = e("./concat"),
          v = e("./operation"),
          y = e("./rand"),
          b = function () {
        function e() {}return e.tensor = function (e, t, n) {
          void 0 === n && (n = "float32");var r = f.inferShape(e);return null != t && 1 !== r.length && f.assertShapesMatch(t, r, "Error creating a new Tensor. Inferred shape (" + r + ") does not match the provided shape (" + t + "). "), f.isTypedArray(e) || Array.isArray(e) || (e = [e]), t = t || r, h.Tensor.make(t, { values: a(e, n) }, n);
        }, e.scalar = function (t, n) {
          if (void 0 === n && (n = "float32"), f.isTypedArray(t) || Array.isArray(t)) throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean)");return e.tensor(t, [], n);
        }, e.tensor1d = function (t, n) {
          void 0 === n && (n = "float32");var r = f.inferShape(t);if (1 !== r.length) throw new Error("tensor1d() requires values to be a flat/TypedArray");return e.tensor(t, r, n);
        }, e.tensor2d = function (t, n, r) {
          void 0 === r && (r = "float32");var i = f.inferShape(t);if (2 !== i.length && 1 !== i.length) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if (1 === i.length && null == n) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return n = n || i, e.tensor(t, n, r);
        }, e.tensor3d = function (t, n, r) {
          void 0 === r && (r = "float32");var i = f.inferShape(t);if (3 !== i.length && 1 !== i.length) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if (1 === i.length && null == n) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return n = n || i, e.tensor(t, n, r);
        }, e.tensor4d = function (t, n, r) {
          void 0 === r && (r = "float32");var i = f.inferShape(t);if (4 !== i.length && 1 !== i.length) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if (1 === i.length && null == n) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return n = n || i, e.tensor(t, n, r);
        }, e.ones = function (e, t) {
          void 0 === t && (t = "float32");var n = i(f.sizeFromShape(e), t);return h.Tensor.make(e, { values: n }, t);
        }, e.zeros = function (e, t) {
          void 0 === t && (t = "float32");var n = r(f.sizeFromShape(e), t);return h.Tensor.make(e, { values: n }, t);
        }, e.fill = function (e, t, n) {
          void 0 === n && (n = "float32");var r = f.getTypedArrayFromDType(n, f.sizeFromShape(e));return r.fill(t), h.Tensor.make(e, { values: r }, n);
        }, e.onesLike = function (t) {
          return f.assertArgumentsAreTensors({ x: t }, "onesLike"), e.ones(t.shape, t.dtype);
        }, e.zerosLike = function (t) {
          return f.assertArgumentsAreTensors({ x: t }, "zerosLike"), e.zeros(t.shape, t.dtype);
        }, e.clone = function (e) {
          f.assertArgumentsAreTensors({ x: e }, "clone");return p.ENV.engine.runKernel(function (t) {
            return h.Tensor.make(e.shape, { dataId: e.dataId }, e.dtype);
          }, { x: e }, function (e) {
            return { x: function x() {
                return e.toFloat();
              } };
          });
        }, e.randomNormal = function (t, n, r, i, a) {
          if (void 0 === n && (n = 0), void 0 === r && (r = 1), null != i && "bool" === i) throw new Error("Unsupported data type " + i);for (var o = new y.MPRandGauss(n, r, i, !1, a), s = e.buffer(t, i), u = 0; u < s.values.length; u++) {
            s.values[u] = o.nextValue();
          }return s.toTensor();
        }, e.truncatedNormal = function (t, n, r, i, a) {
          if (void 0 === n && (n = 0), void 0 === r && (r = 1), null != i && "bool" === i) throw new Error("Unsupported data type " + i);for (var o = new y.MPRandGauss(n, r, i, !0, a), s = e.buffer(t, i), u = 0; u < s.values.length; u++) {
            s.values[u] = o.nextValue();
          }return s.toTensor();
        }, e.randomUniform = function (t, n, r, i) {
          void 0 === n && (n = 0), void 0 === r && (r = 1), void 0 === i && (i = "float32");for (var a = e.buffer(t, i), o = 0; o < a.values.length; o++) {
            a.values[o] = f.randUniform(n, r);
          }return a.toTensor();
        }, e.rand = function (e, t, n) {
          var r = f.sizeFromShape(e),
              i = null;if (null == n || "float32" === n) i = new Float32Array(r);else if ("int32" === n) i = new Int32Array(r);else {
            if ("bool" !== n) throw new Error("Unknown data type " + n);i = new Uint8Array(r);
          }for (var a = 0; a < r; a++) {
            i[a] = t();
          }return h.Tensor.make(e, { values: i }, n);
        }, e.multinomial = function (e, t, n, r) {
          void 0 === r && (r = !1), f.assertArgumentsAreTensors({ logits: e }, "multinomial");var i = e.size,
              a = e.rank;if (i < 2) throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + i + ".");if (a > 2) throw new Error("Rank of probabilities must be 1 or 2, but is " + a);n = n || Math.random();var o = 1 === a ? e.as2D(1, -1) : e,
              s = p.ENV.engine.runKernel(function (e) {
            return e.multinomial(o, r, t, n);
          }, { logits2D: o });return 1 === a ? s.as1D() : s;
        }, e.oneHot = function (e, t, n, r) {
          if (void 0 === n && (n = 1), void 0 === r && (r = 0), f.assert("int32" === e.dtype, "Indices must be of dtype `int32`"), t < 2) throw new Error("Error in oneHot: depth must be >=2, but it is " + t);return p.ENV.engine.runKernel(function (i) {
            return i.oneHot(e, t, n, r);
          }, { indices: e });
        }, e.fromPixels = function (e, t) {
          if (void 0 === t && (t = 3), t > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");return p.ENV.engine.fromPixels(e, t);
        }, e.toPixels = function (e, t) {
          return u(this, void 0, void 0, function () {
            var n, r, i, a, o, s, u, c, p, h, d, g, m, v, y, b, w;return l(this, function (l) {
              switch (l.label) {case 0:
                  if (f.assertArgumentsAreTensors({ img: e }, "toPixels"), 2 !== e.rank && 3 !== e.rank) throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + e.rank + ".");if (n = e.shape.slice(0, 2), r = n[0], i = n[1], (a = 2 === e.rank ? 1 : e.shape[2]) > 4 || 2 === a) throw new Error("toPixels only supports depth of size 1, 3 or 4 but got " + a);return [4, e.min().data()];case 1:
                  return o = l.sent()[0], [4, e.max().data()];case 2:
                  if (s = l.sent()[0], "float32" === e.dtype) {
                    if (o < 0 || s > 1) throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" + o + " - " + s + "].");
                  } else {
                    if ("int32" !== e.dtype) throw new Error("Unsupported type for toPixels: " + e.dtype + ". Please use float32 or int32 tensors.");if (o < 0 || s > 255) throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" + o + " - " + s + "].");
                  }return [4, e.data()];case 3:
                  for (u = l.sent(), c = "float32" === e.dtype ? 255 : 1, p = new Uint8ClampedArray(i * r * 4), h = 0; h < r * i; ++h) {
                    d = void 0, g = void 0, m = void 0, v = void 0, 1 === a ? (d = u[h] * c, g = u[h] * c, m = u[h] * c, v = 255) : 3 === a ? (d = u[3 * h] * c, g = u[3 * h + 1] * c, m = u[3 * h + 2] * c, v = 255) : 4 === a && (d = u[4 * h] * c, g = u[4 * h + 1] * c, m = u[4 * h + 2] * c, v = u[4 * h + 3] * c), p[(y = 4 * h) + 0] = Math.round(d), p[y + 1] = Math.round(g), p[y + 2] = Math.round(m), p[y + 3] = Math.round(v);
                  }return null != t && (t.width = i, t.height = r, b = t.getContext("2d"), w = new ImageData(p, i, r), b.putImageData(w, 0, 0)), [2, p];}
            });
          });
        }, e.reshape = function (e, t) {
          f.assertArgumentsAreTensors({ x: e }, "reshape"), t = f.inferFromImplicitShape(t, e.size), f.assert(e.size === f.sizeFromShape(t), "new shape and old shape must have the same number of elements.");return p.ENV.engine.runKernel(function (n) {
            return n.reshape(e, t);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.reshape(e.shape);
              } };
          });
        }, e.squeeze = function (t, n) {
          return f.assertArgumentsAreTensors({ x: t }, "squeeze"), e.reshape(t, f.squeezeShape(t.shape, n).newShape);
        }, e.cast = function (e, t) {
          f.assertArgumentsAreTensors({ x: e }, "cast");return p.ENV.engine.runKernel(function (n) {
            return n.cast(e, t);
          }, { x: e }, function (e) {
            return { x: function x() {
                return e.clone();
              } };
          });
        }, e.tile = function (t, n) {
          f.assertArgumentsAreTensors({ x: t }, "tile"), f.assert(t.rank === n.length, "Error in transpose: rank of input " + t.rank + " must match length of reps " + n + ".");return p.ENV.engine.runKernel(function (e) {
            return e.tile(t, n);
          }, { x: t }, function (r) {
            return { x: function x() {
                var i = e.zerosLike(t);if (1 === t.rank) for (a = 0; a < n[0]; ++a) {
                  i = i.add(r.slice([a * t.shape[0]], [t.shape[0]]));
                } else if (2 === t.rank) for (a = 0; a < n[0]; ++a) {
                  for (o = 0; o < n[1]; ++o) {
                    i = i.add(r.slice([a * t.shape[0], o * t.shape[1]], [t.shape[0], t.shape[1]]));
                  }
                } else if (3 === t.rank) for (a = 0; a < n[0]; ++a) {
                  for (o = 0; o < n[1]; ++o) {
                    for (s = 0; s < n[2]; ++s) {
                      i = i.add(r.slice([a * t.shape[0], o * t.shape[1], s * t.shape[2]], [t.shape[0], t.shape[1], t.shape[2]]));
                    }
                  }
                } else {
                  if (4 !== t.rank) throw new Error("Gradient for tile operation is not implemented for rank-" + t.rank + " tensors yet.");for (var a = 0; a < n[0]; ++a) {
                    for (var o = 0; o < n[1]; ++o) {
                      for (var s = 0; s < n[2]; ++s) {
                        for (var u = 0; u < n[3]; ++u) {
                          i = i.add(r.slice([a * t.shape[0], o * t.shape[1], s * t.shape[2], u * t.shape[3]], [t.shape[0], t.shape[1], t.shape[2], t.shape[3]]));
                        }
                      }
                    }
                  }
                }return i;
              } };
          });
        }, e.gather = function (e, t, n) {
          void 0 === n && (n = 0), f.assertArgumentsAreTensors({ x: e, indices: t }, "gather"), f.assert("int32" === t.dtype, "Indices must be of dtype `int32`");var r = g.parseAxisParam(n, e.shape);return p.ENV.engine.runKernel(function (n) {
            return n.gather(e, t, r[0]);
          }, { x: e, indices: t });
        }, e.pad1d = function (t, n, r) {
          return void 0 === r && (r = 0), f.assert(2 === n.length, "Invalid number of paddings. Must be length of 2."), e.pad(t, [n], r);
        }, e.pad2d = function (t, n, r) {
          return void 0 === r && (r = 0), f.assert(2 === n.length && 2 === n[0].length && 2 === n[1].length, "Invalid number of paddings. Must be length of 2 each."), e.pad(t, n, r);
        }, e.pad3d = function (t, n, r) {
          return void 0 === r && (r = 0), f.assert(3 === n.length && 2 === n[0].length && 2 === n[1].length && 2 === n[2].length, "Invalid number of paddings. Must be length of 2 each."), e.pad(t, n, r);
        }, e.pad4d = function (t, n, r) {
          return void 0 === r && (r = 0), f.assert(4 === n.length && 2 === n[0].length && 2 === n[1].length && 2 === n[2].length && 2 === n[3].length, "Invalid number of paddings. Must be length of 2 each."), e.pad(t, n, r);
        }, e.pad = function (e, t, n) {
          if (void 0 === n && (n = 0), f.assertArgumentsAreTensors({ x: e }, "pad"), 0 === e.rank) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var r = t.map(function (e) {
            return e[0];
          });return p.ENV.engine.runKernel(function (r) {
            return r.pad(e, t, n);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.slice(r, e.shape);
              } };
          });
        }, e.stack = function (e, t) {
          if (void 0 === t && (t = 0), f.assertArgumentsAreTensors({ tensors: e }, "stack"), f.assert(e.length >= 1, "Pass at least one tensor to tf.stack"), 1 === e.length) return e[0].expandDims(t);var n = e[0].rank,
              r = e[0].shape,
              i = e[0].dtype;f.assert(t <= n, "Axis must be <= rank of the tensor"), e.forEach(function (e) {
            f.assertShapesMatch(r, e.shape, "All tensors passed to stack must have matching shapes");
          }), e.forEach(function (e) {
            f.assert(i === e.dtype, "All tensors passed to stack must have matching dtypes");
          });var a = e.map(function (e) {
            return e.expandDims(t);
          });return m.ConcatOps.concat(a, t);
        }, e.split = function (e, t, n) {
          void 0 === n && (n = 0), f.assertArgumentsAreTensors({ x: e }, "split"), n = g.parseAxisParam(n, e.shape)[0];var r;"number" == typeof t ? (f.assert(e.shape[n] % t == 0, "Number of splits must evenly divide the axis."), r = Array(t).fill(e.shape[n] / t)) : (f.assert(e.shape[n] === t.reduce(function (e, t) {
            return e + t;
          }), "The sum of sizes must match the size of the axis dimension."), r = t);var i = Array(e.rank).fill(0),
              a = e.shape.slice();return r.map(function (t) {
            a[n] = t;var r = e.slice(i, a);return i[n] += t, r;
          });
        }, e.expandDims = function (t, n) {
          void 0 === n && (n = 0), f.assertArgumentsAreTensors({ x: t }, "expandDims"), f.assert(n <= t.rank, "Axis must be <= rank of the tensor");var r = t.shape.slice();return r.splice(n, 0, 1), e.reshape(t, r);
        }, e.linspace = function (t, n, i) {
          if (0 === i) throw new Error("Cannot request zero samples");var a = (n - t) / (i - 1),
              o = r(i, "float32");o[0] = t;for (var s = 1; s < o.length; s++) {
            o[s] = o[s - 1] + a;
          }return e.tensor1d(o, "float32");
        }, e.range = function (t, n, i, a) {
          if (void 0 === i && (i = 1), void 0 === a && (a = "float32"), 0 === i) throw new Error("Cannot have a step of zero");var o = t === n,
              s = t < n && i < 0,
              u = n < t && i > 1;if (o || s || u) return e.zeros([0], a);var l = r(Math.abs(Math.ceil((n - t) / i)), a);n < t && 1 === i && (i = -1), l[0] = t;for (var c = 1; c < l.length; c++) {
            l[c] = l[c - 1] + i;
          }return e.tensor1d(l, a);
        }, e.buffer = function (e, t, n) {
          return void 0 === t && (t = "float32"), new h.TensorBuffer(e, t, n);
        }, e.print = function (e, t) {
          void 0 === t && (t = !1), console.log(d.tensorToString(e, t));
        }, s([c.doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor", null), s([c.doc({ heading: "Tensors", subheading: "Creation" })], e, "scalar", null), s([c.doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor1d", null), s([c.doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor2d", null), s([c.doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor3d", null), s([c.doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor4d", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "ones", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "zeros", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "fill", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "onesLike", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "zerosLike", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "clone", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "randomNormal", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "truncatedNormal", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "randomUniform", null), s([v.operation], e, "rand", null), s([v.operation], e, "multinomial", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "oneHot", null), s([c.doc({ heading: "Tensors", subheading: "Creation" }), v.operation], e, "fromPixels", null), s([c.doc({ heading: "Visualization" })], e, "toPixels", null), s([c.doc({ heading: "Tensors", subheading: "Transformations" }), v.operation], e, "reshape", null), s([c.doc({ heading: "Tensors", subheading: "Transformations" })], e, "squeeze", null), s([c.doc({ heading: "Tensors", subheading: "Transformations" }), v.operation], e, "cast", null), s([c.doc({ heading: "Tensors", subheading: "Slicing and Joining" }), v.operation], e, "tile", null), s([c.doc({ heading: "Tensors", subheading: "Slicing and Joining" }), v.operation], e, "gather", null), s([c.doc({ heading: "Tensors", subheading: "Transformations" }), v.operation], e, "pad", null), s([c.doc({ heading: "Tensors", subheading: "Slicing and Joining" }), v.operation], e, "stack", null), s([c.doc({ heading: "Tensors", subheading: "Slicing and Joining" }), v.operation], e, "split", null), s([c.doc({ heading: "Tensors", subheading: "Transformations" }), v.operation], e, "expandDims", null), s([v.operation, c.doc({ heading: "Tensors", subheading: "Creation" })], e, "linspace", null), s([v.operation, c.doc({ heading: "Tensors", subheading: "Creation" })], e, "range", null), s([c.doc({ heading: "Tensors", subheading: "Creation" })], e, "buffer", null), s([c.doc({ heading: "Tensors", subheading: "Creation" })], e, "print", null), e;
      }();n.ArrayOps = b;
    }, { "../doc": 3, "../environment": 5, "../tensor": 89, "../tensor_util": 90, "../util": 95, "./axis_util": 47, "./concat": 52, "./operation": 65, "./rand": 68 }], 47: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        for (var n = 0; n < e.length; ++n) {
          if (e[e.length - n - 1] !== t - 1 - n) return !1;
        }return !0;
      }function i(e, t, n) {
        for (var r = e.length + t.length, i = [], a = 0, o = 0, s = 0; s < r; s++) {
          -1 === n.indexOf(s) ? i.push(e[a++]) : i.push(t[o++]);
        }return i;
      }Object.defineProperty(n, "__esModule", { value: !0 });var a = e("../util");n.axesAreInnerMostDims = r, n.combineLocations = i, n.computeOutAndReduceShapes = function (e, t) {
        for (var n = [], r = e.length, i = 0; i < r; i++) {
          -1 === t.indexOf(i) && n.push(e[i]);
        }return [n, t.map(function (t) {
          return e[t];
        })];
      }, n.expandShapeToKeepDim = function (e, t) {
        return i(e, t.map(function (e) {
          return 1;
        }), t);
      }, n.parseAxisParam = function (e, t) {
        var n = t.length;return e = null == e ? t.map(function (e, t) {
          return t;
        }) : [].concat(e), a.assert(e.every(function (e) {
          return e >= -n && e < n;
        }), "All values in axis param must be in range [-" + n + ", " + n + ") but got axis " + e), a.assert(e.every(function (e) {
          return a.isInt(e);
        }), "All values in axis param must be integers but got axis " + e), e.map(function (e) {
          return e < 0 ? n + e : e;
        });
      }, n.assertAxesAreInnerMostDims = function (e, t, n) {
        a.assert(r(t, n), e + " supports only inner-most axes for now. Got axes " + t + " and rank-" + n + " input.");
      }, n.getAxesPermutation = function (e, t) {
        if (r(e, t)) return null;for (var n = [], i = 0; i < t; ++i) {
          -1 === e.indexOf(i) && n.push(i);
        }return e.forEach(function (e) {
          return n.push(e);
        }), n;
      }, n.getUndoAxesPermutation = function (e) {
        return e.map(function (e, t) {
          return [t, e];
        }).sort(function (e, t) {
          return e[1] - t[1];
        }).map(function (e) {
          return e[0];
        });
      }, n.getInnerMostAxes = function (e, t) {
        for (var n = [], r = t - e; r < t; ++r) {
          n.push(r);
        }return n;
      };
    }, { "../util": 95 }], 48: [function (e, t, n) {
      "use strict";
      function r(e) {
        return null == e ? null : 0 === e.rank ? e.as1D() : 1 === e.rank ? e : 2 === e.rank ? e.as4D(1, 1, e.shape[0], e.shape[1]) : 3 === e.rank ? e.as4D(1, e.shape[0], e.shape[1], e.shape[2]) : e;
      }var i = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var a = e("../doc"),
          o = e("../environment"),
          s = e("../util"),
          u = e("./array_ops"),
          l = e("./broadcast_util"),
          c = e("./operation"),
          p = e("./ops"),
          h = function () {
        function e() {}return e.batchNormalization2d = function (t, n, r, i, a, o) {
          return void 0 === i && (i = .001), s.assert(2 === t.rank, "Error in batchNormalization3D: x must be rank 3 but got rank " + t.rank + "."), s.assert(2 === n.rank || 1 === n.rank, "Error in batchNormalization2D: mean must be rank 2 or rank 1 but got rank " + n.rank + "."), s.assert(2 === r.rank || 1 === r.rank, "Error in batchNormalization2D: variance must be rank 2 or rank 1 but got rank " + r.rank + "."), null != a && s.assert(2 === a.rank || 1 === a.rank, "Error in batchNormalization2D: scale must be rank 2 or rank 1 but got rank " + a.rank + "."), null != o && s.assert(2 === o.rank || 1 === o.rank, "Error in batchNormalization2D: offset must be rank 2 or rank 1 but got rank " + o.rank + "."), e.batchNormalization(t, n, r, i, a, o);
        }, e.batchNormalization3d = function (t, n, r, i, a, o) {
          return void 0 === i && (i = .001), s.assert(3 === t.rank, "Error in batchNormalization3D: x must be rank 3 but got rank " + t.rank + "."), s.assert(3 === n.rank || 1 === n.rank, "Error in batchNormalization3D: mean must be rank 3 or rank 1 but got rank " + n.rank + "."), s.assert(3 === r.rank || 1 === r.rank, "Error in batchNormalization3D: variance must be rank 3 or rank 1 but got rank " + r.rank + "."), null != a && s.assert(3 === a.rank || 1 === a.rank, "Error in batchNormalization3D: scale must be rank 3 or rank 1 but got rank " + a.rank + "."), null != o && s.assert(3 === o.rank || 1 === o.rank, "Error in batchNormalization3D: offset must be rank 3 or rank 1 but got rank " + o.rank + "."), e.batchNormalization(t, n, r, i, a, o);
        }, e.batchNormalization4d = function (t, n, r, i, a, o) {
          return void 0 === i && (i = .001), s.assert(4 === t.rank, "Error in batchNormalization4D: x must be rank 4 but got rank " + t.rank + "."), s.assert(4 === n.rank || 1 === n.rank, "Error in batchNormalization4D: mean must be rank 4 or rank 1 but got rank " + n.rank + "."), s.assert(4 === r.rank || 1 === r.rank, "Error in batchNormalization4D: variance must be rank 4 or rank 1 but got rank " + r.rank + "."), null != a && s.assert(4 === a.rank || 1 === a.rank, "Error in batchNormalization4D: scale must be rank 4 or rank 1 but got rank " + a.rank + "."), null != o && s.assert(4 === o.rank || 1 === o.rank, "Error in batchNormalization4D: offset must be rank 4 or rank 1 but got rank " + o.rank + "."), e.batchNormalization(t, n, r, i, a, o);
        }, e.batchNormalization = function (e, t, n, i, a, c) {
          void 0 === i && (i = .001), s.assertArgumentsAreTensors({ x: e, mean: t, variance: n }, "batchNormalization"), null != a && s.assertArgumentsAreTensors({ scale: a }, "batchNormalization"), null != c && s.assertArgumentsAreTensors({ offset: c }, "batchNormalization"), s.assert(t.rank === n.rank, "Batch normalization gradient requires mean and variance to have equal ranks."), s.assert(null == c || t.rank === c.rank, "Batch normalization gradient requires mean and offset to have equal ranks."), s.assert(null == a || t.rank === a.rank, "Batch normalization gradient requires mean and scale to have equal ranks.");var h;h = 0 === e.rank || 1 === e.rank ? e.as4D(1, 1, 1, e.size) : 2 === e.rank ? e.as4D(1, 1, e.shape[0], e.shape[1]) : 3 === e.rank ? e.as4D(1, e.shape[0], e.shape[1], e.shape[2]) : e;return o.ENV.engine.runKernel(function (e) {
            return e.batchNormalization(h, r(t), r(n), i, r(a), r(c));
          }, { x: e, mean: t, variance: n, scale: a, offset: c }, function (r) {
            var o = null == a ? u.ArrayOps.scalar(1) : a,
                s = l.getReductionAxes(t.shape, h.shape),
                c = [];if (1 === t.rank) {
              for (var d = 0; d < h.shape.length - 1; ++d) {
                c.push(h.shape[d]);
              }c.push(1);
            }var f = e.sub(t),
                g = r.mul(o),
                m = p.rsqrt(n.add(u.ArrayOps.scalar(i))),
                v = m.mul(m).mul(m).mul(u.ArrayOps.scalar(-.5));return { x: function x() {
                return 1 === t.rank ? r.mul(u.ArrayOps.tile(m.as4D(1, 1, 1, t.shape[0]), c)).mul(o).reshape(e.shape) : r.mul(m).mul(o).reshape(e.shape);
              }, mean: function mean() {
                var e = m.mul(u.ArrayOps.scalar(-1)).mul(g);return 1 === t.rank && (e = e.sum(s)), e.reshape(t.shape);
              }, variance: function variance() {
                var e = v.mul(f).mul(g);return 1 === t.rank && (e = e.sum(s)), e.reshape(t.shape);
              }, scale: function scale() {
                var e = f.mul(m),
                    n = r.mul(e);return 1 === t.rank && (n = n.sum(s)), n.reshape(t.shape);
              }, offset: function offset() {
                var e = r;return 1 === t.rank && (e = e.sum(s)), e.reshape(t.shape);
              } };
          }).reshape(e.shape);
        }, i([c.operation], e, "batchNormalization2d", null), i([c.operation], e, "batchNormalization3d", null), i([c.operation], e, "batchNormalization4d", null), i([a.doc({ heading: "Operations", subheading: "Normalization" })], e, "batchNormalization", null), e;
      }();n.BatchNormOps = h;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./array_ops": 46, "./broadcast_util": 50, "./operation": 65, "./ops": 66 }], 49: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../types"),
          s = e("../util"),
          u = e("./broadcast_util"),
          l = e("./operation"),
          c = e("./ops"),
          p = function () {
        function e() {}return e.add = function (e, t) {
          s.assertArgumentsAreTensors({ a: e, b: t }, "add"), s.assertTypesMatch(e, t);var n = u.assertAndGetBroadcastShape(e.shape, t.shape);return a.ENV.engine.runKernel(function (n) {
            return n.add(e, t);
          }, { a: e, b: t }, function (r) {
            return { a: function a() {
                var t = r,
                    i = u.getReductionAxes(e.shape, n);return i.length > 0 && (t = t.sum(i)), t.reshape(e.shape);
              }, b: function b() {
                var e = r,
                    i = u.getReductionAxes(t.shape, n);return i.length > 0 && (e = e.sum(i)), e.reshape(t.shape);
              } };
          });
        }, e.addStrict = function (e, t) {
          return s.assertShapesMatch(e.shape, t.shape, "Error in addStrict: "), e.add(t);
        }, e.sub = function (e, t) {
          s.assertArgumentsAreTensors({ a: e, b: t }, "sub"), s.assertTypesMatch(e, t);var n = u.assertAndGetBroadcastShape(e.shape, t.shape);return a.ENV.engine.runKernel(function (n) {
            return n.subtract(e, t);
          }, { a: e, b: t }, function (r) {
            return { a: function a() {
                var t = r,
                    i = u.getReductionAxes(e.shape, n);return i.length > 0 && (t = t.sum(i)), t.reshape(e.shape);
              }, b: function b() {
                var e = r,
                    i = u.getReductionAxes(t.shape, n);return i.length > 0 && (e = e.sum(i)), e.neg().reshape(t.shape);
              } };
          });
        }, e.subStrict = function (e, t) {
          return s.assertShapesMatch(e.shape, t.shape, "Error in subStrict: "), e.sub(t);
        }, e.pow = function (e, t) {
          s.assertArgumentsAreTensors({ base: e, exp: t }, "pow");var n = u.assertAndGetBroadcastShape(e.shape, t.shape);e = e.cast(o.upcastType(e.dtype, t.dtype)), t = t.cast(o.upcastType(e.dtype, t.dtype));return a.ENV.engine.runKernel(function (n, r) {
            return r(n.pow(e, t));
          }, { base: e, exp: t }, function (r, i) {
            var a = i[0];return { base: function base() {
                var i = r.mul(t.toFloat().mul(a.div(e))),
                    o = u.getReductionAxes(e.shape, n);return o.length > 0 && (i = i.sum(o)), i.reshape(e.shape);
              }, exp: function exp() {
                var i = r.mul(a.mul(e.log()).toFloat()),
                    o = u.getReductionAxes(t.shape, n);return o.length > 0 && (i = i.sum(o)), i.reshape(t.shape);
              } };
          });
        }, e.powStrict = function (e, t) {
          return s.assertShapesMatch(e.shape, t.shape, "Error in powStrict: "), e.pow(t);
        }, e.mul = function (e, t) {
          s.assertArgumentsAreTensors({ a: e, b: t }, "mul"), s.assertTypesMatch(e, t);var n = u.assertAndGetBroadcastShape(e.shape, t.shape);return a.ENV.engine.runKernel(function (n) {
            return n.multiply(e, t);
          }, { a: e, b: t }, function (r) {
            return { a: function a() {
                var i = r.mul(t.toFloat()),
                    a = u.getReductionAxes(e.shape, n);return a.length > 0 ? i.sum(a).reshape(e.shape) : i;
              }, b: function b() {
                var i = r.mul(e.toFloat()),
                    a = u.getReductionAxes(t.shape, n);return a.length > 0 ? i.sum(a).reshape(t.shape) : i;
              } };
          });
        }, e.mulStrict = function (e, t) {
          return s.assertShapesMatch(e.shape, t.shape, "Error in multiplyStrict: "), e.mul(t);
        }, e.div = function (e, t) {
          s.assertArgumentsAreTensors({ a: e, b: t }, "div"), s.assertTypesMatch(e, t);var n = u.assertAndGetBroadcastShape(e.shape, t.shape);return a.ENV.engine.runKernel(function (n) {
            return n.divide(e, t);
          }, { a: e, b: t }, function (r) {
            return { a: function a() {
                var i = r.div(t.toFloat()),
                    a = u.getReductionAxes(e.shape, n);return a.length > 0 ? i.sum(a).reshape(e.shape) : i;
              }, b: function b() {
                var i = r.mul(e.toFloat()),
                    a = u.getReductionAxes(t.shape, n);a.length > 0 && (i = i.sum(a).reshape(t.shape));var o = t.square();return i.div(o.toFloat()).neg();
              } };
          });
        }, e.divStrict = function (e, t) {
          return s.assertShapesMatch(e.shape, t.shape, "Error in divideStrict: "), e.div(t);
        }, e.mod = function (e, t) {
          s.assertArgumentsAreTensors({ a: e, b: t }, "mod"), s.assertTypesMatch(e, t);var n = u.assertAndGetBroadcastShape(e.shape, t.shape);return a.ENV.engine.runKernel(function (n) {
            return n.mod(e, t);
          }, { a: e, b: t }, function (r) {
            return { a: function a() {
                var t = u.getReductionAxes(e.shape, n);return t.length > 0 ? r.sum(t).reshape(e.shape) : r;
              }, b: function b() {
                var i = r.mul(e.div(t).floor().neg()),
                    a = u.getReductionAxes(t.shape, n);return a.length > 0 ? i.sum(a).reshape(t.shape) : i;
              } };
          });
        }, e.modStrict = function (e, t) {
          return s.assertShapesMatch(e.shape, t.shape, "Error in modStrict: "), e.mod(t);
        }, e.minimum = function (e, t) {
          s.assertArgumentsAreTensors({ a: e, b: t }, "minimum"), s.assertTypesMatch(e, t), "bool" === e.dtype && (e = e.toInt()), "bool" === t.dtype && (t = t.toInt()), u.assertAndGetBroadcastShape(e.shape, t.shape);return a.ENV.engine.runKernel(function (n) {
            return n.minimum(e, t);
          }, { a: e, b: t }, function (n) {
            return { a: function a() {
                return n.mul(e.lessEqual(t).toFloat());
              }, b: function b() {
                return n.mul(e.greater(t).toFloat());
              } };
          });
        }, e.minimumStrict = function (e, t) {
          return s.assertShapesMatch(e.shape, t.shape, "Error in minimumStrict: "), e.minimum(t);
        }, e.maximum = function (e, t) {
          s.assertArgumentsAreTensors({ a: e, b: t }, "maximum"), s.assertTypesMatch(e, t), "bool" === e.dtype && (e = e.toInt()), "bool" === t.dtype && (t = t.toInt()), u.assertAndGetBroadcastShape(e.shape, t.shape);return a.ENV.engine.runKernel(function (n) {
            return n.maximum(e, t);
          }, { a: e, b: t }, function (n) {
            return { a: function a() {
                return n.mul(e.greaterEqual(t).toFloat());
              }, b: function b() {
                return n.mul(e.less(t).toFloat());
              } };
          });
        }, e.maximumStrict = function (e, t) {
          return s.assertShapesMatch(e.shape, t.shape, "Error in minimumStrict: "), e.maximum(t);
        }, e.squaredDifference = function (e, t) {
          s.assertArgumentsAreTensors({ a: e, b: t }, "squaredDifference"), s.assertTypesMatch(e, t), u.assertAndGetBroadcastShape(e.shape, t.shape);return a.ENV.engine.runKernel(function (n) {
            return n.squaredDifference(e, t);
          }, { a: e, b: t }, function (n) {
            var r = c.scalar(2);return { a: function a() {
                return n.mul(e.sub(t).mul(r));
              }, b: function b() {
                return n.mul(t.sub(e).mul(r));
              } };
          });
        }, e.squaredDifferenceStrict = function (e, t) {
          return s.assertShapesMatch(e.shape, t.shape, "Error in squaredDifferenceStrict: "), e.squaredDifference(t);
        }, e.atan2 = function (t, n) {
          s.assertArgumentsAreTensors({ a: t, b: n }, "atan2"), s.assertTypesMatch(t, n);var r = u.assertAndGetBroadcastShape(t.shape, n.shape);return a.ENV.engine.runKernel(function (e) {
            return e.atan2(t, n);
          }, { a: t, b: n }, function (i) {
            return { a: function a() {
                var a = e.add(c.square(t), c.square(n)),
                    o = i.mul(n.div(a)),
                    s = u.getReductionAxes(t.shape, r);return s.length > 0 && (o = o.sum(s)), o.reshape(t.shape);
              }, b: function b() {
                var a = e.add(c.square(t), c.square(n)),
                    o = c.neg(i.mul(t.div(a))),
                    s = u.getReductionAxes(n.shape, r);return s.length > 0 && (o = o.sum(s)), o.reshape(n.shape);
              } };
          });
        }, r([i.doc({ heading: "Operations", subheading: "Arithmetic" }), l.operation], e, "add", null), r([l.operation], e, "addStrict", null), r([i.doc({ heading: "Operations", subheading: "Arithmetic" }), l.operation], e, "sub", null), r([l.operation], e, "subStrict", null), r([i.doc({ heading: "Operations", subheading: "Arithmetic" }), l.operation], e, "pow", null), r([l.operation], e, "powStrict", null), r([i.doc({ heading: "Operations", subheading: "Arithmetic" }), l.operation], e, "mul", null), r([l.operation], e, "mulStrict", null), r([i.doc({ heading: "Operations", subheading: "Arithmetic" }), l.operation], e, "div", null), r([l.operation], e, "divStrict", null), r([i.doc({ heading: "Operations", subheading: "Arithmetic" }), l.operation], e, "mod", null), r([l.operation], e, "modStrict", null), r([i.doc({ heading: "Operations", subheading: "Arithmetic" }), l.operation], e, "minimum", null), r([l.operation], e, "minimumStrict", null), r([i.doc({ heading: "Operations", subheading: "Arithmetic" }), l.operation], e, "maximum", null), r([l.operation], e, "maximumStrict", null), r([i.doc({ heading: "Operations", subheading: "Arithmetic" }), l.operation], e, "squaredDifference", null), r([l.operation], e, "squaredDifferenceStrict", null), r([l.operation], e, "atan2", null), e;
      }();n.BinaryOps = p;
    }, { "../doc": 3, "../environment": 5, "../types": 94, "../util": 95, "./broadcast_util": 50, "./operation": 65, "./ops": 66 }], 50: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 }), n.getBroadcastDims = function (e, t) {
        for (var n = e.length, r = [], i = 0; i < n; i++) {
          var a = n - 1 - i,
              o = e[a] || 1;(t[t.length - 1 - i] || 1) > 1 && 1 === o && r.unshift(a);
        }return r;
      }, n.getReductionAxes = function (e, t) {
        for (var n = [], r = 0; r < t.length; r++) {
          var i = e[e.length - r - 1],
              a = t.length - r - 1,
              o = t[a];(null == i || 1 === i && o > 1) && n.unshift(a);
        }return n;
      }, n.broadcastDimsAreOuter = function (e) {
        for (var t = 0; t < e.length; t++) {
          if (e[t] !== t) return !1;
        }return !0;
      }, n.assertAndGetBroadcastShape = function (e, t) {
        for (var n = [], r = "Operands could not be broadcast together with shapes " + e + " and " + t + ".", i = Math.max(e.length, t.length), a = 0; a < i; a++) {
          var o = e[e.length - a - 1] || 1,
              s = t[t.length - a - 1] || 1;if (o > 1 && s > 1 && o !== s) throw Error(r);n.unshift(Math.max(o, s));
        }return n;
      };
    }, {}], 51: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../util"),
          s = e("./broadcast_util"),
          u = e("./operation"),
          l = function () {
        function e() {}return e.notEqual = function (e, t) {
          return o.assertArgumentsAreTensors({ a: e, b: t }, "notEqual"), o.assertTypesMatch(e, t), s.assertAndGetBroadcastShape(e.shape, t.shape), a.ENV.engine.runKernel(function (n) {
            return n.notEqual(e, t);
          }, { a: e, b: t });
        }, e.notEqualStrict = function (e, t) {
          return o.assertShapesMatch(e.shape, t.shape, "Error in notEqualStrict: "), e.notEqual(t);
        }, e.less = function (e, t) {
          return o.assertArgumentsAreTensors({ a: e, b: t }, "less"), o.assertTypesMatch(e, t), s.assertAndGetBroadcastShape(e.shape, t.shape), a.ENV.engine.runKernel(function (n) {
            return n.less(e, t);
          }, { a: e, b: t });
        }, e.lessStrict = function (e, t) {
          return o.assertShapesMatch(e.shape, t.shape, "Error in lessStrict: "), e.less(t);
        }, e.equal = function (e, t) {
          return o.assertArgumentsAreTensors({ a: e, b: t }, "equal"), o.assertTypesMatch(e, t), s.assertAndGetBroadcastShape(e.shape, t.shape), a.ENV.engine.runKernel(function (n) {
            return n.equal(e, t);
          }, { a: e, b: t });
        }, e.equalStrict = function (e, t) {
          return o.assertShapesMatch(e.shape, t.shape, "Error in equalStrict: "), e.equal(t);
        }, e.lessEqual = function (e, t) {
          return o.assertArgumentsAreTensors({ a: e, b: t }, "lessEqual"), o.assertTypesMatch(e, t), s.assertAndGetBroadcastShape(e.shape, t.shape), a.ENV.engine.runKernel(function (n) {
            return n.lessEqual(e, t);
          }, { a: e, b: t });
        }, e.lessEqualStrict = function (e, t) {
          return o.assertShapesMatch(e.shape, t.shape, "Error in lessEqualStrict: "), e.lessEqual(t);
        }, e.greater = function (e, t) {
          return o.assertArgumentsAreTensors({ a: e, b: t }, "greater"), o.assertTypesMatch(e, t), s.assertAndGetBroadcastShape(e.shape, t.shape), a.ENV.engine.runKernel(function (n) {
            return n.greater(e, t);
          }, { a: e, b: t });
        }, e.greaterStrict = function (e, t) {
          return o.assertShapesMatch(e.shape, t.shape, "Error in greaterStrict: "), e.greater(t);
        }, e.greaterEqual = function (e, t) {
          return o.assertArgumentsAreTensors({ a: e, b: t }, "greaterEqual"), o.assertTypesMatch(e, t), s.assertAndGetBroadcastShape(e.shape, t.shape), a.ENV.engine.runKernel(function (n) {
            return n.greaterEqual(e, t);
          }, { a: e, b: t });
        }, e.greaterEqualStrict = function (e, t) {
          return o.assertShapesMatch(e.shape, t.shape, "Error in greaterEqualStrict: "), e.greaterEqual(t);
        }, r([i.doc({ heading: "Operations", subheading: "Logical" }), u.operation], e, "notEqual", null), r([u.operation], e, "notEqualStrict", null), r([i.doc({ heading: "Operations", subheading: "Logical" }), u.operation], e, "less", null), r([u.operation], e, "lessStrict", null), r([i.doc({ heading: "Operations", subheading: "Logical" }), u.operation], e, "equal", null), r([u.operation], e, "equalStrict", null), r([i.doc({ heading: "Operations", subheading: "Logical" }), u.operation], e, "lessEqual", null), r([u.operation], e, "lessEqualStrict", null), r([i.doc({ heading: "Operations", subheading: "Logical" }), u.operation], e, "greater", null), r([u.operation], e, "greaterStrict", null), r([i.doc({ heading: "Operations", subheading: "Logical" }), u.operation], e, "greaterEqual", null), r([u.operation], e, "greaterEqualStrict", null), e;
      }();n.CompareOps = l;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./broadcast_util": 50, "./operation": 65 }], 52: [function (e, t, n) {
      "use strict";
      function r(e, t, n) {
        l.assertParams(e.shape, t.shape, n);var r = l.computeOutShape(e.shape, t.shape, n),
            i = e.as2D(-1, s.sizeFromShape(e.shape.slice(n))),
            a = t.as2D(-1, s.sizeFromShape(t.shape.slice(n))),
            u = l.computeGradientSliceShapes(i.shape, a.shape),
            c = u.aBegin,
            p = u.aSize,
            h = u.bBegin,
            d = u.bSize;return o.ENV.engine.runKernel(function (e) {
          return e.concat(i, a);
        }, { a: i, b: a }, function (e) {
          return { a: function a() {
              return e.slice(c, p);
            }, b: function b() {
              return e.slice(h, d);
            } };
        }).reshape(r);
      }var i = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var a = e("../doc"),
          o = e("../environment"),
          s = e("../util"),
          u = e("./axis_util"),
          l = e("./concat_util"),
          c = e("./operation"),
          p = function () {
        function e() {}return e.concat1d = function (t) {
          return e.concat(t, 0);
        }, e.concat2d = function (t, n) {
          return e.concat(t, n);
        }, e.concat3d = function (t, n) {
          return e.concat(t, n);
        }, e.concat4d = function (t, n) {
          return e.concat(t, n);
        }, e.concat = function (e, t) {
          void 0 === t && (t = 0), s.assert(e.length >= 1, "Pass at least one tensor to concat"), s.assertArgumentsAreTensors({ tensors: e }, "concat");var n = e[0];if (1 === e.length) return n;for (var i = u.parseAxisParam(t, n.shape), a = 1; a < e.length; ++a) {
            n = r(n, e[a], i[0]);
          }return n;
        }, i([a.doc({ heading: "Tensors", subheading: "Slicing and Joining" }), c.operation], e, "concat", null), e;
      }();n.ConcatOps = p;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./axis_util": 47, "./concat_util": 53, "./operation": 65 }], 53: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("../util");n.assertParams = function (e, t, n) {
        var i = e.length,
            a = t.length;r.assert(e.length === t.length, "Error in concat" + i + "D: rank of x1 (" + i + ") and x2 (" + a + ") must be the same."), r.assert(n >= 0 && n < i, "Error in concat" + i + "D: axis must be between 0 and " + (i - 1) + ".");for (var o = 0; o < i; o++) {
          r.assert(o === n || e[o] === t[o], "Error in concat" + i + "D: Shape (" + e + ") does not match (" + t + ") along the non-concatenated axis " + o + ".");
        }
      }, n.computeOutShape1D = function (e, t) {
        r.assert(1 === e.length && 1 === t.length, "x1 and x2 should be 1d array.");var n = e.slice();return n[0] += t[0], n;
      }, n.computeOutShape = function (e, t, n) {
        r.assert(e.length === t.length, "x1 and x2 should have the same rank.");var i = e.slice();return i[n] += t[n], i;
      }, n.computeGradientSliceShapes = function (e, t) {
        return { aBegin: [0, 0], aSize: e, bBegin: [0, e[1]], bSize: t };
      };
    }, { "../util": 95 }], 54: [function (e, t, n) {
      "use strict";
      function r(e) {
        return "number" == typeof e ? [e, e] : e;
      }function i(e) {
        var t = r(e),
            n = t[0],
            i = t[1];return 1 === n && 1 === i;
      }function a(e, t) {
        return i(e) || i(t);
      }var o = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var s = e("../doc"),
          u = e("../environment"),
          l = e("../util"),
          c = e("./conv_util"),
          p = e("./operation"),
          h = function () {
        function e() {}return e.conv1d = function (t, n, r, i, o, s, u) {
          void 0 === o && (o = "NWC"), void 0 === s && (s = 1), l.assertArgumentsAreTensors({ x: t, filter: n }, "conv1d");var c = t,
              p = !1;2 === t.rank && (p = !0, c = t.as3D(1, t.shape[0], t.shape[1])), l.assert(3 === c.rank, "Error in conv1d: input must be rank 3, but got rank " + c.rank + "."), l.assert(3 === n.rank, "Error in conv1d: filter must be rank 3, but got rank " + n.rank + "."), null != u && l.assert(l.isInt(i), "Error in conv1d: pad must be an integer when using, dimRoundingMode " + u + " but got pad " + i + "."), l.assert(c.shape[2] === n.shape[1], "Error in conv1d: depth of input (" + c.shape[2] + ") must match  input depth for filter " + n.shape[1] + "."), l.assert(a(r, s), "Error in conv1D: Either stride or dilation must be 1.Got stride " + r + " and dilation '" + s + "'"), l.assert("NWC" === o, "Error in conv1d: got dataFormat of " + o + " but only NWC is currently supported.");var h = n.as4D(1, n.shape[0], n.shape[1], n.shape[2]),
              d = c.as4D(c.shape[0], 1, c.shape[1], c.shape[2]),
              f = [1, r],
              g = [1, s],
              m = e.conv2d(d, h, f, i, "NHWC", g, u);return p ? m.as2D(m.shape[2], m.shape[3]) : m.as3D(m.shape[0], m.shape[2], m.shape[3]);
        }, e.conv2d = function (t, n, r, o, s, p, h) {
          void 0 === s && (s = "NHWC"), void 0 === p && (p = [1, 1]), l.assertArgumentsAreTensors({ x: t, filter: n }, "conv2d");var d = t,
              f = !1;3 === t.rank && (f = !0, d = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), l.assert(4 === d.rank, "Error in conv2d: input must be rank 4, but got rank " + d.rank + "."), l.assert(4 === n.rank, "Error in conv2d: filter must be rank 4, but got rank " + n.rank + "."), null != h && l.assert(l.isInt(o), "Error in conv2d: pad must be an integer when using, dimRoundingMode " + h + " but got pad " + o + "."), l.assert(d.shape[3] === n.shape[2], "Error in conv2d: depth of input (" + d.shape[3] + ") must match  input depth for filter " + n.shape[2] + "."), l.assert(a(r, p), "Error in conv2D: Either strides or dilations must be 1.Got strides " + r + " and dilations '" + p + "'"), l.assert("NHWC" === s, "Error in conv2d: got dataFormat of " + s + " but only NHWC is currently supported.");var g = c.computeConv2DInfo(d.shape, n.shape, r, p, o, h),
              m = u.ENV.engine.runKernel(function (e) {
            return e.conv2d(d, n, g);
          }, { x: d, filter: n }, function (t) {
            return l.assert(i(p), "Error in gradient of conv2D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '" + p + "'"), { x: function x() {
                return e.conv2dDerInput(d.shape, t, n, r, o);
              }, filter: function filter() {
                return e.conv2dDerFilter(d, t, n.shape, r, o);
              } };
          });return f ? m.as3D(m.shape[1], m.shape[2], m.shape[3]) : m;
        }, e.conv2dDerInput = function (e, t, n, r, i, a) {
          l.assertArgumentsAreTensors({ dy: t, filter: n }, "conv2dDerInput"), l.assert(e.length === t.rank, "Length of inShape (" + e.length + ") and rank of dy (" + t.rank + ") must match");var o = e,
              s = t,
              p = !1;3 === t.rank && (p = !0, s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]), o = [1, e[0], e[1], e[2]]);var h = o[3],
              d = s.shape[3];l.assert(4 === o.length, "Error in conv2dDerInput: inShape must be length 4, but got length " + o.length + "."), l.assert(4 === s.rank, "Error in conv2dDerInput: dy must be rank 4, but got rank " + s.rank), l.assert(4 === n.rank, "Error in conv2dDerInput: filter must be rank 4, but got rank " + n.rank), l.assert(h === n.shape[2], "Error in conv2dDerInput: depth of input (" + h + ") must match input depth for filter " + n.shape[2] + "."), l.assert(d === n.shape[3], "Error in conv2dDerInput: depth of output (" + d + ") mustmatch output depth for filter " + n.shape[3] + "."), null != a && l.assert(l.isInt(i), "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " + a + " but got pad " + i + ".");var f = c.computeConv2DInfo(o, n.shape, r, 1, i, a),
              g = u.ENV.engine.runKernel(function (e) {
            return e.conv2dDerInput(s, n, f);
          }, { dy4D: s });return p ? g.as3D(g.shape[1], g.shape[2], g.shape[3]) : g;
        }, e.conv2dDerFilter = function (e, t, n, r, i, a) {
          l.assertArgumentsAreTensors({ x: e, dy: t }, "conv2dDerFilter");var o = e;3 === e.rank && (o = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));var s = t;3 === s.rank && (s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), l.assert(4 === o.rank, "Error in conv2dDerFilter: input must be rank 4, but got shape " + o.shape + "."), l.assert(4 === s.rank, "Error in conv2dDerFilter: dy must be rank 4, but got shape " + s.shape + "."), l.assert(4 === n.length, "Error in conv2dDerFilter: filterShape must be length 4, but got " + n + "."), l.assert(o.shape[3] === n[2], "Error in conv2dDerFilter: depth of input " + o.shape[3] + ") must match input depth in filter (" + n[2] + "."), l.assert(s.shape[3] === n[3], "Error in conv2dDerFilter: depth of dy (" + s.shape[3] + ") must match output depth for filter (" + n[3] + ")."), null != a && l.assert(l.isInt(i), "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " + a + " but got pad " + i + ".");var p = c.computeConv2DInfo(o.shape, n, r, 1, i, a);return u.ENV.engine.runKernel(function (e) {
            return e.conv2dDerFilter(o, s, p);
          }, { x4D: o, dy4D: s });
        }, e.conv2dTranspose = function (t, n, r, i, a, o) {
          return l.assertArgumentsAreTensors({ x: t, filter: n }, "conv2dTranspose"), e.conv2dDerInput(r, t, n, i, a, o);
        }, e.depthwiseConv2d = function (e, t, n, r, i, o, s) {
          void 0 === i && (i = "NHWC"), void 0 === o && (o = [1, 1]), l.assertArgumentsAreTensors({ x: e, filter: t }, "depthwiseConv2d");var p = e,
              h = !1;3 === e.rank && (h = !0, p = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])), l.assert(4 === p.rank, "Error in depthwiseConv2D: input must be rank 4, but got rank " + p.rank + "."), l.assert(4 === t.rank, "Error in depthwiseConv2D: filter must be rank 4, but got rank " + t.rank + "."), l.assert(p.shape[3] === t.shape[2], "Error in depthwiseConv2D: number of input channels (" + p.shape[3] + ") must match the inChannels dimension in filter " + t.shape[2] + "."), null == o && (o = [1, 1]), l.assert(a(n, o), "Error in depthwiseConv2d: Either strides or dilations must be 1.Got strides " + n + " and dilations '" + o + "'"), null != s && l.assert(l.isInt(r), "Error in depthwiseConv2D: pad must be an integer when using, dimRoundingMode " + s + " but got pad " + r + ".");var d = c.computeConv2DInfo(p.shape, t.shape, n, o, r, s, !0),
              f = u.ENV.engine.runKernel(function (e) {
            return e.depthwiseConv2D(p, t, d);
          }, { x4D: p, filter: t });return h ? f.as3D(f.shape[1], f.shape[2], f.shape[3]) : f;
        }, e.separableConv2d = function (t, n, r, i, a, o, s) {
          void 0 === o && (o = [1, 1]), void 0 === s && (s = "NHWC"), l.assertArgumentsAreTensors({ x: t, depthwiseFilter: n, pointwiseFilter: r }, "separableConv2d");var u = t,
              c = !1;if (3 === t.rank && (c = !0, u = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), "NCHW" === s) throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");l.assert(4 === u.rank, "Error in separableConv2d: input must be rank 4, but got rank " + u.rank + "."), l.assert(4 === n.rank, "Error in separableConv2d: depthwise filter must be rank 4, but got rank " + n.rank + "."), l.assert(4 === r.rank, "Error in separableConv2d: pointwise filter must be rank 4, but got rank " + n.rank + "."), l.assert(1 === r.shape[0], "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " + r.shape[0] + "."), l.assert(1 === r.shape[1], "Error in separableConv2d: the second dimension of pointwise filter  must be 1, but got " + r.shape[1] + ".");var p = n.shape[2],
              h = n.shape[3];l.assert(r.shape[2] === p * h, "Error in separableConv2d: the third dimension of pointwise filter must be " + p * h + ", but got " + r.shape[2] + ".");var d = e.depthwiseConv2d(u, n, i, a, s, o),
              f = e.conv2d(d, r, 1, "valid", s);return c ? f.as3D(f.shape[1], f.shape[2], f.shape[3]) : f;
        }, o([s.doc({ heading: "Operations", subheading: "Convolution" }), p.operation], e, "conv1d", null), o([s.doc({ heading: "Operations", subheading: "Convolution" }), p.operation], e, "conv2d", null), o([p.operation], e, "conv2dDerInput", null), o([p.operation], e, "conv2dDerFilter", null), o([s.doc({ heading: "Operations", subheading: "Convolution" }), p.operation], e, "conv2dTranspose", null), o([s.doc({ heading: "Operations", subheading: "Convolution" }), p.operation], e, "depthwiseConv2d", null), o([s.doc({ heading: "Operations", subheading: "Convolution" }), p.operation], e, "separableConv2d", null), e;
      }();n.ConvOps = h;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./conv_util": 55, "./operation": 65 }], 55: [function (e, t, n) {
      "use strict";
      function r(e, t, n, r, i, a, l, c) {
        void 0 === l && (l = !1), void 0 === c && (c = "channelsLast");var p = [-1, -1, -1, -1],
            h = p[0],
            d = p[1],
            f = p[2],
            g = p[3];if ("channelsLast" === c) h = e[0], d = e[1], f = e[2], g = e[3];else {
          if ("channelsFirst" !== c) throw new Error("Unknown dataFormat " + c);h = e[0], g = e[1], d = e[2], f = e[3];
        }var m,
            v = t[0],
            y = t[1],
            b = t[3],
            w = o(n),
            x = w[0],
            A = w[1],
            E = o(r),
            _ = E[0],
            T = E[1],
            S = u(i, d, f, x, A, s(v, _), s(y, T), a),
            C = S.padInfo,
            O = S.outHeight,
            k = S.outWidth,
            R = l ? b * g : b;return "channelsFirst" === c ? m = [h, R, O, k] : "channelsLast" === c && (m = [h, O, k, R]), { batchSize: h, dataFormat: c, inHeight: d, inWidth: f, inChannels: g, outHeight: O, outWidth: k, outChannels: R, padInfo: C, strideHeight: x, strideWidth: A, filterHeight: v, filterWidth: y, dilationHeight: _, dilationWidth: T, inShape: e, outShape: m, filterShape: t };
      }function i(e, t, n, r, i, o) {
        null == i && (i = a(e, t, r));var s = e[0],
            u = e[1],
            p = l((s - t + 2 * i) / r + 1, o);c.assert(c.isInt(p), "The output # of rows (" + p + ") must be an integer. Change the stride and/or zero pad parameters");var h = l((u - t + 2 * i) / r + 1, o);return c.assert(c.isInt(h), "The output # of columns (" + h + ") must be an integer. Change the stride and/or zero pad parameters"), [p, h, n];
      }function a(e, t, n, r) {
        void 0 === r && (r = 1);var i = s(t, r);return Math.floor((e[0] * (n - 1) - n + i) / 2);
      }function o(e) {
        return "number" == typeof e ? [e, e] : e;
      }function s(e, t) {
        return t <= 1 ? e : e + (e - 1) * (t - 1);
      }function u(e, t, n, r, a, o, s, u) {
        var l, c, p;if ("number" == typeof e) {
          l = { top: e, bottom: e, left: e, right: e, type: 0 === e ? "VALID" : "NUMBER" };var h = i([t, n, 1], o, 1, r, e, u);c = h[0], p = h[1];
        } else if ("same" === e) {
          var d = ((c = Math.ceil(t / r)) - 1) * r + o - t,
              f = ((p = Math.ceil(n / a)) - 1) * a + s - n,
              g = Math.floor(d / 2),
              m = d - g,
              v = Math.floor(f / 2);l = { top: g, bottom: m, left: v, right: f - v, type: "SAME" };
        } else {
          if ("valid" !== e) throw Error("Unknown padding parameter: " + e);l = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, c = Math.ceil((t - o + 1) / r), p = Math.ceil((n - s + 1) / a);
        }return { padInfo: l, outHeight: c, outWidth: p };
      }function l(e, t) {
        if (!t) return e;switch (t) {case "round":
            return Math.round(e);case "ceil":
            return Math.ceil(e);case "floor":
            return Math.floor(e);default:
            throw new Error("Unknown roundingMode " + t);}
      }Object.defineProperty(n, "__esModule", { value: !0 });var c = e("../util");n.computePool2DInfo = function (e, t, n, i, a, s) {
        void 0 === s && (s = "channelsLast");var u,
            l = o(t),
            c = l[0],
            p = l[1];if ("channelsLast" === s) u = [c, p, e[3], e[3]];else {
          if ("channelsFirst" !== s) throw new Error("Unknown dataFormat " + s);u = [c, p, e[1], e[1]];
        }return r(e, u, n, 1, i, a, !1, s);
      }, n.computeConv2DInfo = r, n.computeDefaultPad = a;
    }, { "../util": 95 }], 56: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 }), n.ERF_P = .3275911, n.ERF_A1 = .254829592, n.ERF_A2 = -.284496736, n.ERF_A3 = 1.421413741, n.ERF_A4 = -1.453152027, n.ERF_A5 = 1.061405429;
    }, {}], 57: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../util"),
          s = e("./operation"),
          u = function () {
        function e() {}return e.resizeBilinear = function (e, t, n) {
          void 0 === n && (n = !1), o.assertArgumentsAreTensors({ images: e }, "resizeBilinear"), o.assert(3 === e.rank || 4 === e.rank, "Error in resizeBilinear: x must be rank 3 or 4, but got rank " + e.rank + "."), o.assert(2 === t.length, "Error in resizeBilinear: new shape must 2D, but got shape " + t + ".");var r = e,
              i = !1;3 === e.rank && (i = !0, r = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));var s = t[0],
              u = t[1],
              l = a.ENV.engine.runKernel(function (e) {
            return e.resizeBilinear(r, s, u, n);
          }, { batchImages: r });return i ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l;
        }, e.resizeNearestNeighbor = function (e, t, n) {
          void 0 === n && (n = !1), o.assertArgumentsAreTensors({ images: e }, "resizeNearestNeighbor"), o.assert(3 === e.rank || 4 === e.rank, "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " + e.rank + "."), o.assert(2 === t.length, "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + t + "."), o.assert("float32" === e.dtype || "int32" === e.dtype, "`images` must have `int32` or `float32` as dtype");var r = e,
              i = !1;3 === e.rank && (i = !0, r = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));var s = t[0],
              u = t[1],
              l = a.ENV.engine.runKernel(function (e) {
            return e.resizeNearestNeighbor(r, s, u, n);
          }, { batchImages: r });return i ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l;
        }, r([i.doc({ heading: "Operations", subheading: "Images", namespace: "image" }), s.operation], e, "resizeBilinear", null), r([i.doc({ heading: "Operations", subheading: "Images", namespace: "image" }), s.operation], e, "resizeNearestNeighbor", null), e;
      }();n.ImageOps = u;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./operation": 65 }], 58: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../types"),
          s = e("../util"),
          u = e("./broadcast_util"),
          l = e("./operation"),
          c = function () {
        function e() {}return e.logicalNot = function (e) {
          return s.assertArgumentsAreTensors({ x: e }, "logicalNot"), s.assert("bool" === e.dtype, "Error Array must be of type bool."), a.ENV.engine.runKernel(function (t) {
            return t.logicalNot(e);
          }, { x: e });
        }, e.logicalAnd = function (e, t) {
          return s.assertArgumentsAreTensors({ a: e, b: t }, "logicalAnd"), s.assert("bool" === e.dtype && "bool" === t.dtype, "Error Array must be of type bool."), u.assertAndGetBroadcastShape(e.shape, t.shape), a.ENV.engine.runKernel(function (n) {
            return n.logicalAnd(e, t);
          }, { a: e, b: t });
        }, e.logicalOr = function (e, t) {
          return s.assertArgumentsAreTensors({ a: e, b: t }, "logicalOr"), s.assert("bool" === e.dtype && "bool" === t.dtype, "Error Array must be of type bool."), u.assertAndGetBroadcastShape(e.shape, t.shape), a.ENV.engine.runKernel(function (n) {
            return n.logicalOr(e, t);
          }, { a: e, b: t });
        }, e.logicalXor = function (t, n) {
          return s.assertArgumentsAreTensors({ a: t, b: n }, "logicalXor"), s.assert("bool" === t.dtype && "bool" === n.dtype, "Error Array must be of type bool."), u.assertAndGetBroadcastShape(t.shape, n.shape), e.logicalOr(t, n).logicalAnd(e.logicalAnd(t, n).logicalNot());
        }, e.where = function (e, t, n) {
          s.assertArgumentsAreTensors({ condition: e, a: t, b: n }, "where"), s.assert("bool" === e.dtype || "bool" === t.dtype || "bool" === n.dtype, "Error Array must be of type bool."), s.assertShapesMatch(t.shape, n.shape, "Error in where: "), 1 === e.rank ? s.assert(e.shape[0] === t.shape[0], "The first dimension of `a` must match the size of `condition`.") : s.assertShapesMatch(e.shape, n.shape, "Error in where: ");var r = o.upcastType(t.dtype, n.dtype);return a.ENV.engine.runKernel(function (i) {
            return i.where(e, t, n, r);
          }, { condition: e, a: t, b: n });
        }, r([i.doc({ heading: "Operations", subheading: "Logical" }), l.operation], e, "logicalNot", null), r([i.doc({ heading: "Operations", subheading: "Logical" }), l.operation], e, "logicalAnd", null), r([i.doc({ heading: "Operations", subheading: "Logical" }), l.operation], e, "logicalOr", null), r([i.doc({ heading: "Operations", subheading: "Logical" }), l.operation], e, "logicalXor", null), r([i.doc({ heading: "Operations", subheading: "Logical" }), l.operation], e, "where", null), e;
      }();n.LogicalOps = c;
    }, { "../doc": 3, "../environment": 5, "../types": 94, "../util": 95, "./broadcast_util": 50, "./operation": 65 }], 59: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i,
          a = e("../doc"),
          o = e("../util"),
          s = e("./operation"),
          u = e("./ops");!function (e) {
        e[e.NONE = 0] = "NONE", e[e.MEAN = 1] = "MEAN", e[e.SUM = 2] = "SUM", e[e.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
      }(i = n.Reduction || (n.Reduction = {}));var l = function () {
        function e() {}return e.computeWeightedLoss = function (e, t, n) {
          void 0 === n && (n = i.SUM_BY_NONZERO_WEIGHTS), o.assertArgumentsAreTensors({ losses: e }, "computeWeightedLoss"), null != t && o.assertArgumentsAreTensors({ weights: t }, "computeWeightedLoss");var r = null == t ? e : e.mul(t);if (n === i.NONE) return r;if (n === i.SUM) return r.sum();if (n === i.MEAN) return null == t ? r.mean() : r.sum().div(t.sum());if (n === i.SUM_BY_NONZERO_WEIGHTS) {
            if (null == t) return r.sum().div(u.scalar(e.size));var a = t.notEqual(u.scalar(0)).sum().toFloat();return r.sum().div(a);
          }throw Error("Unknown reduction: " + n);
        }, e.absoluteDifference = function (t, n, r, a) {
          void 0 === a && (a = i.SUM_BY_NONZERO_WEIGHTS), o.assertArgumentsAreTensors({ labels: t, predictions: n }, "absoluteDifference"), null != r && o.assertArgumentsAreTensors({ weights: r }, "absoluteDifference"), o.assertShapesMatch(t.shape, n.shape, "Error in absoluteDifference: ");var s = t.sub(n).abs();return e.computeWeightedLoss(s, r, a);
        }, r([a.doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), s.operation], e, "computeWeightedLoss", null), r([a.doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), s.operation], e, "absoluteDifference", null), e;
      }();n.LossOps = l;
    }, { "../doc": 3, "../util": 95, "./operation": 65, "./ops": 66 }], 60: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../util"),
          s = e("./operation"),
          u = function () {
        function e() {}return e.localResponseNormalization = function (e, t, n, r, i) {
          void 0 === t && (t = 5), void 0 === n && (n = 1), void 0 === r && (r = 1), void 0 === i && (i = .5), o.assertArgumentsAreTensors({ x: e }, "localResponseNormalization"), o.assert(4 === e.rank || 3 === e.rank, "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + e.rank + "."), o.assert(o.isInt(t), "Error in localResponseNormalization3D: radius must be an integer\n                     but got radius " + t + ".");var s = e,
              u = !1;3 === e.rank && (u = !0, s = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));var l = a.ENV.engine.runKernel(function (e) {
            return e.localResponseNormalization4D(s, t, n, r, i);
          }, { x4D: s });return u ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l;
        }, r([i.doc({ heading: "Operations", subheading: "Normalization" }), s.operation], e, "localResponseNormalization", null), e;
      }();n.LRNOps = u;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./operation": 65 }], 61: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../util"),
          o = e("./operation"),
          s = function () {
        function e() {}return e.multiRNNCell = function (e, t, n, r) {
          a.assertArgumentsAreTensors({ data: t, c: n, h: r }, "multiRNNCell");for (var i = t, o = [], s = 0; s < e.length; s++) {
            var u = e[s](i, n[s], r[s]);o.push(u[0]), o.push(u[1]), i = u[1];
          }for (var l = [], c = [], s = 0; s < o.length; s += 2) {
            l.push(o[s]), c.push(o[s + 1]);
          }return [l, c];
        }, e.basicLSTMCell = function (e, t, n, r, i, o) {
          a.assertArgumentsAreTensors({ forgetBias: e, lstmKernel: t, lstmBias: n, data: r, c: i, h: o }, "basicLSTMCell");var s = r.concat(o, 1).matMul(t).add(n),
              u = s.shape[0],
              l = s.shape[1] / 4,
              c = [u, l],
              p = s.slice([0, 0], c),
              h = s.slice([0, l], c),
              d = s.slice([0, 2 * l], c),
              f = s.slice([0, 3 * l], c),
              g = p.sigmoid().mulStrict(h.tanh()).addStrict(i.mulStrict(e.add(d).sigmoid()));return [g, g.tanh().mulStrict(f.sigmoid())];
        }, r([i.doc({ heading: "Operations", subheading: "RNN" }), o.operation], e, "multiRNNCell", null), r([i.doc({ heading: "Operations", subheading: "RNN" }), o.operation], e, "basicLSTMCell", null), e;
      }();n.LSTMOps = s;
    }, { "../doc": 3, "../util": 95, "./operation": 65 }], 62: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../util"),
          s = e("./operation"),
          u = function () {
        function e() {}return e.matMul = function (e, t, n, r) {
          void 0 === n && (n = !1), void 0 === r && (r = !1), o.assertArgumentsAreTensors({ a: e, b: t }, "matMul");var i = n ? e.shape[0] : e.shape[1],
              s = r ? t.shape[1] : t.shape[0];o.assert(2 === e.rank && 2 === t.rank, "Error in matMul: inputs must be rank 2, got ranks " + e.rank + " and " + t.rank + "."), o.assert(i === s, "Error in matMul: inner shapes (" + i + ") and (" + s + ") of Tensors with shapes " + e.shape + " and " + t.shape + " and transposeA=" + n + " and transposeB=" + r + " must match.");return a.ENV.engine.runKernel(function (i) {
            return i.matMul(e, t, n, r);
          }, { a: e, b: t }, function (i) {
            return n || r ? !n && r ? { a: function a() {
                return i.matMul(t.toFloat(), !1, !1);
              }, b: function b() {
                return i.matMul(e.toFloat(), !0, !1);
              } } : n && !r ? { a: function a() {
                return t.toFloat().matMul(i, !1, !0);
              }, b: function b() {
                return e.toFloat().matMul(i, !1, !1);
              } } : { a: function a() {
                return t.toFloat().matMul(i, !0, !0);
              }, b: function b() {
                return i.matMul(e.toFloat(), !0, !0);
              } } : { a: function a() {
                return i.matMul(t.toFloat(), !1, !0);
              }, b: function b() {
                return e.toFloat().matMul(i, !0, !1);
              } };
          });
        }, e.vectorTimesMatrix = function (e, t) {
          return o.assert(1 === e.rank, "Error in vectorTimesMatrix: first input must be rank 1, but got rank " + e.rank + "."), o.assert(2 === t.rank, "Error in vectorTimesMatrix: second input must be rank 2, but got rank " + t.rank + "."), o.assert(e.size === t.shape[0], "Error in vectorTimesMatrix: size of vector (" + e.size + ") must match first dimension of matrix (" + t.shape[0] + ")"), e.as2D(1, -1).matMul(t).as1D();
        }, e.matrixTimesVector = function (e, t) {
          return o.assert(1 === t.rank, "Error in matrixTimesVector: second input must rank 1, but got rank " + t.rank + "."), o.assert(2 === e.rank, "Error in matrixTimesVector: first input must be a rank 2, but got rank " + e.rank + "."), o.assert(t.size === e.shape[1], "Error in matrixTimesVector: size of first rank 1 input " + t.size + " must match inner dimension of second rank 2 input, but got shape " + e.shape + "."), e.matMul(t.as2D(-1, 1)).as1D();
        }, e.dotProduct = function (e, t) {
          return o.assert(1 === e.rank && 1 === t.rank, "Error in dotProduct: inputs must be rank 1, but got ranks " + e.rank + " and " + t.rank + "."), o.assert(e.size === t.size, "Error in dotProduct: size of inputs (" + e.size + ") and (" + t.size + ") must match."), e.as2D(1, -1).matMul(t.as2D(-1, 1)).asScalar();
        }, e.outerProduct = function (e, t) {
          return o.assert(1 === e.rank && 1 === t.rank, "Error in outerProduct: inputs must be rank 1, but got ranks " + e.rank + " and " + t.rank + "."), e.as2D(-1, 1).matMul(t.as2D(1, -1));
        }, r([i.doc({ heading: "Operations", subheading: "Matrices" }), s.operation], e, "matMul", null), r([s.operation], e, "vectorTimesMatrix", null), r([s.operation], e, "matrixTimesVector", null), r([s.operation], e, "dotProduct", null), r([i.doc({ heading: "Operations", subheading: "Matrices" }), s.operation], e, "outerProduct", null), e;
      }();n.MatmulOps = u;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./operation": 65 }], 63: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../util"),
          o = e("./array_ops"),
          s = e("./binary_ops"),
          u = e("./operation"),
          l = function () {
        function e() {}return e.movingAverage = function (e, t, n, r, i) {
          void 0 === i && (i = !0), a.assertArgumentsAreTensors({ v: e, x: t }, "movingAverage"), a.assertTypesMatch(e, t), a.assert(a.arraysEqual(e.shape, t.shape), "Shape mismatch in v and x");var u = o.ArrayOps.scalar(1);n = "number" == typeof n ? o.ArrayOps.scalar(n) : n;var l = u.sub(n),
              c = t.sub(e).mul(l);return i && (a.assert(null != r, "When using zeroDebias: true, step is required."), r = "number" == typeof r ? o.ArrayOps.scalar(r) : r, c = c.div(u.sub(s.BinaryOps.pow(n, r)))), e.add(c);
        }, r([i.doc({ heading: "Operations", subheading: "Moving Average" }), u.operation], e, "movingAverage", null), e;
      }();n.MovingAverageOps = l;
    }, { "../doc": 3, "../util": 95, "./array_ops": 46, "./binary_ops": 49, "./operation": 65 }], 64: [function (e, t, n) {
      "use strict";
      function r(e, t, n) {
        if (void 0 === n && (n = null), 0 === e.rank) return e.abs();if (1 !== e.rank && null === n) return r(e.reshape([-1]), t, n);if (1 === e.rank || "number" == typeof n || n instanceof Array && 1 === n.length) {
          if (1 === t) return e.abs().sum(n);if (t === 1 / 0) return e.abs().max(n);if (t === -1 / 0) return e.abs().min(n);if ("euclidean" === t || 2 === t) return e.abs().pow(l.scalar(2, "int32")).sum(n).sqrt();throw new Error("Error in norm: invalid ord value: " + t);
        }if (n instanceof Array && 2 === n.length) {
          if (1 === t) return e.abs().sum(n[0]).max(n[1] - 1);if (t === 1 / 0) return e.abs().sum(n[1]).max(n[0]);if (t === -1 / 0) return e.abs().sum(n[1]).min(n[0]);if ("fro" === t || "euclidean" === t) return e.square().sum(n).sqrt();throw new Error("Error in norm: invalid ord value: " + t);
        }throw new Error("Error in norm: invalid axis: " + n);
      }var i = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var a = e("../doc"),
          o = e("../util"),
          s = e("./axis_util"),
          u = e("./operation"),
          l = e("./ops"),
          c = function () {
        function e() {}return e.norm = function (e, t, n, i) {
          void 0 === t && (t = "euclidean"), void 0 === n && (n = null), void 0 === i && (i = !1), o.assertArgumentsAreTensors({ x: e }, "norm");var a = r(e, t, n),
              u = a.shape;if (i) {
            var l = s.parseAxisParam(n, e.shape);u = s.expandShapeToKeepDim(a.shape, l);
          }return a.reshape(u);
        }, i([a.doc({ heading: "Operations", subheading: "Matrices" }), u.operation], e, "norm", null), e;
      }();n.NormOps = c;
    }, { "../doc": 3, "../util": 95, "./axis_util": 47, "./operation": 65, "./ops": 66 }], 65: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("../globals");n.operation = function (e, t, n) {
        var i = n.value;return n.value = function () {
          for (var e = [], n = 0; n < arguments.length; n++) {
            e[n] = arguments[n];
          }return r.tidy(t, function () {
            return i.apply(void 0, e);
          });
        }, n;
      };
    }, { "../globals": 6 }], 66: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("./array_ops"),
          i = e("./batchnorm"),
          a = e("./binary_ops"),
          o = e("./compare"),
          s = e("./concat"),
          u = e("./conv"),
          l = e("./image_ops"),
          c = e("./logical_ops"),
          p = e("./loss_ops"),
          h = e("./lrn"),
          d = e("./lstm"),
          f = e("./matmul"),
          g = e("./moving_average"),
          m = e("./norm"),
          v = e("./pool"),
          y = e("./reduction_ops"),
          b = e("./reverse"),
          w = e("./slice"),
          x = e("./softmax"),
          A = e("./transpose"),
          E = e("./unary_ops");n.batchNormalization = i.BatchNormOps.batchNormalization, n.batchNormalization2d = i.BatchNormOps.batchNormalization2d, n.batchNormalization3d = i.BatchNormOps.batchNormalization3d, n.batchNormalization4d = i.BatchNormOps.batchNormalization4d, n.concat = s.ConcatOps.concat, n.concat1d = s.ConcatOps.concat1d, n.concat2d = s.ConcatOps.concat2d, n.concat3d = s.ConcatOps.concat3d, n.concat4d = s.ConcatOps.concat4d, n.conv1d = u.ConvOps.conv1d, n.conv2d = u.ConvOps.conv2d, n.conv2dTranspose = u.ConvOps.conv2dTranspose, n.depthwiseConv2d = u.ConvOps.depthwiseConv2d, n.separableConv2d = u.ConvOps.separableConv2d, n.matMul = f.MatmulOps.matMul, n.matrixTimesVector = f.MatmulOps.matrixTimesVector, n.outerProduct = f.MatmulOps.outerProduct, n.vectorTimesMatrix = f.MatmulOps.vectorTimesMatrix, n.avgPool = v.PoolOps.avgPool, n.maxPool = v.PoolOps.maxPool, n.transpose = A.TransposeOps.transpose, n.reverse = b.ReverseOps.reverse, n.reverse1d = b.ReverseOps.reverse1d, n.reverse2d = b.ReverseOps.reverse2d, n.reverse3d = b.ReverseOps.reverse3d, n.reverse4d = b.ReverseOps.reverse4d, n.slice = w.SliceOps.slice, n.slice1d = w.SliceOps.slice1d, n.slice2d = w.SliceOps.slice2d, n.slice3d = w.SliceOps.slice3d, n.slice4d = w.SliceOps.slice4d, n.argMax = y.ReductionOps.argMax, n.argMin = y.ReductionOps.argMin, n.logSumExp = y.ReductionOps.logSumExp, n.max = y.ReductionOps.max, n.mean = y.ReductionOps.mean, n.min = y.ReductionOps.min, n.moments = y.ReductionOps.moments, n.sum = y.ReductionOps.sum, n.equal = o.CompareOps.equal, n.equalStrict = o.CompareOps.equalStrict, n.greater = o.CompareOps.greater, n.greaterStrict = o.CompareOps.greaterStrict, n.greaterEqual = o.CompareOps.greaterEqual, n.greaterEqualStrict = o.CompareOps.greaterEqualStrict, n.less = o.CompareOps.less, n.lessStrict = o.CompareOps.lessStrict, n.lessEqual = o.CompareOps.lessEqual, n.lessEqualStrict = o.CompareOps.lessEqualStrict, n.notEqual = o.CompareOps.notEqual, n.notEqualStrict = o.CompareOps.notEqualStrict, n.logicalNot = c.LogicalOps.logicalNot, n.logicalAnd = c.LogicalOps.logicalAnd, n.logicalOr = c.LogicalOps.logicalOr, n.logicalXor = c.LogicalOps.logicalXor, n.where = c.LogicalOps.where, n.abs = E.UnaryOps.abs, n.acos = E.UnaryOps.acos, n.acosh = E.UnaryOps.acosh, n.asin = E.UnaryOps.asin, n.asinh = E.UnaryOps.asinh, n.atan = E.UnaryOps.atan, n.atanh = E.UnaryOps.atanh, n.ceil = E.UnaryOps.ceil, n.clipByValue = E.UnaryOps.clipByValue, n.cos = E.UnaryOps.cos, n.cosh = E.UnaryOps.cosh, n.elu = E.UnaryOps.elu, n.exp = E.UnaryOps.exp, n.expm1 = E.UnaryOps.expm1, n.floor = E.UnaryOps.floor, n.sign = E.UnaryOps.sign, n.leakyRelu = E.UnaryOps.leakyRelu, n.log = E.UnaryOps.log, n.log1p = E.UnaryOps.log1p, n.logSigmoid = E.UnaryOps.logSigmoid, n.neg = E.UnaryOps.neg, n.prelu = E.UnaryOps.prelu, n.relu = E.UnaryOps.relu, n.reciprocal = E.UnaryOps.reciprocal, n.round = E.UnaryOps.round, n.selu = E.UnaryOps.selu, n.sigmoid = E.UnaryOps.sigmoid, n.sin = E.UnaryOps.sin, n.sinh = E.UnaryOps.sinh, n.softplus = E.UnaryOps.softplus, n.sqrt = E.UnaryOps.sqrt, n.rsqrt = E.UnaryOps.rsqrt, n.square = E.UnaryOps.square, n.step = E.UnaryOps.step, n.tan = E.UnaryOps.tan, n.tanh = E.UnaryOps.tanh, n.erf = E.UnaryOps.erf, n.add = a.BinaryOps.add, n.addStrict = a.BinaryOps.addStrict, n.atan2 = a.BinaryOps.atan2, n.div = a.BinaryOps.div, n.divStrict = a.BinaryOps.divStrict, n.maximum = a.BinaryOps.maximum, n.maximumStrict = a.BinaryOps.maximumStrict, n.minimum = a.BinaryOps.minimum, n.minimumStrict = a.BinaryOps.minimumStrict, n.mod = a.BinaryOps.mod, n.modStrict = a.BinaryOps.modStrict, n.mul = a.BinaryOps.mul, n.mulStrict = a.BinaryOps.mulStrict, n.pow = a.BinaryOps.pow, n.powStrict = a.BinaryOps.powStrict, n.sub = a.BinaryOps.sub, n.subStrict = a.BinaryOps.subStrict, n.squaredDifference = a.BinaryOps.squaredDifference, n.squaredDifferenceStrict = a.BinaryOps.squaredDifferenceStrict, n.norm = m.NormOps.norm, n.cast = r.ArrayOps.cast, n.clone = r.ArrayOps.clone, n.fromPixels = r.ArrayOps.fromPixels, n.toPixels = r.ArrayOps.toPixels, n.ones = r.ArrayOps.ones, n.onesLike = r.ArrayOps.onesLike, n.zeros = r.ArrayOps.zeros, n.zerosLike = r.ArrayOps.zerosLike, n.rand = r.ArrayOps.rand, n.randomNormal = r.ArrayOps.randomNormal, n.truncatedNormal = r.ArrayOps.truncatedNormal, n.randomUniform = r.ArrayOps.randomUniform, n.multinomial = r.ArrayOps.multinomial, n.reshape = r.ArrayOps.reshape, n.squeeze = r.ArrayOps.squeeze, n.tile = r.ArrayOps.tile, n.gather = r.ArrayOps.gather, n.oneHot = r.ArrayOps.oneHot, n.linspace = r.ArrayOps.linspace, n.range = r.ArrayOps.range, n.buffer = r.ArrayOps.buffer, n.fill = r.ArrayOps.fill, n.tensor = r.ArrayOps.tensor, n.scalar = r.ArrayOps.scalar, n.tensor1d = r.ArrayOps.tensor1d, n.tensor2d = r.ArrayOps.tensor2d, n.tensor3d = r.ArrayOps.tensor3d, n.tensor4d = r.ArrayOps.tensor4d, n.print = r.ArrayOps.print, n.expandDims = r.ArrayOps.expandDims, n.stack = r.ArrayOps.stack, n.split = r.ArrayOps.split, n.pad = r.ArrayOps.pad, n.pad1d = r.ArrayOps.pad1d, n.pad2d = r.ArrayOps.pad2d, n.pad3d = r.ArrayOps.pad3d, n.pad4d = r.ArrayOps.pad4d, n.movingAverage = g.MovingAverageOps.movingAverage, n.basicLSTMCell = d.LSTMOps.basicLSTMCell, n.multiRNNCell = d.LSTMOps.multiRNNCell, n.softmax = x.SoftmaxOps.softmax, n.localResponseNormalization = h.LRNOps.localResponseNormalization;var _ = e("../tensor"),
          T = e("../types");_.Tensor, T.Rank, p.Reduction, n.losses = { softmaxCrossEntropy: x.SoftmaxOps.softmaxCrossEntropy, absoluteDifference: p.LossOps.absoluteDifference, computeWeightedLoss: p.LossOps.computeWeightedLoss }, n.image = { resizeBilinear: l.ImageOps.resizeBilinear, resizeNearestNeighbor: l.ImageOps.resizeNearestNeighbor };
    }, { "../tensor": 89, "../types": 94, "./array_ops": 46, "./batchnorm": 48, "./binary_ops": 49, "./compare": 51, "./concat": 52, "./conv": 54, "./image_ops": 57, "./logical_ops": 58, "./loss_ops": 59, "./lrn": 60, "./lstm": 61, "./matmul": 62, "./moving_average": 63, "./norm": 64, "./pool": 67, "./reduction_ops": 70, "./reverse": 71, "./slice": 73, "./softmax": 75, "./transpose": 76, "./unary_ops": 77 }], 67: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../util"),
          s = e("./conv_util"),
          u = e("./operation"),
          l = function () {
        function e() {}return e.maxPool = function (t, n, r, i, u) {
          o.assertArgumentsAreTensors({ x: t }, "maxPool");var l = t,
              c = !1;3 === t.rank && (c = !0, l = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), o.assert(4 === l.rank, "Error in maxPool: input must be rank 4 but got rank " + l.rank + "."), null != u && o.assert(o.isInt(i), "Error in maxPool: pad must be an integer when using, dimRoundingMode " + u + " but got pad " + i + ".");var p = s.computePool2DInfo(l.shape, n, r, i, u),
              h = a.ENV.engine.runKernel(function (e, t) {
            return t(e.maxPool(l, p));
          }, { x: l }, function (t, a) {
            var o = a[0];return { x: function x() {
                return e.maxPoolBackprop(t, l, o, n, r, i);
              } };
          });return c ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
        }, e.maxPoolBackprop = function (e, t, n, r, i, u, l) {
          o.assertArgumentsAreTensors({ dy: e, input: t, output: n }, "maxPoolBackprop"), o.assert(t.rank === e.rank, "Rank of input (" + t.rank + ") does not match rank of dy (" + e.rank + ")"), o.assert(4 === e.rank, "Error in maxPoolBackprop: dy must be rank 4 but got rank " + e.rank + "."), o.assert(4 === t.rank, "Error in maxPoolBackprop: input must be rank 4 but got rank " + t.rank + "."), null != l && o.assert(o.isInt(u), "Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode " + l + " but got pad " + u + ".");var c = s.computePool2DInfo(t.shape, r, i, u, l);return a.ENV.engine.runKernel(function (r) {
            return r.maxPoolBackprop(e, t, n, c);
          }, { dy: e, input: t });
        }, e.avgPool = function (t, n, r, i, u) {
          o.assertArgumentsAreTensors({ x: t }, "avgPool"), o.assert("float32" === t.dtype, "The input dtype to avgPool must be float32");var l = t,
              c = !1;3 === t.rank && (c = !0, l = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), o.assert(4 === l.rank, "Error in avgPool: x must be rank 4 but got rank " + l.rank + "."), null != u && o.assert(o.isInt(i), "Error in avgPool: pad must be an integer when using, dimRoundingMode " + u + " but got pad " + i + ".");var p = s.computePool2DInfo(l.shape, n, r, i),
              h = a.ENV.engine.runKernel(function (e) {
            return e.avgPool(l, p);
          }, { x: l }, function (t) {
            return { x: function x() {
                return e.avgPoolBackprop(t, l, n, r, i);
              } };
          });return h = h.cast(t.dtype), c ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
        }, e.avgPoolBackprop = function (e, t, n, r, i) {
          o.assertArgumentsAreTensors({ dy: e, input: t }, "avgPoolBackprop"), o.assert(t.rank === e.rank, "Rank of input (" + t.rank + ") does not match rank of dy (" + e.rank + ")");var u = t,
              l = e,
              c = !1;3 === t.rank && (c = !0, u = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]), l = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])), o.assert(4 === l.rank, "Error in avgPoolBackprop: dy must be rank 4 but got rank " + l.rank + "."), o.assert(4 === u.rank, "Error in avgPoolBackprop: input must be rank 4 but got rank " + u.rank + ".");var p = s.computePool2DInfo(u.shape, n, r, i),
              h = a.ENV.engine.runKernel(function (e) {
            return e.avgPoolBackprop(l, u, p);
          }, { dy4D: l, input4D: u });return c ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
        }, r([i.doc({ heading: "Operations", subheading: "Convolution" }), u.operation], e, "maxPool", null), r([u.operation], e, "maxPoolBackprop", null), r([i.doc({ heading: "Operations", subheading: "Convolution" }), u.operation], e, "avgPool", null), r([u.operation], e, "avgPoolBackprop", null), e;
      }();n.PoolOps = l;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./conv_util": 55, "./operation": 65 }], 68: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("seedrandom"),
          i = function () {
        function e(e, t, n, i, a) {
          this.mean = e, this.stdDev = t, this.dtype = n, this.nextVal = NaN, this.truncated = i, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);var o = a || Math.random();this.random = r.alea(o.toString());
        }return e.prototype.nextValue = function () {
          if (!isNaN(this.nextVal)) {
            var e = this.nextVal;return this.nextVal = NaN, e;
          }for (var t, n, r = !1; !r;) {
            var i = void 0,
                a = void 0,
                o = void 0;do {
              o = (i = 2 * this.random() - 1) * i + (a = 2 * this.random() - 1) * a;
            } while (o >= 1 || 0 === o);var s = Math.sqrt(-2 * Math.log(o) / o);t = this.mean + this.stdDev * i * s, n = this.mean + this.stdDev * a * s, this.truncated && !this.isValidTruncated(t) || (r = !0);
          }return this.truncated && !this.isValidTruncated(n) || (this.nextVal = this.convertValue(n)), this.convertValue(t);
        }, e.prototype.convertValue = function (e) {
          return null == this.dtype || "float32" === this.dtype ? e : Math.round(e);
        }, e.prototype.isValidTruncated = function (e) {
          return e <= this.upper && e >= this.lower;
        }, e;
      }();n.MPRandGauss = i;
    }, { seedrandom: 135 }], 69: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        for (var n = t; n < e; ++n) {
          if (e % n == 0) return n;
        }return e;
      }Object.defineProperty(n, "__esModule", { value: !0 }), n.PARALLELIZE_THRESHOLD = 30, n.computeOptimalWindowSize = function (e) {
        return e <= n.PARALLELIZE_THRESHOLD ? e : r(e, Math.floor(Math.sqrt(e)));
      };
    }, {}], 70: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../globals"),
          s = e("../util"),
          u = e("./axis_util"),
          l = e("./operation"),
          c = e("./ops"),
          p = function () {
        function e() {}return e.logSumExp = function (e, t, n) {
          void 0 === t && (t = null), void 0 === n && (n = !1), s.assertArgumentsAreTensors({ x: e }, "logSumExp");var r = u.parseAxisParam(t, e.shape),
              i = e.max(r, !0),
              a = e.sub(i).exp().sum(r).log(),
              o = i.reshape(a.shape).add(a);if (n) {
            var l = u.expandShapeToKeepDim(o.shape, r);return o.reshape(l);
          }return o;
        }, e.sum = function (e, t, n) {
          void 0 === t && (t = null), void 0 === n && (n = !1), s.assertArgumentsAreTensors({ x: e }, "sum"), "bool" === e.dtype && (e = e.toInt());var r = u.parseAxisParam(t, e.shape);return o.customGrad(function (e) {
            var t = u.getAxesPermutation(r, e.rank),
                i = r,
                o = e;null != t && (o = e.transpose(t), i = u.getInnerMostAxes(i.length, e.rank));var s = a.ENV.engine.runKernel(function (e) {
              return e.sum(o, i);
            }, { permutedX: o });if (n) {
              var l = u.expandShapeToKeepDim(s.shape, r);s = s.reshape(l);
            }return { value: s, gradFunc: function gradFunc(t) {
                var n = e.shape.slice();return r.forEach(function (e) {
                  n[e] = 1;
                }), t.reshape(n).mul(c.ones(e.shape, "float32"));
              } };
          })(e);
        }, e.mean = function (e, t, n) {
          void 0 === t && (t = null), void 0 === n && (n = !1), s.assertArgumentsAreTensors({ x: e }, "mean");var r = u.parseAxisParam(t, e.shape),
              i = u.computeOutAndReduceShapes(e.shape, r)[1],
              a = s.sizeFromShape(i);return o.customGrad(function (e) {
            var i = c.scalar(a);return { value: (i.dtype === e.dtype ? e : e.cast(i.dtype)).div(i).sum(t, n), gradFunc: function gradFunc(t) {
                var n = e.shape.slice();return r.forEach(function (e) {
                  n[e] = 1;
                }), t.reshape(n).mul(c.ones(e.shape, "float32")).div(i);
              } };
          })(e);
        }, e.min = function (e, t, n) {
          void 0 === t && (t = null), void 0 === n && (n = !1), s.assertArgumentsAreTensors({ x: e }, "min");var r = u.parseAxisParam(t, e.shape),
              i = r,
              o = u.getAxesPermutation(i, e.rank);null != o && (e = e.transpose(o), i = u.getInnerMostAxes(i.length, e.rank));var l = a.ENV.engine.runKernel(function (t) {
            return t.min(e, i);
          }, { x: e });if (n) {
            var c = u.expandShapeToKeepDim(l.shape, r);return l.reshape(c);
          }return l;
        }, e.max = function (e, t, n) {
          void 0 === t && (t = null), void 0 === n && (n = !1), s.assertArgumentsAreTensors({ x: e }, "max");var r = u.parseAxisParam(t, e.shape),
              i = r,
              o = u.getAxesPermutation(i, e.rank);null != o && (e = e.transpose(o), i = u.getInnerMostAxes(i.length, e.rank));var l = a.ENV.engine.runKernel(function (t) {
            return t.max(e, i);
          }, { x: e });if (n) {
            var c = u.expandShapeToKeepDim(l.shape, r);return l.reshape(c);
          }return l;
        }, e.argMin = function (e, t) {
          void 0 === t && (t = 0), s.assertArgumentsAreTensors({ x: e }, "argMin"), null == t && (t = 0);var n = u.parseAxisParam(t, e.shape),
              r = u.getAxesPermutation(n, e.rank);return null != r && (e = e.transpose(r), n = u.getInnerMostAxes(n.length, e.rank)), a.ENV.engine.runKernel(function (t) {
            return t.argMin(e, n[0]);
          }, { x: e });
        }, e.argMax = function (e, t) {
          void 0 === t && (t = 0), s.assertArgumentsAreTensors({ x: e }, "argMax"), null == t && (t = 0);var n = u.parseAxisParam(t, e.shape),
              r = u.getAxesPermutation(n, e.rank);return null != r && (e = e.transpose(r), n = u.getInnerMostAxes(n.length, e.rank)), a.ENV.engine.runKernel(function (t) {
            return t.argMax(e, n[0]);
          }, { x: e });
        }, e.moments = function (e, t, n) {
          void 0 === t && (t = null), void 0 === n && (n = !1), s.assertArgumentsAreTensors({ x: e }, "moments");var r = u.parseAxisParam(t, e.shape),
              i = e.mean(r, n),
              a = i.shape;return n || (a = u.expandShapeToKeepDim(i.shape, r)), { mean: i, variance: e.toFloat().sub(i.reshape(a)).square().mean(r, n) };
        }, r([i.doc({ heading: "Operations", subheading: "Reduction" }), l.operation], e, "logSumExp", null), r([i.doc({ heading: "Operations", subheading: "Reduction" }), l.operation], e, "sum", null), r([i.doc({ heading: "Operations", subheading: "Reduction" }), l.operation], e, "mean", null), r([i.doc({ heading: "Operations", subheading: "Reduction" }), l.operation], e, "min", null), r([i.doc({ heading: "Operations", subheading: "Reduction" }), l.operation], e, "max", null), r([i.doc({ heading: "Operations", subheading: "Reduction" }), l.operation], e, "argMin", null), r([i.doc({ heading: "Operations", subheading: "Reduction" }), l.operation], e, "argMax", null), r([i.doc({ heading: "Operations", subheading: "Normalization" }), l.operation], e, "moments", null), e;
      }();n.ReductionOps = p;
    }, { "../doc": 3, "../environment": 5, "../globals": 6, "../util": 95, "./axis_util": 47, "./operation": 65, "./ops": 66 }], 71: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../util"),
          s = e("./axis_util"),
          u = e("./operation"),
          l = function () {
        function e() {}return e.reverse1d = function (t) {
          return o.assert(1 === t.rank, "Error in reverse1D: x must be rank 1 but got\n             rank " + t.rank + "."), e.reverse(t, 0);
        }, e.reverse2d = function (t, n) {
          return o.assert(2 === t.rank, "Error in reverse2D: x must be rank 2 but got\n             rank " + t.rank + "."), e.reverse(t, n);
        }, e.reverse3d = function (t, n) {
          return o.assert(3 === t.rank, "Error in reverse3D: x must be rank 3 but got\n             rank " + t.rank + "."), e.reverse(t, n);
        }, e.reverse4d = function (t, n) {
          return o.assert(4 === t.rank, "Error in reverse4D: x must be rank 4 but got\n             rank " + t.rank + "."), e.reverse(t, n);
        }, e.reverse = function (e, t) {
          if (o.assertArgumentsAreTensors({ x: e }, "reverse"), 0 === e.rank) return e.clone();var n = s.parseAxisParam(t, e.shape);return a.ENV.engine.runKernel(function (t) {
            return t.reverse(e, n);
          }, { x: e }, function (e) {
            return { x: function x() {
                return e.reverse(n);
              } };
          }).reshapeAs(e);
        }, r([i.doc({ heading: "Tensors", subheading: "Slicing and Joining" }), u.operation], e, "reverse", null), e;
      }();n.ReverseOps = l;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./axis_util": 47, "./operation": 65 }], 72: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 }), n.SELU_SCALEALPHA = 1.7580993408473768, n.SELU_SCALE = 1.0507009873554805;
    }, {}], 73: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../util"),
          s = e("./operation"),
          u = e("./slice_util"),
          l = function () {
        function e() {}return e.slice1d = function (t, n, r) {
          return o.assert(1 === t.rank, "slice1d expects a rank-1 tensor, but got a rank-" + t.rank + " tensor"), e.slice(t, [n], [r]);
        }, e.slice2d = function (t, n, r) {
          return o.assert(2 === t.rank, "slice1d expects a rank-2 tensor, but got a rank-" + t.rank + " tensor"), e.slice(t, n, r);
        }, e.slice3d = function (t, n, r) {
          return o.assert(3 === t.rank, "slice1d expects a rank-3 tensor, but got a rank-" + t.rank + " tensor"), e.slice(t, n, r);
        }, e.slice4d = function (t, n, r) {
          return o.assert(4 === t.rank, "slice1d expects a rank-4 tensor, but got a rank-" + t.rank + " tensor"), e.slice(t, n, r);
        }, e.slice = function (e, t, n) {
          if (o.assertArgumentsAreTensors({ x: e }, "slice"), 0 === e.rank) throw new Error("Slicing scalar is not possible");var r;r = "number" == typeof t ? [t].concat(new Array(e.rank - 1).fill(0)) : t.length < e.rank ? t.concat(new Array(e.rank - t.length).fill(0)) : t;var i;i = null == n ? new Array(e.rank).fill(-1) : "number" == typeof n ? [n].concat(new Array(e.rank - 1).fill(-1)) : n.length < e.rank ? n.concat(new Array(e.rank - n.length).fill(-1)) : n, i = i.map(function (t, n) {
            return t >= 0 ? t : (o.assert(-1 === t, "Bad value in size"), e.shape[n] - r[n]);
          }), u.assertParamsValid(e, r, i);var s = e.shape;return a.ENV.engine.runKernel(function (t) {
            return t.slice(e, r, i);
          }, { x: e }, function (e) {
            for (var t = [], n = 0; n < e.rank; n++) {
              t.push([r[n], s[n] - r[n] - i[n]]);
            }return { x: function x() {
                return e.pad(t);
              } };
          });
        }, r([i.doc({ heading: "Tensors", subheading: "Slicing and Joining" }), s.operation], e, "slice", null), e;
      }();n.SliceOps = l;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./operation": 65, "./slice_util": 74 }], 74: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("../util");n.assertParamsValid = function (e, t, n) {
        r.assert(e.rank === t.length, "Error in slice" + e.rank + "D: Length of begin " + t + " must match the rank of the array (" + e.rank + ")."), r.assert(e.rank === n.length, "Error in slice" + e.rank + "D: Length of size " + n + " must match the rank of the array (" + e.rank + ").");for (var i = 0; i < e.rank; ++i) {
          r.assert(t[i] + n[i] <= e.shape[i], "Error in slice" + e.rank + "D: begin[" + i + "] + size[" + i + "] (" + (t[i] + n[i]) + ") would overflow input.shape[" + i + "] (" + e.shape[i] + ")");
        }
      };
    }, { "../util": 95 }], 75: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../globals"),
          o = e("../util"),
          s = e("./axis_util"),
          u = e("./operation"),
          l = e("./ops"),
          c = function () {
        function e() {}return e.softmax = function (e, t) {
          if (void 0 === t && (t = -1), o.assertArgumentsAreTensors({ logits: e }, "softmax"), -1 === t && (t = e.rank - 1), t !== e.rank - 1) throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank " + e.rank + " and dim was " + t);return a.customGrad(function (e) {
            var n = e.logSumExp([t], !0),
                r = e.toFloat().sub(n).exp();return { value: r, gradFunc: function gradFunc(e) {
                var n = e.mul(r);return n.sub(n.sum([t], !0).mul(r));
              } };
          })(e);
        }, e.softmaxCrossEntropy = function (e, t, n) {
          if (void 0 === n && (n = -1), o.assertArgumentsAreTensors({ labels: e, logits: t }, "softmaxCrossEntropy"), o.assertShapesMatch(e.shape, t.shape, "Error in softmaxCrossEntropy: "), -1 === n && (n = t.rank - 1), n !== t.rank - 1) throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " + t.rank + " and dim was " + n);return a.customGrad(function (e, t) {
            var r = t.softmax(n);return { value: l.scalar(1e-5).add(r).log().mul(e).neg().sum([n]), gradFunc: function gradFunc(t) {
                var i = s.expandShapeToKeepDim(t.shape, [n]);return [t.reshape(i).mul(e.toFloat().sub(r)), t.reshape(i).mul(r.sub(e.toFloat()))];
              } };
          })(e, t);
        }, r([i.doc({ heading: "Operations", subheading: "Normalization" }), u.operation], e, "softmax", null), r([i.doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), u.operation], e, "softmaxCrossEntropy", null), e;
      }();n.SoftmaxOps = c;
    }, { "../doc": 3, "../globals": 6, "../util": 95, "./axis_util": 47, "./operation": 65, "./ops": 66 }], 76: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../util"),
          s = e("./axis_util"),
          u = e("./operation"),
          l = function () {
        function e() {}return e.transpose = function (e, t) {
          o.assertArgumentsAreTensors({ x: e }, "transpose"), null == t && (t = e.shape.map(function (e, t) {
            return t;
          }).reverse());return o.assert(e.rank === t.length, "Error in transpose: rank of input " + e.rank + " must match length of perm " + t + "."), a.ENV.engine.runKernel(function (n) {
            return n.transpose(e, t);
          }, { x: e }, function (e) {
            var n = s.getUndoAxesPermutation(t);return { x: function x() {
                return e.transpose(n);
              } };
          });
        }, r([i.doc({ heading: "Operations", subheading: "Matrices" }), u.operation], e, "transpose", null), e;
      }();n.TransposeOps = l;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./axis_util": 47, "./operation": 65 }], 77: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../environment"),
          o = e("../util"),
          s = e("./operation"),
          u = e("./ops"),
          l = e("./ops"),
          c = e("./selu_util"),
          p = function () {
        function e() {}return e.neg = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "neg");return a.ENV.engine.runKernel(function (t) {
            return t.neg(e);
          }, { x: e }, function (e) {
            return { x: function x() {
                return e.neg();
              } };
          });
        }, e.ceil = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "ceil");return a.ENV.engine.runKernel(function (t) {
            return t.ceil(e);
          }, { x: e }, function (e) {
            return { x: function x() {
                return u.zerosLike(e);
              } };
          });
        }, e.floor = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "floor");return a.ENV.engine.runKernel(function (t) {
            return t.floor(e);
          }, { x: e }, function (e) {
            return { x: function x() {
                return u.zerosLike(e);
              } };
          });
        }, e.sign = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "sign");return a.ENV.engine.runKernel(function (t) {
            return t.sign(e);
          }, { x: e }, function (e) {
            return { x: function x() {
                return u.zerosLike(e);
              } };
          });
        }, e.round = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "round");return a.ENV.engine.runKernel(function (t) {
            return t.round(e);
          }, { x: e }, function (e) {
            return { x: function x() {
                return u.zerosLike(e);
              } };
          });
        }, e.exp = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "exp");return a.ENV.engine.runKernel(function (t, n) {
            return n(t.exp(e));
          }, { x: e }, function (e, t) {
            var n = t[0];return { x: function x() {
                return e.mulStrict(n);
              } };
          });
        }, e.expm1 = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "expm1");return a.ENV.engine.runKernel(function (t) {
            return t.expm1(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.mulStrict(e.exp());
              } };
          });
        }, e.log = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "log");return a.ENV.engine.runKernel(function (t) {
            return t.log(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.divStrict(e.toFloat());
              } };
          });
        }, e.log1p = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "log1p");return a.ENV.engine.runKernel(function (t) {
            return t.log1p(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.divStrict(e.add(u.scalar(1)));
              } };
          });
        }, e.sqrt = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "sqrt");return a.ENV.engine.runKernel(function (t) {
            return t.sqrt(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.divStrict(e.toFloat().sqrt().mul(u.scalar(2)));
              } };
          });
        }, e.rsqrt = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "rsqrt");return a.ENV.engine.runKernel(function (t) {
            return t.rsqrt(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.divStrict(e.pow(u.scalar(1.5)).mul(u.scalar(2))).neg();
              } };
          });
        }, e.square = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "square");return a.ENV.engine.runKernel(function (t) {
            return t.square(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.mulStrict(e.toFloat().mul(u.scalar(2)));
              } };
          });
        }, e.reciprocal = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "reciprocal");return a.ENV.engine.runKernel(function (t) {
            return t.reciprocal(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.divStrict(e.square().neg());
              } };
          });
        }, e.abs = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "abs");return a.ENV.engine.runKernel(function (t) {
            return t.abs(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.mulStrict(e.toFloat().step(-1));
              } };
          });
        }, e.clipByValue = function (e, t, n) {
          o.assertArgumentsAreTensors({ x: e }, "clipByValue"), o.assert(t <= n, "Error in clip: min (" + t + ") must be less than or equal to max (" + n + ").");return a.ENV.engine.runKernel(function (r) {
            return r.clip(e, t, n);
          }, { x: e }, function (r) {
            return { x: function x() {
                return r.where(e.greater(u.scalar(t)).logicalAnd(e.less(u.scalar(n))), l.zerosLike(r));
              } };
          });
        }, e.relu = function (e) {
          if (o.assertArgumentsAreTensors({ x: e }, "relu"), "bool" === e.dtype) return e.toInt();return a.ENV.engine.runKernel(function (t) {
            return t.relu(e);
          }, { x: e }, function (t) {
            var n = e.step();return { x: function x() {
                return t.mulStrict(n.toFloat());
              } };
          });
        }, e.elu = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "elu");return a.ENV.engine.runKernel(function (t, n) {
            return n(t.elu(e));
          }, { x: e }, function (e, t) {
            var n = t[0];return { x: function x() {
                return a.ENV.engine.runKernel(function (t) {
                  return t.eluDer(e, n);
                }, { dy: e, y: n });
              } };
          });
        }, e.selu = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "selu");return a.ENV.engine.runKernel(function (t) {
            return t.selu(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                var n = e.greater(u.scalar(0)),
                    r = u.scalar(c.SELU_SCALEALPHA),
                    i = u.scalar(c.SELU_SCALE),
                    a = t.mul(i),
                    o = t.mul(r).mul(e.toFloat().exp());return u.where(n, a, o);
              } };
          });
        }, e.leakyRelu = function (e, t) {
          return void 0 === t && (t = .2), o.assertArgumentsAreTensors({ x: e }, "leakyRelu"), u.maximum(u.scalar(t).mul(e), e);
        }, e.prelu = function (e, t) {
          o.assertArgumentsAreTensors({ x: e, alpha: t }, "prelu");var n = u.scalar(0);return u.maximum(n, e).add(t.mul(u.minimum(n, e)));
        }, e.sigmoid = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "sigmoid");return a.ENV.engine.runKernel(function (t, n) {
            return n(t.sigmoid(e));
          }, { x: e }, function (e, t) {
            var n = t[0];return { x: function x() {
                return e.mulStrict(n.mul(u.scalar(1).sub(n)));
              } };
          });
        }, e.logSigmoid = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "logSigmoid");return a.ENV.engine.runKernel(function (t) {
            return t.softplus(e.neg()).neg();
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.mulStrict(e.neg().sigmoid());
              } };
          });
        }, e.softplus = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "softplus");return a.ENV.engine.runKernel(function (t) {
            return t.softplus(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.mulStrict(e.sigmoid());
              } };
          });
        }, e.sin = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "sin");return a.ENV.engine.runKernel(function (t) {
            return t.sin(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return e.toFloat().cos().mulStrict(t);
              } };
          });
        }, e.cos = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "cos");return a.ENV.engine.runKernel(function (t) {
            return t.cos(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return e.toFloat().sin().neg().mulStrict(t);
              } };
          });
        }, e.tan = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "tan");return a.ENV.engine.runKernel(function (t) {
            return t.tan(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.divStrict(e.cos().square());
              } };
          });
        }, e.asin = function (t) {
          o.assertArgumentsAreTensors({ x: t }, "asin");return a.ENV.engine.runKernel(function (e) {
            return e.asin(t);
          }, { x: t }, function (n) {
            return { x: function x() {
                return n.divStrict(e.sqrt(u.scalar(1).sub(t.toFloat().square())));
              } };
          });
        }, e.acos = function (t) {
          o.assertArgumentsAreTensors({ x: t }, "acos");return a.ENV.engine.runKernel(function (e) {
            return e.acos(t);
          }, { x: t }, function (n) {
            return { x: function x() {
                return n.divStrict(e.sqrt(u.scalar(1).sub(t.toFloat().square()))).neg();
              } };
          });
        }, e.atan = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "atan");return a.ENV.engine.runKernel(function (t) {
            return t.atan(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.divStrict(u.scalar(1).add(e.toFloat().square()));
              } };
          });
        }, e.sinh = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "sinh");return a.ENV.engine.runKernel(function (t) {
            return t.sinh(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return e.toFloat().cosh().mulStrict(t);
              } };
          });
        }, e.cosh = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "cosh");return a.ENV.engine.runKernel(function (t) {
            return t.cosh(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return e.toFloat().sinh().mulStrict(t);
              } };
          });
        }, e.tanh = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "tanh");return a.ENV.engine.runKernel(function (t, n) {
            return n(t.tanh(e));
          }, { x: e }, function (e, t) {
            var n = t[0];return { x: function x() {
                return u.scalar(1).sub(n.square()).mulStrict(e);
              } };
          });
        }, e.asinh = function (t) {
          o.assertArgumentsAreTensors({ x: t }, "asinh");return a.ENV.engine.runKernel(function (e) {
            return e.asinh(t);
          }, { x: t }, function (n) {
            return { x: function x() {
                return n.divStrict(e.sqrt(u.scalar(1).add(t.toFloat().square())));
              } };
          });
        }, e.acosh = function (t) {
          o.assertArgumentsAreTensors({ x: t }, "acosh");return a.ENV.engine.runKernel(function (e) {
            return e.acosh(t);
          }, { x: t }, function (n) {
            return { x: function x() {
                return n.divStrict(e.sqrt(t.toFloat().square().sub(u.scalar(1))));
              } };
          });
        }, e.atanh = function (e) {
          o.assertArgumentsAreTensors({ x: e }, "atanh");return a.ENV.engine.runKernel(function (t) {
            return t.atanh(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.divStrict(u.scalar(1).sub(e.toFloat().square()));
              } };
          });
        }, e.erf = function (e) {
          o.assert("int32" === e.dtype || "float32" === e.dtype, "Input dtype must be `int32` or `float32`."), "int32" === e.dtype && (e = e.toFloat());return a.ENV.engine.runKernel(function (t) {
            return t.erf(e);
          }, { x: e }, function (t) {
            return { x: function x() {
                return t.mulStrict(u.scalar(2 / Math.sqrt(Math.PI)).mul(e.square().neg().exp()));
              } };
          });
        }, e.step = function (e, t) {
          void 0 === t && (t = 0), o.assertArgumentsAreTensors({ x: e }, "step");return a.ENV.engine.runKernel(function (n) {
            return n.step(e, t);
          }, { x: e }, function (e) {
            return { x: function x() {
                return u.zerosLike(e);
              } };
          });
        }, r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "neg", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "ceil", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "floor", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "sign", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "round", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "exp", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "expm1", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "log", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "log1p", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "sqrt", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "rsqrt", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "square", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "reciprocal", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "abs", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "clipByValue", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "relu", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "elu", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "selu", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "leakyRelu", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "prelu", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "sigmoid", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "logSigmoid", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "softplus", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "sin", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "cos", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "tan", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "asin", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "acos", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "atan", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "sinh", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "cosh", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "tanh", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "asinh", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "acosh", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "atanh", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "erf", null), r([i.doc({ heading: "Operations", subheading: "Basic math" }), s.operation], e, "step", null), e;
      }();n.UnaryOps = p;
    }, { "../doc": 3, "../environment": 5, "../util": 95, "./operation": 65, "./ops": 66, "./selu_util": 72 }], 78: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../environment"),
          a = e("../globals"),
          o = e("../ops/ops"),
          s = function (e) {
        function t(t, n, r) {
          void 0 === r && (r = 1e-8);var i = e.call(this) || this;return i.accumulatedGrads = {}, i.accumulatedUpdates = {}, i.c = a.keep(o.scalar(-t)), i.epsilon = a.keep(o.scalar(r)), i.rho = a.keep(o.scalar(n)), i.oneMinusRho = a.keep(o.scalar(1 - n)), i;
        }return r(t, e), t.prototype.applyGradients = function (e) {
          var t = this,
              n = this;for (var r in e) {
            !function (r) {
              var s = i.ENV.engine.registeredVariables[r];null == n.accumulatedGrads[r] && a.tidy(function () {
                t.accumulatedGrads[r] = o.zerosLike(s).variable(!1);
              });null == n.accumulatedUpdates[r] && a.tidy(function () {
                t.accumulatedUpdates[r] = o.zerosLike(s).variable(!1);
              });var u = e[r],
                  l = n.accumulatedGrads[r],
                  c = n.accumulatedUpdates[r];a.tidy(function () {
                var e = t.rho.mul(l).add(t.oneMinusRho.mul(u.square())),
                    n = c.add(t.epsilon).sqrt().div(l.add(t.epsilon).sqrt()).mul(u),
                    i = t.rho.mul(c).add(t.oneMinusRho.mul(n.square()));t.accumulatedGrads[r].assign(e), t.accumulatedUpdates[r].assign(i);var a = t.c.mul(n).add(s);s.assign(a);
              });
            }(r);
          }
        }, t.prototype.dispose = function () {
          var e = this;this.c.dispose(), this.epsilon.dispose(), this.rho.dispose(), this.oneMinusRho.dispose(), null != this.accumulatedUpdates && ((0, _keys2.default)(this.accumulatedUpdates).forEach(function (t) {
            return e.accumulatedUpdates[t].dispose();
          }), (0, _keys2.default)(this.accumulatedGrads).forEach(function (t) {
            return e.accumulatedGrads[t].dispose();
          }));
        }, t;
      }(e("./optimizer").Optimizer);n.AdadeltaOptimizer = s;
    }, { "../environment": 5, "../globals": 6, "../ops/ops": 66, "./optimizer": 83 }], 79: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../environment"),
          a = e("../globals"),
          o = e("../ops/ops"),
          s = function (e) {
        function t(t, n) {
          void 0 === n && (n = .1);var r = e.call(this) || this;return r.learningRate = t, r.initialAccumulatorValue = n, r.accumulatedGrads = {}, r.c = a.keep(o.scalar(-t)), r.epsilon = a.keep(o.scalar(1e-8)), r;
        }return r(t, e), t.prototype.applyGradients = function (e) {
          var t = this,
              n = this;for (var r in e) {
            !function (r) {
              var s = i.ENV.engine.registeredVariables[r];null == n.accumulatedGrads[r] && a.tidy(function () {
                t.accumulatedGrads[r] = o.fill(s.shape, t.initialAccumulatorValue).variable(!1);
              });var u = e[r],
                  l = n.accumulatedGrads[r];a.tidy(function () {
                var e = l.add(u.square());t.accumulatedGrads[r].assign(e);var n = t.c.mul(u.div(e.add(t.epsilon).sqrt())).add(s);s.assign(n);
              });
            }(r);
          }
        }, t.prototype.dispose = function () {
          var e = this;this.epsilon.dispose(), this.c.dispose(), null != this.accumulatedGrads && (0, _keys2.default)(this.accumulatedGrads).forEach(function (t) {
            return e.accumulatedGrads[t].dispose();
          });
        }, t;
      }(e("./optimizer").Optimizer);n.AdagradOptimizer = s;
    }, { "../environment": 5, "../globals": 6, "../ops/ops": 66, "./optimizer": 83 }], 80: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../environment"),
          a = e("../globals"),
          o = e("../ops/ops"),
          s = function (e) {
        function t(t, n, r, i) {
          void 0 === i && (i = 1e-8);var s = e.call(this) || this;return s.learningRate = t, s.accumulatedFirstMoment = {}, s.accumulatedSecondMoment = {}, s.c = a.keep(o.scalar(-t)), s.eps = a.keep(o.scalar(i)), s.beta1 = a.keep(o.scalar(n)), s.beta2 = a.keep(o.scalar(r)), a.tidy(function () {
            s.accBeta1 = o.scalar(n).variable(), s.accBeta2 = o.scalar(r).variable();
          }), s.oneMinusBeta1 = a.keep(o.scalar(1 - n)), s.oneMinusBeta2 = a.keep(o.scalar(1 - r)), s.one = a.keep(o.scalar(1)), s;
        }return r(t, e), t.prototype.applyGradients = function (e) {
          var t = this;a.tidy(function () {
            var n = t.one.sub(t.accBeta1),
                r = t.one.sub(t.accBeta2);for (var a in e) {
              var s = i.ENV.engine.registeredVariables[a];if (null == t.accumulatedFirstMoment[a]) {
                u = !1;t.accumulatedFirstMoment[a] = o.zerosLike(s).variable(u);
              }if (null == t.accumulatedSecondMoment[a]) {
                var u = !1;t.accumulatedSecondMoment[a] = o.zerosLike(s).variable(u);
              }var l = e[a],
                  c = t.accumulatedFirstMoment[a],
                  p = t.accumulatedSecondMoment[a],
                  h = t.beta1.mul(c).add(t.oneMinusBeta1.mul(l)),
                  d = t.beta2.mul(p).add(t.oneMinusBeta2.mul(l.square())),
                  f = h.div(n),
                  g = d.div(r);t.accumulatedFirstMoment[a].assign(h), t.accumulatedSecondMoment[a].assign(d);var m = t.c.mul(f.div(t.eps.add(g.sqrt()))).add(s);s.assign(m);
            }t.accBeta1.assign(t.accBeta1.mul(t.beta1)), t.accBeta2.assign(t.accBeta2.mul(t.beta2));
          });
        }, t.prototype.dispose = function () {
          var e = this;this.c.dispose(), this.eps.dispose(), this.beta1.dispose(), this.beta2.dispose(), this.accBeta1.dispose(), this.accBeta2.dispose(), this.oneMinusBeta1.dispose(), this.oneMinusBeta2.dispose(), this.one.dispose(), null != this.accumulatedFirstMoment && (0, _keys2.default)(this.accumulatedFirstMoment).forEach(function (t) {
            return e.accumulatedFirstMoment[t].dispose();
          }), null != this.accumulatedSecondMoment && (0, _keys2.default)(this.accumulatedSecondMoment).forEach(function (t) {
            return e.accumulatedSecondMoment[t].dispose();
          });
        }, t;
      }(e("./optimizer").Optimizer);n.AdamOptimizer = s;
    }, { "../environment": 5, "../globals": 6, "../ops/ops": 66, "./optimizer": 83 }], 81: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../environment"),
          a = e("../globals"),
          o = e("../ops/ops"),
          s = function (e) {
        function t(t, n, r, i, s) {
          void 0 === i && (i = 1e-8), void 0 === s && (s = 0);var u = e.call(this) || this;return u.learningRate = t, u.accumulatedFirstMoment = {}, u.accumulatedWeightedInfNorm = {}, u.c = a.keep(o.scalar(-t)), u.eps = a.keep(o.scalar(i)), u.beta1 = a.keep(o.scalar(n)), u.beta2 = a.keep(o.scalar(r)), u.decay = a.keep(o.scalar(s)), a.tidy(function () {
            u.iteration = o.scalar(0).variable(), u.accBeta1 = o.scalar(n).variable();
          }), u.oneMinusBeta1 = a.keep(o.scalar(1 - n)), u.one = a.keep(o.scalar(1)), u;
        }return r(t, e), t.prototype.applyGradients = function (e) {
          var t = this;a.tidy(function () {
            var n = t.one.sub(t.accBeta1),
                r = t.c.div(t.one.add(t.decay.mul(t.iteration)));for (var a in e) {
              var s = i.ENV.engine.registeredVariables[a];if (null == t.accumulatedFirstMoment[a]) {
                u = !1;t.accumulatedFirstMoment[a] = o.zerosLike(s).variable(u);
              }if (null == t.accumulatedWeightedInfNorm[a]) {
                var u = !1;t.accumulatedWeightedInfNorm[a] = o.zerosLike(s).variable(u);
              }var l = e[a],
                  c = t.accumulatedFirstMoment[a],
                  p = t.accumulatedWeightedInfNorm[a],
                  h = t.beta1.mul(c).add(t.oneMinusBeta1.mul(l)),
                  d = t.beta2.mul(p),
                  f = l.abs(),
                  g = d.maximum(f);t.accumulatedFirstMoment[a].assign(h), t.accumulatedWeightedInfNorm[a].assign(g);var m = r.div(n).mul(h.div(t.eps.add(g))).add(s);s.assign(m);
            }t.iteration.assign(t.iteration.add(t.one)), t.accBeta1.assign(t.accBeta1.mul(t.beta1));
          });
        }, t.prototype.dispose = function () {
          var e = this;this.c.dispose(), this.eps.dispose(), this.accBeta1.dispose(), this.beta1.dispose(), this.beta2.dispose(), this.oneMinusBeta1.dispose(), this.decay.dispose(), this.iteration.dispose(), this.one.dispose(), null != this.accumulatedFirstMoment && (0, _keys2.default)(this.accumulatedFirstMoment).forEach(function (t) {
            return e.accumulatedFirstMoment[t].dispose();
          }), null != this.accumulatedWeightedInfNorm && (0, _keys2.default)(this.accumulatedWeightedInfNorm).forEach(function (t) {
            return e.accumulatedWeightedInfNorm[t].dispose();
          });
        }, t;
      }(e("./optimizer").Optimizer);n.AdamaxOptimizer = s;
    }, { "../environment": 5, "../globals": 6, "../ops/ops": 66, "./optimizer": 83 }], 82: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../environment"),
          a = e("../globals"),
          o = e("../ops/ops"),
          s = function (e) {
        function t(t, n, r) {
          void 0 === r && (r = !1);var i = e.call(this, t) || this;return i.learningRate = t, i.momentum = n, i.useNesterov = r, i.m = o.scalar(i.momentum), i.accumulations = {}, i;
        }return r(t, e), t.prototype.applyGradients = function (e) {
          var t = this,
              n = this;for (var r in e) {
            !function (r) {
              var s = i.ENV.engine.registeredVariables[r];null == n.accumulations[r] && a.tidy(function () {
                t.accumulations[r] = o.zerosLike(s).variable(!1);
              });var u = n.accumulations[r],
                  l = e[r];a.tidy(function () {
                var e,
                    n = t.m.mul(u).add(l);e = t.useNesterov ? t.c.mul(l.add(n.mul(t.m))).add(s) : t.c.mul(n).add(s), t.accumulations[r].assign(n), s.assign(e);
              });
            }(r);
          }
        }, t.prototype.dispose = function () {
          if (e.prototype.dispose.call(this), this.m.dispose(), null != this.accumulations) for (var t in this.accumulations) {
            this.accumulations[t].dispose();
          }
        }, t.prototype.setMomentum = function (e) {
          this.momentum = e;
        }, t;
      }(e("./sgd_optimizer").SGDOptimizer);n.MomentumOptimizer = s;
    }, { "../environment": 5, "../globals": 6, "../ops/ops": 66, "./sgd_optimizer": 86 }], 83: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("../globals"),
          o = function () {
        function e() {}return e.prototype.minimize = function (e, t, n) {
          void 0 === t && (t = !1);var r = this.computeGradients(e, n),
              i = r.value,
              a = r.grads;return this.applyGradients(a), (0, _keys2.default)(a).forEach(function (e) {
            return a[e].dispose();
          }), t ? i : (i.dispose(), null);
        }, e.prototype.computeGradients = function (e, t) {
          return a.variableGrads(e, t);
        }, r([i.doc({ heading: "Training", subheading: "Optimizers" })], e.prototype, "minimize", null), e = r([i.doc({ heading: "Training", subheading: "Classes", namespace: "train" })], e);
      }();n.Optimizer = o;
    }, { "../doc": 3, "../globals": 6 }], 84: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../doc"),
          a = e("./adadelta_optimizer"),
          o = e("./adagrad_optimizer"),
          s = e("./adam_optimizer"),
          u = e("./adamax_optimizer"),
          l = e("./momentum_optimizer"),
          c = e("./rmsprop_optimizer"),
          p = e("./sgd_optimizer"),
          h = function () {
        function e() {}return e.sgd = function (e) {
          return new p.SGDOptimizer(e);
        }, e.momentum = function (e, t, n) {
          return void 0 === n && (n = !1), new l.MomentumOptimizer(e, t, n);
        }, e.rmsprop = function (e, t, n, r, i) {
          return void 0 === t && (t = .9), void 0 === n && (n = 0), void 0 === r && (r = 1e-8), void 0 === i && (i = !1), new c.RMSPropOptimizer(e, t, n, r, i);
        }, e.adam = function (e, t, n, r) {
          return void 0 === e && (e = .001), void 0 === t && (t = .9), void 0 === n && (n = .999), void 0 === r && (r = 1e-8), new s.AdamOptimizer(e, t, n, r);
        }, e.adadelta = function (e, t, n) {
          return void 0 === e && (e = .001), void 0 === t && (t = .95), void 0 === n && (n = 1e-8), new a.AdadeltaOptimizer(e, t, n);
        }, e.adamax = function (e, t, n, r, i) {
          return void 0 === e && (e = .002), void 0 === t && (t = .9), void 0 === n && (n = .999), void 0 === r && (r = 1e-8), void 0 === i && (i = 0), new u.AdamaxOptimizer(e, t, n, r, i);
        }, e.adagrad = function (e, t) {
          return void 0 === t && (t = .1), new o.AdagradOptimizer(e, t);
        }, r([i.doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "sgd", null), r([i.doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "momentum", null), r([i.doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "rmsprop", null), r([i.doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "adam", null), r([i.doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "adadelta", null), r([i.doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "adamax", null), r([i.doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "adagrad", null), e;
      }();n.OptimizerConstructors = h;
    }, { "../doc": 3, "./adadelta_optimizer": 78, "./adagrad_optimizer": 79, "./adam_optimizer": 80, "./adamax_optimizer": 81, "./momentum_optimizer": 82, "./rmsprop_optimizer": 85, "./sgd_optimizer": 86 }], 85: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../environment"),
          a = e("../globals"),
          o = e("../ops/ops"),
          s = function (e) {
        function t(t, n, r, i, s) {
          void 0 === n && (n = .9), void 0 === r && (r = 0), void 0 === i && (i = 1e-8), void 0 === s && (s = !1);var u = e.call(this) || this;return u.learningRate = t, u.accumulatedMeanSquares = {}, u.accumulatedMeanGrads = {}, u.accumulatedMoments = {}, u.c = a.keep(o.scalar(t)), u.epsilon = a.keep(o.scalar(i)), u.decay = a.keep(o.scalar(n)), u.momentum = a.keep(o.scalar(r)), u.oneMinusDecay = a.keep(o.scalar(1 - n)), u.centered = s, u;
        }return r(t, e), t.prototype.applyGradients = function (e) {
          var t = this,
              n = this;for (var r in e) {
            !function (r) {
              var s = i.ENV.engine.registeredVariables[r];null == n.accumulatedMeanSquares[r] && a.tidy(function () {
                t.accumulatedMeanSquares[r] = o.zerosLike(s).variable(!1);
              });null == n.accumulatedMeanGrads[r] && n.centered && a.tidy(function () {
                t.accumulatedMeanGrads[r] = o.zerosLike(s).variable(!1);
              });null == n.accumulatedMoments[r] && a.tidy(function () {
                t.accumulatedMoments[r] = o.zerosLike(s).variable(!1);
              });var u = n.accumulatedMeanSquares[r],
                  l = n.accumulatedMeanGrads[r],
                  c = n.accumulatedMoments[r],
                  p = e[r];a.tidy(function () {
                var e = t.decay.mul(u).add(t.oneMinusDecay.mul(p.square()));if (t.centered) {
                  var n = t.decay.mul(l).add(t.oneMinusDecay.mul(p)),
                      i = t.momentum.mul(c).add(t.c.mul(p).div(e.sub(n.square().add(t.epsilon)).sqrt()));t.accumulatedMeanSquares[r].assign(e), t.accumulatedMeanGrads[r].assign(n), t.accumulatedMoments[r].assign(i), o = s.sub(i), s.assign(o);
                } else {
                  var a = t.decay.mul(u).add(t.oneMinusDecay.mul(p.square())),
                      i = t.momentum.mul(c).add(t.c.mul(p).div(a.add(t.epsilon).sqrt()));t.accumulatedMeanSquares[r].assign(a), t.accumulatedMoments[r].assign(i);var o = s.sub(i);s.assign(o);
                }
              });
            }(r);
          }
        }, t.prototype.dispose = function () {
          var e = this;this.c.dispose(), this.epsilon.dispose(), this.decay.dispose(), this.momentum.dispose(), this.oneMinusDecay.dispose(), null != this.accumulatedMeanSquares && (0, _keys2.default)(this.accumulatedMeanSquares).forEach(function (t) {
            return e.accumulatedMeanSquares[t].dispose();
          }), null != this.accumulatedMeanGrads && this.centered && (0, _keys2.default)(this.accumulatedMeanGrads).forEach(function (t) {
            return e.accumulatedMeanGrads[t].dispose();
          }), null != this.accumulatedMoments && (0, _keys2.default)(this.accumulatedMoments).forEach(function (t) {
            return e.accumulatedMoments[t].dispose();
          });
        }, t;
      }(e("./optimizer").Optimizer);n.RMSPropOptimizer = s;
    }, { "../environment": 5, "../globals": 6, "../ops/ops": 66, "./optimizer": 83 }], 86: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../environment"),
          a = e("../globals"),
          o = e("../ops/ops"),
          s = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.learningRate = t, n.setLearningRate(t), n;
        }return r(t, e), t.prototype.applyGradients = function (e) {
          var t = this;(0, _keys2.default)(e).forEach(function (n) {
            var r = e[n],
                o = i.ENV.engine.registeredVariables[n];a.tidy(function () {
              var e = t.c.mul(r).add(o);o.assign(e);
            });
          });
        }, t.prototype.setLearningRate = function (e) {
          this.learningRate = e, null != this.c && this.c.dispose(), this.c = a.keep(o.scalar(-e));
        }, t.prototype.dispose = function () {
          this.c.dispose();
        }, t;
      }(e("./optimizer").Optimizer);n.SGDOptimizer = s;
    }, { "../environment": 5, "../globals": 6, "../ops/ops": 66, "./optimizer": 83 }], 87: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("./util"),
          i = function () {
        function e(e, t) {
          this.backendTimer = e, this.logger = t, null == t && (this.logger = new a());
        }return e.prototype.profileKernel = function (e, t) {
          var n,
              i = this,
              a = this.backendTimer.time(function () {
            n = t();
          }),
              o = n.dataSync();return r.checkForNaN(o, n.dtype, e), a.then(function (t) {
            i.logger.logKernelProfile(e, n, o, t.kernelMs);
          }), n;
        }, e;
      }();n.Profiler = i;var a = function () {
        function e() {}return e.prototype.logKernelProfile = function (e, t, n, i) {
          var a = r.rightPad(i + "ms", 9),
              o = r.rightPad(e, 25),
              s = t.rank,
              u = t.size,
              l = r.rightPad(t.shape.toString(), 14);console.log("%c" + o + "\t%c" + a + "\t%c" + s + "D " + l + "\t%c" + u, "font-weight:bold", "color:red", "color:blue", "color: orange");
        }, e;
      }();n.Logger = a;
    }, { "./util": 95 }], 88: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("./util");n.getFilteredNodesXToY = function (e, t, n) {
        for (var r = {}, i = {}, a = 0; a < t.length; a++) {
          r[t[a].id] = !0;
        }for (a = 0; a < e.length; a++) {
          h = (g = e[a]).inputs;for (var o in h) {
            for (var s = h[o], u = !1, l = 0; l < t.length; l++) {
              if (r[s.id]) {
                r[g.output.id] = !0, u = !0, i[g.id] = !0;break;
              }
            }if (u) break;
          }
        }var c = {};c[n.id] = !0;for (var p = {}, a = e.length - 1; a >= 0; a--) {
          var h = (g = e[a]).inputs,
              d = [];for (d.push(g.output), l = 0; l < d.length; l++) {
            if (c[d[l].id]) {
              for (var o in h) {
                c[h[o].id] = !0, p[g.id] = !0;
              }break;
            }
          }
        }for (var f = [], a = 0; a < e.length; a++) {
          var g = e[a];if (i[g.id] && p[g.id]) {
            var m = {};for (var o in g.inputs) {
              var v = g.inputs[o];r[v.id] && (m[o] = v);
            }var y = (0, _assign2.default)({}, g);y.inputs = m, y.output = g.output, f.push(y);
          }
        }return f;
      }, n.backpropagateGradients = function (e, t) {
        for (var n = t.length - 1; n >= 0; n--) {
          var i = t[n],
              a = e[i.output.id];if (null == i.gradient) throw new Error("Cannot compute gradient: gradient function not found for " + i.name + ".");var o = i.gradient(a);for (var s in i.inputs) {
            if (!(s in o)) throw new Error("Cannot backprop through input " + s + ". Available gradients found: " + (0, _keys2.default)(o) + ".");var u = o[s](),
                l = i.inputs[s];if (!r.arraysEqual(u.shape, l.shape)) throw new Error("Error in gradient for op " + i.name + ". The gradient of input '" + s + "' has shape '" + u.shape + "', which does not match the shape of the input '" + l.shape + "'");if (null == e[l.id]) e[l.id] = u;else {
              var c = e[l.id];e[l.id] = c.add(u), c.dispose();
            }
          }
        }
      };
    }, { "./util": 95 }], 89: [function (e, t, n) {
      "use strict";
      function r(e) {
        var t = e.length;if (t < 2) return [];var n = new Array(t - 1);n[t - 2] = e[t - 1];for (var r = t - 3; r >= 0; --r) {
          n[r] = n[r + 1] * e[r + 1];
        }return n;
      }var i = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }(),
          a = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      },
          o = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          s = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var u = e("./doc"),
          l = e("./environment"),
          c = e("./ops/ops"),
          p = e("./tensor_util"),
          h = e("./util"),
          d = function () {
        function e(e, t, n) {
          if (this.dtype = t, null != n) {
            var i = n.length,
                a = h.sizeFromShape(e);h.assert(i === a, "Length of values '" + i + "' does not match the size inferred by the shape '" + a + "'");
          }this.shape = e.slice(), this.values = n || h.getTypedArrayFromDType(t, h.sizeFromShape(e)), this.strides = r(e), this.size = h.sizeFromShape(e);
        }return e.prototype.set = function (e) {
          for (var t = [], n = 1; n < arguments.length; n++) {
            t[n - 1] = arguments[n];
          }0 === t.length && (t = [0]), h.assert(t.length === this.rank, "The number of provided coordinates (" + t.length + ") must match the rank (" + this.rank + ")");var r = this.locToIndex(t);this.values[r] = e;
        }, e.prototype.get = function () {
          for (var e = [], t = 0; t < arguments.length; t++) {
            e[t] = arguments[t];
          }0 === e.length && (e = [0]);for (var n = e[e.length - 1], r = 0; r < e.length - 1; ++r) {
            n += this.strides[r] * e[r];
          }return this.values[n];
        }, e.prototype.locToIndex = function (e) {
          if (0 === this.rank) return 0;if (1 === this.rank) return e[0];for (var t = e[e.length - 1], n = 0; n < e.length - 1; ++n) {
            t += this.strides[n] * e[n];
          }return t;
        }, e.prototype.indexToLoc = function (e) {
          if (0 === this.rank) return [];if (1 === this.rank) return [e];for (var t = new Array(this.shape.length), n = 0; n < t.length - 1; ++n) {
            t[n] = Math.floor(e / this.strides[n]), e -= t[n] * this.strides[n];
          }return t[t.length - 1] = e, t;
        }, Object.defineProperty(e.prototype, "rank", { get: function get() {
            return this.shape.length;
          }, enumerable: !0, configurable: !0 }), e.prototype.toTensor = function () {
          return f.make(this.shape, { values: this.values }, this.dtype);
        }, a([u.doc({ heading: "Tensors", subheading: "Creation" })], e.prototype, "set", null), a([u.doc({ heading: "Tensors", subheading: "Creation" })], e.prototype, "get", null), a([u.doc({ heading: "Tensors", subheading: "Creation" })], e.prototype, "toTensor", null), e = a([u.doc({ heading: "Tensors", subheading: "Classes" })], e);
      }();n.TensorBuffer = d;var f = function () {
        function e(e, n, i, a) {
          this.isDisposed = !1, this.size = h.sizeFromShape(e), null != i && h.assert(this.size === i.length, "Constructing tensor of shape (" + this.size + ") should match the length of values (" + i.length + ")"), this.shape = e.slice(), this.dtype = n || "float32", this.strides = r(e), this.dataId = null != a ? a : {}, this.id = t.nextId++, this.rankType = this.rank < 5 ? this.rank.toString() : "higher", l.ENV.engine.registerTensor(this), null != i && l.ENV.engine.write(this.dataId, i);
        }return t = e, e.make = function (e, n, r) {
          return new t(e, r, n.values, n.dataId);
        }, e.prototype.flatten = function () {
          return this.throwIfDisposed(), this.as1D();
        }, e.prototype.asScalar = function () {
          return this.throwIfDisposed(), h.assert(1 === this.size, "The array must have only 1 element."), this.reshape([]);
        }, e.prototype.as1D = function () {
          return this.throwIfDisposed(), this.reshape([this.size]);
        }, e.prototype.as2D = function (e, t) {
          return this.throwIfDisposed(), this.reshape([e, t]);
        }, e.prototype.as3D = function (e, t, n) {
          return this.throwIfDisposed(), this.reshape([e, t, n]);
        }, e.prototype.as4D = function (e, t, n, r) {
          return this.throwIfDisposed(), this.reshape([e, t, n, r]);
        }, e.prototype.asType = function (e) {
          return this.throwIfDisposed(), c.cast(this, e);
        }, Object.defineProperty(e.prototype, "rank", { get: function get() {
            return this.shape.length;
          }, enumerable: !0, configurable: !0 }), e.prototype.get = function () {
          for (var e = [], t = 0; t < arguments.length; t++) {
            e[t] = arguments[t];
          }h.assert(e.length === this.rank, "Number of coordinates in get() must match the rank of the tensor"), this.throwIfDisposed(), 0 === e.length && (e = [0]);for (var n = e[e.length - 1], r = 0; r < e.length - 1; ++r) {
            n += this.strides[r] * e[r];
          }return this.dataSync()[n];
        }, e.prototype.buffer = function () {
          return c.buffer(this.shape, this.dtype, this.dataSync());
        }, e.prototype.data = function () {
          return o(this, void 0, void 0, function () {
            return s(this, function (e) {
              return this.throwIfDisposed(), [2, l.ENV.engine.read(this.dataId)];
            });
          });
        }, e.prototype.dataSync = function () {
          return this.throwIfDisposed(), l.ENV.engine.readSync(this.dataId);
        }, e.prototype.dispose = function () {
          this.isDisposed || (this.isDisposed = !0, l.ENV.engine.disposeTensor(this));
        }, e.prototype.throwIfDisposed = function () {
          if (this.isDisposed) throw new Error("Tensor is disposed.");
        }, e.prototype.toFloat = function () {
          return this.asType("float32");
        }, e.prototype.toInt = function () {
          return this.asType("int32");
        }, e.prototype.toBool = function () {
          return this.asType("bool");
        }, e.prototype.print = function (e) {
          return void 0 === e && (e = !1), c.print(this, e);
        }, e.prototype.reshape = function (e) {
          return this.throwIfDisposed(), c.reshape(this, e);
        }, e.prototype.reshapeAs = function (e) {
          return this.throwIfDisposed(), this.reshape(e.shape);
        }, e.prototype.expandDims = function (e) {
          return void 0 === e && (e = 0), c.expandDims(this, e);
        }, e.prototype.squeeze = function (e) {
          return this.throwIfDisposed(), c.squeeze(this, e);
        }, e.prototype.clone = function () {
          return this.throwIfDisposed(), c.clone(this);
        }, e.prototype.toString = function (e) {
          return void 0 === e && (e = !1), p.tensorToString(this, e);
        }, e.prototype.tile = function (e) {
          return this.throwIfDisposed(), c.tile(this, e);
        }, e.prototype.gather = function (e, t) {
          return void 0 === t && (t = 0), this.throwIfDisposed(), c.gather(this, e, t);
        }, e.prototype.matMul = function (e, t, n) {
          return void 0 === t && (t = !1), void 0 === n && (n = !1), this.throwIfDisposed(), c.matMul(this, e, t, n);
        }, e.prototype.norm = function (e, t, n) {
          return void 0 === e && (e = "euclidean"), void 0 === t && (t = null), void 0 === n && (n = !1), this.throwIfDisposed(), c.norm(this, e, t, n);
        }, e.prototype.slice = function (e, t) {
          return this.throwIfDisposed(), c.slice(this, e, t);
        }, e.prototype.reverse = function (e) {
          return this.throwIfDisposed(), c.reverse(this, e);
        }, e.prototype.concat = function (e, t) {
          return void 0 === t && (t = 0), this.throwIfDisposed(), c.concat([this, e], t);
        }, e.prototype.stack = function (e, t) {
          return void 0 === t && (t = 0), c.stack([this, e], t);
        }, e.prototype.pad = function (e, t) {
          return void 0 === t && (t = 0), c.pad(this, e, t);
        }, e.prototype.batchNormalization = function (e, t, n, r, i) {
          return void 0 === n && (n = .001), this.throwIfDisposed(), c.batchNormalization(this, e, t, n, r, i);
        }, e.prototype.logSumExp = function (e, t) {
          return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), c.logSumExp(this, e, t);
        }, e.prototype.sum = function (e, t) {
          return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), c.sum(this, e, t);
        }, e.prototype.mean = function (e, t) {
          return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), c.mean(this, e, t);
        }, e.prototype.min = function (e, t) {
          return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), c.min(this, e, t);
        }, e.prototype.max = function (e, t) {
          return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), c.max(this, e, t);
        }, e.prototype.argMin = function (e) {
          return void 0 === e && (e = null), this.throwIfDisposed(), c.argMin(this, e);
        }, e.prototype.argMax = function (e) {
          return void 0 === e && (e = null), this.throwIfDisposed(), c.argMax(this, e);
        }, e.prototype.cast = function (e) {
          return this.throwIfDisposed(), c.cast(this, e);
        }, e.prototype.add = function (e) {
          return this.throwIfDisposed(), c.add(this, e);
        }, e.prototype.addStrict = function (e) {
          return this.throwIfDisposed(), c.addStrict(this, e);
        }, e.prototype.sub = function (e) {
          return this.throwIfDisposed(), c.sub(this, e);
        }, e.prototype.subStrict = function (e) {
          return this.throwIfDisposed(), c.subStrict(this, e);
        }, e.prototype.pow = function (e) {
          return this.throwIfDisposed(), c.pow(this, e);
        }, e.prototype.powStrict = function (e) {
          return this.throwIfDisposed(), c.powStrict(this, e);
        }, e.prototype.mul = function (e) {
          return this.throwIfDisposed(), c.mul(this, e);
        }, e.prototype.mulStrict = function (e) {
          return this.throwIfDisposed(), c.mulStrict(this, e);
        }, e.prototype.div = function (e) {
          return this.throwIfDisposed(), c.div(this, e);
        }, e.prototype.divStrict = function (e) {
          return this.throwIfDisposed(), c.divStrict(this, e);
        }, e.prototype.minimum = function (e) {
          return this.throwIfDisposed(), c.minimum(this, e);
        }, e.prototype.minimumStrict = function (e) {
          return this.throwIfDisposed(), c.minimumStrict(this, e);
        }, e.prototype.maximum = function (e) {
          return this.throwIfDisposed(), c.maximum(this, e);
        }, e.prototype.maximumStrict = function (e) {
          return this.throwIfDisposed(), c.maximumStrict(this, e);
        }, e.prototype.mod = function (e) {
          return this.throwIfDisposed(), c.mod(this, e);
        }, e.prototype.modStrict = function (e) {
          return this.throwIfDisposed(), c.modStrict(this, e);
        }, e.prototype.squaredDifference = function (e) {
          return this.throwIfDisposed(), c.squaredDifference(this, e);
        }, e.prototype.squaredDifferenceStrict = function (e) {
          return this.throwIfDisposed(), c.squaredDifferenceStrict(this, e);
        }, e.prototype.transpose = function (e) {
          return this.throwIfDisposed(), c.transpose(this, e);
        }, e.prototype.notEqual = function (e) {
          return this.throwIfDisposed(), c.notEqual(this, e);
        }, e.prototype.notEqualStrict = function (e) {
          return this.throwIfDisposed(), c.notEqualStrict(this, e);
        }, e.prototype.less = function (e) {
          return this.throwIfDisposed(), c.less(this, e);
        }, e.prototype.lessStrict = function (e) {
          return this.throwIfDisposed(), c.lessStrict(this, e);
        }, e.prototype.equal = function (e) {
          return this.throwIfDisposed(), c.equal(this, e);
        }, e.prototype.equalStrict = function (e) {
          return this.throwIfDisposed(), c.equalStrict(this, e);
        }, e.prototype.lessEqual = function (e) {
          return this.throwIfDisposed(), c.lessEqual(this, e);
        }, e.prototype.lessEqualStrict = function (e) {
          return this.throwIfDisposed(), c.lessEqualStrict(this, e);
        }, e.prototype.greater = function (e) {
          return this.throwIfDisposed(), c.greater(this, e);
        }, e.prototype.greaterStrict = function (e) {
          return this.throwIfDisposed(), c.greaterStrict(this, e);
        }, e.prototype.greaterEqual = function (e) {
          return this.throwIfDisposed(), c.greaterEqual(this, e);
        }, e.prototype.greaterEqualStrict = function (e) {
          return this.throwIfDisposed(), c.greaterEqualStrict(this, e);
        }, e.prototype.logicalAnd = function (e) {
          return this.throwIfDisposed(), c.logicalAnd(this, e);
        }, e.prototype.logicalOr = function (e) {
          return this.throwIfDisposed(), c.logicalOr(this, e);
        }, e.prototype.logicalNot = function () {
          return this.throwIfDisposed(), c.logicalNot(this);
        }, e.prototype.logicalXor = function (e) {
          return this.throwIfDisposed(), c.logicalXor(this, e);
        }, e.prototype.where = function (e, t) {
          return this.throwIfDisposed(), c.where(e, this, t);
        }, e.prototype.neg = function () {
          return this.throwIfDisposed(), c.neg(this);
        }, e.prototype.ceil = function () {
          return this.throwIfDisposed(), c.ceil(this);
        }, e.prototype.floor = function () {
          return this.throwIfDisposed(), c.floor(this);
        }, e.prototype.sign = function () {
          return this.throwIfDisposed(), c.sign(this);
        }, e.prototype.exp = function () {
          return this.throwIfDisposed(), c.exp(this);
        }, e.prototype.expm1 = function () {
          return this.throwIfDisposed(), c.expm1(this);
        }, e.prototype.log = function () {
          return this.throwIfDisposed(), c.log(this);
        }, e.prototype.log1p = function () {
          return this.throwIfDisposed(), c.log1p(this);
        }, e.prototype.sqrt = function () {
          return this.throwIfDisposed(), c.sqrt(this);
        }, e.prototype.rsqrt = function () {
          return this.throwIfDisposed(), c.rsqrt(this);
        }, e.prototype.square = function () {
          return this.throwIfDisposed(), c.square(this);
        }, e.prototype.reciprocal = function () {
          return this.throwIfDisposed(), c.reciprocal(this);
        }, e.prototype.abs = function () {
          return this.throwIfDisposed(), c.abs(this);
        }, e.prototype.clipByValue = function (e, t) {
          return this.throwIfDisposed(), c.clipByValue(this, e, t);
        }, e.prototype.relu = function () {
          return this.throwIfDisposed(), c.relu(this);
        }, e.prototype.elu = function () {
          return this.throwIfDisposed(), c.elu(this);
        }, e.prototype.selu = function () {
          return this.throwIfDisposed(), c.selu(this);
        }, e.prototype.leakyRelu = function (e) {
          return void 0 === e && (e = .2), this.throwIfDisposed(), c.leakyRelu(this, e);
        }, e.prototype.prelu = function (e) {
          return this.throwIfDisposed(), c.prelu(this, e);
        }, e.prototype.sigmoid = function () {
          return this.throwIfDisposed(), c.sigmoid(this);
        }, e.prototype.logSigmoid = function () {
          return this.throwIfDisposed(), c.logSigmoid(this);
        }, e.prototype.softplus = function () {
          return this.throwIfDisposed(), c.softplus(this);
        }, e.prototype.sin = function () {
          return this.throwIfDisposed(), c.sin(this);
        }, e.prototype.cos = function () {
          return this.throwIfDisposed(), c.cos(this);
        }, e.prototype.tan = function () {
          return this.throwIfDisposed(), c.tan(this);
        }, e.prototype.asin = function () {
          return this.throwIfDisposed(), c.asin(this);
        }, e.prototype.acos = function () {
          return this.throwIfDisposed(), c.acos(this);
        }, e.prototype.atan = function () {
          return this.throwIfDisposed(), c.atan(this);
        }, e.prototype.sinh = function () {
          return this.throwIfDisposed(), c.sinh(this);
        }, e.prototype.cosh = function () {
          return this.throwIfDisposed(), c.cosh(this);
        }, e.prototype.tanh = function () {
          return this.throwIfDisposed(), c.tanh(this);
        }, e.prototype.asinh = function () {
          return this.throwIfDisposed(), c.asinh(this);
        }, e.prototype.acosh = function () {
          return this.throwIfDisposed(), c.acosh(this);
        }, e.prototype.atanh = function () {
          return this.throwIfDisposed(), c.atanh(this);
        }, e.prototype.erf = function () {
          return this.throwIfDisposed(), c.erf(this);
        }, e.prototype.step = function (e) {
          return void 0 === e && (e = 0), this.throwIfDisposed(), c.step(this, e);
        }, e.prototype.softmax = function (e) {
          return void 0 === e && (e = -1), this.throwIfDisposed(), c.softmax(this, e);
        }, e.prototype.resizeBilinear = function (e, t) {
          return void 0 === t && (t = !1), this.throwIfDisposed(), c.image.resizeBilinear(this, e, t);
        }, e.prototype.resizeNearestNeighbor = function (e, t) {
          return void 0 === t && (t = !1), this.throwIfDisposed(), c.image.resizeNearestNeighbor(this, e, t);
        }, e.prototype.conv1d = function (e, t, n, r, i, a) {
          return void 0 === r && (r = "NWC"), void 0 === i && (i = 1), this.throwIfDisposed(), c.conv1d(this, e, t, n, r, i, a);
        }, e.prototype.conv2d = function (e, t, n, r, i, a) {
          return void 0 === r && (r = "NHWC"), void 0 === i && (i = [1, 1]), this.throwIfDisposed(), c.conv2d(this, e, t, n, r, i, a);
        }, e.prototype.conv2dTranspose = function (e, t, n, r, i) {
          return this.throwIfDisposed(), c.conv2dTranspose(this, e, t, n, r, i);
        }, e.prototype.depthwiseConv2D = function (e, t, n, r, i, a) {
          return void 0 === r && (r = "NHWC"), void 0 === i && (i = [1, 1]), this.throwIfDisposed(), c.depthwiseConv2d(this, e, t, n, r, i, a);
        }, e.prototype.avgPool = function (e, t, n, r) {
          return this.throwIfDisposed(), c.avgPool(this, e, t, n, r);
        }, e.prototype.maxPool = function (e, t, n, r) {
          return this.throwIfDisposed(), c.maxPool(this, e, t, n, r);
        }, e.prototype.localResponseNormalization = function (e, t, n, r) {
          return void 0 === e && (e = 5), void 0 === t && (t = 1), void 0 === n && (n = 1), void 0 === r && (r = .5), c.localResponseNormalization(this, e, t, n, r);
        }, e.prototype.variable = function (e, t, n) {
          return void 0 === e && (e = !0), this.throwIfDisposed(), g.variable(this, e, t, n);
        }, e.nextId = 0, a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "flatten", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "asScalar", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "as1D", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "as2D", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "as3D", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "as4D", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "asType", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "buffer", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "data", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "dataSync", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "dispose", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "toFloat", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "toInt", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "toBool", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "print", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "reshape", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "reshapeAs", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "expandDims", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "squeeze", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "clone", null), a([u.doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "toString", null), e = t = a([u.doc({ heading: "Tensors", subheading: "Classes" })], e);var t;
      }();n.Tensor = f;var g = function (e) {
        function t(t, r, i) {
          void 0 === r && (r = !0);var a = e.call(this, t.shape, t.dtype, null, t.dataId) || this;return a.trainable = r, a.name = i, null == a.name && (a.name = n.nextVarId.toString(), n.nextVarId++), l.ENV.engine.registerVariable(a), a;
        }return i(t, e), n = t, t.variable = function (e, t, r, i) {
          return void 0 === t && (t = !0), null != i && i !== e.dtype && (e = e.asType(i)), new n(e, t, r);
        }, t.prototype.assign = function (e) {
          if (e.dtype !== this.dtype) throw new Error("dtype of the new value (" + e.dtype + ") and previous value (" + this.dtype + ") must match");if (!h.arraysEqual(e.shape, this.shape)) throw new Error("shape of the new value (" + e.shape + ") and previous value (" + this.shape + ") must match");l.ENV.engine.disposeTensor(this), this.dataId = e.dataId, l.ENV.engine.registerTensor(this);
        }, t.nextVarId = 0, a([u.doc({ heading: "Tensors", subheading: "Classes" })], t.prototype, "assign", null), a([u.doc({ heading: "Tensors", subheading: "Creation" })], t, "variable", null), t = n = a([u.doc({ heading: "Tensors", subheading: "Classes" })], t);var n;
      }(f);n.Variable = g;var m = g.variable;n.variable = m;
    }, { "./doc": 3, "./environment": 5, "./ops/ops": 66, "./tensor_util": 90, "./util": 95 }], 90: [function (e, t, n) {
      "use strict";
      function r(e) {
        var t = e.dataSync(),
            n = e.size,
            r = e.strides[e.strides.length - 1],
            a = new Array(r).fill(0);if (e.rank > 1) for (var o = 0; o < n / r; o++) {
          for (var s = o * r, u = 0; u < r; u++) {
            a[u] = Math.max(a[u], i(t[s + u], 0).length);
          }
        }return a;
      }function i(e, t) {
        return o.rightPad(parseFloat(e.toFixed(l)).toString(), t);
      }function a(e, t, n, r, o) {
        void 0 === o && (o = !0);var l = t[0],
            c = t.length;if (0 === c) return [e[0].toString()];if (1 === c) {
          if (l > s) {
            var p = (0, _from2.default)(e.subarray(0, u)),
                h = (0, _from2.default)(e.subarray(l - u, l));return ["[" + p.map(function (e, t) {
              return i(e, r[t]);
            }).join(", ") + ", ..., " + h.map(function (e, t) {
              return i(e, r[l - u + t]);
            }).join(", ") + "]"];
          }return ["[" + (0, _from2.default)(e).map(function (e, t) {
            return i(e, r[t]);
          }).join(", ") + "]"];
        }var d = t.slice(1),
            f = n.slice(1),
            g = n[0],
            m = [];if (l > s) {
          for (x = 0; x < u; x++) {
            y = (v = x * g) + g;m.push.apply(m, a(e.subarray(v, y), d, f, r, !1));
          }m.push("...");for (x = l - u; x < l; x++) {
            y = (v = x * g) + g;m.push.apply(m, a(e.subarray(v, y), d, f, r, x === l - 1));
          }
        } else for (x = 0; x < l; x++) {
          var v = x * g,
              y = v + g;m.push.apply(m, a(e.subarray(v, y), d, f, r, x === l - 1));
        }var b = 2 === c ? "," : "";m[0] = "[" + m[0] + b;for (x = 1; x < m.length - 1; x++) {
          m[x] = " " + m[x] + b;
        }for (var w = ",\n", x = 2; x < c; x++) {
          w += "\n";
        }return m[m.length - 1] = " " + m[m.length - 1] + "]" + (o ? "" : w), m;
      }Object.defineProperty(n, "__esModule", { value: !0 });var o = e("./util"),
          s = 20,
          u = 3,
          l = 7;n.tensorToString = function (e, t) {
        var n = e.dataSync(),
            i = r(e),
            o = a(n, e.shape, e.strides, i),
            s = ["Tensor"];return t && (s.push("  dtype: " + e.dtype), s.push("  rank: " + e.rank), s.push("  shape: [" + e.shape + "]"), s.push("  values:")), s.push(o.map(function (e) {
          return "    " + e;
        }).join("\n")), s.join("\n");
      };
    }, { "./util": 95 }], 91: [function (e, t, n) {
      "use strict";
      function r(e, t, r) {
        if (void 0 === r && (r = n.TEST_EPSILON), e instanceof a.Tensor || t instanceof a.Tensor) {
          if (e instanceof a.Tensor && t instanceof a.Tensor) {
            if (e.dtype !== t.dtype) throw new Error("Arrays are of different type actual: " + e.dtype + " vs expected: " + t.dtype + ".");if (!o.arraysEqual(e.shape, t.shape)) throw new Error("Arrays are of different shape actual: " + e.shape + " vs expected: " + t.shape + ".");
          }
        } else {
          var s = e.constructor.name,
              u = t.constructor.name;if (s !== u) throw new Error("Arrays are of different type actual: " + s + " vs expected: " + u);
        }var l, c;if (l = e instanceof a.Tensor ? e.dataSync() : e, c = t instanceof a.Tensor ? t.dataSync() : t, l.length !== c.length) throw new Error("Arrays have different lengths actual: " + l.length + " vs expected: " + c.length + ".\nActual:   " + l + ".\nExpected: " + c + ".");for (var p = 0; p < c.length; ++p) {
          var h = l[p],
              d = c[p];if (!i(h, Number(d), r)) throw new Error("Arrays differ: actual[" + p + "] = " + h + ", expected[" + p + "] = " + d + ".\nActual:   " + l + ".\nExpected: " + c + ".");
        }
      }function i(e, t, n) {
        return !(!isNaN(e) || !isNaN(t)) || !(isNaN(e) || isNaN(t) || Math.abs(e - t) > n);
      }Object.defineProperty(n, "__esModule", { value: !0 });var a = e("./tensor"),
          o = e("./util");n.WEBGL_ENVS = { BACKEND: "test-webgl" }, n.CPU_ENVS = { BACKEND: "test-cpu" }, n.ALL_ENVS = {}, n.TEST_EPSILON = .001, n.expectArraysClose = r, n.expectPromiseToFail = function (e, t) {
        e().then(function () {
          return t.fail();
        }, function () {
          return t();
        });
      }, n.expectArraysEqual = function (e, t) {
        return r(e, t, 0);
      }, n.expectNumbersClose = function (e, t, r) {
        if (void 0 === r && (r = n.TEST_EPSILON), !i(e, t, r)) throw new Error("Numbers differ: actual === " + e + ", expected === " + t);
      }, n.expectValuesInRange = function (e, t, n) {
        var r;r = e instanceof a.Tensor ? e.dataSync() : e;for (var i = 0; i < r.length; i++) {
          if (r[i] < t || r[i] > n) throw new Error("Value out of range:" + r[i] + " low: " + t + ", high: " + n);
        }
      };
    }, { "./tensor": 89, "./util": 95 }], 92: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("./doc"),
          a = e("./environment"),
          o = e("./util"),
          s = function () {
        function e() {}return e.tidy = function (e, t, n) {
          void 0 === n && (n = !1);var r = null;if (null == t) {
            if ("function" != typeof e) throw new Error("Please provide a function to tidy()");t = e;
          } else {
            if ("string" != typeof e && !(e instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if ("function" != typeof t) throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r = e;
          }a.ENV.engine.startScope(r, n);var i = t();return i instanceof _promise2.default && console.error("Cannot return a Promise inside of tidy."), a.ENV.engine.endScope(i, n), i;
        }, e.dispose = function (e) {
          o.extractTensorsFromAny(e).forEach(function (e) {
            return e.dispose();
          });
        }, e.keep = function (e) {
          return a.ENV.engine.keep(e);
        }, e.time = function (e) {
          return a.ENV.engine.time(e);
        }, r([i.doc({ heading: "Performance", subheading: "Memory" })], e, "tidy", null), r([i.doc({ heading: "Performance", subheading: "Memory" })], e, "keep", null), r([i.doc({ heading: "Performance", subheading: "Timing" })], e, "time", null), e;
      }();n.Tracking = s;
    }, { "./doc": 3, "./environment": 5, "./util": 95 }], 93: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("./optimizers/adadelta_optimizer"),
          i = e("./optimizers/adagrad_optimizer"),
          a = e("./optimizers/adam_optimizer"),
          o = e("./optimizers/adamax_optimizer"),
          s = e("./optimizers/momentum_optimizer"),
          u = e("./optimizers/optimizer_constructors"),
          l = e("./optimizers/rmsprop_optimizer"),
          c = e("./optimizers/sgd_optimizer");s.MomentumOptimizer, c.SGDOptimizer, r.AdadeltaOptimizer, i.AdagradOptimizer, l.RMSPropOptimizer, o.AdamaxOptimizer, a.AdamOptimizer, n.train = { sgd: u.OptimizerConstructors.sgd, momentum: u.OptimizerConstructors.momentum, adadelta: u.OptimizerConstructors.adadelta, adagrad: u.OptimizerConstructors.adagrad, rmsprop: u.OptimizerConstructors.rmsprop, adamax: u.OptimizerConstructors.adamax, adam: u.OptimizerConstructors.adam };
    }, { "./optimizers/adadelta_optimizer": 78, "./optimizers/adagrad_optimizer": 79, "./optimizers/adam_optimizer": 80, "./optimizers/adamax_optimizer": 81, "./optimizers/momentum_optimizer": 82, "./optimizers/optimizer_constructors": 84, "./optimizers/rmsprop_optimizer": 85, "./optimizers/sgd_optimizer": 86 }], 94: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        return s[e][t];
      }Object.defineProperty(n, "__esModule", { value: !0 });!function (e) {
        e.float32 = "float32", e.int32 = "int32", e.bool = "bool";
      }(n.DType || (n.DType = {}));!function (e) {
        e.R0 = "R0", e.R1 = "R1", e.R2 = "R2", e.R3 = "R3", e.R4 = "R4";
      }(n.Rank || (n.Rank = {}));var i;!function (e) {
        e.float32 = "float32", e.int32 = "int32", e.bool = "int32";
      }(i || (i = {}));var a;!function (e) {
        e.float32 = "float32", e.int32 = "int32", e.bool = "bool";
      }(a || (a = {}));var o;!function (e) {
        e.float32 = "float32", e.int32 = "float32", e.bool = "float32";
      }(o || (o = {}));var s = { float32: o, int32: i, bool: a };n.upcastType = r, n.sumOutType = function (e) {
        return r(e, "int32");
      };
    }, {}], 95: [function (e, t, n) {
      "use strict";
      function r(e, t, n) {
        a(e instanceof h.Tensor, "Argument '" + t + "' passed to '" + n + "' must be a Tensor, but got " + (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) + ".");
      }function i(e) {
        for (var t = e.length, n = 0, r = 0; t > 0;) {
          r = Math.random() * t | 0, n = e[--t], e[t] = e[r], e[r] = n;
        }
      }function a(e, t) {
        if (!e) throw new Error(t);
      }function o(e, t) {
        if (void 0 === t && (t = []), Array.isArray(e)) for (var n = 0; n < e.length; ++n) {
          o(e[n], t);
        } else t.push(e);return t;
      }function s(e, t) {
        if (e.length !== t.length) return !1;for (var n = 0; n < e.length; n++) {
          if (e[n] !== t[n]) return !1;
        }return !0;
      }function u(e, t, n) {
        e[decodeURIComponent(t)] = decodeURIComponent(n || "");
      }function l(e) {
        return e instanceof Float32Array || e instanceof Int32Array || e instanceof Uint8Array;
      }function c(e) {
        if (null == e) return [];if (e instanceof h.Tensor) return [e];var t = [],
            n = e;if (!p(n)) return [];for (var r in n) {
          var i = o(n[r]).filter(function (e) {
            return e instanceof h.Tensor;
          });t.push.apply(t, i);
        }return t;
      }function p(e) {
        return Array.isArray(e) || "object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e));
      }Object.defineProperty(n, "__esModule", { value: !0 });var h = e("./tensor");n.assertArgumentsAreTensors = function (e, t) {
        for (var n in e) {
          !function (n) {
            var i = e[n];Array.isArray(i) ? i.forEach(function (e, i) {
              r(e, n + "[" + i + "]", t);
            }) : r(i, n, t);
          }(n);
        }
      }, n.shuffle = i, n.clamp = function (e, t, n) {
        return Math.max(e, Math.min(t, n));
      }, n.randUniform = function (e, t) {
        return Math.random() * (t - e) + e;
      }, n.distSquared = function (e, t) {
        for (var n = 0, r = 0; r < e.length; r++) {
          var i = Number(e[r]) - Number(t[r]);n += i * i;
        }return n;
      }, n.assert = a, n.assertShapesMatch = function (e, t, n) {
        void 0 === n && (n = ""), a(s(e, t), n + " Shapes " + e + " and " + t + " must match");
      }, n.assertTypesMatch = function (e, t) {
        a(e.dtype === t.dtype, " The dtypes of the first(" + e.dtype + ") and second(" + t.dtype + ") input must match");
      }, n.flatten = o, n.inferShape = function (e) {
        if (l(e)) return [e.length];if (!Array.isArray(e)) return [];for (var t = []; e instanceof Array;) {
          t.push(e.length), e = e[0];
        }return t;
      }, n.sizeFromShape = function (e) {
        if (0 === e.length) return 1;for (var t = e[0], n = 1; n < e.length; n++) {
          t *= e[n];
        }return t;
      }, n.isScalarShape = function (e) {
        return 0 === e.length;
      }, n.arraysEqual = s, n.isInt = function (e) {
        return e % 1 == 0;
      }, n.tanh = function (e) {
        if (null != _tanh2.default) return (0, _tanh2.default)(e);if (e === 1 / 0) return 1;if (e === -1 / 0) return -1;var t = Math.exp(2 * e);return (t - 1) / (t + 1);
      }, n.sizeToSquarishShape = function (e) {
        for (var t = Math.floor(Math.sqrt(e)); t > 1; --t) {
          if (e % t == 0) return [t, e / t];
        }return [1, e];
      }, n.createShuffledIndices = function (e) {
        for (var t = new Uint32Array(e), n = 0; n < e; ++n) {
          t[n] = n;
        }return i(t), t;
      }, n.rightPad = function (e, t) {
        return t <= e.length ? e : e + " ".repeat(t - e.length);
      }, n.repeatedTry = function (e, t, n) {
        return void 0 === t && (t = function t(e) {
          return 0;
        }), new _promise2.default(function (r, i) {
          var a = 0,
              o = function o() {
            if (e()) r();else {
              var s = t(++a);null != n && a >= n ? i() : setTimeout(o, s);
            }
          };setTimeout(o, 0);
        });
      }, n.getQueryParams = function (e) {
        var t = {};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (e) {
          for (var n = [], r = 1; r < arguments.length; r++) {
            n[r - 1] = arguments[r];
          }return u(t, n[0], n[1]), n.join("=");
        }), t;
      }, n.inferFromImplicitShape = function (e, t) {
        for (var n = 1, r = -1, i = 0; i < e.length; ++i) {
          if (e[i] > 0) n *= e[i];else if (-1 === e[i]) {
            if (-1 !== r) throw Error("Shapes can only have 1 implicit size. Found - 1 at dim " + r + " and dim " + i);r = i;
          } else if (e[i] <= 0) throw Error("Shapes can not be <= 0. Found " + e[i] + " at dim " + i);
        }if (-1 === r) {
          if (t > 0 && t !== n) throw Error("Size(" + t + ") must match the product of shape " + e);return e;
        }if (t % n != 0) throw Error("The implicit shape can't be a fractional number. Got " + t + " / " + n);var a = e.slice();return a[r] = t / n, a;
      }, n.squeezeShape = function (e, t) {
        for (var n = [], r = [], i = 0, a = 0; a < e.length; ++a) {
          if (null != t) {
            if (t[i] === a && e[a] > 1) throw new Error("Can't squeeze axis " + a + " since its dim '" + e[a] + "' is not 1");(null == t[i] || t[i] > a) && 1 === e[a] && (n.push(e[a]), r.push(a)), t[i] <= a && i++;
          }e[a] > 1 && (n.push(e[a]), r.push(a));
        }return { newShape: n, keptDims: r };
      }, n.getTypedArrayFromDType = function (e, t) {
        var n = null;if (null == e || "float32" === e) n = new Float32Array(t);else if ("int32" === e) n = new Int32Array(t);else {
          if ("bool" !== e) throw new Error("Unknown data type " + e);n = new Uint8Array(t);
        }return n;
      }, n.isTensorInList = function (e, t) {
        for (var n = 0; n < t.length; n++) {
          if (t[n].id === e.id) return !0;
        }return !1;
      }, n.checkForNaN = function (e, t, n) {
        if ("float32" === t) for (var r = 0; r < e.length; r++) {
          if (isNaN(e[r])) throw Error("The result of the '" + n + "' has NaNs.");
        }
      }, n.flattenNameArrayMap = function (e, t) {
        var n = [];if (e instanceof h.Tensor) n.push(e);else for (var r = e, i = 0; i < t.length; i++) {
          n.push(r[t[i]]);
        }return n;
      }, n.unflattenToNameArrayMap = function (e, t) {
        if (e.length !== t.length) throw new Error("Cannot unflatten Tensor[], keys and arrays are not of same length.");for (var n = {}, r = 0; r < e.length; r++) {
          n[e[r]] = t[r];
        }return n;
      }, n.hasEncodingLoss = function (e, t) {
        return !("float32" === t || "int32" === t && "float32" !== e || "bool" === t && "bool" === e);
      }, n.copyTypedArray = function (e, t) {
        if (null == t || "float32" === t) return new Float32Array(e);if ("int32" === t) return new Int32Array(e);if ("bool" === t) {
          for (var n = new Uint8Array(e.length), r = 0; r < n.length; ++r) {
            0 !== Math.round(e[r]) && (n[r] = 1);
          }return n;
        }throw new Error("Unknown data type " + t);
      }, n.isTypedArray = l, n.bytesPerElement = function (e) {
        if ("float32" === e || "int32" === e) return 4;if ("bool" === e) return 1;throw new Error("Unknown dtype " + e);
      }, n.isFunction = function (e) {
        return !!(e && e.constructor && e.call && e.apply);
      }, n.extractTensorsFromContainer = function (e) {
        return c(e);
      }, n.extractTensorsFromAny = c;
    }, { "./tensor": 89 }], 96: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });n.version = "0.8.4";
    }, {}], 97: [function (e, t, n) {
      "use strict";
      var r = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          i = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var a = e("./ops/ops"),
          o = e("./util"),
          s = { float32: 4, int32: 4 };n.loadWeights = function (e, t, n, u) {
        return void 0 === t && (t = ""), r(this, void 0, void 0, function () {
          var r, l, c, p, h, d, f, g, m, v, y;return i(this, function (i) {
            switch (i.label) {case 0:
                if (r = e.map(function () {
                  return !1;
                }), l = {}, c = null != n ? n.map(function () {
                  return !1;
                }) : [], p = [], e.forEach(function (e, t) {
                  var i = 0;e.weights.forEach(function (e) {
                    var a = s[e.dtype] * o.sizeFromShape(e.shape),
                        u = function u() {
                      r[t] = !0, null == l[t] && (l[t] = []), l[t].push({ manifestEntry: e, groupOffset: i, sizeBytes: a });
                    };null != n ? n.forEach(function (t, n) {
                      t === e.name && (u(), c[n] = !0);
                    }) : u(), p.push(e.name), i += a;
                  });
                }), !c.every(function (e) {
                  return e;
                })) throw h = n.filter(function (e, t) {
                  return !c[t];
                }), new Error("Could not find weights in manifest with names: " + h.join(", ") + ". \nManifest JSON has weights with names: " + p.join(", ") + ".");return d = r.reduce(function (e, t, n) {
                  return t && e.push(n), e;
                }, []), f = [], d.forEach(function (n) {
                  e[n].paths.forEach(function (e) {
                    var n = t + (t.endsWith("/") ? "" : "/") + e;f.push(fetch(n, u));
                  });
                }), [4, _promise2.default.all(f)];case 1:
                return g = i.sent(), [4, _promise2.default.all(g.map(function (e) {
                  return e.arrayBuffer();
                }))];case 2:
                return m = i.sent(), v = {}, y = 0, d.forEach(function (t) {
                  for (var n = e[t].paths.length, r = 0, i = 0; i < n; i++) {
                    r += m[y + i].byteLength;
                  }for (var o = new ArrayBuffer(r), s = new Uint8Array(o), u = 0, c = 0; c < n; c++) {
                    var p = new Uint8Array(m[y + c]);s.set(p, u), u += p.byteLength;
                  }l[t].forEach(function (e) {
                    var t,
                        n = o.slice(e.groupOffset, e.groupOffset + e.sizeBytes);if ("float32" === e.manifestEntry.dtype) t = new Float32Array(n);else {
                      if ("int32" !== e.manifestEntry.dtype) throw new Error("Weight " + e.manifestEntry.name + " has unknown dtype " + e.manifestEntry.dtype + ".");t = new Int32Array(n);
                    }var r = e.manifestEntry.name;if (null != v[r]) throw new Error("Duplicate weight with name " + r + ". Please make sure weights names are unique in the manifest JSON.");v[r] = a.tensor(t, e.manifestEntry.shape, e.manifestEntry.dtype);
                  }), y += n;
                }), [2, v];}
          });
        });
      };
    }, { "./ops/ops": 66, "./util": 95 }], 98: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        return void 0 === t && (t = 1), g.elu(e, t);
      }function i(e) {
        return g.selu(e);
      }function a(e) {
        return g.relu(e);
      }function o(e) {
        return g.minimum(f.scalar(6), g.relu(e));
      }function s(e) {
        return e;
      }function u(e) {
        return g.sigmoid(e);
      }function l(e) {
        return g.hardSigmoid(e);
      }function c(e) {
        return g.softplus(e);
      }function p(e) {
        return g.softsign(e);
      }function h(e) {
        return g.tanh(e);
      }function d(e, t) {
        return void 0 === t && (t = -1), g.softmax(e, t);
      }Object.defineProperty(n, "__esModule", { value: !0 });var f = e("@tensorflow/tfjs-core"),
          g = e("./backend/tfjs_backend"),
          m = e("./errors");n.getActivation = function (e) {
        if (null == e) return s;if ("elu" === e.toLowerCase()) return r;if ("hardsigmoid" === e.toLowerCase()) return l;if ("linear" === e.toLowerCase()) return s;if ("relu" === e.toLowerCase()) return a;if ("relu6" === e.toLowerCase()) return o;if ("selu" === e.toLowerCase()) return i;if ("sigmoid" === e.toLowerCase()) return u;if ("softmax" === e.toLowerCase()) return d;if ("softplus" === e.toLowerCase()) return c;if ("softsign" === e.toLowerCase()) return p;if ("tanh" === e.toLowerCase()) return h;throw new m.ValueError("Unsupported activation function " + e);
      }, n.elu = r, n.selu = i, n.relu = a, n.relu6 = o, n.linear = s, n.sigmoid = u, n.hardSigmoid = l, n.softplus = c, n.softsign = p, n.tanh = h, n.softmax = d, n.serializeActivation = function (e) {
        return e.name;
      };
    }, { "./backend/tfjs_backend": 100, "./errors": 107, "@tensorflow/tfjs-core": 8 }], 99: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = 1e-7;n.epsilon = function () {
        return r;
      }, n.setEpsilon = function (e) {
        r = e;
      }, n.imageDataFormat = function () {
        return "channelsLast";
      };
    }, {}], 100: [function (e, t, n) {
      "use strict";
      function r() {
        for (var e in re) {
          for (var t in re[e]) {
            re[e][t].dispose(), delete re[e][t];
          }
        }
      }function i(e, t) {
        return void 0 === t && (t = ne), null == re[t][e] && (re[t][e] = K.scalar(e, t), H.keep(re[t][e])), re[t][e];
      }function a(e) {
        return e.shape;
      }function o(e) {
        return e.shape.length;
      }function s(e, t) {
        if (null == t) return t;var n = a(e);return Array.isArray(t) ? t.map(function (e) {
          return Z.pyNormalizeArrayIndex(n, e);
        }) : Z.pyNormalizeArrayIndex(n, t);
      }function u(e, t) {
        return e.reshape(t);
      }function l(e, t) {
        return H.transpose(e, t);
      }function c(e, t) {
        return H.reverse(e, t);
      }function p(e, t) {
        void 0 === t && (t = -1);var n = a(e).slice();return t < 0 && (t = n.length + t + 1), n.splice(t, 0, 1), u(e, n);
      }function h(e) {
        return u(e, [J.arrayProd(e.shape)]);
      }function d(e, t, n) {
        switch (e.rank) {case 1:
            return H.slice1d(e, t, n);case 2:
            return H.slice2d(e, [t, 0], [n, e.shape[1]]);case 3:
            return H.slice3d(e, [t, 0, 0], [n, e.shape[1], e.shape[2]]);case 4:
            return H.slice4d(e, [t, 0, 0, 0], [n, e.shape[1], e.shape[2], e.shape[3]]);default:
            throw new Y.ValueError("sliceAlongFirstAxis() received an unsupported tensor rank: " + e.rank);}
      }function f(e, t, n, r, i) {
        return void 0 === i && (i = .001), K.tidy(function () {
          var a = H.moments(e, r),
              o = a.mean,
              s = a.variance;return [F(e, o, s, n, t, i), o, s];
        });
      }function g(e, t, n, r, i) {
        return void 0 === i && (i = .001), K.tidy(function () {
          for (var a = H.moments(e, r), s = a.mean, l = a.variance, c = [], p = 0, h = J.range(0, o(e)); p < h.length; p++) {
            var d = h[p];-1 !== r.indexOf(d) ? c.push(1) : c.push(e.shape[d]);
          }var f = u(s, c),
              g = u(l, c),
              m = null == t ? null : u(t, c),
              v = null == n ? null : u(n, c);return [F(e, f, g, v, m, i), s, l];
        });
      }function m(e, t) {
        switch (e.rank) {case 1:
            return H.concat1d([e, t]);case 2:
            return H.concat2d([e, t], 0);case 3:
            return H.concat3d([e, t], 0);case 4:
            return H.concat4d([e, t], 0);default:
            throw new Y.ValueError("concatAlongFirstAxis() received an unsupported tensor rank: " + e.rank);}
      }function v(e, t) {
        if (Array.isArray(t) || (t = [t]), o(e) !== t.length) throw new Y.ValueError("The length of input n (" + t.length + ") does not match the number of dimensions in input x (" + o(e) + ")");return H.tile(e, t);
      }function y(e, t) {
        return H.zeros(e);
      }function b(e, t, n) {
        for (var r = [], i = 0; i < e; ++i) {
          for (var a = 0; a < e; ++a) {
            r.push(i === a ? 1 : 0);
          }
        }return K.tensor2d(r, [e, e]);
      }function w(e) {
        return H.neg(e);
      }function x(e, t) {
        return H.sub(e, t);
      }function A(e, t) {
        return H.mul(e, t);
      }function E(e, t) {
        return H.div(e, t);
      }function _(e, t) {
        return H.mul(e, t);
      }function T(e, t) {
        return H.add(e, t);
      }function S(e, t, n, r, i) {
        return H.randomUniform(e, t, n);
      }function C(e, t, n, r, i) {
        return void 0 === t && (t = 0), void 0 === n && (n = 1), H.truncatedNormal(e, t, n);
      }function O(e, t, n, r, i) {
        if (void 0 === t && (t = 0), void 0 === n && (n = 1), r === Q.DType.bool) throw new Y.NotImplementedError("randomNormal does not support dType bool.");var a = r === Q.DType.float32 ? "float32" : "int32";return H.randomNormal(e, t, n, a, i);
      }function k(e) {
        var t = K.zerosLike(e),
            n = K.onesLike(e);return K.where(D(e, t), t, K.where(P(e, K.zerosLike(e)), n, _(i(-1), n)));
      }function R(e, t, n) {
        return H.sum(e, t, n);
      }function N(e) {
        return H.mulStrict(e, e);
      }function I(e) {
        return H.sqrt(e);
      }function z(e) {
        return H.log(e);
      }function M(e, t, n) {
        return H.clipByValue(e, t, n);
      }function D(e, t) {
        return H.equal(e, t);
      }function P(e, t) {
        return H.greater(e, t);
      }function L(e, t) {
        return H.maximum(e, t);
      }function F(e, t, n, r, i, a) {
        void 0 === a && (a = .001);var s;if (2 === o(e)) s = H.batchNormalization2d(e, t, n, a, i, r);else if (3 === o(e)) s = H.batchNormalization3d(e, t, n, a, i, r);else {
          if (4 !== o(e)) throw new Y.NotImplementedError("batchNormalization is not implememnted for array of rank " + o(e) + " yet");s = H.batchNormalization4d(e, t, n, a, i, r);
        }return s;
      }function V(e, t, n) {
        if (null == n && (n = ee.imageDataFormat()), X.checkDataFormat(n), 1 !== o(t) && o(t) !== o(e)) throw new Y.ValueError("Unexpected bias dimensions: " + o(t) + "; expected it to be 1 or " + o(e));var r,
            i = t.shape;if (5 === o(e)) "channelsFirst" === n ? r = 1 === i.length ? e.add(t.reshape([1, i[0], 1, 1, 1])) : e.add(t.reshape([1, i[3], i[0], i[1], i[2]])) : "channelsLast" === n && (r = 1 === i.length ? e.add(t.reshape([1, 1, 1, 1, i[0]])) : e.add(t.reshape([1].concat(i))));else if (4 === o(e)) "channelsFirst" === n ? r = 1 === i.length ? e.add(t.reshape([1, i[0], 1, 1])) : e.add(t.reshape([1, i[2], i[0], i[1]])) : "channelsLast" === n && (r = 1 === i.length ? e.add(t.reshape([1, 1, 1, i[0]])) : e.add(t.reshape([1].concat(i))));else if (3 === o(e)) "channelsFirst" === n ? r = 1 === i.length ? e.add(t.reshape([1, i[0], 1])) : e.add(t.reshape([1, i[1], i[0]])) : "channelsLast" === n && (r = 1 === i.length ? e.add(t.reshape([1, 1, i[0]])) : e.add(t.reshape([1].concat(i))));else {
          if (!(o(e) < 3)) throw new Y.ValueError("Unsupported input rank by biasAdd: " + o(e));r = e.add(t);
        }return r;
      }function B(e, t) {
        return X.checkDataFormat(t), "channelsFirst" === t ? H.transpose(e, [0, 2, 3, 1]) : e;
      }function U(e, t, n, r, i, a, o) {
        if (void 0 === r && (r = 1), void 0 === i && (i = "valid"), void 0 === o && (o = 1), null == a && (a = ee.imageDataFormat()), X.checkDataFormat(a), 3 !== e.shape.length) throw new Y.ValueError("The input of a conv1dWithBias operation should be 3, but is " + e.shape.length + " instead.");if (3 !== t.shape.length) throw new Y.ValueError("The kernel for a conv1dWithBias operation should be 3, but is " + t.shape.length + " instead");if (null != n && 1 !== n.shape.length) throw new Y.ValueError("The bias for a conv1dWithBias operation should be 1, but is " + t.shape.length + " instead");if ("channelsFirst" === a && (e = l(e, [0, 2, 1])), "casual" === i) throw new Y.NotImplementedError("The support for CASUAL padding mode in conv1dWithBias is not implemented yet.");var s = H.conv1d(e, t, r, "same" === i ? "same" : "valid", "NWC", o);return null != n && (s = V(s, n)), s;
      }function j(e, t, n, r, i, a, s) {
        if (void 0 === r && (r = [1, 1]), void 0 === i && (i = "valid"), null == a && (a = ee.imageDataFormat()), X.checkDataFormat(a), 3 !== o(e) && 4 !== o(e)) throw new Y.ValueError("conv2dWithBias expects input to be of rank 3 or 4, but received " + o(e) + ".");if (3 !== o(t) && 4 !== o(t)) throw new Y.ValueError("conv2dWithBias expects kernel to be of rank 3 or 4, but received " + o(e) + ".");var u = B(e, a);if ("casual" === i) throw new Y.NotImplementedError("The support for CASUAL padding mode in conv1dWithBias is not implemented yet.");return u = H.conv2d(u, t, r, "same" === i ? "same" : "valid", "NHWC", s), null != n && (u = V(u, n)), "channelsFirst" === a && (u = H.transpose(u, [0, 3, 1, 2])), u;
      }function G(e, t) {
        return void 0 === t && (t = -1), H.softmax(e, t);
      }function W(e, t, r) {
        return void 0 === r && (r = !1), t = r ? G(t) : E(t, R(t, a(t).length - 1, !0)), t = M(t, n.epsilon(), 1 - n.epsilon()), H.neg(H.sum(H.mul(e.toFloat(), H.log(t)), a(t).length - 1));
      }function q(e, t) {
        var n = H.maximum(t, H.zerosLike(t)),
            r = H.mul(t, e),
            a = H.log(H.add(i(1), H.exp(H.neg(H.abs(t)))));return H.add(H.sub(n, r), a);
      }Object.defineProperty(n, "__esModule", { value: !0 });var H = e("@tensorflow/tfjs-core"),
          K = e("@tensorflow/tfjs-core"),
          X = e("../common"),
          Y = e("../errors"),
          Q = e("../types"),
          Z = e("../utils/generic_utils"),
          J = e("../utils/math_utils"),
          $ = e("./common"),
          ee = e("./common"),
          te = "webgl",
          ne = Q.DType.float32;n.disposeScalarCache = r, n.setBackend = function (e) {
        H.setBackend(e), te = e, r();
      }, n.getBackend = function () {
        return te;
      }, n.keep = function (e) {
        return H.keep(e);
      };var re = { float32: {}, int32: {} };n.getScalar = i, n.epsilon = $.epsilon, n.isBackendSymbolic = function () {
        return !1;
      }, n.shape = a, n.intShape = function (e) {
        return e.shape;
      }, n.ndim = o, n.dtype = function (e) {
        return e instanceof K.Tensor ? ne : e.dtype;
      }, n.normalizeAxis = s, n.countParams = function (e) {
        var t = e.shape;return t.length > 0 ? t.reduce(function (e, t) {
          return e * t;
        }) : 1;
      }, n.cast = function (e, t) {
        return e.asType(t);
      }, n.reshape = u, n.transpose = l, n.permuteDimensions = l, n.reverse = c, n.expandDims = p, n.squeeze = function (e, t) {
        return H.squeeze(e, [t]);
      }, n.temporalPadding = function (e, t) {
        if (3 !== o(e)) throw new Y.ValueError("temporalPadding expects input tensor to be 3-D, but received a " + o(e) + "-D tensor.");if (null == t && (t = [1, 1]), 2 !== t.length) throw new Y.ValueError("temporalPadding expects input padding pattern to be a length-2 array, but received a length-" + t.length + " array.");var n = [[0, 0], t, [0, 0]];return H.pad(e, n);
      }, n.spatial2dPadding = function (e, t, n) {
        if (4 !== o(e)) throw new Y.ValueError("temporalPadding expects input tensor to be 4-D, but received a " + o(e) + "-D tensor.");if (null == t && (t = [[1, 1], [1, 1]]), 2 !== t.length || 2 !== t[0].length || 2 !== t[1].length) throw new Y.ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if (null == n && (n = ee.imageDataFormat()), "channelsLast" !== n && "channelsFirst" !== n) throw new Y.ValueError("Unknown data format: " + n + ". Supported data formats are 'channelsLast' and 'channelsFirst.");var r;return r = "channelsFirst" === n ? [[0, 0], [0, 0], t[0], t[1]] : [[0, 0], t[0], t[1], [0, 0]], H.pad(e, r);
      }, n.repeat = function (e, t) {
        if (2 !== e.shape.length) throw new Y.ValueError("repeat() expects a rank-2 tensor, but received a rank-" + e.shape.length + " tensor.");return v(p(e, 1), [1, t, 1]);
      }, n.flatten = h, n.batchFlatten = function (e) {
        if (o(e) <= 1) throw new Y.ValueError("batchFlatten requires a minimum rank of 2. Got rank: " + o(e) + ".");return u(e, [e.shape[0], J.arrayProd(e.shape, 1)]);
      }, n.sliceAlongFirstAxis = d, n.sliceAlongLastAxis = function (e, t, n) {
        switch (e.rank) {case 1:
            return H.slice1d(e, t, n);case 2:
            return H.slice2d(e, [0, t], [e.shape[0], n]);case 3:
            return H.slice3d(e, [0, 0, t], [e.shape[0], e.shape[1], n]);case 4:
            return H.slice4d(e, [0, 0, 0, t], [e.shape[0], e.shape[1], e.shape[2], n]);default:
            throw new Y.ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + e.rank);}
      }, n.normalizeBatchInTraining = function (e, t, n, r, i) {
        return void 0 === i && (i = .001), K.util.arraysEqual(r.slice().sort(), J.range(0, o(e) - 1)) ? f(e, t, n, r, i) : g(e, t, n, r, i);
      }, n.concatenate = function (e, t) {
        void 0 === t && (t = -1);var n;return t < 0 && (t = 0 !== (n = o(e[0])) ? n : 0), t === o(e[0]) && (t = -1), H.concat(e, t);
      }, n.concatAlongFirstAxis = m, n.tile = v, n.variable = function (e, t, n, r) {
        return new Q.LayerVariable(e, t, n, !0, r);
      }, n.batchGetValue = function (e) {
        return e.map(function (e) {
          return e.read();
        });
      }, n.batchSetValue = function (e) {
        e.map(function (e) {
          e[0].write(e[1]);
        });
      }, n.zeros = y, n.zerosVariable = function (e, t, n) {
        return new Q.LayerVariable(y(e), t, n);
      }, n.zerosLike = function (e, t, n) {
        return new Q.LayerVariable(H.zerosLike(e), t, n);
      }, n.ones = function (e, t) {
        return H.ones(e);
      }, n.onesVariable = function (e, t, n) {
        var r = H.ones(e);return new Q.LayerVariable(r, t, n);
      }, n.onesLike = function (e, t, n) {
        var r = H.onesLike(e);return new Q.LayerVariable(r, t, n);
      }, n.identity = function (e) {
        return e.clone();
      }, n.eye = b, n.eyeVariable = function (e, t, n) {
        return new Q.LayerVariable(b(e, t), t, n);
      }, n.neg = w, n.add = function (e, t) {
        return H.add(e, t);
      }, n.subtract = x, n.multiply = A, n.divide = E, n.scalarTimesArray = _, n.scalarPlusArray = T, n.randomUniform = S, n.randomUniformVariable = function (e, t, n, r, i, a) {
        return void 0 === a && (a = "randomUniform"), new Q.LayerVariable(S(e, t, n, r, i), r, a);
      }, n.truncatedNormal = C, n.truncatedNormalVariable = function (e, t, n, r, i, a) {
        return void 0 === t && (t = 0), void 0 === n && (n = 1), void 0 === a && (a = "truncatedNormal"), new Q.LayerVariable(C(e, t, n, r, i), r, a);
      }, n.randomNormal = O, n.randomNormalVariable = function (e, t, n, r, i, a) {
        return void 0 === t && (t = 0), void 0 === n && (n = 1), void 0 === a && (a = "randomNormal"), new Q.LayerVariable(O(e, t, n, r, i), r, a);
      }, n.update = function (e, t) {
        return e.write(t);
      }, n.updateAdd = function (e, t) {
        return e.write(H.add(e.read(), t));
      }, n.updateSub = function (e, t) {
        return e.write(H.sub(e.read(), t));
      }, n.dot = function (e, t) {
        if (2 !== o(t)) throw new Y.NotImplementedError("dot support for y other than rank 2 is not yet implemented: y shape = " + a);if (2 === o(e)) return H.matMul(e, t);if (3 === o(e)) {
          var n = e.shape[0],
              r = e.shape[1],
              i = e.shape[2];return e = e.reshape([n * r, i]), H.matMul(e, t).reshape([n, r, t.shape[1]]);
        }throw new Y.NotImplementedError("dot support for x of rank " + o(e) + " is not yet implemented: x shape = " + a);
      }, n.sign = k, n.qr = function (e) {
        if (2 !== e.shape.length) throw new Y.ValueError("qr() requires a 2D Tensor, but got a " + e.shape.length + "D Tensor.");if (e.shape[0] < e.shape[1]) throw new Y.ValueError("qr() requires x.shape[0] >= x.shape[1], but got shape: [" + e.shape + "]");for (var t = e.shape[0], n = e.shape[1], r = b(t), i = e, a = K.tensor2d([[1]], [1, 1]), o = 0; o < n; ++o) {
          var s = i.slice([o, o], [t - o, 1]),
              u = H.norm(s),
              l = i.slice([o, o], [1, 1]),
              c = H.neg(k(l)),
              p = l.sub(A(c, u)),
              h = E(s, p),
              d = void 0;d = 1 === h.shape[0] ? a : a.concat(h.slice([1, 0], [h.shape[0] - 1, h.shape[1]]), 0);var f = H.neg(E(H.matMul(c, p), u)),
              g = i.slice([o, 0], [t - o, n]),
              m = f.mul(d);i = 0 === o ? g.sub(m.matMul(d.transpose().matMul(g))) : i.slice([0, 0], [o, n]).concat(g.sub(m.matMul(d.transpose().matMul(g))), 0);var v = r.slice([0, o], [t, r.shape[1] - o]);r = 0 === o ? v.sub(v.matMul(d).matMul(m.transpose())) : r.slice([0, 0], [t, o]).concat(v.sub(v.matMul(d).matMul(m.transpose())), 1);
        }return [r, i];
      }, n.oneHot = function (e, t) {
        if (1 !== o(e)) throw new Error("Only 1D one-hot tensors are supported in the deeplearn backend, at present.");return e = e.toInt(), H.oneHot(e, t).toFloat();
      }, n.mean = function (e, t, n) {
        return t = s(e, t), H.mean(e, t, n);
      }, n.argmax = function (e, t) {
        return void 0 === t && (t = -1), H.argMax(e, t);
      }, n.gather = function (e, t, n) {
        return t = Array.isArray(t) ? K.tensor1d(t, "int32") : t.toInt(), H.gather(e, t, n);
      }, n.max = function (e, t, n) {
        return H.max(e, t, n);
      }, n.min = function (e, t, n) {
        return H.min(e, t, n);
      }, n.minimum = function (e, t) {
        return H.minimum(e, t);
      }, n.sum = R, n.abs = function (e) {
        return H.abs(e);
      }, n.square = N, n.sqrt = I, n.exp = function (e) {
        return H.exp(e);
      }, n.log = z, n.pow = function (e, t) {
        if ("number" == typeof t && (t = K.scalar(Math.round(t), "int32")), "int32" !== t.dtype) throw new Y.NotImplementedError("Non-int32 dtype (" + t.dtype + ") is not supported by pow() yet");return H.pow(e, t);
      }, n.clip = M, n.equal = D, n.greater = P, n.greaterEqual = function (e, t) {
        return H.greaterEqual(e, t);
      }, n.maximum = L, n.sin = function (e) {
        return H.sin(e.value());
      }, n.cos = function (e) {
        return H.cos(e.value());
      }, n.batchNormalization = F, n.biasAdd = V, n.elu = function (e, t) {
        if (void 0 === t && (t = 1), 1 !== t) throw new Y.NotImplementedError("Support for alpha values other than 1 (" + t + ") is not implemented yet.");return H.elu(e);
      }, n.selu = function (e) {
        return H.selu(e);
      }, n.relu = function (e) {
        return H.relu(e);
      }, n.softplus = function (e) {
        return H.log(H.add(i(1), H.exp(e)));
      }, n.softsign = function (e) {
        return H.div(e, H.add(i(1), H.abs(e)));
      }, n.tanh = function (e) {
        return H.tanh(e);
      }, n.dropout = function (e, t, n, r) {
        if (null != n && !K.util.arraysEqual(e.shape, n)) throw new Y.NotImplementedError("Non-default noise shape is not implemented yet: " + (0, _stringify2.default)(n));if (null != r) throw new Y.NotImplementedError("seed is not implemented for dropout yet.");var a = H.step(H.add(w(t), S(e.shape, 0, 1, Q.DType.float32)));return a = H.mul(E(i(1), x(i(1), t)), a), H.mul(e, a);
      }, n.l2Normalize = function (e, t) {
        return E(e, I(L(R(N(e), t, !0), _(K.scalar(n.epsilon()), H.onesLike(e)))));
      }, n.conv1dWithBias = U, n.conv1d = function (e, t, n, r, i, a) {
        return void 0 === n && (n = 1), void 0 === r && (r = "valid"), void 0 === a && (a = 1), X.checkDataFormat(i), U(e, t, null, n, r, i, a);
      }, n.conv2d = function (e, t, n, r, i, a) {
        return void 0 === n && (n = [1, 1]), void 0 === r && (r = "valid"), X.checkDataFormat(i), j(e, t, null, n, r, i, a);
      }, n.conv2dWithBias = j, n.depthwiseConv2d = function (e, t, n, r, i, a) {
        void 0 === n && (n = [1, 1]), void 0 === r && (r = "valid"), null == i && (i = ee.imageDataFormat()), X.checkDataFormat(i);var s = B(e, i);if (4 !== o(e)) throw new Y.ValueError("Input for depthwiseConv2d is required to be 4-D, but is instead " + o(e) + "-D");if (4 !== o(t)) throw new Y.ValueError("depthwiseKernel is required to be 4-D, but is instead " + o(t) + "-D");return s = H.depthwiseConv2d(s, t, n, "same" === r ? "same" : "valid", "NHWC", a), "channelsFirst" === i && (s = H.transpose(s, [0, 3, 1, 2])), s;
      }, n.pool2d = function (e, t, n, r, i, a) {
        X.checkDataFormat(i), X.checkPoolMode(a), X.checkPaddingMode(r), null == n && (n = [1, 1]), null == r && (r = "valid"), null == i && (i = ee.imageDataFormat()), null == a && (a = "max"), e = B(e, i);var o,
            s = "same" === r ? "same" : "valid";return o = "max" === a ? H.maxPool(e, t, n, s) : H.avgPool(e, t, n, s), "channelsFirst" === i && (o = H.transpose(o, [0, 3, 1, 2])), o;
      }, n.nameScope = function (e, t) {
        return X.nameScope(e, t);
      }, n.floatx = function () {
        return Q.DType.float32;
      };var ie = {};n.getUid = function (e) {
        return void 0 === e && (e = ""), e in ie || (ie[e] = 0), ie[e] += 1, e + ie[e].toString();
      }, n.softmax = G, n.categoricalCrossentropy = W, n.sparseCategoricalCrossentropy = function (e, t, n) {
        void 0 === n && (n = !1);var r = H.floor(h(e)).toInt(),
            i = a(t);return W(u(H.oneHot(r, i[i.length - 1]), i), t, n);
      }, n.binaryCrossentropy = function (e, t, r) {
        void 0 === r && (r = !1);var i;return i = r ? t : z(E(i = M(t, n.epsilon(), 1 - n.epsilon()), x(H.onesLike(i), i))), q(e, i);
      }, n.sigmoidCrossEntropyWithLogits = q, n.sigmoid = function (e) {
        return H.sigmoid(e);
      }, n.hardSigmoid = function (e) {
        return M(T(K.scalar(.5), _(K.scalar(.2), e)), 0, 1);
      }, n.inTrainPhase = function (e, t, n) {
        return void 0 === n && (n = !1), n ? e() : t();
      }, n.rnn = function (e, t, n, r, i, a, o, s) {
        void 0 === r && (r = !1), void 0 === o && (o = !1);var p = t.shape.length;if (p < 3) throw new Y.ValueError("Input should be at least 3D, but is " + p + "D.");if (t = l(t, [1, 0].concat(J.range(2, p))), null != i) throw new Y.NotImplementedError("The rnn() function of the deeplearn.js backend does not support masking yet.");if (null != a) throw new Y.NotImplementedError("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r && (t = c(t, 0));for (var h, f, g = n, v = t.shape[0], y = 0; y < v; ++y) {
          var b = d(t, y, 1),
              w = e(b = u(b, b.shape.slice(1)), g);f = w[0], h = 0 === y ? f.reshape([1].concat(f.shape)) : m(h, f.reshape([1].concat(f.shape))), g = w[1];
        }return [f, l(h, [1, 0].concat(J.range(2, h.shape.length))), g];
      }, n.gradients = function (e, t) {
        var n = t.map(function (e) {
          return e.read();
        }),
            r = K.variableGrads(e, n);return t.map(function (e) {
          return r.grads[e.name];
        });
      };
    }, { "../common": 102, "../errors": 107, "../types": 128, "../utils/generic_utils": 130, "../utils/math_utils": 131, "./common": 99, "@tensorflow/tfjs-core": 8 }], 101: [function (e, t, n) {
      "use strict";
      function r(e) {
        return a(this, void 0, void 0, function () {
          var t, n, r, i, a, s, u;return o(this, function (o) {
            switch (o.label) {case 0:
                if (null == e) return [2];t = [], n = [];for (r in e) {
                  "number" != typeof (i = e[r]) && (a = i, t.push(a.data()), n.push(r));
                }return [4, _promise2.default.all(t)];case 1:
                for (s = o.sent(), u = 0; u < s.length; ++u) {
                  e[n[u]] = s[u][0];
                }return [2];}
          });
        });
      }var i = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }(),
          a = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          o = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var s = e("@tensorflow/tfjs-core"),
          u = e("./backend/tfjs_backend"),
          l = e("./utils/generic_utils"),
          c = function () {
        function e() {
          this.validationData = null, this.model = null;
        }return e.prototype.setParams = function (e) {
          this.params = e;
        }, e.prototype.setModel = function (e) {
          this.model = e;
        }, e.prototype.onEpochBegin = function (e, t) {
          return a(this, void 0, void 0, function () {
            return o(this, function (e) {
              return [2];
            });
          });
        }, e.prototype.onEpochEnd = function (e, t) {
          return a(this, void 0, void 0, function () {
            return o(this, function (e) {
              return [2];
            });
          });
        }, e.prototype.onBatchBegin = function (e, t) {
          return a(this, void 0, void 0, function () {
            return o(this, function (e) {
              return [2];
            });
          });
        }, e.prototype.onBatchEnd = function (e, t) {
          return a(this, void 0, void 0, function () {
            return o(this, function (e) {
              return [2];
            });
          });
        }, e.prototype.onTrainBegin = function (e) {
          return a(this, void 0, void 0, function () {
            return o(this, function (e) {
              return [2];
            });
          });
        }, e.prototype.onTrainEnd = function (e) {
          return a(this, void 0, void 0, function () {
            return o(this, function (e) {
              return [2];
            });
          });
        }, e;
      }();n.Callback = c;var p = function () {
        function e(e, t) {
          void 0 === t && (t = 10), null == e && (e = []), this.callbacks = e, this.queueLength = t;
        }return e.prototype.append = function (e) {
          this.callbacks.push(e);
        }, e.prototype.setParams = function (e) {
          for (var t = 0, n = this.callbacks; t < n.length; t++) {
            n[t].setParams(e);
          }
        }, e.prototype.setModel = function (e) {
          for (var t = 0, n = this.callbacks; t < n.length; t++) {
            n[t].setModel(e);
          }
        }, e.prototype.onEpochBegin = function (e, t) {
          return a(this, void 0, void 0, function () {
            var n, r, i;return o(this, function (a) {
              switch (a.label) {case 0:
                  null == t && (t = {}), n = 0, r = this.callbacks, a.label = 1;case 1:
                  return n < r.length ? (i = r[n], [4, i.onEpochBegin(e, t)]) : [3, 4];case 2:
                  a.sent(), a.label = 3;case 3:
                  return n++, [3, 1];case 4:
                  return [2];}
            });
          });
        }, e.prototype.onEpochEnd = function (e, t) {
          return a(this, void 0, void 0, function () {
            var n, r, i;return o(this, function (a) {
              switch (a.label) {case 0:
                  null == t && (t = {}), n = 0, r = this.callbacks, a.label = 1;case 1:
                  return n < r.length ? (i = r[n], [4, i.onEpochEnd(e, t)]) : [3, 4];case 2:
                  a.sent(), a.label = 3;case 3:
                  return n++, [3, 1];case 4:
                  return [2];}
            });
          });
        }, e.prototype.onBatchBegin = function (e, t) {
          return a(this, void 0, void 0, function () {
            var n, r, i;return o(this, function (a) {
              switch (a.label) {case 0:
                  null == t && (t = {}), n = 0, r = this.callbacks, a.label = 1;case 1:
                  return n < r.length ? (i = r[n], [4, i.onBatchBegin(e, t)]) : [3, 4];case 2:
                  a.sent(), a.label = 3;case 3:
                  return n++, [3, 1];case 4:
                  return [2];}
            });
          });
        }, e.prototype.onBatchEnd = function (e, t) {
          return a(this, void 0, void 0, function () {
            var n, r, i;return o(this, function (a) {
              switch (a.label) {case 0:
                  null == t && (t = {}), n = 0, r = this.callbacks, a.label = 1;case 1:
                  return n < r.length ? (i = r[n], [4, i.onBatchEnd(e, t)]) : [3, 4];case 2:
                  a.sent(), a.label = 3;case 3:
                  return n++, [3, 1];case 4:
                  return [2];}
            });
          });
        }, e.prototype.onTrainBegin = function (e) {
          return a(this, void 0, void 0, function () {
            var t, n, r;return o(this, function (i) {
              switch (i.label) {case 0:
                  null == e && (e = {}), t = 0, n = this.callbacks, i.label = 1;case 1:
                  return t < n.length ? (r = n[t], [4, r.onTrainBegin(e)]) : [3, 4];case 2:
                  i.sent(), i.label = 3;case 3:
                  return t++, [3, 1];case 4:
                  return [2];}
            });
          });
        }, e.prototype.onTrainEnd = function (e) {
          return a(this, void 0, void 0, function () {
            var t, n, r;return o(this, function (i) {
              switch (i.label) {case 0:
                  null == e && (e = {}), t = 0, n = this.callbacks, i.label = 1;case 1:
                  return t < n.length ? (r = n[t], [4, r.onTrainEnd(e)]) : [3, 4];case 2:
                  i.sent(), i.label = 3;case 3:
                  return t++, [3, 1];case 4:
                  return [2];}
            });
          });
        }, e;
      }();n.CallbackList = p;var h = function (e) {
        function t() {
          return e.call(this) || this;
        }return i(t, e), t.prototype.onEpochBegin = function (e, t) {
          return a(this, void 0, void 0, function () {
            return o(this, function (e) {
              return this.seen = 0, this.totals = {}, [2];
            });
          });
        }, t.prototype.onBatchEnd = function (e, t) {
          return a(this, void 0, void 0, function () {
            var e,
                n,
                r,
                i,
                a = this;return o(this, function (o) {
              null == t && (t = {}), e = null == t.size ? 0 : t.size, this.seen += e, n = function n(_n) {
                var i = t[_n];"number" == typeof i ? (r.totals.hasOwnProperty(_n) || (r.totals[_n] = 0), r.totals[_n] = r.totals[_n] + i * e) : (r.totals.hasOwnProperty(_n) || (r.totals[_n] = u.getScalar(0)), s.tidy(function () {
                  a.totals[_n] = u.scalarPlusArray(a.totals[_n], u.multiply(i, u.getScalar(e))), u.keep(a.totals[_n]);
                }));
              }, r = this;for (i in t) {
                n(i);
              }return [2];
            });
          });
        }, t.prototype.onEpochEnd = function (e, t) {
          return a(this, void 0, void 0, function () {
            var e,
                n,
                r,
                i,
                a,
                l = this;return o(this, function (o) {
              if (null != t) for (e = function e(_e) {
                if (null == n.totals[_e]) return "continue";"number" == typeof n.totals[_e] ? t[_e] = n.totals[_e] / n.seen : s.tidy(function () {
                  t[_e] = u.scalarTimesArray(u.divide(u.getScalar(1), u.getScalar(l.seen)), l.totals[_e]), u.keep(t[_e]);
                });
              }, n = this, r = 0, i = this.params.metrics; r < i.length; r++) {
                a = i[r], e(a);
              }return [2];
            });
          });
        }, t;
      }(c);n.BaseLogger = h, n.resolveScalarsInLogs = r, n.disposeTensorsInLogs = function (e) {
        if (null != e) for (var t in e) {
          var n = e[t];"number" != typeof n && n.dispose();
        }
      };var d = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return i(t, e), t.prototype.onTrainBegin = function (e) {
          return a(this, void 0, void 0, function () {
            return o(this, function (e) {
              return this.epoch = [], this.history = {}, [2];
            });
          });
        }, t.prototype.onEpochEnd = function (e, t) {
          return a(this, void 0, void 0, function () {
            var n;return o(this, function (r) {
              null == t && (t = {}), this.epoch.push(e);for (n in t) {
                null == this.history[n] && (this.history[n] = []), this.history[n].push(t[n]);
              }return [2];
            });
          });
        }, t.prototype.syncData = function () {
          return a(this, void 0, void 0, function () {
            var e, t, n, r, i, a, s, u, l;return o(this, function (o) {
              switch (o.label) {case 0:
                  e = [], t = [], n = [];for (r in this.history) {
                    for (i = this.history[r], a = 0; a < i.length; ++a) {
                      "number" != typeof i[a] && (s = i[a], e.push(s.data()), t.push(r), n.push(a));
                    }
                  }return [4, _promise2.default.all(e)];case 1:
                  for (u = o.sent(), l = 0; l < u.length; ++l) {
                    this.history[t[l]][n[l]].dispose(), this.history[t[l]][n[l]] = u[l][0];
                  }return [2];}
            });
          });
        }, t;
      }(c);n.History = d;var f = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.trainBegin = t.onTrainBegin, n.trainEnd = t.onTrainEnd, n.epochBegin = t.onEpochBegin, n.epochEnd = t.onEpochEnd, n.batchBegin = t.onBatchBegin, n.batchEnd = t.onBatchEnd, n;
        }return i(t, e), t.prototype.onEpochBegin = function (e, t) {
          return a(this, void 0, void 0, function () {
            return o(this, function (n) {
              switch (n.label) {case 0:
                  return null == this.epochBegin ? [3, 3] : [4, r(t)];case 1:
                  return n.sent(), [4, this.epochBegin(e, t)];case 2:
                  n.sent(), n.label = 3;case 3:
                  return [2];}
            });
          });
        }, t.prototype.onEpochEnd = function (e, t) {
          return a(this, void 0, void 0, function () {
            return o(this, function (n) {
              switch (n.label) {case 0:
                  return null == this.epochEnd ? [3, 3] : [4, r(t)];case 1:
                  return n.sent(), [4, this.epochEnd(e, t)];case 2:
                  n.sent(), n.label = 3;case 3:
                  return [2];}
            });
          });
        }, t.prototype.onBatchBegin = function (e, t) {
          return a(this, void 0, void 0, function () {
            return o(this, function (n) {
              switch (n.label) {case 0:
                  return null == this.batchBegin ? [3, 3] : [4, r(t)];case 1:
                  return n.sent(), [4, this.batchBegin(e, t)];case 2:
                  n.sent(), n.label = 3;case 3:
                  return [2];}
            });
          });
        }, t.prototype.onBatchEnd = function (e, t) {
          return a(this, void 0, void 0, function () {
            return o(this, function (n) {
              switch (n.label) {case 0:
                  return null == this.batchEnd ? [3, 3] : [4, r(t)];case 1:
                  return n.sent(), [4, this.batchEnd(e, t)];case 2:
                  n.sent(), n.label = 3;case 3:
                  return [2];}
            });
          });
        }, t.prototype.onTrainBegin = function (e) {
          return a(this, void 0, void 0, function () {
            return o(this, function (t) {
              switch (t.label) {case 0:
                  return null == this.trainBegin ? [3, 3] : [4, r(e)];case 1:
                  return t.sent(), [4, this.trainBegin(e)];case 2:
                  t.sent(), t.label = 3;case 3:
                  return [2];}
            });
          });
        }, t.prototype.onTrainEnd = function (e) {
          return a(this, void 0, void 0, function () {
            return o(this, function (t) {
              switch (t.label) {case 0:
                  return null == this.trainEnd ? [3, 3] : [4, r(e)];case 1:
                  return t.sent(), [4, this.trainEnd(e)];case 2:
                  t.sent(), t.label = 3;case 3:
                  return [2];}
            });
          });
        }, t;
      }(c);n.CustomCallback = f, n.standardizeCallbacks = function (e) {
        return null == e ? null : e instanceof c ? [e] : Array.isArray(e) && e[0] instanceof c ? e : l.toList(e).map(function (e) {
          return new f(e);
        });
      };
    }, { "./backend/tfjs_backend": 100, "./utils/generic_utils": 130, "@tensorflow/tfjs-core": 8 }], 102: [function (e, t, n) {
      "use strict";
      function r() {
        return 0 === u.length ? "" : u.join(l) + l;
      }function i(e) {
        return !!e.match(c);
      }Object.defineProperty(n, "__esModule", { value: !0 });var a = e("./errors"),
          o = e("./utils/generic_utils"),
          s = new _map2.default();o.SerializableEnumRegistry.register("data_format", { channels_first: "channelsFirst", channels_last: "channelsLast" }), n.VALID_DATA_FORMAT_VALUES = ["channelsFirst", "channelsLast", void 0, null], n.checkDataFormat = function (e) {
        if (null != e && n.VALID_DATA_FORMAT_VALUES.indexOf(e) < 0) throw new a.ValueError(e + " is not a valid DataFormat.  Valid values as " + n.VALID_DATA_FORMAT_VALUES);
      }, o.SerializableEnumRegistry.register("padding", { valid: "valid", same: "same", casual: "casual" }), n.VALID_PADDING_MODE_VALUES = ["valid", "same", "casual", void 0, null], n.checkPaddingMode = function (e) {
        if (null != e && n.VALID_PADDING_MODE_VALUES.indexOf(e) < 0) throw new a.ValueError(e + " is not a valid PaddingMode.  Valid values as " + n.VALID_PADDING_MODE_VALUES);
      }, n.VALID_POOL_MODE_VALUES = ["max", "avg", void 0, null], n.checkPoolMode = function (e) {
        if (null != e && n.VALID_POOL_MODE_VALUES.indexOf(e) < 0) throw new a.ValueError(e + " is not a valid PoolMode.  Valid values as " + n.VALID_POOL_MODE_VALUES);
      };var u = [],
          l = "/";n.nameScope = function (e, t) {
        u.push(e);try {
          var n = t();return u.pop(), n;
        } catch (e) {
          throw u.pop(), e;
        }
      }, n.getScopedTensorName = function (e) {
        if (!i(e)) throw new Error("Not a valid tensor name: '" + e + "'");return r() + e;
      }, n.getUniqueTensorName = function (e) {
        if (!i(e)) throw new Error("Not a valid tensor name: '" + e + "'");s.has(e) || s.set(e, 0);var t = s.get(e);if (s.set(e, s.get(e) + 1), t > 0) {
          var n = e + "_" + t;return s.set(n, 1), n;
        }return e;
      };var c = new RegExp(/^[A-Za-z][A-Za-z0-9\._\/]*$/);n.isValidTensorName = i;
    }, { "./errors": 107, "./utils/generic_utils": 130 }], 103: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        return u.sqrt(u.sum(u.square(e), t, !0));
      }function i(e, t) {
        return void 0 === t && (t = {}), c.deserializeKerasObject(e, c.ClassNameMap.getMap().pythonClassNameMap, t, "constraint");
      }var a = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }(),
          o = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var s = e("@tensorflow/tfjs-core"),
          u = e("./backend/tfjs_backend"),
          l = e("./types"),
          c = e("./utils/generic_utils"),
          p = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return a(t, e), t.prototype.getConfig = function () {
          return {};
        }, t = o([s.doc({ heading: "Constraints", subheading: "Classes", namespace: "constraints" })], t);
      }(l.Serializable);n.Constraint = p;var h = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.defaultMaxValue = 2, n.defaultAxis = 0, n.maxValue = null != t.maxValue ? t.maxValue : n.defaultMaxValue, n.axis = null != t.axis ? t.axis : n.defaultAxis, n;
        }return a(t, e), t.prototype.apply = function (e) {
          var t = r(e, this.axis),
              n = u.clip(t, 0, this.maxValue);return u.multiply(e, u.divide(n, u.scalarPlusArray(u.getScalar(u.epsilon()), t)));
        }, t.prototype.getClassName = function () {
          return "MaxNorm";
        }, t.prototype.getConfig = function () {
          return { maxValue: this.maxValue, axis: this.axis };
        }, t;
      }(p);n.MaxNorm = h, c.ClassNameMap.register("MaxNorm", h);var d = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.defaultAxis = 0, n.axis = null != t.axis ? t.axis : n.defaultAxis, n;
        }return a(t, e), t.prototype.apply = function (e) {
          return u.divide(e, u.scalarPlusArray(u.getScalar(u.epsilon()), r(e, this.axis)));
        }, t.prototype.getClassName = function () {
          return "UnitNorm";
        }, t.prototype.getConfig = function () {
          return { axis: this.axis };
        }, t;
      }(p);n.UnitNorm = d, c.ClassNameMap.register("UnitNorm", d);var f = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return a(t, e), t.prototype.apply = function (e) {
          return u.relu(e);
        }, t.prototype.getClassName = function () {
          return "NonNeg";
        }, t;
      }(p);n.NonNeg = f, c.ClassNameMap.register("NonNeg", f);var g = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.defaultMinValue = 0, n.defaultMaxValue = 1, n.defaultRate = 1, n.defaultAxis = 0, n.minValue = null != t.minValue ? t.minValue : n.defaultMinValue, n.maxValue = null != t.maxValue ? t.maxValue : n.defaultMaxValue, n.rate = null != t.rate ? t.rate : n.defaultRate, n.axis = null != t.axis ? t.axis : n.defaultAxis, n;
        }return a(t, e), t.prototype.apply = function (e) {
          var t = r(e, this.axis),
              n = u.add(u.scalarTimesArray(u.getScalar(this.rate), u.clip(t, this.minValue, this.maxValue)), u.scalarTimesArray(u.getScalar(1 - this.rate), t));return u.multiply(e, u.divide(n, u.scalarPlusArray(u.getScalar(u.epsilon()), t)));
        }, t.prototype.getClassName = function () {
          return "MinMaxNorm";
        }, t.prototype.getConfig = function () {
          return { minValue: this.minValue, maxValue: this.maxValue, rate: this.rate, axis: this.axis };
        }, t;
      }(p);n.MinMaxNorm = g, c.ClassNameMap.register("MinMaxNorm", g), n.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = { maxNorm: "MaxNorm", minMaxNorm: "MinMaxNorm", nonNeg: "NonNeg", unitNorm: "UnitNorm" }, n.serializeConstraint = function (e) {
        return c.serializeKerasObject(e);
      }, n.deserializeConstraint = i, n.getConstraint = function (e) {
        return null == e ? null : "string" == typeof e ? i({ className: e in n.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? n.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e, config: {} }) : e instanceof p ? e : i(e);
      };
    }, { "./backend/tfjs_backend": 100, "./types": 128, "./utils/generic_utils": 130, "@tensorflow/tfjs-core": 8 }], 104: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        if (null != e.dtype && e.dtype !== t.dtype) throw new o.ValueError("The dtype of the feed (" + t.dtype + ") is incompatible with that of the key '" + e.name + "' (" + e.dtype + ").");if (null != e.shape) {
          if (e.shape.length !== t.shape.length) throw new o.ValueError("The rank of feed (" + t.shape.length + ") does not match the rank of the key (" + e.shape.length + ").");for (var n = 0; n < e.shape.length; ++n) {
            if (null != e.shape[n] && e.shape[n] !== t.shape[n]) throw new o.ValueError("The " + n + "-th dimension of the feed (" + t.shape[n] + ") is incompatible with that of the key (" + e.shape[n] + ").");
          }
        }
      }function i(e, t, n) {
        if (t.hasKey(e)) return t.getValue(e);if (e.sourceLayer instanceof s.InputLayer) throw new o.ValueError("Missing a feed value for SymbolicTensor from InputLayer '" + s.InputLayer.name + "'");for (var r = [], u = 0, l = e.inputs; u < l.length; u++) {
          var c = i(l[u], t, n);r.push(c);
        }var p = e.sourceLayer.apply(r, n);Array.isArray(p) || (p = [p]);for (var h = a(e), d = Array.isArray(h) ? h : [h], f = 0; f < d.length; ++f) {
          t.add(d[f], p[f]);
        }return 1 === p.length ? p[0] : p[e.outputTensorIndex];
      }function a(e) {
        var t;if (1 === e.sourceLayer.inboundNodes.length) t = e.sourceLayer.output;else {
          for (var n = null, r = 0; r < e.sourceLayer.inboundNodes.length; ++r) {
            for (var i = 0, a = e.sourceLayer.inboundNodes[r].outputTensors; i < a.length; i++) {
              if (a[i].id === e.id) {
                n = r;break;
              }
            }
          }t = e.sourceLayer.getOutputAt(n);
        }return t;
      }Object.defineProperty(n, "__esModule", { value: !0 });var o = e("../errors"),
          s = e("./topology"),
          u = function () {
        function e(t) {
          if (this.id2Value = {}, t instanceof e) for (var n in t.id2Value) {
            this.id2Value[n] = t.id2Value[n];
          } else {
            if (null == t) return;for (var r = 0, i = t; r < i.length; r++) {
              var a = i[r];this.add(a.key, a.value);
            }
          }
        }return e.prototype.add = function (e, t) {
          if (r(e, t), null != this.id2Value[e.id]) throw new o.ValueError("Duplicate key: name=" + e.name + ", id=" + e.id);return this.id2Value[e.id] = t, this;
        }, e.prototype.addFeed = function (e) {
          this.add(e.key, e.value);
        }, e.prototype.hasKey = function (e) {
          return null != this.id2Value[e.id];
        }, e.prototype.getValue = function (e) {
          if (null == this.id2Value[e.id]) throw new o.ValueError("Nonexistent key: " + (0, _stringify2.default)(e));return this.id2Value[e.id];
        }, e;
      }();n.FeedDict = u, n.execute = function (e, t, n) {
        for (var r = Array.isArray(e), a = r ? e : [e], o = [], s = new u(t), l = 0, c = a; l < c.length; l++) {
          var p = c[l];o.push(i(p, s, n));
        }return r ? o : o[0];
      };
    }, { "../errors": 107, "./topology": 105 }], 105: [function (e, t, n) {
      "use strict";
      function r(e) {
        for (var t = [], n = 0, r = e = v.toList(e); n < r.length; n++) {
          var i = r[n];t.push(d.intShape(i));
        }return v.singletonOrArray(t);
      }function i(e) {
        return m.DType.float32;
      }function a(e, t, n) {
        if ((null == t || null != n && n > 0) && (t = e.sourceLayer, n = e.nodeIndex), 0 === t.inboundNodes.length) return [e];var r = t.inboundNodes[n];if (0 === r.inboundLayers.length) return r.inputTensors;for (var i = [], o = 0; o < r.inboundLayers.length; o++) {
          for (var s = 0, u = a(r.inputTensors[o], r.inboundLayers[o], r.nodeIndices[o]); s < u.length; s++) {
            var l = u[s];-1 === i.indexOf(l) && i.push(l);
          }
        }return i;
      }function o(e, t, n) {
        var r = v.stringToDType(e);return h.Tensor.make(t, { values: 0 === t.length ? n : h.util.flatten(n) }, r);
      }function s(e, t, n, r) {
        if (!n.startsWith("2.")) throw new f.ValueError("Unsupported Keras version in weights being loaded: " + n);return t;
      }function u(e, t) {
        for (var n = {}, r = 0, i = 0, a = t; i < a.length; i++) {
          for (var o = 0, s = a[i].weights; o < s.length; o++) {
            var u = s[o];if (null != n[u.name]) throw new f.ValueError("Duplicate weight name: " + u.name);n[u.name] = u, r++;
          }
        }var l = [];for (var c in e) {
          l.push([n[c], e[c]]), delete n[c];
        }var p = [];for (var h in n) {
          p.push(h);
        }if (p.length > 0) throw new f.ValueError(p.length + " of " + r + " weights are not set: " + p);d.batchSetValue(l);
      }function l(e, t, n) {
        void 0 === n && (n = !1);for (var r = e.keras_version, i = e.backend, a = t.map(function (e) {
          return e.name;
        }), u = {}, l = 0, c = t; l < c.length; l++) {
          null != (T = c[l]).name && (null == u[T.name] && (u[T.name] = []), u[T.name].push(T));
        }for (var p = e.weights, g = [], v = 0; v < a.length; ++v) {
          var y = a[v],
              b = p[y];null == b && (b = []);for (var w = [], x = 0; x < b.length; ++x) {
            var A = b[x];w.push(new m.LayerVariable(o(A.dtype, A.shape, A.value)));
          }for (var E = 0, _ = u[y]; E < _.length; E++) {
            var T = _[E],
                S = T.weights;if ((w = s(T, w, r, i)).length !== S.length) {
              if (!n) throw new f.ValueError("Layer #" + v + ' (named "' + T.name + '") expects ' + S.length + " weight(s), but the saved weights have " + w.length + " element(s).");console.warn("Skipping loading of weights of layer " + T.name + " due to mismatch in number of weights: (" + w.length + " vs " + S.length + ").");
            }for (var C = 0; C < w.length; ++C) {
              !n || h.util.arraysEqual(S[C].shape, w[C].shape) ? g.push([S[C], w[C].read()]) : console.warn("Skipping loading of weights for layer " + T.name + " due to mismatch in shape (" + S[C].shape + " vs " + w[C].shape + ")");
            }
          }
        }d.batchSetValue(g);
      }var c = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }(),
          p = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var h = e("@tensorflow/tfjs-core"),
          d = e("../backend/tfjs_backend"),
          f = e("../errors"),
          g = e("../layers/serialization"),
          m = e("../types"),
          v = e("../utils/generic_utils"),
          y = e("../utils/serialization_utils"),
          b = function () {
        return function (e) {
          this.dtype = e.dtype, this.shape = e.shape, null != e.shape ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {};
        };
      }();n.InputSpec = b;var w = 0,
          x = function () {
        function e(e, t) {
          this.callArgs = t, this.id = w++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;for (var n = 0, r = e.inboundLayers; n < r.length; n++) {
            var i = r[n];null != i && i.outboundNodes.push(this);
          }e.outboundLayer.inboundNodes.push(this);
        }return e.prototype.getConfig = function () {
          for (var e = [], t = 0, n = this.inboundLayers; t < n.length; t++) {
            var r = n[t];null != r ? e.push(r.name) : e.push(null);
          }return { outboundLayer: this.outboundLayer ? this.outboundLayer.name : null, inboundLayers: e, nodeIndices: this.nodeIndices, tensorIndices: this.tensorIndices };
        }, e;
      }();n.Node = x;var A = 0,
          E = function (e) {
        function t(t) {
          var n = e.call(this) || this;n._callHook = null, n._addedWeightNames = [], n._stateful = !1, n.id = A++, n.activityRegularizer = null, n.inputSpec = null, n.supportsMasking = !1, n._trainableWeights = [], n._nonTrainableWeights = [], n._losses = [], n._updates = [], n._built = !1, n.inboundNodes = [], n.outboundNodes = [];var r = t.name;if (!r) {
            var i = n.getClassName();r = v.toSnakeCase(i) + "_" + d.getUid(i);
          }if (n.name = r, n.trainable = v.pyGetAttr(t, "trainable", !0), n.updatable = v.pyGetAttr(t, "updatable", !0), null != t.inputShape || null != t.batchInputShape) {
            var a = void 0;if (null != t.batchInputShape) a = t.batchInputShape;else if (null != t.inputShape) {
              var o = null;null != t.batchSize && (o = t.batchSize), a = [o].concat(t.inputShape);
            }n.batchInputShape = a;var s = t.dtype;null == s && (s = t.inputDType), null == s && (s = d.floatx()), n.dtype = s;
          }return null != t.weights ? n.initialWeights = t.weights : n.initialWeights = null, n;
        }return c(t, e), t.nodeKey = function (e, t) {
          return e.name + "_ib-" + t.toString();
        }, t.prototype.getNodeAtIndex = function (e, t) {
          if (0 === this.inboundNodes.length) throw new f.RuntimeError("The layer has never been called and thus has no defined " + t + ".");if (this.inboundNodes.length <= e) throw new f.ValueError("Asked to get " + t + " at node " + e + ", but the layer has only " + this.inboundNodes.length + " inbound nodes.");return this.inboundNodes[e];
        }, t.prototype.getInputAt = function (e) {
          return v.singletonOrArray(this.getNodeAtIndex(e, "input").inputTensors);
        }, t.prototype.getOutputAt = function (e) {
          return v.singletonOrArray(this.getNodeAtIndex(e, "output").outputTensors);
        }, Object.defineProperty(t.prototype, "input", { get: function get() {
            if (this.inboundNodes.length > 1) throw new f.AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if (0 === this.inboundNodes.length) throw new f.AttributeError("Layer " + this.name + " is not connected, no input to return.");return v.singletonOrArray(this.getNodeAtIndex(0, "input").inputTensors);
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "output", { get: function get() {
            if (0 === this.inboundNodes.length) throw new f.AttributeError("Layer " + this.name + " has no inbound nodes.");if (this.inboundNodes.length > 1) throw new f.AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return v.singletonOrArray(this.getNodeAtIndex(0, "output").outputTensors);
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "losses", { get: function get() {
            return this._losses;
          }, enumerable: !0, configurable: !0 }), t.prototype.calculateLosses = function () {
          return this.losses.map(function (e) {
            return e();
          });
        }, Object.defineProperty(t.prototype, "updates", { get: function get() {
            return this._updates;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "built", { get: function get() {
            return this._built;
          }, set: function set(e) {
            this._built = e;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "trainableWeights", { get: function get() {
            return this.trainable ? this._trainableWeights : [];
          }, set: function set(e) {
            this._trainableWeights = e;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function get() {
            return this.trainable ? this._nonTrainableWeights : this._trainableWeights.concat(this._nonTrainableWeights);
          }, set: function set(e) {
            this._nonTrainableWeights = e;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "weights", { get: function get() {
            return this.trainableWeights.concat(this.nonTrainableWeights);
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "stateful", { get: function get() {
            return this._stateful;
          }, enumerable: !0, configurable: !0 }), t.prototype.assertInputCompatibility = function (e) {
          if (e = v.toList(e), null != this.inputSpec && 0 !== this.inputSpec.length) {
            var t = v.toList(this.inputSpec);if (e.length !== t.length) throw new f.ValueError("Layer " + this.name + " expects " + t.length + " inputs, but it received " + e.length + " input tensors. Input received: " + e);for (var n = 0; n < e.length; n++) {
              var r = e[n],
                  i = t[n];if (null != i) {
                var a = d.ndim(r);if (null != i.ndim && a !== i.ndim) throw new f.ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected ndim=" + i.ndim + ", found ndim=" + a);if (null != i.maxNDim && a > i.maxNDim) throw new f.ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected max_ndim=" + i.maxNDim + ", found ndim=" + a);if (null != i.minNDim && a < i.minNDim) throw new f.ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected min_ndim=" + i.minNDim + ", found ndim=" + a + ".");if (null != i.dtype && d.dtype(r) !== i.dtype) {
                  var o = d.dtype(r);throw new f.ValueError("Input " + n + " is incompatible with layer " + this.name + " : expected dtype=" + i.dtype + ", found dtype=" + o + ".");
                }if (i.axes) {
                  p = d.intShape(r);for (var s in i.axes) {
                    var u = Number(s),
                        l = i.axes[s],
                        c = u >= 0 ? p[u] : p[p.length + u];if (null != l && -1 === [l, null].indexOf(c)) throw new f.ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected axis " + u + " of input shape to have value " + l + " but got shape " + p + ".");
                  }
                }if (null != i.shape) for (var p = d.intShape(r), h = 0; h < i.shape.length; ++h) {
                  var g = i.shape[h],
                      m = p[h];if (null != g && null != m && g !== m) throw new f.ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected shape=" + i.shape + ", found shape=${xShape}.");
                }
              }
            }
          }
        }, t.prototype.call = function (e, t) {
          return e;
        }, t.prototype.invokeCallHook = function (e, t) {
          null != this._callHook && this._callHook(e, t);
        }, t.prototype.setCallHook = function (e) {
          this._callHook = e;
        }, t.prototype.clearCallHook = function () {
          this._callHook = null;
        }, t.prototype.apply = function (e, t) {
          var n = this;t = t || {};for (var a = v.toList(e), o = !0, s = 0, u = a; s < u.length; s++) {
            if (!((h = u[s]) instanceof m.SymbolicTensor)) {
              o = !1;break;
            }
          }for (var l = !0, c = 0, p = a; c < p.length; c++) {
            var h = p[c];if (h instanceof m.SymbolicTensor) {
              l = !1;break;
            }
          }if (o === l) throw new f.ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");return d.nameScope(this.name, function () {
            if (!n.built) {
              n.assertInputCompatibility(e);for (var o = [], s = 0, u = v.toList(e); s < u.length; s++) {
                var c = u[s];o.push(d.intShape(c));
              }n.build(v.singletonOrArray(o)), n.built = !0, n.initialWeights && n.setWeights(n.initialWeights);
            }if (n.assertInputCompatibility(e), l) {
              for (var p = n.call(e, t), h = [], g = 0, y = v.toList(p); g < y.length; g++) {
                var b = y[g];-1 !== a.indexOf(b) && (b = d.identity(b)), h.push(b);
              }if (p = v.singletonOrArray(h), null != n.activityRegularizer) throw new f.NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return p;
            }var w = r(e),
                x = n.computeOutputShape(w),
                p = void 0,
                A = i();if (p = null != x && x.length > 0 && Array.isArray(x[0]) ? x.map(function (r, i) {
              return new m.SymbolicTensor(A, r, n, v.toList(e), t, n.name, i);
            }) : new m.SymbolicTensor(A, x, n, v.toList(e), t, n.name), n.addInboundNode(e, p, null, null, w, x, t), null != n.activityRegularizer) throw new f.NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return p;
          });
        }, t.prototype.build = function (e) {
          this.built = !0;
        }, t.prototype.getWeights = function () {
          return d.batchGetValue(this.weights);
        }, t.prototype.setWeights = function (e) {
          var t = this.weights;if (t.length !== e.length) throw new f.ValueError('You called setWeights(weights) on layer "' + this.name + '" with a weight list of length ' + e.length + ", but the layer was expecting " + t.length + " weights. Provided weights: " + e + "...");if (0 !== t.length) {
            for (var n = [], r = d.batchGetValue(t), i = 0; i < r.length; ++i) {
              var a = r[i],
                  o = t[i],
                  s = e[i];if (!h.util.arraysEqual(a.shape, s.shape)) throw new f.ValueError("Layer weight shape " + a.shape + " not compatible with provided weight shape " + s.shape);n.push([o, s]);
            }d.batchSetValue(n);
          }
        }, t.prototype.addWeight = function (e, t, n, r, i, a, o) {
          if (-1 !== this._addedWeightNames.indexOf(e)) throw new f.ValueError("Duplicate weight name " + e + " for layer " + this.name);this._addedWeightNames.push(e), null == n && (n = d.floatx());var s = new m.LayerVariable(r.apply(t, n), n, e, a, o);return null != i && this.addLoss(function () {
            return i.apply(s.read());
          }), null == a && (a = !0), a ? this._trainableWeights.push(s) : this._nonTrainableWeights.push(s), s;
        }, t.prototype.addLoss = function (e) {
          if (!(null == e || Array.isArray(e) && 0 === e.length)) {
            e = v.toList(e), void 0 !== this._losses && null !== this._losses && (t = this.losses).push.apply(t, e);var t;
          }
        }, t.prototype.computeOutputShape = function (e) {
          return e;
        }, t.prototype.computeMask = function (e, t) {
          var n = this;if (!this.supportsMasking) {
            if (null != t) {
              if (!Array.isArray(t)) throw new TypeError("Layer " + this.name + " does not support masking,but was passed an inputMask.");t.forEach(function (e) {
                if (null != e) throw new TypeError("Layer " + n.name + " does not support masking,but was passed an inputMask.");
              });
            }return null;
          }return t;
        }, t.prototype.addInboundNode = function (e, t, n, r, i, a, o) {
          void 0 === o && (o = null);var s = v.toList(e);t = v.toList(t), n = v.toList(n), r = v.toList(r), i = v.normalizeShapeList(i), a = v.normalizeShapeList(a);for (var u = [], l = [], c = [], p = 0, h = s; p < h.length; p++) {
            var d = h[p];u.push(d.sourceLayer), l.push(d.nodeIndex), c.push(d.tensorIndex);
          }new x({ outboundLayer: this, inboundLayers: u, nodeIndices: l, tensorIndices: c, inputTensors: s, outputTensors: t, inputMasks: n, outputMasks: r, inputShapes: i, outputShapes: a }, o);for (var f = 0; f < t.length; f++) {
            t[f].sourceLayer = this, t[f].nodeIndex = this.inboundNodes.length - 1, t[f].tensorIndex = f;
          }
        }, t.prototype.getConfig = function () {
          var e = { name: this.name, trainable: this.trainable };return null != this.batchInputShape && (e.batchInputShape = this.batchInputShape), null != this.dtype && (e.dtype = this.dtype), e;
        }, t.fromConfig = function (e, t) {
          return new e(t);
        }, p([h.doc({ heading: "Models", subheading: "Classes" })], t.prototype, "apply", null), t = p([h.doc({ heading: "Layers", subheading: "Classes", namespace: "layers" })], t);
      }(m.Serializable);n.Layer = E;var _ = function (e) {
        function t(t) {
          var n = e.call(this, { dtype: t.dtype, name: null != t.name ? t.name : d.getUid("input").toString() }) || this;if (null == t.batchSize && (t.batchSize = null), null == t.sparse && (t.sparse = !1), n.trainable = !1, n.built = !0, n.sparse = t.sparse, null != t.inputShape && null != t.batchInputShape) throw new f.ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");var r = t.batchInputShape;if (null == r) {
            if (null == t.inputShape) throw new f.ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");r = [t.batchSize].concat(t.inputShape);
          } else if (null != t.batchSize) throw new f.ValueError("Cannot specify batchSize if batchInputShape isspecified when creating an InputLayer.");var i = t.dtype || d.floatx();n.batchInputShape = r, n.dtype = i, n.inputSpec = [{ shape: r }];var a = new m.SymbolicTensor(n.dtype, n.batchInputShape, n, [], {}, n.name);return a.nodeIndex = 0, a.tensorIndex = 0, new x({ outboundLayer: n, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: [a], outputTensors: [a], inputMasks: [null], outputMasks: [null], inputShapes: [r], outputShapes: [r] }), n;
        }return c(t, e), t.prototype.apply = function (e, t) {
          throw new f.ValueError("Cannot pass any input to an InputLayer's apply() method. InputLayer name: " + this.name);
        }, t.prototype.getClassName = function () {
          return "InputLayer";
        }, t.prototype.getConfig = function () {
          return { batchInputShape: this.batchInputShape, dtype: this.dtype, sparse: this.sparse, name: this.name };
        }, t;
      }(E);n.InputLayer = _, v.ClassNameMap.register("InputLayer", _), n.Input = function (e) {
        if (null == e.batchShape && null == e.shape) throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if (null != e.batchShape && null != e.shape) throw new f.ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");var t = e.batchShape;null != e.shape && null == t && (t = [null].concat(e.shape));var n = e.dtype;return null == n && (n = d.floatx()), new _({ batchInputShape: t, name: e.name, dtype: n, sparse: e.sparse }).inboundNodes[0].outputTensors[0];
      };var T = function (e) {
        function t(n) {
          var r = e.call(this, {}) || this;if (r.containerNodes = new _set2.default(), r.name = n.name, null == r.name) {
            var i = r.getClassName().toLowerCase();r.name = d.getUid(i);
          }if (r.supportsMasking = !1, r.trainable = !0, r.updatable = !0, Array.isArray(n.inputs) ? r.inputs = n.inputs.slice() : r.inputs = [n.inputs], Array.isArray(n.outputs) ? r.outputs = n.outputs.slice() : r.outputs = [n.outputs], v.unique(r.inputs).length !== r.inputs.length) throw new f.ValueError("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: " + r.inputs.map(function (e) {
            return e.name;
          }));v.unique(r.outputs).length !== r.outputs.length && console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: " + r.outputs.map(function (e) {
            return e.name;
          })), r.inputLayers = [], r.inputLayersNodeIndices = [], r.inputLayersTensorIndices = [], r.outputLayers = [], r.outputLayersNodeIndices = [], r.outputLayersTensorIndices = [], r.layers = [];for (var a = 0, o = r.outputs; a < o.length; a++) {
            var s = (ae = o[a]).sourceLayer,
                u = ae.nodeIndex,
                l = ae.tensorIndex;r.outputLayers.push(s), r.outputLayersNodeIndices.push(u), r.outputLayersTensorIndices.push(l);
          }for (var c = 0, p = r.inputs; c < p.length; c++) {
            var s = (ae = p[c]).sourceLayer,
                u = ae.nodeIndex,
                l = ae.tensorIndex;v.assert(0 === u, "input layer has >1 nodes"), v.assert(0 === l, "input layer has >1 tensors"), r.inputLayers.push(s), r.inputLayersNodeIndices.push(u), r.inputLayersTensorIndices.push(l);
          }r.inputNames = [], r.outputNames = [], r.feedInputShapes = [], r.feedInputNames = [], r.feedOutputNames = [];for (M = 0; M < r.inputLayers.length; M++) {
            if (!((s = r.inputLayers[M]) instanceof _)) throw new TypeError("Input layers to a Model must be InputLayer objects. Received inputs: " + n.inputs + ". Input " + M + " (0-based) originates from layer type " + s.getClassName() + ".");r.inputNames.push(s.name), r.feedInputShapes.push(s.batchInputShape), r.feedInputNames.push(s.name);
          }for (var h = 0, g = r.outputLayers; h < g.length; h++) {
            s = g[h];r.outputNames.push(s.name);
          }r.internalInputShapes = r.inputs.map(function (e) {
            return e.shape;
          }), r.internalOutputShapes = r.outputs.map(function (e) {
            return e.shape;
          });for (var m = {}, y = {}, b = {}, w = {}, A = {}, E = [], T = function T(e, n, i, a, o, s) {
            null != a && null != o && null != s || (a = e.sourceLayer, o = e.nodeIndex, s = e.tensorIndex);var u = a.inboundNodes[o];if (-1 !== i.indexOf(u)) throw new f.RuntimeError("The tensor " + e.name + ' at layer "' + a.name + '" is part of a cycle.');if (-1 === n.indexOf(u)) {
              r.containerNodes.add(t.nodeKey(a, o)), (a.id in A) || (A[a.id] = (0, _keys2.default)(A).length), -1 === i.indexOf(u) && i.push(u);for (var l = u.inboundLayers.length, c = 0; c < l; c++) {
                var p = u.inputTensors[c],
                    h = u.inboundLayers[c],
                    d = u.nodeIndices[c],
                    g = u.tensorIndices[c];T(p, n, i, h, d, g);
              }for (n.push(u); i.indexOf(u) >= 0;) {
                i.splice(i.indexOf(u), 1);
              }E.push(u);
            }
          }, S = [], C = [], O = 0, k = r.outputs; O < k.length; O++) {
            ae = k[O];T(ae, S, C);
          }for (var R = 0, N = E.slice().reverse(); R < N.length; R++) {
            y[(ee = N[R]).id] = ee, ee.id in m || (m[ee.id] = 0);var I = m[ee.id],
                z = null == b[ee.outboundLayer.id] ? 0 : b[ee.outboundLayer.id];I = Math.max(I, z), b[ee.outboundLayer.id] = I, w[ee.outboundLayer.id] = ee.outboundLayer, m[ee.id] = I;for (var M = 0; M < ee.inboundLayers.length; M++) {
              var D = ee.inboundLayers[M],
                  u = ee.nodeIndices[M],
                  P = D.inboundNodes[u],
                  L = null == m[P.id] ? 0 : m[P.id];m[P.id] = Math.max(I + 1, L), y[P.id] = P;
            }
          }var F = {};for (var V in m) {
            (I = m[V]) in F || (F[I] = []), F[I].push(y[V]);
          }var B = {};for (var U in b) {
            (I = b[U]) in B || (B[I] = []), B[I].push(w[U]);
          }var j = (0, _keys2.default)(B).map(function (e) {
            return parseInt(e, 10);
          }).sort(v.reverseNumberCompare);r.layers = [];for (var G = 0, W = j; G < W.length; G++) {
            var q = B[I = W[G]];q.sort(function (e, t) {
              var n = A[e.id],
                  r = A[t.id];return n < r ? -1 : n > r ? 1 : 0;
            });for (var H = 0, K = q; H < K.length; H++) {
              s = K[H];r.layers.push(s);
            }
          }r.layersByDepth = B, j = (0, _keys2.default)(F).map(function (e) {
            return parseInt(e, 10);
          }).sort(v.reverseNumberCompare);for (var X = r.inputs.slice(), Y = [], Q = 0, Z = j; Q < Z.length; Q++) {
            for (var J = 0, $ = F[I = Z[Q]]; J < $.length; J++) {
              var ee = $[J];if (null != (s = ee.outboundLayer)) {
                for (var te = 0, ne = ee.inputTensors; te < ne.length; te++) {
                  ae = ne[te];if (-1 === X.indexOf(ae)) throw new f.RuntimeError("Graph disconnected: cannot obtain value for tensor " + ae + ' at layer "' + s.name + '". The following previous layers were accessed without issue: ' + Y);
                }for (var re = 0, ie = ee.outputTensors; re < ie.length; re++) {
                  var ae = ie[re];X.push(ae);
                }Y.push(s.name);
              }
            }
          }r.nodesByDepth = F;for (var oe = r.layers.map(function (e) {
            return e.name;
          }), se = 0, ue = oe; se < ue.length; se++) {
            !function (e) {
              var t = oe.filter(function (t) {
                return t === e;
              }).length;if (1 !== t) throw new f.RuntimeError('The name "' + e + '" is used ' + t + " times in the model. All layer names should be unique. Layer names: " + (0, _stringify2.default)(oe));
            }(ue[se]);
          }return r.outboundNodes = [], r.inboundNodes = [], new x({ outboundLayer: r, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: r.inputs, outputTensors: r.outputs, inputMasks: r.inputs.map(function (e) {
              return null;
            }), outputMasks: r.outputs.map(function (e) {
              return null;
            }), inputShapes: r.inputs.map(function (e) {
              return e.shape;
            }), outputShapes: r.outputs.map(function (e) {
              return e.shape;
            }) }), r.built = !0, r;
        }return c(t, e), Object.defineProperty(t.prototype, "trainableWeights", { get: function get() {
            if (this._trainableWeights.length > 0) throw new f.ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if (!this.trainable) return [];for (var e = [], t = 0, n = this.layers; t < n.length; t++) {
              var r = n[t];e = e.concat(r.trainableWeights);
            }return e;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function get() {
            for (var e = [], t = 0, n = this.layers; t < n.length; t++) {
              o = n[t];e.push.apply(e, o.nonTrainableWeights);
            }if (!this.trainable) {
              for (var r = [], i = 0, a = this.layers; i < a.length; i++) {
                var o = a[i];r.push.apply(r, o.trainableWeights);
              }return r.concat(e);
            }return e;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "weights", { get: function get() {
            return this.trainableWeights.concat(this.nonTrainableWeights);
          }, enumerable: !0, configurable: !0 }), t.prototype.loadWeights = function (e, t, n) {
          void 0 === t && (t = !1), void 0 === n && (n = !1), n ? u(e, this.layers) : l(e, this.layers, t);
        }, t.prototype.updatedConfig = function () {
          var e = this.getConfig();return { className: this.getClassName(), config: e, kerasVersion: "tfjs-layers pre-release", backend: "TensorFlow.js" };
        }, t.prototype.toJSON = function (e) {
          var t = this.updatedConfig();return (0, _stringify2.default)(y.convertTsToPythonic(t));
        }, t.prototype.call = function (e, t) {
          e = v.toList(e);var n;return n = "mask" in t ? v.toList(t.mask) : v.pyListRepeat(null, e.length), this.runInternalGraph(e, n)[0];
        }, t.prototype.computeMask = function (e, t) {
          e = v.toList(e);var n;return n = null == t ? v.pyListRepeat(null, e.length) : v.toList(t), this.runInternalGraph(e, n)[1];
        }, t.prototype.computeOutputShape = function (e) {
          var t = v.normalizeShapeList(e);if (t.length !== this.inputLayers.length) throw new f.ValueError("Invalid inputShape argument " + e + ": model has " + this.inputLayers.length + " tensor inputs.");for (var n = {}, r = 0; r < t.length; r++) {
            var i = this.inputLayers[r],
                a = t[r];n[S = i.name + "_0_0"] = a;
          }var o = (0, _keys2.default)(this.nodesByDepth).map(function (e) {
            return parseInt(e, 10);
          }).sort(v.reverseNumberCompare);if (o.length > 1) for (var s = 0, u = o; s < u.length; s++) {
            for (var l = u[s], c = 0, p = this.nodesByDepth[l]; c < p.length; c++) {
              var h = p[c],
                  i = h.outboundLayer;if (-1 === this.inputLayers.map(function (e) {
                return e.id;
              }).indexOf(i.id)) {
                for (var d = [], g = 0; g < h.inboundLayers.length; g++) {
                  var m = h.inboundLayers[g],
                      y = h.nodeIndices[g],
                      b = h.tensorIndices[g],
                      w = n[S = m.name + "_" + y + "_" + b];d.push(w);
                }for (var x = i.computeOutputShape(v.singletonOrArray(d)), A = v.normalizeShapeList(x), E = i.inboundNodes.indexOf(h), g = 0; g < A.length; g++) {
                  n[S = i.name + "_" + E + "_" + g] = A[g];
                }
              }
            }
          }for (var _ = [], T = [], r = 0; r < this.outputLayers.length; r++) {
            var i = this.outputLayers[r],
                E = this.outputLayersNodeIndices[r],
                b = this.outputLayersTensorIndices[r],
                S = i.name + "_" + E + "_" + b;T.push(S);
          }for (r = 0; r < T.length; r++) {
            var C = T[r];v.assert(C in n), _.push(n[C]);
          }return v.singletonOrArray(_);
        }, t.prototype.runInternalGraph = function (e, t) {
          null == t && (t = v.pyListRepeat(null, e.length));for (var n = {}, r = 0; r < this.inputs.length; ++r) {
            var i = this.inputs[r],
                a = e[r],
                o = t[r];n[i.id] = [a, o];
          }for (var s = 0, u = (0, _keys2.default)(this.nodesByDepth).map(function (e) {
            return parseInt(e, 10);
          }).sort(v.reverseNumberCompare); s < u.length; s++) {
            for (var l = u[s], c = 0, p = this.nodesByDepth[l]; c < p.length; c++) {
              for (var h = p[c], d = h.outboundLayer, g = h.inputTensors, m = h.outputTensors, y = new Array(), b = 0, w = g; b < w.length; b++) {
                (i = w[b]).id in n && y.push(n[i.id]);
              }if (y.length === g.length) {
                var x = {},
                    A = void 0,
                    E = void 0,
                    _ = void 0,
                    T = void 0;if (null != h.callArgs && (x = h.callArgs), 1 === y.length) {
                  var S = y[0],
                      C = S[0],
                      O = S[1];null == x.mask && (x.mask = O), _ = v.toList(d.call(C, x)), T = v.toList(d.computeMask(C, O)), A = [C], E = [O];
                } else A = y.map(function (e) {
                  return e[0];
                }), E = y.map(function (e) {
                  return e[1];
                }), null == x.mask && (x.mask = E), _ = v.toList(d.call(A, x)), T = v.toList(d.computeMask(A, E));if (d.activityRegularizer) throw new f.NotImplementedError("Model invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for (r = 0; r < m.length; ++r) {
                  var i = m[r],
                      a = _[r],
                      o = T[r];n[i.id] = [a, o];
                }
              }
            }
          }for (var k = [], R = [], N = [], I = 0, z = this.outputs; I < z.length; I++) {
            i = z[I];v.assert(i.id in n, "Could not compute output " + i.name + " : " + i.id);var M = n[i.id],
                D = M[0],
                o = M[1];N.push(D.shape), k.push(D), R.push(o);
          }return [k, R, N];
        }, t.prototype.buildNodeConversionMap = function (e) {
          for (var n, r = {}, i = 0, a = this.layers; i < a.length; i++) {
            var o = a[i];n = o instanceof t ? 1 : 0;for (var s = 0; s < o.inboundNodes.length; s++) {
              var u = t.nodeKey(o, s);u in this.containerNodes && (r[u] = n, n += 1);
            }
          }return r;
        }, t.prototype.getLayer = function (e, t) {
          if (null != t) {
            if (this.layers.length <= t) throw new f.ValueError("Was asked to retrieve layer at index " + t + ", but model only has " + this.layers.length + " layer(s).");return this.layers[t];
          }if (null == e) throw new f.ValueError("Provide either a layer name or layer index");for (var n = 0, r = this.layers; n < r.length; n++) {
            var i = r[n];if (i.name === e) return i;
          }throw new f.ValueError("No such layer: " + e);
        }, t.prototype.calculateLosses = function () {
          var e = this;return h.tidy(function () {
            for (var n = [], r = 0, i = e.layers; r < i.length; r++) {
              for (var a = i[r], o = 0; o < a.inboundNodes.length; ++o) {
                var s = t.nodeKey(a, o);e.containerNodes.has(s) && n.push.apply(n, a.calculateLosses());
              }
            }return n;
          });
        }, t.prototype.getConfig = function () {
          for (var e = { name: this.name }, n = this.buildNodeConversionMap(this.layers), r = [], i = 0, a = this.layers; i < a.length; i++) {
            for (var o = (b = a[i]).getClassName(), s = b.getConfig(), u = [], l = 0; l < b.inboundNodes.length; l++) {
              var c = b.inboundNodes[l],
                  p = t.nodeKey(b, l),
                  h = {};if (this.containerNodes.has(p) && (c.callArgs && (-1 === (0, _stringify2.default)(c.callArgs).indexOf("undefined") ? h = c.callArgs : (console.warn("Layer " + b.name + " was passed non-serializable keyword arguments: " + c.callArgs + ". They will not be included in the serialized model (and thus will be missing at deserialization time)."), h = {})), c.inboundLayers.length > 0)) {
                for (var d = [], f = 0; f < c.inboundLayers.length; f++) {
                  var g = c.inboundLayers[f],
                      m = c.nodeIndices[f],
                      v = c.tensorIndices[f];null !== (x = n[t.nodeKey(g, m)]) && void 0 !== x || (x = 0), d.push([g.name, x, v, h]);
                }u.push(d);
              }
            }r.push({ name: b.name, className: o, config: s, inboundNodes: u });
          }e.layers = r;for (var y = [], f = 0; f < this.inputLayers.length; f++) {
            var b = this.inputLayers[f],
                m = this.inputLayersNodeIndices[f],
                p = t.nodeKey(b, m);if (this.containerNodes.has(p)) {
              null !== (x = n[p]) && void 0 !== x || (x = 0);v = this.inputLayersTensorIndices[f];y.push([b.name, x, v]);
            }
          }e.inputLayers = y;for (var w = [], f = 0; f < this.outputLayers.length; f++) {
            var b = this.outputLayers[f],
                m = this.outputLayersNodeIndices[f],
                p = t.nodeKey(b, m);if (this.containerNodes.has(p)) {
              var x = n[p];null !== x && void 0 !== x || (x = 0);v = this.outputLayersTensorIndices[f];w.push([b.name, x, v]);
            }
          }return e.outputLayers = w, e;
        }, t.fromConfig = function (e, t) {
          function n(e, t) {
            e.name in i ? i[e.name].push(t) : i[e.name] = [t];
          }for (var r = {}, i = {}, a = t.name, o = t.layers, s = 0, u = o; s < u.length; s++) {
            !function (e) {
              var i = e.name,
                  a = g.deserialize(e, null != t.customObjects ? t.customObjects : {});r[i] = a;for (var o = 0, s = e.inboundNodes; o < s.length; o++) {
                var u = s[o];if (!(u instanceof Array)) throw new f.ValueError("Corrupted configuration, expected array for nodeData: " + u);n(a, u);
              }
            }(p = u[s]);
          }for (; !v.isObjectEmpty(i);) {
            for (var l = 0, c = o; l < c.length; l++) {
              var p = c[l];if ((S = r[p.name]).name in i) {
                for (var h = 0, d = i[S.name]; h < d.length; h++) {
                  !function (e, t) {
                    for (var i, a = [], o = 0, s = t; o < s.length; o++) {
                      var u = s[o],
                          l = u[0],
                          c = u[1],
                          p = u[2];if (3 === u.length) i = {};else {
                        if (4 !== u.length) throw new f.ValueError("Improperly formatted model config for layer " + (0, _stringify2.default)(e) + ": " + (0, _stringify2.default)(u));i = u[3];
                      }if (!(l in r)) return void n(e, t);var h = r[l];if (h.inboundNodes.length <= c) return void n(e, t);var d = h.inboundNodes[c];a.push(d.outputTensors[p]);
                    }a.length > 0 && e.apply(v.singletonOrArray(a), i);
                  }(S, d[h]);
                }delete i[S.name];
              }
            }
          }for (var m = [], y = [], b = 0, w = t.inputLayers; b < w.length; b++) {
            var x = (p = w[b])[0],
                A = p[1],
                E = p[2];v.assert(x in r);C = (S = r[x]).inboundNodes[A].outputTensors;m.push(C[E]);
          }for (var _ = 0, T = t.outputLayers; _ < T.length; _++) {
            var x = (p = T[_])[0],
                A = p[1],
                E = p[2];v.assert(x in r);var S = r[x],
                C = S.inboundNodes[A].outputTensors;y.push(C[E]);
          }return new e({ inputs: m, outputs: y, name: a });
        }, Object.defineProperty(t.prototype, "stateful", { get: function get() {
            if (this._stateful) throw new f.ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for (var e = 0, t = this.layers; e < t.length; e++) {
              if (t[e].stateful) return !0;
            }return !1;
          }, enumerable: !0, configurable: !0 }), p([h.doc({ heading: "Layers", subheading: "Classes", namespace: "layers", subclasses: ["Model"] })], t.prototype, "getLayer", null), t;
      }(E);n.Container = T, n.getSourceInputs = a, n.loadWeightsFromNamedTensorMap = u, n.loadWeightsFromJson = l;
    }, { "../backend/tfjs_backend": 100, "../errors": 107, "../layers/serialization": 121, "../types": 128, "../utils/generic_utils": 130, "../utils/serialization_utils": 132, "@tensorflow/tfjs-core": 8 }], 106: [function (e, t, n) {
      "use strict";
      function r(e) {
        return e instanceof b.Tensor;
      }function i(e) {
        return Array.isArray(e);
      }function a(e) {
        return !r(e) && !i(e);
      }function o(e, t, n, r, o) {
        if (void 0 === r && (r = !0), void 0 === o && (o = ""), null == t || 0 === t.length) {
          if (null != e) {
            var s = !1;if (i(e) && e.length > 0) s = !0;else if (a(e)) {
              for (var u in e) {
                if (e.hasOwnProperty(u)) {
                  s = !0;break;
                }
              }
            } else s = !0;if (s) throw new A.ValueError("Error when checking model " + o + " expected no data, but got " + e);
          }return [];
        }if (null == e) return t.map(function (e) {
          return null;
        });var l;if (a(e)) {
          e = e, l = [];for (var c = 0, p = t; c < p.length; c++) {
            var h = p[c];if (null == e[h]) throw new A.ValueError('No data provided for "' + h + '". Need data for each key in: ' + t);l.push(e[h]);
          }
        } else if (i(e)) {
          if ((e = e).length !== t.length) throw new A.ValueError("Error when checking model " + o + ": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see " + t.length + " Tensor(s), but instead got the following list of Tensor(s): " + e);l = e;
        } else {
          if (e = e, t.length > 1) throw new A.ValueError("The model " + o + " expects " + t.length + " Tensor(s), but only received one Tensor. Found: Tensor with shape " + e.shape);l = [e];
        }for (d = 0; d < t.length; ++d) {
          1 === (f = l[d]).shape.length && (l[d] = w.expandDims(f, 1));
        }if (null != n) for (var d = 0; d < t.length; ++d) {
          if (null != n[d]) {
            var f = l[d];if (f.shape.length !== n[d].length) throw new A.ValueError("Error when checking " + o + ": expected " + t[d] + " to have " + n[d].length + " dimension(s). but got array with shape " + f.shape);for (var g = 0; g < n[d].length; ++g) {
              if (0 !== g || r) {
                var m = f.shape[g],
                    v = n[d][g];if (null != v && v >= 0 && m !== v) throw new A.ValueError("Error when checking " + o + ": expected " + t[d] + " to have shape [" + n[d] + "], but got array with shape [" + f.shape + "].");
              }
            }
          }
        }return l;
      }function s(e, t, n) {
        var r = S.unique(e.map(function (e) {
          return e.shape[0];
        }));r.sort();var i = S.unique(t.map(function (e) {
          return e.shape[0];
        }));if (i.sort(), r.length > 1) throw new A.ValueError("All input Tensors (x) should have the same number of samples. Got array shapes: " + (0, _stringify2.default)(e.map(function (e) {
          return e.shape;
        })));if (i.length > 1) throw new A.ValueError("All target Tensors (y) should have the same number of samples. Got array shapes: " + (0, _stringify2.default)(t.map(function (e) {
          return e.shape;
        })));if (r.length > 0 && i.length > 0 && !b.util.arraysEqual(r, i)) throw new A.ValueError("Input Tensors should have the same number of samples as target Tensors. Found " + r[0] + " input sample(s) and " + i[0] + " target sample(s).");
      }function u(e, t, n) {
        for (var r = [E.meanSquaredError, E.binaryCrossentropy, E.categoricalCrossentropy], i = 0; i < e.length; ++i) {
          var a = e[i],
              o = t[i],
              s = n[i];if (null != o) {
            if (o === E.categoricalCrossentropy && 1 === a.shape[a.shape.length - 1]) throw new A.ValueError("You are passing a target array of shape " + a.shape + " while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");if (-1 !== r.indexOf(o)) for (var u = a.shape.slice(1), l = s.slice(1), c = 0; c < u.length; ++c) {
              var p = u[c],
                  h = l[c];if (null != h && p !== h) throw new A.ValueError("A target Tensor with shape " + a.shape + " was passed for an output of shape " + s + ", while using a loss function that expects targets to have the same shape as the output.");
            }
          }
        }
      }function l(e, t) {
        for (var n = [], r = 0, i = null; r < e;) {
          (i = r + t) >= e && (i = e), n.push([r, i]), r = i;
        }return n;
      }function c(e, t, n) {
        return null == e ? [null] : Array.isArray(e) ? e.map(function (e) {
          return w.sliceAlongFirstAxis(e, t, n - t);
        }) : w.sliceAlongFirstAxis(e, t, n - t);
      }function p(e, t) {
        return null == e ? null : Array.isArray(e) ? e.map(function (e) {
          return p(e, t);
        }) : w.gather(e, "int32" === t.dtype ? t : t.toInt());
      }function h(e, t, n, r, i) {
        void 0 === r && (r = !0), void 0 === i && (i = "");var a;if (Array.isArray(e)) {
          if (e.length !== t.length) throw new A.ValueError("Error when checking model " + i + ": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see " + t.length + " Tensor(s), but instead got " + e.length + " Tensors(s).");a = e;
        } else {
          if (t.length > 1) throw new A.ValueError("The model expects " + t.length + " " + i + " Tensors, but only received one Tensor. Found: array with shape " + (0, _stringify2.default)(e.shape) + ".");a = [e];
        }if (null != n) for (var o = 0; o < t.length; ++o) {
          if (null != n[o]) {
            var s = a[o];if (s.shape.length !== n[o].length) throw new A.ValueError("Error when checking " + i + ": expected " + t[o] + " to have " + n[o].length + " dimension(s), but got array with shape " + (0, _stringify2.default)(s.shape));for (var u = 0; u < n[o].length; ++u) {
              if (0 !== u || r) {
                var l = s.shape[u],
                    c = n[o][u];if (null != c && c !== l) throw new A.ValueError("Error when checking " + i + ": expected " + t[o] + " to have shape " + (0, _stringify2.default)(n[o]) + " but got array with shape " + (0, _stringify2.default)(s.shape) + ".");
              }
            }
          }
        }
      }function d(e, t) {
        if (null == e || Array.isArray(e) && 0 === e.length) return t.map(function (e) {
          return [];
        });if (Array.isArray(e)) return t.map(function (t) {
          return e;
        });if (null != e) {
          for (var n = [], r = 0, i = t; r < i.length; r++) {
            var a = i[r],
                o = e.hasOwnProperty(a) ? e[a] : [];Array.isArray(o) || (o = [o]), n.push(o);
          }return n;
        }throw new TypeError("Type of metrics argument not understood. Expected an Array or Object, found: " + e);
      }var f = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }(),
          g = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      },
          m = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          v = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var y = e("@tensorflow/tfjs-core"),
          b = e("@tensorflow/tfjs-core"),
          w = e("../backend/tfjs_backend"),
          x = e("../callbacks"),
          A = e("../errors"),
          E = e("../losses"),
          _ = e("../metrics"),
          T = e("../optimizers"),
          S = e("../utils/generic_utils"),
          C = e("../utils/math_utils"),
          O = e("./executor"),
          k = e("./topology");n.isDataTensor = r, n.isDataArray = i, n.isDataDict = a, n.standardizeInputData = o, n.checkArrayLengths = s, n.makeBatches = l, n.sliceArraysByIndices = p;!function (e) {
        e[e.SILENT = 0] = "SILENT", e[e.VERBOSE = 1] = "VERBOSE";
      }(n.ModelLoggingVerbosity || (n.ModelLoggingVerbosity = {}));var R = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return f(t, e), t.prototype.getClassName = function () {
          return "Model";
        }, t.prototype.compile = function (e) {
          var t = this;if (null == e.loss && (e.loss = []), this.loss = e.loss, "string" == typeof e.optimizer) this.optimizer = T.getOptimizer(e.optimizer);else {
            if (!(e.optimizer instanceof b.Optimizer)) throw new A.ValueError("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer = e.optimizer;
          }var n = [];if (Array.isArray(e.loss) || "string" == typeof e.loss || "function" == typeof e.loss) {
            if (Array.isArray(e.loss)) {
              if (e.loss.length !== this.outputs.length) throw new A.ValueError("When passing an Array as loss, it should have one entry per model output. The model has " + this.outputs.length + " output(s), but you passed loss=" + e.loss + ".");var r = e.loss;n = r.map(function (e) {
                return E.get(e);
              });
            } else {
              var i = E.get(e.loss);this.outputs.map(function (e) {
                n.push(i);
              });
            }
          } else {
            e.loss = e.loss;for (var a in e.loss) {
              if (-1 === this.outputNames.indexOf(a)) throw new A.ValueError('Unknown entry in loss dictionary: "' + a + '". Only expect the following keys: ' + this.outputNames);
            }for (var o in this.outputNames) {
              null == e.loss[o] && console.warn('Output "' + o + '" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ' + o + " during training"), n.push(E.get(e.loss[o]));
            }
          }this.lossFunctions = n, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];for (var s = 0; s < this.outputs.length; ++s) {
            var u = this.internalOutputShapes[s],
                l = this.outputNames[s];this.feedOutputNames.push(l), this.feedOutputShapes.push(u), this.feedLossFns.push(this.lossFunctions[s]);
          }var c = [];this.metrics = e.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], w.nameScope("loss", function () {
            for (var e = 0; e < t.outputs.length; ++e) {
              if (-1 === c.indexOf(e)) {
                var n = t.lossFunctions[e];t.outputs.length > 1 && (t.metricsTensors.push([n, e]), t.metricsNames.push(t.outputNames[e] + "_loss"));
              }
            }
          });var p = d(e.metrics, this.outputNames),
              h = function h(e, n, r) {
            t.outputNames.length > 1 && (n = t.outputNames[e] + "_" + n), t.metricsNames.push(n), t.metricsTensors.push([r, e]);
          };w.nameScope("metric", function () {
            for (var e = 0; e < t.outputs.length; ++e) {
              !function (e) {
                if (-1 !== c.indexOf(e)) return "continue";!function (n) {
                  for (var r, i, a, o = 0, s = p[e]; o < s.length; o++) {
                    !function (n) {
                      if (-1 !== ["accuracy", "acc", "crossentropy", "ce"].indexOf(n)) {
                        var o = t.internalOutputShapes[e];1 === o[o.length - 1] || t.lossFunctions[e] === E.binaryCrossentropy ? -1 !== ["accuracy", "acc"].indexOf(n) ? i = _.binaryAccuracy : -1 !== ["crossentropy", "ce"].indexOf(n) && (i = _.binaryCrossentropy) : t.lossFunctions[e] === E.sparseCategoricalCrossentropy ? -1 !== ["accuracy", "acc"].indexOf(n) ? i = _.sparseCategoricalAccuracy : -1 !== ["crossentropy", "ce"].indexOf(n) && (i = _.sparseCategoricalCrossentropy) : -1 !== ["accuracy", "acc"].indexOf(n) ? i = _.categoricalAccuracy : -1 !== ["crossentropy", "ce"].indexOf(n) && (i = _.categoricalCrossentropy);var s = void 0;-1 !== ["accuracy", "acc"].indexOf(n) ? s = "acc" : -1 !== ["crossentropy", "ce"].indexOf(n) && (s = "ce"), a = i, r = "" + s;
                      } else {
                        var u = _.get(n);a = u, r = "" + n;
                      }var l;w.nameScope(r, function () {
                        l = a;
                      }), h(e, r, l);
                    }(s[o]);
                  }
                }();
              }(e);
            }
          }), this.collectedTrainableWeights = this.trainableWeights;
        }, t.prototype.checkTrainableWeightsConsistency = function () {
          null != this.collectedTrainableWeights && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
        }, t.prototype.evaluate = function (e, t, n) {
          void 0 === n && (n = {});var r = null == n.batchSize ? 32 : n.batchSize,
              i = this.standardizeUserData(e, t, !0, r),
              a = i[0].concat(i[1]);this.makeTestFunction();var o = this.testFunction,
              s = this.testLoop(o, a, r, n.verbose, n.steps);return S.singletonOrArray(s);
        }, t.prototype.checkNumSamples = function (e, t, n, r) {
          void 0 === r && (r = "steps");var i;if (null != n) {
            if (i = null, null != t) throw new A.ValueError("If " + r + " is set, batchSize must be null or undefined.Got batchSize = " + t);
          } else {
            if (null == e) throw new A.ValueError("Either the input data should have a defined shape, or " + r + " shoud be specified.");i = Array.isArray(e) ? e[0].shape[0] : e.shape[0];
          }return i;
        }, t.prototype.predictLoop = function (e, t, n) {
          var r = this;void 0 === t && (t = 32), void 0 === n && (n = !1);var i = this.checkNumSamples(e);if (n) throw new A.NotImplementedError("Verbose predictLoop() is not implemented yet.");for (var a = l(i, t), o = [], s = 0; s < a.length; ++s) {
            !function (t) {
              var n = y.tidy(function () {
                var n = a[t][0],
                    i = a[t][1],
                    o = c(e, n, i),
                    s = [];if (Array.isArray(o)) for (var u = 0; u < o.length; ++u) {
                  s.push({ key: r.inputs[u], value: o[u] });
                } else s.push({ key: r.inputs[0], value: o });var l = new O.FeedDict(s);return O.execute(r.outputs, l);
              });if (0 === t) for (var i = 0, s = n; i < s.length; i++) {
                var u = s[i];o.push(u);
              } else for (var l = 0; l < n.length; ++l) {
                o[l] = w.concatAlongFirstAxis(o[l], n[l]);
              }
            }(s);
          }return S.singletonOrArray(o);
        }, t.prototype.predict = function (e, t) {
          void 0 === t && (t = {}), h(e, this.inputNames, this.feedInputShapes, !1);var n = null == t.batchSize ? 32 : t.batchSize;return this.predictLoop(e, n);
        }, t.prototype.predictOnBatch = function (e) {
          return h(e, this.inputNames, this.feedInputShapes, !0), this.predictLoop(e, e.shape[0]);
        }, t.prototype.standardizeUserData = function (e, t, n, r) {
          if (void 0 === n && (n = !0), null == this.optimizer) throw new A.RuntimeError("You must compile a model before training/testing. Use Model.compile(modelCompileConfig).");for (var i = [], a = 0; a < this.feedOutputShapes.length; ++a) {
            var l = this.feedOutputShapes[a];this.feedLossFns[a] === E.sparseCategoricalCrossentropy ? i.push(l.slice(0, l.length - 1).concat([1])) : i.push(l);
          }if (e = o(e, this.feedInputNames, this.feedInputShapes, !1, "input"), t = o(t, this.feedOutputNames, i, !1, "target"), s(e, t), u(t, this.feedLossFns, this.feedOutputShapes), this.stateful && null != r && r > 0 && e[0].shape[0] % r != 0) throw new A.ValueError("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size " + r + ". Found: " + e[0].shape[0] + " sample(s).");return [e, t, null];
        }, t.prototype.fitLoop = function (e, t, n, r, i, a, o, s, u, c, h, d, f, g) {
          return void 0 === d && (d = 0), m(this, void 0, void 0, function () {
            var m,
                E,
                _,
                T,
                S,
                O,
                k = this;return v(this, function (R) {
              switch (R.label) {case 0:
                  if (null == r && (r = 32), null == i && (i = 100), null == c && (c = !0), null == d && (d = 0), m = !1, null != s && null != u && (m = !0), null != g && (m = !0, null == f)) throw new A.ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");if (null != (E = this.checkNumSamples(t, r, f, "steps_per_epoch")) && (_ = C.range(0, E)), this.history = new x.History(), o = null == o ? [new x.BaseLogger()] : [new x.BaseLogger()].concat(o), o = o.concat([this.history]), a > 0) throw new A.NotImplementedError("Verbose mode is not implemented yet.");return (T = new x.CallbackList(o)).setModel(this), T.setParams({ epochs: i, steps: f, verbose: a, doValidation: m, metrics: h }), [4, T.onTrainBegin()];case 1:
                  R.sent(), S = function S(i) {
                    var a, o, h, d, g;return v(this, function (S) {
                      switch (S.label) {case 0:
                          return [4, T.onEpochBegin(i)];case 1:
                          if (S.sent(), a = {}, null == f) return [3, 2];throw new A.NotImplementedError("stepsPerEpoch mode is not implemented yet.");case 2:
                          if ("batch" === c) throw new A.NotImplementedError("batch shuffling is not implemneted yet");c && b.util.shuffle(_), o = b.tensor1d(_), h = l(E, r), d = function d(i) {
                            var l;return v(this, function (c) {
                              switch (c.label) {case 0:
                                  return l = {}, [4, T.onBatchBegin(i, l)];case 1:
                                  return c.sent(), y.tidy(function () {
                                    var c = h[i][0],
                                        d = h[i][1],
                                        f = w.sliceAlongFirstAxis(o, c, d - c);l.batch = i, l.size = d - c;for (var g = p(t, f), v = e(g), y = 0; y < n.length; ++y) {
                                      var b = n[y],
                                          x = v[y];l[b] = x, w.keep(x);
                                    }if (i === h.length - 1 && m) for (var A = k.testLoop(s, u, r), y = 0; y < n.length; ++y) {
                                      var b = n[y],
                                          x = A[y];w.keep(x), a["val_" + b] = x;
                                    }
                                  }), [4, T.onBatchEnd(i, l)];case 2:
                                  return c.sent(), x.disposeTensorsInLogs(l), [2];}
                            });
                          }, g = 0, S.label = 3;case 3:
                          return g < h.length ? [5, d(g)] : [3, 6];case 4:
                          S.sent(), S.label = 5;case 5:
                          return ++g, [3, 3];case 6:
                          o.dispose(), S.label = 7;case 7:
                          return [4, T.onEpochEnd(i, a)];case 8:
                          return S.sent(), [2];}
                    });
                  }, O = d, R.label = 2;case 2:
                  return O < i ? [5, S(O)] : [3, 5];case 3:
                  R.sent(), R.label = 4;case 4:
                  return ++O, [3, 2];case 5:
                  return [4, T.onTrainEnd()];case 6:
                  return R.sent(), [4, this.history.syncData()];case 7:
                  return R.sent(), [2, this.history];}
            });
          });
        }, t.prototype.testLoop = function (e, t, n, r, i) {
          void 0 === r && (r = 0);var a = this.checkNumSamples(t, n, i, "steps"),
              o = [];if (1 === r) throw new A.NotImplementedError("Verbose mode is not implemented yet.");if (null != i) throw new A.NotImplementedError("steps mode in testLoop() is not implemented yet");for (var s = l(a, n), u = b.tensor1d(C.range(0, a)), c = 0; c < s.length; ++c) {
            var h = s[c][0],
                d = s[c][1],
                f = e(p(t, w.sliceAlongFirstAxis(u, h, d - h)));if (0 === c) for (m = 0; m < f.length; ++m) {
              o.push(w.getScalar(0));
            }for (m = 0; m < f.length; ++m) {
              var g = f[m];o[m] = w.add(o[m], w.scalarTimesArray(w.getScalar(d - h), g));
            }
          }for (var m = 0; m < o.length; ++m) {
            o[m] = w.divide(o[m], w.getScalar(a));
          }return o;
        }, t.prototype.getDedupedMetricsNames = function () {
          for (var e = this.metricsNames, t = [], n = 0; n < e.length; ++n) {
            var r = e[n],
                i = r;S.count(e, r) > 1 && (i += "_" + S.count(e.slice(0, n), r)), t.push(i);
          }return t;
        }, t.prototype.makeTestFunction = function () {
          var e = this;this.testFunction = function (t) {
            return y.tidy(function () {
              for (var n, r = [], i = t.slice(0, e.inputs.length), a = t.slice(e.inputs.length, e.inputs.length + e.outputs.length), o = [], s = 0; s < e.inputs.length; ++s) {
                o.push({ key: e.inputs[s], value: i[s] });
              }for (var u = new O.FeedDict(o), l = O.execute(e.outputs, u), s = 0; s < e.lossFunctions.length; ++s) {
                var c = e.lossFunctions[s],
                    p = w.mean(c(a[s], l[s]));n = 0 === s ? p : w.add(n, p), r.push(n);
              }for (s = 0; s < e.metricsTensors.length; ++s) {
                var h = e.metricsTensors[s][0],
                    d = e.metricsTensors[s][1],
                    f = w.mean(h(a[d], l[d]));r.push(f);
              }return r;
            });
          };
        }, t.prototype.fit = function (e, t, n) {
          return void 0 === n && (n = {}), m(this, void 0, void 0, function () {
            var r,
                i,
                a,
                o,
                s,
                u,
                l,
                p,
                h,
                d,
                f,
                g,
                m,
                y,
                b,
                E,
                _,
                T = this;return v(this, function (v) {
              if (r = null == n.batchSize ? 32 : n.batchSize, i = this.standardizeUserData(e, t, !1, r), a = i[0], o = i[1], s = !1, null != n.validationData && n.validationData.length > 0) {
                if (s = !0, 2 !== n.validationData.length) throw 3 === n.validationData.length ? new A.NotImplementedError("validationData including sample weights is not supported yet.") : new A.ValueError("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; " + n.validationData + " is invalid.");u = n.validationData[0], l = n.validationData[1], h = this.standardizeUserData(u, l, !0, r), u = h[0], l = h[1], p = u.concat(l);
              } else null != n.validationSplit && n.validationSplit > 0 && n.validationSplit < 1 ? (s = !0, d = Math.floor(a[0].shape[0] * (1 - n.validationSplit)), f = a[0].shape[0], u = c(a, d, f), a = c(a, 0, d), l = c(o, d, f), o = c(o, 0, d), p = u.concat(l)) : null != n.validationSteps && (s = !0);return g = a.concat(o), this.checkTrainableWeightsConsistency(), m = function m(e) {
                var t = [],
                    n = [],
                    r = e.slice(0, T.inputs.length),
                    i = e.slice(T.inputs.length, T.inputs.length + T.outputs.length),
                    a = [],
                    o = T.collectedTrainableWeights.map(function (e) {
                  return e.read();
                });return [T.optimizer.minimize(function () {
                  for (var e = [], o = 0; o < T.inputs.length; ++o) {
                    e.push({ key: T.inputs[o], value: r[o] });
                  }for (var s, u = new O.FeedDict(e), l = O.execute(T.outputs, u, { training: !0 }), o = 0; o < T.lossFunctions.length; ++o) {
                    var c = (0, T.lossFunctions[o])(i[o], l[o]);t.push(c);var p = w.mean(c);n.push(p), s = 0 === o ? c : w.add(s, c);
                  }for (o = 0; o < T.metricsTensors.length; ++o) {
                    var h = T.metricsTensors[o][0],
                        d = T.metricsTensors[o][1],
                        f = w.mean(h(i[d], l[d]));w.keep(f), a.push(f);
                  }return s = w.mean(s), T.calculateLosses().forEach(function (e) {
                    s = w.add(s, e);
                  }), s;
                }, !0, o)].concat(a);
              }, y = this.getDedupedMetricsNames(), s ? (this.makeTestFunction(), b = this.testFunction, E = y.slice().concat(y.map(function (e) {
                return "val_" + e;
              }))) : (b = null, p = [], E = y.slice()), _ = x.standardizeCallbacks(n.callbacks), [2, this.fitLoop(m, g, y, r, n.epochs, n.verbose, _, b, p, n.shuffle, E, null, null, null)];
            });
          });
        }, g([b.doc({ heading: "Models", subheading: "Classes", configParamIndices: [0] })], t.prototype, "compile", null), g([b.doc({ heading: "Models", subheading: "Classes", configParamIndices: [2] })], t.prototype, "evaluate", null), g([b.doc({ heading: "Models", subheading: "Classes", configParamIndices: [1] })], t.prototype, "predict", null), g([b.doc({ heading: "Models", subheading: "Classes" })], t.prototype, "predictOnBatch", null), g([b.doc({ heading: "Models", subheading: "Classes", configParamIndices: [2] })], t.prototype, "fit", null), t = g([b.doc({ heading: "Models", subheading: "Classes" })], t);
      }(k.Container);n.Model = R, S.ClassNameMap.register("Model", R);
    }, { "../backend/tfjs_backend": 100, "../callbacks": 101, "../errors": 107, "../losses": 123, "../metrics": 124, "../optimizers": 126, "../utils/generic_utils": 130, "../utils/math_utils": 131, "./executor": 104, "./topology": 105, "@tensorflow/tfjs-core": 8 }], 107: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = function (e) {
        function t(n) {
          var r = e.call(this, n) || this;return (0, _setPrototypeOf2.default)(r, t.prototype), r;
        }return r(t, e), t;
      }(Error);n.AttributeError = i;var a = function (e) {
        function t(n) {
          var r = e.call(this, n) || this;return (0, _setPrototypeOf2.default)(r, t.prototype), r;
        }return r(t, e), t;
      }(Error);n.RuntimeError = a;var o = function (e) {
        function t(n) {
          var r = e.call(this, n) || this;return (0, _setPrototypeOf2.default)(r, t.prototype), r;
        }return r(t, e), t;
      }(Error);n.ValueError = o;var s = function (e) {
        function t(n) {
          var r = e.call(this, n) || this;return (0, _setPrototypeOf2.default)(r, t.prototype), r;
        }return r(t, e), t;
      }(Error);n.NotImplementedError = s;var u = function (e) {
        function t(n) {
          var r = e.call(this, n) || this;return (0, _setPrototypeOf2.default)(r, t.prototype), r;
        }return r(t, e), t;
      }(Error);n.AssertionError = u;var l = function (e) {
        function t(n) {
          var r = e.call(this, n) || this;return (0, _setPrototypeOf2.default)(r, t.prototype), r;
        }return r(t, e), t;
      }(Error);n.IndexError = l;
    }, {}], 108: [function (e, t, n) {
      "use strict";
      var r = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var i = e("@tensorflow/tfjs-core"),
          a = e("./constraints"),
          o = e("./engine/topology"),
          s = e("./engine/training"),
          u = e("./initializers"),
          l = e("./layers/advanced_activations"),
          c = e("./layers/convolutional"),
          p = e("./layers/convolutional_depthwise"),
          h = e("./layers/core"),
          d = e("./layers/embeddings"),
          f = e("./layers/merge"),
          g = e("./layers/normalization"),
          m = e("./layers/padding"),
          v = e("./layers/pooling"),
          y = e("./layers/recurrent"),
          b = e("./layers/wrappers"),
          w = e("./losses"),
          x = e("./metrics"),
          A = e("./models"),
          E = e("./regularizers"),
          _ = function () {
        function e() {}return e.model = function (e) {
          return new s.Model(e);
        }, e.sequential = function (e) {
          return new A.Sequential(e);
        }, e.loadModel = function (e) {
          return A.loadModelInternal(e);
        }, e.input = function (e) {
          return o.Input(e);
        }, r([i.doc({ heading: "Models", subheading: "Creation", configParamIndices: [0] })], e, "model", null), r([i.doc({ heading: "Models", subheading: "Creation", configParamIndices: [0] })], e, "sequential", null), r([i.doc({ heading: "Models", subheading: "Loading", useDocsFrom: "loadModelInternal" })], e, "loadModel", null), r([i.doc({ heading: "Models", subheading: "Inputs", useDocsFrom: "Input", configParamIndices: [0] })], e, "input", null), e;
      }();n.ModelExports = _;var T = function () {
        function e() {}return e.inputLayer = function (e) {
          return new o.InputLayer(e);
        }, e.elu = function (e) {
          return new l.ELU(e);
        }, e.leakyReLU = function (e) {
          return new l.LeakyReLU(e);
        }, e.softmax = function (e) {
          return new l.Softmax(e);
        }, e.thresholdedReLU = function (e) {
          return new l.ThresholdedReLU(e);
        }, e.conv1d = function (e) {
          return new c.Conv1D(e);
        }, e.conv2d = function (e) {
          return new c.Conv2D(e);
        }, e.conv2dTranspose = function (e) {
          return new c.Conv2DTranspose(e);
        }, e.separableConv2d = function (e) {
          return new c.SeparableConv2D(e);
        }, e.depthwiseConv2d = function (e) {
          return new p.DepthwiseConv2D(e);
        }, e.activation = function (e) {
          return new h.Activation(e);
        }, e.dense = function (e) {
          return new h.Dense(e);
        }, e.dropout = function (e) {
          return new h.Dropout(e);
        }, e.flatten = function (e) {
          return new h.Flatten(e);
        }, e.repeatVector = function (e) {
          return new h.RepeatVector(e);
        }, e.reshape = function (e) {
          return new h.Reshape(e);
        }, e.embedding = function (e) {
          return new d.Embedding(e);
        }, e.add = function (e) {
          return new f.Add(e);
        }, e.average = function (e) {
          return new f.Average(e);
        }, e.concatenate = function (e) {
          return new f.Concatenate(e);
        }, e.maximum = function (e) {
          return new f.Maximum(e);
        }, e.minimum = function (e) {
          return new f.Minimum(e);
        }, e.multiply = function (e) {
          return new f.Multiply(e);
        }, e.batchNormalization = function (e) {
          return new g.BatchNormalization(e);
        }, e.zeroPadding2d = function (e) {
          return new m.ZeroPadding2D(e);
        }, e.averagePooling1d = function (e) {
          return new v.AveragePooling1D(e);
        }, e.avgPool1d = function (t) {
          return e.averagePooling1d(t);
        }, e.avgPooling1d = function (t) {
          return e.averagePooling1d(t);
        }, e.averagePooling2d = function (e) {
          return new v.AveragePooling2D(e);
        }, e.avgPool2d = function (t) {
          return e.averagePooling2d(t);
        }, e.avgPooling2d = function (t) {
          return e.averagePooling2d(t);
        }, e.globalAveragePooling1d = function (e) {
          return new v.GlobalAveragePooling1D(e);
        }, e.globalAveragePooling2d = function (e) {
          return new v.GlobalAveragePooling2D(e);
        }, e.globalMaxPooling1d = function (e) {
          return new v.GlobalMaxPooling1D(e);
        }, e.globalMaxPooling2d = function (e) {
          return new v.GlobalMaxPooling2D(e);
        }, e.maxPooling1d = function (e) {
          return new v.MaxPooling1D(e);
        }, e.maxPooling2d = function (e) {
          return new v.MaxPooling2D(e);
        }, e.gru = function (e) {
          return new y.GRU(e);
        }, e.gruCell = function (e) {
          return new y.GRUCell(e);
        }, e.lstm = function (e) {
          return new y.LSTM(e);
        }, e.lstmCell = function (e) {
          return new y.LSTMCell(e);
        }, e.simpleRNN = function (e) {
          return new y.SimpleRNN(e);
        }, e.simpleRNNCell = function (e) {
          return new y.SimpleRNNCell(e);
        }, e.rnn = function (e) {
          return new y.RNN(e);
        }, e.stackedRNNCells = function (e) {
          return new y.StackedRNNCells(e);
        }, e.bidirectional = function (e) {
          return new b.Bidirectional(e);
        }, e.timeDistributed = function (e) {
          return new b.TimeDistributed(e);
        }, e.Layer = o.Layer, e.RNNCell = y.RNNCell, e.input = _.input, r([i.doc({ heading: "Layers", subheading: "Inputs", namespace: "layers", useDocsFrom: "InputLayer", configParamIndices: [0] })], e, "inputLayer", null), r([i.doc({ heading: "Layers", subheading: "Advanced Activation", namespace: "layers", useDocsFrom: "ELU", configParamIndices: [0] })], e, "elu", null), r([i.doc({ heading: "Layers", subheading: "Advanced Activation", namespace: "layers", useDocsFrom: "LeakyReLU", configParamIndices: [0] })], e, "leakyReLU", null), r([i.doc({ heading: "Layers", subheading: "Advanced Activation", namespace: "layers", useDocsFrom: "Softmax", configParamIndices: [0] })], e, "softmax", null), r([i.doc({ heading: "Layers", subheading: "Advanced Activation", namespace: "layers", useDocsFrom: "ThresholdedReLU", configParamIndices: [0] })], e, "thresholdedReLU", null), r([i.doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "Conv1D", configParamIndices: [0] })], e, "conv1d", null), r([i.doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "Conv2D", configParamIndices: [0] })], e, "conv2d", null), r([i.doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "Conv2DTranspose", configParamIndices: [0] })], e, "conv2dTranspose", null), r([i.doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "SeparableConv2D", configParamIndices: [0] })], e, "separableConv2d", null), r([i.doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "DepthwiseConv2D", configParamIndices: [0] })], e, "depthwiseConv2d", null), r([i.doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Activation", configParamIndices: [0] })], e, "activation", null), r([i.doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Dense", configParamIndices: [0] })], e, "dense", null), r([i.doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Dropout", configParamIndices: [0] })], e, "dropout", null), r([i.doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Flatten", configParamIndices: [0] })], e, "flatten", null), r([i.doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "RepeatVector", configParamIndices: [0] })], e, "repeatVector", null), r([i.doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Reshape", configParamIndices: [0] })], e, "reshape", null), r([i.doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Embedding", configParamIndices: [0] })], e, "embedding", null), r([i.doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Add", configParamIndices: [0] })], e, "add", null), r([i.doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Average", configParamIndices: [0] })], e, "average", null), r([i.doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Concatenate", configParamIndices: [0] })], e, "concatenate", null), r([i.doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Maximum", configParamIndices: [0] })], e, "maximum", null), r([i.doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Minimum", configParamIndices: [0] })], e, "minimum", null), r([i.doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Multiply", configParamIndices: [0] })], e, "multiply", null), r([i.doc({ heading: "Layers", subheading: "Normalization", namespace: "layers", useDocsFrom: "BatchNormalization", configParamIndices: [0] })], e, "batchNormalization", null), r([i.doc({ heading: "Layers", subheading: "Padding", namespace: "layers", useDocsFrom: "ZeroPadding2D", configParamIndices: [0] })], e, "zeroPadding2d", null), r([i.doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "AveragePooling1D", configParamIndices: [0] })], e, "averagePooling1d", null), r([i.doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "AveragePooling2D", configParamIndices: [0] })], e, "averagePooling2d", null), r([i.doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "GlobalAveragePooling1D", configParamIndices: [0] })], e, "globalAveragePooling1d", null), r([i.doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "GlobalAveragePooling2D", configParamIndices: [0] })], e, "globalAveragePooling2d", null), r([i.doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "GlobalMaxPooling1D", configParamIndices: [0] })], e, "globalMaxPooling1d", null), r([i.doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "GlobalMaxPooling2D", configParamIndices: [0] })], e, "globalMaxPooling2d", null), r([i.doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "MaxPooling1D", configParamIndices: [0] })], e, "maxPooling1d", null), r([i.doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "MaxPooling2D", configParamIndices: [0] })], e, "maxPooling2d", null), r([i.doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "GRU", configParamIndices: [0] })], e, "gru", null), r([i.doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "GRUCell", configParamIndices: [0] })], e, "gruCell", null), r([i.doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "LSTM", configParamIndices: [0] })], e, "lstm", null), r([i.doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "LSTMCell", configParamIndices: [0] })], e, "lstmCell", null), r([i.doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "SimpleRNN", configParamIndices: [0] })], e, "simpleRNN", null), r([i.doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "SimpleRNNCell", configParamIndices: [0] })], e, "simpleRNNCell", null), r([i.doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "RNN", configParamIndices: [0] })], e, "rnn", null), r([i.doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "RNN", configParamIndices: [0] })], e, "stackedRNNCells", null), r([i.doc({ heading: "Layers", subheading: "Wrapper", namespace: "layers", useDocsFrom: "Bidirectional", configParamIndices: [0] })], e, "bidirectional", null), r([i.doc({ heading: "Layers", subheading: "Wrapper", namespace: "layers", useDocsFrom: "TimeDistributed", configParamIndices: [0] })], e, "timeDistributed", null), e;
      }();n.LayerExports = T;var S = function () {
        function e() {}return e.maxNorm = function (e) {
          return new a.MaxNorm(e);
        }, e.unitNorm = function (e) {
          return new a.UnitNorm(e);
        }, e.nonNeg = function () {
          return new a.NonNeg();
        }, e.minMaxNorm = function (e) {
          return new a.MinMaxNorm(e);
        }, r([i.doc({ heading: "Constraints", namespace: "constraints", useDocsFrom: "MaxNorm", configParamIndices: [0] })], e, "maxNorm", null), r([i.doc({ heading: "Constraints", namespace: "constraints", useDocsFrom: "UnitNorm", configParamIndices: [0] })], e, "unitNorm", null), r([i.doc({ heading: "Constraints", namespace: "constraints", useDocsFrom: "NonNeg" })], e, "nonNeg", null), r([i.doc({ heading: "Constraints", namespace: "constraints", useDocsFrom: "MinMaxNormConfig", configParamIndices: [0] })], e, "minMaxNorm", null), e;
      }();n.ConstraintExports = S;var C = function () {
        function e() {}return e.zeros = function () {
          return new u.Zeros();
        }, e.ones = function () {
          return new u.Ones();
        }, e.constant = function (e) {
          return new u.Constant(e);
        }, e.randomUniform = function (e) {
          return new u.RandomUniform(e);
        }, e.randomNormal = function (e) {
          return new u.RandomNormal(e);
        }, e.truncatedNormal = function (e) {
          return new u.TruncatedNormal(e);
        }, e.identity = function (e) {
          return new u.Identity(e);
        }, e.varianceScaling = function (e) {
          return new u.VarianceScaling(e);
        }, e.glorotUniform = function (e) {
          return new u.GlorotUniform(e);
        }, e.glorotNormal = function (e) {
          return new u.GlorotNormal(e);
        }, e.heNormal = function (e) {
          return new u.HeNormal(e);
        }, e.leCunNormal = function (e) {
          return new u.LeCunNormal(e);
        }, e.orthogonal = function (e) {
          return new u.Orthogonal(e);
        }, r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Zeros" })], e, "zeros", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Ones" })], e, "ones", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Constant", configParamIndices: [0] })], e, "constant", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "RandomUniform", configParamIndices: [0] })], e, "randomUniform", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "RandomNormal", configParamIndices: [0] })], e, "randomNormal", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "TruncatedNormal", configParamIndices: [0] })], e, "truncatedNormal", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Identity", configParamIndices: [0] })], e, "identity", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "VarianceScaling", configParamIndices: [0] })], e, "varianceScaling", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "GlorotUniform", configParamIndices: [0] })], e, "glorotUniform", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "GlorotNormal", configParamIndices: [0] })], e, "glorotNormal", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "HeNormal", configParamIndices: [0] })], e, "heNormal", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "LeCunNormal", configParamIndices: [0] })], e, "leCunNormal", null), r([i.doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Orthogonal", configParamIndices: [0] })], e, "orthogonal", null), e;
      }();n.InitializerExports = C;var O = function () {
        function e() {}return e.binaryAccuracy = function (e, t) {
          return x.binaryAccuracy(e, t);
        }, e.binaryCrossentropy = function (e, t) {
          return x.binaryCrossentropy(e, t);
        }, e.categoricalAccuracy = function (e, t) {
          return x.categoricalAccuracy(e, t);
        }, e.categoricalCrossentropy = function (e, t) {
          return w.categoricalCrossentropy(e, t);
        }, e.cosineProximity = function (e, t) {
          return w.cosineProximity(e, t);
        }, e.prototype.meanAbsoluteError = function (e, t) {
          return w.meanAbsoluteError(e, t);
        }, e.prototype.meanAbsolutePercentageError = function (e, t) {
          return w.meanAbsolutePercentageError(e, t);
        }, e.prototype.MAPE = function (e, t) {
          return w.meanAbsolutePercentageError(e, t);
        }, e.prototype.mape = function (e, t) {
          return w.meanAbsolutePercentageError(e, t);
        }, e.meanSquaredError = function (e, t) {
          return w.meanSquaredError(e, t);
        }, e.MSE = function (e, t) {
          return w.meanSquaredError(e, t);
        }, e.mse = function (e, t) {
          return w.meanSquaredError(e, t);
        }, r([i.doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "meanAbsoluteError" })], e.prototype, "meanAbsoluteError", null), r([i.doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "meanAbsolutePercentageError" })], e.prototype, "meanAbsolutePercentageError", null), r([i.doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "binaryAccuracy" })], e, "binaryAccuracy", null), r([i.doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "binaryCrossentropy" })], e, "binaryCrossentropy", null), r([i.doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "categoricalAccuracy" })], e, "categoricalAccuracy", null), r([i.doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "categoricalCrossentropy" })], e, "categoricalCrossentropy", null), r([i.doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "cosineProximity" })], e, "cosineProximity", null), r([i.doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "meanSquaredError" })], e, "meanSquaredError", null), e;
      }();n.MetricExports = O;var k = function () {
        function e() {}return e.l1l2 = function (e) {
          return new E.L1L2(e);
        }, e.l1 = function (e) {
          return E.l1(e);
        }, e.l2 = function (e) {
          return E.l2(e);
        }, r([i.doc({ heading: "Regularizers", namespace: "regularizers", useDocsFrom: "L1L2" })], e, "l1l2", null), r([i.doc({ heading: "Regularizers", namespace: "regularizers", useDocsFrom: "L1L2" })], e, "l1", null), r([i.doc({ heading: "Regularizers", namespace: "regularizers", useDocsFrom: "L1L2" })], e, "l2", null), e;
      }();n.RegularizerExports = k;
    }, { "./constraints": 103, "./engine/topology": 105, "./engine/training": 106, "./initializers": 110, "./layers/advanced_activations": 111, "./layers/convolutional": 112, "./layers/convolutional_depthwise": 113, "./layers/core": 114, "./layers/embeddings": 115, "./layers/merge": 116, "./layers/normalization": 117, "./layers/padding": 118, "./layers/pooling": 119, "./layers/recurrent": 120, "./layers/wrappers": 122, "./losses": 123, "./metrics": 124, "./models": 125, "./regularizers": 127, "@tensorflow/tfjs-core": 8 }], 109: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("./backend/tfjs_backend");n.backend = r;var i = e("./exports"),
          a = e("./callbacks");n.Callback = a.Callback, n.CallbackList = a.CallbackList, n.CustomCallback = a.CustomCallback;var o = e("./engine/training");n.Model = o.Model;var s = e("./layers/recurrent");n.RNN = s.RNN;var u = e("./models");n.Sequential = u.Sequential;var l = e("./types");n.SymbolicTensor = l.SymbolicTensor;var c = e("./version");n.version_layers = c.version, n.model = i.ModelExports.model, n.sequential = i.ModelExports.sequential, n.loadModel = i.ModelExports.loadModel, n.input = i.ModelExports.input, n.layers = i.LayerExports, n.constraints = i.ConstraintExports, n.initializers = i.InitializerExports, n.metrics = i.MetricExports, n.regularizers = i.RegularizerExports;
    }, { "./backend/tfjs_backend": 100, "./callbacks": 101, "./engine/training": 106, "./exports": 108, "./layers/recurrent": 120, "./models": 125, "./types": 128, "./version": 133 }], 110: [function (e, t, n) {
      "use strict";
      function r(e) {
        if (null != e && n.VALID_FAN_MODE_VALUES.indexOf(e) < 0) throw new h.ValueError(e + " is not a valid FanMode.  Valid values as " + n.VALID_FAN_MODE_VALUES);
      }function i(e) {
        if (null != e && n.VALID_DISTRIBUTION_VALUES.indexOf(e) < 0) throw new h.ValueError(e + " is not a valid Distribution.  Valid values as " + n.VALID_DISTRIBUTION_VALUES);
      }function a(e, t) {
        void 0 === t && (t = "channelsLast");var n, r;if (p.checkDataFormat(t), 2 === e.length) n = e[0], r = e[1];else if (-1 !== [3, 4, 5].indexOf(e.length)) {
          if ("channelsFirst" === t) {
            i = g.arrayProd(e, 2);n = e[1] * i, r = e[0] * i;
          } else if ("channelsLast" === t) {
            var i = g.arrayProd(e, 0, e.length - 2);n = e[e.length - 2] * i, r = e[e.length - 1] * i;
          }
        } else {
          var a = g.arrayProd(e);n = Math.sqrt(a), r = Math.sqrt(a);
        }return [n, r];
      }function o(e, t) {
        return void 0 === t && (t = {}), f.deserializeKerasObject(e, f.ClassNameMap.getMap().pythonClassNameMap, t, "initializer");
      }var s = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }(),
          u = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var l = e("@tensorflow/tfjs-core"),
          c = e("./backend/tfjs_backend"),
          p = e("./common"),
          h = e("./errors"),
          d = e("./types"),
          f = e("./utils/generic_utils"),
          g = e("./utils/math_utils");f.SerializableEnumRegistry.register("mode", { fan_in: "fanIn", fan_out: "fanOut", fan_avg: "fanAvg" }), n.VALID_FAN_MODE_VALUES = ["fanIn", "fanOut", "fanAvg", void 0, null], n.checkFanMode = r, f.SerializableEnumRegistry.register("distribution", { normal: "normal", uniform: "uniform" }), n.VALID_DISTRIBUTION_VALUES = ["normal", "uniform", void 0, null], n.checkDistribution = i;var m = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return s(t, e), t.fromConfig = function (e, t) {
          return new e(t);
        }, t.prototype.fromConfigUsesCustomObjects = function () {
          return !1;
        }, t.prototype.getConfig = function () {
          return {};
        }, t = u([l.doc({ heading: "Initializers", subheading: "Classes", namespace: "initializers" })], t);
      }(d.Serializable);n.Initializer = m;var v = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return s(t, e), t.prototype.getClassName = function () {
          return "Zeros";
        }, t.prototype.apply = function (e, t) {
          return c.zeros(e, t);
        }, t;
      }(m);n.Zeros = v, f.ClassNameMap.register("Zeros", v);var y = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return s(t, e), t.prototype.getClassName = function () {
          return "Ones";
        }, t.prototype.apply = function (e, t) {
          return c.ones(e, t);
        }, t;
      }(m);n.Ones = y, f.ClassNameMap.register("Ones", y);var b = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.value = t.value, n;
        }return s(t, e), t.prototype.apply = function (e, t) {
          return c.scalarTimesArray(l.scalar(this.value), c.ones(e, t));
        }, t.prototype.getClassName = function () {
          return "Constant";
        }, t.prototype.getConfig = function () {
          return { value: this.value };
        }, t;
      }(m);n.Constant = b, f.ClassNameMap.register("Constant", b);var w = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.DEFAULT_MINVAL = -.05, n.DEFAULT_MAXVAL = .05, n.minval = t.minval || n.DEFAULT_MINVAL, n.maxval = t.maxval || n.DEFAULT_MAXVAL, n.seed = t.seed, n;
        }return s(t, e), t.prototype.apply = function (e, t) {
          return c.randomUniform(e, this.minval, this.maxval, t, this.seed);
        }, t.prototype.getClassName = function () {
          return "RandomUniform";
        }, t.prototype.getConfig = function () {
          return { minval: this.minval, maxval: this.maxval, seed: this.seed };
        }, t;
      }(m);n.RandomUniform = w, f.ClassNameMap.register("RandomUniform", w);var x = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.DEFAULT_MEAN = 0, n.DEFAULT_STDDEV = .05, n.mean = t.mean || n.DEFAULT_MEAN, n.stddev = t.stddev || n.DEFAULT_STDDEV, n.seed = t.seed, n;
        }return s(t, e), t.prototype.apply = function (e, t) {
          return c.randomNormal(e, this.mean, this.stddev, t, this.seed);
        }, t.prototype.getClassName = function () {
          return "RandomNormal";
        }, t.prototype.getConfig = function () {
          return { mean: this.mean, stddev: this.stddev, seed: this.seed };
        }, t;
      }(m);n.RandomNormal = x, f.ClassNameMap.register("RandomNormal", x);var A = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.DEFAULT_MEAN = 0, n.DEFAULT_STDDEV = .05, n.mean = t.mean || n.DEFAULT_MEAN, n.stddev = t.stddev || n.DEFAULT_STDDEV, n.seed = t.seed, n;
        }return s(t, e), t.prototype.apply = function (e, t) {
          return c.truncatedNormal(e, this.mean, this.stddev, t, this.seed);
        }, t.prototype.getClassName = function () {
          return "TruncatedNormal";
        }, t.prototype.getConfig = function () {
          return { mean: this.mean, stddev: this.stddev, seed: this.seed };
        }, t;
      }(m);n.TruncatedNormal = A, f.ClassNameMap.register("TruncatedNormal", A);var E = function (e) {
        function t(t) {
          var n = e.call(this) || this;return n.gain = null != t.gain ? l.scalar(t.gain) : c.getScalar(1), n;
        }return s(t, e), t.prototype.apply = function (e, t) {
          if (2 !== e.length || e[0] !== e[1]) throw new h.ValueError("Identity matrix initializer can only be used for 2D square matrices.");return c.scalarTimesArray(this.gain, c.eye(e[0]));
        }, t.prototype.getClassName = function () {
          return "Identity";
        }, t.prototype.getConfig = function () {
          return { gain: this.gain.get() };
        }, t;
      }(m);n.Identity = E, f.ClassNameMap.register("Identity", E);var _ = function (e) {
        function t(t) {
          var n = e.call(this) || this;if (t.scale < 0) throw new h.ValueError("scale must be a positive float. Got: " + t.scale);return n.scale = null == t.scale ? 1 : t.scale, n.mode = t.mode, r(n.mode), n.distribution = t.distribution, i(n.distribution), n.seed = t.seed, n;
        }return s(t, e), t.prototype.apply = function (e, t) {
          var n = a(e),
              r = n[0],
              i = n[1],
              o = this.scale;if ("fanIn" === this.mode ? o /= Math.max(1, r) : "fanOut" === this.mode ? o /= Math.max(1, i) : o /= Math.max(1, (r + i) / 2), "normal" === this.distribution) {
            var s = Math.sqrt(o);return c.truncatedNormal(e, 0, s, t, this.seed);
          }var u = Math.sqrt(3 * o);return c.randomUniform(e, -u, u, t, this.seed);
        }, t.prototype.getClassName = function () {
          return "VarianceScaling";
        }, t.prototype.getConfig = function () {
          return { scale: this.scale, mode: this.mode, distribution: this.distribution, seed: this.seed };
        }, t;
      }(m);n.VarianceScaling = _, f.ClassNameMap.register("VarianceScaling", _);var T = function (e) {
        function t(t) {
          return e.call(this, { scale: 1, mode: "fanAvg", distribution: "uniform", seed: t.seed }) || this;
        }return s(t, e), t;
      }(_);n.GlorotUniform = T, f.ClassNameMap.register("GlorotUniform", T);var S = function (e) {
        function t(t) {
          return e.call(this, { scale: 1, mode: "fanAvg", distribution: "normal", seed: t.seed }) || this;
        }return s(t, e), t;
      }(_);n.GlorotNormal = S, f.ClassNameMap.register("GlorotNormal", S);var C = function (e) {
        function t(t) {
          return e.call(this, { scale: 2, mode: "fanIn", distribution: "normal", seed: t.seed }) || this;
        }return s(t, e), t;
      }(_);n.HeNormal = C, f.ClassNameMap.register("HeNormal", C);var O = function (e) {
        function t(t) {
          return e.call(this, { scale: 1, mode: "fanIn", distribution: "normal", seed: t.seed }) || this;
        }return s(t, e), t;
      }(_);n.LeCunNormal = O, f.ClassNameMap.register("LeCunNormal", O);var k = function (e) {
        function t(t) {
          var n = e.call(this) || this;if (n.DEFAULT_GAIN = 1, n.gain = null == t.gain ? n.DEFAULT_GAIN : t.gain, n.seed = t.seed, null != n.seed) throw new h.NotImplementedError("Random seed is not implemented for Orthogonal Initializer yet.");return n;
        }return s(t, e), t.prototype.apply = function (e, t) {
          if (2 !== e.length) throw new h.NotImplementedError("The Orthogonal Initializer does not support non-2D shapes yet.");var n = e[0] >= e[1] ? e : [e[1], e[0]],
              r = c.randomNormal(n, 0, 1, d.DType.float32),
              i = c.qr(r)[0];return i.shape[1] > n[1] && (i = i.slice([0, 0], n)), e[0] < e[1] && (i = i.transpose()), c.scalarTimesArray(c.getScalar(this.gain), i);
        }, t.prototype.getClassName = function () {
          return "Orthogonal";
        }, t.prototype.getConfig = function () {
          return { gain: this.gain, seed: this.seed };
        }, t;
      }(m);n.Orthogonal = k, f.ClassNameMap.register("Orthogonal", k), n.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = { constant: "Constant", glorotNormal: "GlorotNormal", glorotUniform: "GlorotUniform", heNormal: "HeNormal", identity: "Identity", leCunNormal: "LeCunNormal", ones: "Ones", orthogonal: "Orthogonal", randomNormal: "RandomNormal", randomUniform: "RandomUniform", truncatedNormal: "TruncatedNormal", varianceScaling: "VarianceScaling", zeros: "Zeros" }, n.serializeInitializer = function (e) {
        return f.serializeKerasObject(e);
      }, n.getInitializer = function (e) {
        return "string" == typeof e ? o({ className: e in n.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? n.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e, config: {} }) : e instanceof m ? e : o(e);
      };
    }, { "./backend/tfjs_backend": 100, "./common": 102, "./errors": 107, "./types": 128, "./utils/generic_utils": 130, "./utils/math_utils": 131, "@tensorflow/tfjs-core": 8 }], 111: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("@tensorflow/tfjs-core"),
          a = e("../activations"),
          o = e("../backend/tfjs_backend"),
          s = e("../backend/tfjs_backend"),
          u = e("../engine/topology"),
          l = e("../errors"),
          c = e("../types"),
          p = e("../utils/generic_utils"),
          h = function (e) {
        function t(t) {
          var n = e.call(this, null == t ? {} : t) || this;return n.DEFAULT_ALPHA = .3, null == t && (t = {}), n.alpha = null == t.alpha ? n.DEFAULT_ALPHA : t.alpha, n;
        }return r(t, e), t.prototype.call = function (e, t) {
          var n = p.getExactlyOneTensor(e);return i.leakyRelu(n, this.alpha);
        }, t.prototype.computeOutputShape = function (e) {
          return e;
        }, t.prototype.getClassName = function () {
          return "LeakyReLU";
        }, t.prototype.getConfig = function () {
          var t = { alpha: this.alpha },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(u.Layer);n.LeakyReLU = h, p.ClassNameMap.register("LeakyReLU", h);var d = function (e) {
        function t(t) {
          var n = e.call(this, null == t ? {} : t) || this;if (n.DEFAULT_ALPHA = 1, null == t && (t = {}), null != t.alpha && t.alpha !== n.DEFAULT_ALPHA) throw new l.NotImplementedError("Non-default alpha value (" + t.alpha + ") is not supported by the ELU layer yet.");return n.alpha = null == t.alpha ? n.DEFAULT_ALPHA : t.alpha, n;
        }return r(t, e), t.prototype.call = function (e, t) {
          var n = p.getExactlyOneTensor(e);return i.elu(n);
        }, t.prototype.computeOutputShape = function (e) {
          return e;
        }, t.prototype.getClassName = function () {
          return "ELU";
        }, t.prototype.getConfig = function () {
          var t = { alpha: this.alpha },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(u.Layer);n.ELU = d, p.ClassNameMap.register("ELU", d);var f = function (e) {
        function t(t) {
          var n = e.call(this, null == t ? {} : t) || this;return n.DEFAULT_THETA = 1, null == t && (t = {}), n.theta = null == t.theta ? n.DEFAULT_THETA : t.theta, n.thetaTensor = s.getScalar(n.theta), n;
        }return r(t, e), t.prototype.call = function (e, t) {
          var n = p.getExactlyOneTensor(e);return n.mul(o.cast(n.greater(this.thetaTensor), c.DType.float32));
        }, t.prototype.computeOutputShape = function (e) {
          return e;
        }, t.prototype.getClassName = function () {
          return "ThresholdedReLU";
        }, t.prototype.getConfig = function () {
          var t = { theta: this.theta },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(u.Layer);n.ThresholdedReLU = f, p.ClassNameMap.register("ThresholdedReLU", f);var g = function (e) {
        function t(t) {
          var n = e.call(this, null == t ? {} : t) || this;return n.DEFAULT_AXIS = 1, null == t && (t = {}), n.axis = null == t.theta ? n.DEFAULT_AXIS : t.theta, n;
        }return r(t, e), t.prototype.call = function (e, t) {
          var n = p.getExactlyOneTensor(e);return a.softmax(n, this.axis);
        }, t.prototype.computeOutputShape = function (e) {
          return e;
        }, t.prototype.getClassName = function () {
          return "Softmax";
        }, t.prototype.getConfig = function () {
          var t = { axis: this.axis },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(u.Layer);n.Softmax = g, p.ClassNameMap.register("Softmax", g);
    }, { "../activations": 98, "../backend/tfjs_backend": 100, "../engine/topology": 105, "../errors": 107, "../types": 128, "../utils/generic_utils": 130, "@tensorflow/tfjs-core": 8 }], 112: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("@tensorflow/tfjs-core"),
          a = e("../activations"),
          o = e("../backend/tfjs_backend"),
          s = e("../common"),
          u = e("../constraints"),
          l = e("../engine/topology"),
          c = e("../errors"),
          p = e("../initializers"),
          h = e("../regularizers"),
          d = e("../types"),
          f = e("../utils/conv_utils"),
          g = e("../utils/generic_utils"),
          m = function (e) {
        function t(t, n) {
          var r = e.call(this, n) || this;if (r.kernel = null, r.bias = null, r.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", r.DEFAULT_BIAS_INITIALIZER = "zeros", r.rank = t, 1 !== r.rank && 2 !== r.rank) throw new c.NotImplementedError("Convolution layer for rank other than 1 or 2 (" + r.rank + ") is not implemented yet.");if (r.filters = n.filters, r.kernelSize = f.normalizeArray(n.kernelSize, t, "kernelSize"), r.strides = f.normalizeArray(null == n.strides ? 1 : n.strides, t, "strides"), r.padding = null == n.padding ? "valid" : n.padding, s.checkPaddingMode(r.padding), r.dataFormat = null == n.dataFormat ? "channelsLast" : n.dataFormat, s.checkDataFormat(r.dataFormat), r.dilationRate = null == n.dilationRate ? 1 : n.dilationRate, 1 === r.rank && Array.isArray(r.dilationRate) && 1 !== r.dilationRate.length) throw new c.ValueError("dilationRate must be a number or an array of a single number for 1D convolution, but received " + (0, _stringify2.default)(r.dilationRate));if (2 === r.rank) if ("number" == typeof r.dilationRate) r.dilationRate = [r.dilationRate, r.dilationRate];else if (2 !== r.dilationRate.length) throw new c.ValueError("dilationRate must be a number or array of two numbers for 2D convolution, but received " + (0, _stringify2.default)(r.dilationRate));return r.activation = a.getActivation(n.activation), r.useBias = null == n.useBias || n.useBias, r.kernelInitializer = p.getInitializer(n.kernelInitializer || r.DEFAULT_KERNEL_INITIALIZER), r.biasInitializer = p.getInitializer(n.biasInitializer || r.DEFAULT_BIAS_INITIALIZER), r.kernelConstraint = u.getConstraint(n.kernelConstraint), r.biasConstraint = u.getConstraint(n.biasConstraint), r.kernelRegularizer = h.getRegularizer(n.kernelRegularizer), r.biasRegularizer = h.getRegularizer(n.biasRegularizer), r.activityRegularizer = h.getRegularizer(n.activityRegularizer), r;
        }return r(t, e), t.prototype.build = function (e) {
          e = g.getExactlyOneShape(e);var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;if (null == e[t]) throw new c.ValueError("The channel dimension of the input should be defined. Found " + e[t]);var n = e[t],
              r = this.kernelSize.concat([n, this.filters]);this.kernel = this.addWeight("kernel", r, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: (i = {}, i[t] = n, i) }], this.built = !0;var i;
        }, t.prototype.call = function (e, t) {
          e = g.getExactlyOneTensor(e);var n,
              r = null == this.bias ? null : this.bias.read();if (1 === this.rank) n = o.conv1dWithBias(e, this.kernel.read(), r, this.strides[0], this.padding, this.dataFormat, this.dilationRate);else if (2 === this.rank) n = o.conv2dWithBias(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);else if (3 === this.rank) throw new c.NotImplementedError("3D convolution is not implemented yet.");return null != this.activation && (n = this.activation(n)), n;
        }, t.prototype.computeOutputShape = function (e) {
          e = g.getExactlyOneShape(e);for (var t = [], n = "channelsLast" === this.dataFormat ? e.slice(1, e.length - 1) : e.slice(2), r = 0; r < n.length; ++r) {
            var i = f.convOutputLength(n[r], this.kernelSize[r], this.padding, this.strides[r], "number" == typeof this.dilationRate ? this.dilationRate : this.dilationRate[r]);t.push(i);
          }var a = [e[0]];return "channelsLast" === this.dataFormat ? (a = a.concat(t)).push(this.filters) : (a.push(this.filters), a = a.concat(t)), a;
        }, t.prototype.getConfig = function () {
          var t = { rank: this.rank, filters: this.filters, kernelSize: this.kernelSize, strides: this.strides, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, activation: a.serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: p.serializeInitializer(this.kernelInitializer), biasInitializer: p.serializeInitializer(this.biasInitializer), kernelRegularizer: h.serializeRegularizer(this.kernelRegularizer), biasRegularizer: h.serializeRegularizer(this.biasRegularizer), activityRegularizer: h.serializeRegularizer(this.activityRegularizer), kernelConstraint: u.serializeConstraint(this.kernelConstraint), biasConstraint: u.serializeConstraint(this.biasConstraint) },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(l.Layer);n.Conv = m;var v = function (e) {
        function t(t) {
          return e.call(this, 2, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Conv2D";
        }, t.prototype.getConfig = function () {
          var t = e.prototype.getConfig.call(this);return delete t.rank, t;
        }, t;
      }(m);n.Conv2D = v, g.ClassNameMap.register("Conv2D", v);var y = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;if (n.inputSpec = [new l.InputSpec({ ndim: 4 })], "same" !== n.padding && "valid" !== n.padding) throw new c.ValueError("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode " + n.padding);return n;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Conv2DTranspose";
        }, t.prototype.build = function (e) {
          if (4 !== (e = g.getExactlyOneShape(e)).length) throw new c.ValueError("Input should have rank 4; Received input shape: " + (0, _stringify2.default)(e));var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;if (null == e[t]) throw new c.ValueError("The channel dimension of the inputs should be defined. Found `None`.");var n = e[t],
              r = this.kernelSize.concat([this.filters, n]);this.kernel = this.addWeight("kernel", r, d.DType.float32, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], d.DType.float32, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new l.InputSpec({ ndim: 4, axes: (i = {}, i[t] = n, i) })], this.built = !0;var i;
        }, t.prototype.call = function (e, t) {
          var n = this;return i.tidy(function () {
            var t = g.getExactlyOneTensor(e);if (4 !== t.shape.length) throw new c.ValueError("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-" + t.shape.length);var r,
                a,
                s = t.shape,
                u = s[0];"channelsFirst" === n.dataFormat ? (r = 2, a = 3) : (r = 1, a = 2);var l = s[r],
                p = s[a],
                h = n.kernelSize[0],
                d = n.kernelSize[1],
                m = n.strides[0],
                v = n.strides[1],
                y = [u, f.deconvLength(l, m, h, n.padding), f.deconvLength(p, v, d, n.padding), n.filters];"channelsLast" !== n.dataFormat && (t = o.transpose(t, [0, 2, 3, 1]));var b = i.conv2dTranspose(t, n.kernel.read(), y, n.strides, n.padding);return "channelsLast" !== n.dataFormat && (b = o.transpose(b, [0, 3, 1, 2])), null != n.bias && (b = o.biasAdd(b, n.bias.read(), n.dataFormat)), null != n.activation && (b = n.activation(b)), b;
          });
        }, t.prototype.computeOutputShape = function (e) {
          var t,
              n,
              r,
              i = (e = g.getExactlyOneShape(e)).slice();"channelsFirst" === this.dataFormat ? (t = 1, n = 2, r = 3) : (t = 3, n = 1, r = 2);var a = this.kernelSize[0],
              o = this.kernelSize[1],
              s = this.strides[0],
              u = this.strides[1];return i[t] = this.filters, i[n] = f.deconvLength(i[n], s, a, this.padding), i[r] = f.deconvLength(i[r], u, o, this.padding), i;
        }, t.prototype.getConfig = function () {
          var t = e.prototype.getConfig.call(this);return delete t.dilationRate, t;
        }, t;
      }(v);n.Conv2DTranspose = y, g.ClassNameMap.register("Conv2DTranspose", y);var b = function (e) {
        function t(t, n) {
          var r = e.call(this, t, n) || this;if (r.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", r.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", r.depthwiseKernel = null, r.pointwiseKernel = null, null == n.filters) throw new c.ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");if (null != n.kernelInitializer || null != n.kernelRegularizer || null != n.kernelConstraint) throw new c.ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if (null != n.padding && "same" !== n.padding && "valid" !== n.padding) throw new c.ValueError("SeparableConv" + r.rank + "D supports only padding modes: 'same' and 'valid', but received " + (0, _stringify2.default)(n.padding));return r.depthMultiplier = null == n.depthMultiplier ? 1 : n.depthMultiplier, r.depthwiseInitializer = p.getInitializer(n.depthwiseInitializer || r.DEFAULT_DEPTHWISE_INITIALIZER), r.depthwiseRegularizer = h.getRegularizer(n.depthwiseRegularizer), r.depthwiseConstraint = u.getConstraint(n.depthwiseConstraint), r.pointwiseInitializer = p.getInitializer(n.depthwiseInitializer || r.DEFAULT_POINTWISE_INITIALIZER), r.pointwiseRegularizer = h.getRegularizer(n.pointwiseRegularizer), r.pointwiseConstraint = u.getConstraint(n.pointwiseConstraint), r;
        }return r(t, e), t.prototype.build = function (e) {
          if ((e = g.getExactlyOneShape(e)).length < this.rank + 2) throw new c.ValueError("Inputs to SeparableConv" + this.rank + "D should have rank " + (this.rank + 2) + ", but received input shape: " + (0, _stringify2.default)(e));var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;if (null == e[t] || e[t] < 0) throw new c.ValueError("The channel dimension of the inputs should be defined, but found " + (0, _stringify2.default)(e[t]));for (var n = e[t], r = this.kernelSize.concat([n, this.depthMultiplier]), i = [], a = 0; a < this.rank; ++a) {
            i.push(1);
          }i.push(n * this.depthMultiplier, this.filters);this.depthwiseKernel = this.addWeight("depthwise_kernel", r, d.DType.float32, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", i, d.DType.float32, this.pointwiseInitializer, this.pointwiseRegularizer, !0, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], d.DType.float32, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.inputSpec = [new l.InputSpec({ ndim: this.rank + 2, axes: (o = {}, o[t] = n, o) })], this.built = !0;var o;
        }, t.prototype.call = function (e, t) {
          e = g.getExactlyOneTensor(e);var n;if (1 === this.rank) throw new c.NotImplementedError("1D separable convolution is not implemented yet.");return 2 === this.rank && ("channelsFirst" === this.dataFormat && (e = o.transpose(e, [0, 2, 3, 1])), n = i.separableConv2d(e, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (n = o.biasAdd(n, this.bias.read(), this.dataFormat)), null != this.activation && (n = this.activation(n)), "channelsFirst" === this.dataFormat && (n = o.transpose(n, [0, 3, 1, 2])), n;
        }, t.prototype.getClassName = function () {
          return "SeparableConv";
        }, t.prototype.getConfig = function () {
          var t = e.prototype.getConfig.call(this);return delete t.rank, delete t.kernelInitializer, delete t.kernelRegularizer, delete t.kernelConstraint, t.depthwiseInitializer = p.serializeInitializer(this.depthwiseInitializer), t.pointwiseInitializer = p.serializeInitializer(this.pointwiseInitializer), t.depthwiseRegularizer = h.serializeRegularizer(this.depthwiseRegularizer), t.pointwiseRegularizer = h.serializeRegularizer(this.pointwiseRegularizer), t.depthwiseConstraint = u.serializeConstraint(this.depthwiseConstraint), t.pointwiseConstraint = u.serializeConstraint(this.pointwiseConstraint), t;
        }, t;
      }(m);n.SeparableConv = b;var w = function (e) {
        function t(t) {
          return e.call(this, 2, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "SeparableConv2D";
        }, t;
      }(b);n.SeparableConv2D = w, g.ClassNameMap.register("SeparableConv2D", w);var x = function (e) {
        function t(t) {
          var n = e.call(this, 1, t) || this;return n.inputSpec = [{ ndim: 3 }], n;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Conv1D";
        }, t.prototype.getConfig = function () {
          var t = e.prototype.getConfig.call(this);return delete t.rank, delete t.dataFormat, t;
        }, t;
      }(m);n.Conv1D = x, g.ClassNameMap.register("Conv1D", x);
    }, { "../activations": 98, "../backend/tfjs_backend": 100, "../common": 102, "../constraints": 103, "../engine/topology": 105, "../errors": 107, "../initializers": 110, "../regularizers": 127, "../types": 128, "../utils/conv_utils": 129, "../utils/generic_utils": 130, "@tensorflow/tfjs-core": 8 }], 113: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../backend/tfjs_backend"),
          a = e("../constraints"),
          o = e("../errors"),
          s = e("../initializers"),
          u = e("../regularizers"),
          l = e("../utils/conv_utils"),
          c = e("../utils/generic_utils"),
          p = e("../utils/generic_utils"),
          h = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.depthwiseKernel = null, n.depthMultiplier = null == t.depthMultiplier ? 1 : t.depthMultiplier, n.depthwiseInitializer = s.getInitializer(t.depthwiseInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.depthwiseConstraint = a.getConstraint(t.depthwiseConstraint), n.depthwiseRegularizer = u.getRegularizer(t.depthwiseRegularizer), n;
        }return r(t, e), t.prototype.getClassName = function () {
          return "DepthwiseConv2D";
        }, t.prototype.build = function (e) {
          if ((e = p.getExactlyOneShape(e)).length < 4) throw new o.ValueError("Inputs to DepthwiseConv2D should have rank 4. Received input shape: " + (0, _stringify2.default)(e) + ".");var t = "channelsFirst" === this.dataFormat ? 1 : 3;if (null == e[t] || e[t] < 0) throw new o.ValueError("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (" + e[t] + ").");var n = e[t],
              r = [this.kernelSize[0], this.kernelSize[1], n, this.depthMultiplier];this.depthwiseKernel = this.addWeight("depthwise_kernel", r, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [n * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
        }, t.prototype.call = function (e, t) {
          e = p.getExactlyOneTensor(e);var n = i.depthwiseConv2d(e, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);return this.useBias && (n = i.biasAdd(n, this.bias.read(), this.dataFormat)), null != this.activation && (n = this.activation(n)), n;
        }, t.prototype.computeOutputShape = function (e) {
          e = p.getExactlyOneShape(e);var t = "channelsFirst" === this.dataFormat ? e[2] : e[1],
              n = "channelsFirst" === this.dataFormat ? e[3] : e[2],
              r = "channelsFirst" === this.dataFormat ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier,
              i = l.convOutputLength(t, this.kernelSize[0], this.padding, this.strides[0]),
              a = l.convOutputLength(n, this.kernelSize[1], this.padding, this.strides[1]);return "channelsFirst" === this.dataFormat ? [e[0], r, i, a] : [e[0], i, a, r];
        }, t;
      }(e("./convolutional").Conv2D);n.DepthwiseConv2D = h, c.ClassNameMap.register("DepthwiseConv2D", h);
    }, { "../backend/tfjs_backend": 100, "../constraints": 103, "../errors": 107, "../initializers": 110, "../regularizers": 127, "../utils/conv_utils": 129, "../utils/generic_utils": 130, "./convolutional": 112 }], 114: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("@tensorflow/tfjs-core"),
          a = e("../activations"),
          o = e("../backend/tfjs_backend"),
          s = e("../constraints"),
          u = e("../engine/topology"),
          l = e("../errors"),
          c = e("../initializers"),
          p = e("../regularizers"),
          h = e("../utils/generic_utils"),
          d = e("../utils/generic_utils"),
          f = e("../utils/math_utils"),
          g = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;if (n.rate = Math.max(Math.min(t.rate, 1), 0), n.rateScalar = o.getScalar(n.rate), n.noiseShape = t.noiseShape, n.seed = t.seed, null != n.seed) throw new l.NotImplementedError("Non-default seed is not implemented in Dropout layer yet: " + n.seed);return n.supportsMasking = !0, n;
        }return r(t, e), t.prototype.getNoiseShape = function (e) {
          if (null == this.noiseShape) return this.noiseShape;for (var t = e.shape, n = [], r = 0; r < this.noiseShape.length; ++r) {
            n.push(null == this.noiseShape[r] ? t[r] : this.noiseShape[r]);
          }return n;
        }, t.prototype.call = function (e, t) {
          var n = this;this.invokeCallHook(e, t);var r = h.getExactlyOneTensor(e);if (null != this.noiseShape && !i.util.arraysEqual(r.shape, this.noiseShape)) throw new l.NotImplementedError("Non-default noise shape is not implemented in Dropout layer yet: " + (0, _stringify2.default)(this.noiseShape));if (0 < this.rate && this.rate < 1) {
            var a = null != t.training && t.training,
                s = this.getNoiseShape(r);return o.inTrainPhase(function () {
              return o.dropout(r, n.rateScalar, s, n.seed);
            }, function () {
              return r;
            }, a);
          }return e;
        }, t.prototype.getClassName = function () {
          return "Dropout";
        }, t.prototype.getConfig = function () {
          var t = { rate: this.rate, noiseShape: this.noiseShape, seed: this.seed },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(u.Layer);n.Dropout = g, h.ClassNameMap.register("Dropout", g);var m = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;if (n.activation = null, n.useBias = !0, n.kernel = null, n.bias = null, n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_BIAS_INITIALIZER = "zeros", null == t.batchInputShape && null == t.inputShape && null != t.inputDim) {
            var r = null;null != t.batchSize && (r = t.batchSize), n.batchInputShape = [r, t.inputDim];
          }return n.units = t.units, n.activation = a.getActivation(t.activation), null != t.useBias && (n.useBias = t.useBias), n.kernelInitializer = c.getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.biasInitializer = c.getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.kernelConstraint = s.getConstraint(t.kernelConstraint), n.biasConstraint = s.getConstraint(t.biasConstraint), n.kernelRegularizer = p.getRegularizer(t.kernelRegularizer), n.biasRegularizer = p.getRegularizer(t.biasRegularizer), n.activityRegularizer = p.getRegularizer(t.activityRegularizer), n.inputSpec = [{ minNDim: 2 }], n;
        }return r(t, e), t.prototype.build = function (e) {
          var t = (e = h.getExactlyOneShape(e))[e.length - 1];null == this.kernel && (this.kernel = this.addWeight("kernel", [t, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: (n = {}, n[-1] = t, n) }], this.built = !0;var n;
        }, t.prototype.computeOutputShape = function (e) {
          var t = (e = h.getExactlyOneShape(e)).slice();return t[t.length - 1] = this.units, t;
        }, t.prototype.call = function (e, t) {
          this.invokeCallHook(e, t);var n = h.getExactlyOneTensor(e),
              r = o.dot(n, this.kernel.read());return null != this.bias && (r = o.biasAdd(r, this.bias.read())), null != this.activation && (r = this.activation(r)), r;
        }, t.prototype.getClassName = function () {
          return "Dense";
        }, t.prototype.getConfig = function () {
          var t = { units: this.units, activation: a.serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: c.serializeInitializer(this.kernelInitializer), biasInitializer: c.serializeInitializer(this.biasInitializer), kernelRegularizer: p.serializeRegularizer(this.kernelRegularizer), biasRegularizer: p.serializeRegularizer(this.biasRegularizer), activityRegularizer: p.serializeRegularizer(this.activityRegularizer), kernelConstraint: s.serializeConstraint(this.kernelConstraint), biasConstraint: s.serializeConstraint(this.biasConstraint) },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(u.Layer);n.Dense = m, h.ClassNameMap.register("Dense", m);var v = function (e) {
        function t(t) {
          var n = e.call(this, t || {}) || this;return n.inputSpec = [{ minNDim: 3 }], n;
        }return r(t, e), t.prototype.computeOutputShape = function (e) {
          for (var t = 0, n = (e = h.getExactlyOneShape(e)).slice(1); t < n.length; t++) {
            if (null == n[t]) throw new l.ValueError('The shape of the input to "Flatten" is not fully defined (got ' + e.slice(1) + '). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.');
          }return [e[0], f.arrayProd(e, 1)];
        }, t.prototype.getClassName = function () {
          return "Flatten";
        }, t.prototype.call = function (e, t) {
          return this.invokeCallHook(e, t), o.batchFlatten(h.getExactlyOneTensor(e));
        }, t;
      }(u.Layer);n.Flatten = v, h.ClassNameMap.register("Flatten", v);var y = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.supportsMasking = !0, n.activation = a.getActivation(t.activation), n;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Activation";
        }, t.prototype.call = function (e, t) {
          this.invokeCallHook(e, t);var n = h.getExactlyOneTensor(e);return this.activation(n);
        }, t;
      }(u.Layer);n.Activation = y, h.ClassNameMap.register("Activation", y);var b = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.n = t.n, n.inputSpec = [{ ndim: 2 }], n;
        }return r(t, e), t.prototype.computeOutputShape = function (e) {
          return [e[0], this.n, e[1]];
        }, t.prototype.call = function (e, t) {
          return e = d.getExactlyOneTensor(e), o.repeat(e, this.n);
        }, t.prototype.getClassName = function () {
          return "RepeatVector";
        }, t.prototype.getConfig = function () {
          var t = { n: this.n },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(u.Layer);n.RepeatVector = b, h.ClassNameMap.register("RepeatVector", b);var w = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;n.targetShape = t.targetShape;for (var r = 0; r < n.targetShape.length; ++r) {
            n.isUnknown(n.targetShape[r]) && (n.targetShape[r] = null);
          }return n;
        }return r(t, e), t.prototype.isUnknown = function (e) {
          return e < 0 || null == e;
        }, t.prototype.fixUnknownDimension = function (e, t) {
          for (var n = "Total size of new array must be unchanged.", r = t.slice(), i = 1, a = null, o = 0; o < r.length; ++o) {
            var s = r[o];if (this.isUnknown(s)) {
              if (null !== a) throw new l.ValueError("Can only specifiy one unknown dimension.");a = o;
            } else i *= s;
          }var u = f.arrayProd(e);if (null !== a) {
            if (0 === i || u % i != 0) throw new l.ValueError(n);r[a] = u / i;
          } else if (u !== i) throw new l.ValueError(n);return r;
        }, t.prototype.computeOutputShape = function (e) {
          for (var t = !1, n = 0; n < e.length; ++n) {
            if (this.isUnknown(e[n])) {
              t = !0;break;
            }
          }return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
        }, t.prototype.getClassName = function () {
          return "Reshape";
        }, t.prototype.call = function (e, t) {
          this.invokeCallHook(e, t);var n = h.getExactlyOneTensor(e),
              r = o.shape(n),
              i = r.slice(0, 1).concat(this.fixUnknownDimension(r.slice(1), this.targetShape));return o.reshape(n, i);
        }, t;
      }(u.Layer);n.Reshape = w, h.ClassNameMap.register("Reshape", w);
    }, { "../activations": 98, "../backend/tfjs_backend": 100, "../constraints": 103, "../engine/topology": 105, "../errors": 107, "../initializers": 110, "../regularizers": 127, "../utils/generic_utils": 130, "../utils/math_utils": 131, "@tensorflow/tfjs-core": 8 }], 115: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../backend/tfjs_backend"),
          a = e("../constraints"),
          o = e("../engine/topology"),
          s = e("../errors"),
          u = e("../initializers"),
          l = e("../regularizers"),
          c = e("../utils/generic_utils"),
          p = e("../utils/generic_utils"),
          h = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;if (n.embeddings = null, n.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", null == t.batchInputShape && null == t.inputShape) {
            var r = null;null != t.batchSize && (r = t.batchSize), null == t.inputLength ? n.batchInputShape = [r, null] : n.batchInputShape = [r].concat(c.toList(t.inputLength));
          }return n.inputDim = t.inputDim, n.outputDim = t.outputDim, n.embeddingsInitializer = u.getInitializer(t.embeddingsInitializer || n.DEFAULT_EMBEDDINGS_INITIALIZER), n.embeddingsRegularizer = l.getRegularizer(t.embeddingsRegularizer), n.activityRegularizer = l.getRegularizer(t.activityRegularizer), n.embeddingsConstraint = a.getConstraint(t.embeddingsConstraint), n.maskZero = t.maskZero, n.inputLength = t.inputLength, n;
        }return r(t, e), t.prototype.build = function (e) {
          this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
        }, t.prototype.computeMask = function (e, t) {
          throw new s.NotImplementedError("computeMask has not been implemented for Embedding yet");
        }, t.prototype.computeOutputShape = function (e) {
          if (e = c.getExactlyOneShape(e), null == this.inputLength) return e.concat([this.outputDim]);var t = c.toList(this.inputLength);if (t.length !== e.length - 1) throw new s.ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e);for (var n = 0, r = 0; r < t.length; ++r) {
            var i = t[r],
                a = e[r + 1];if (null != i && null != a && i !== a) throw new s.ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e);null == i && (t[n] = a), n++;
          }return [e[0]].concat(t, [this.outputDim]);
        }, t.prototype.call = function (e, t) {
          this.invokeCallHook(e, t);var n = c.getExactlyOneTensor(e);"int32" !== i.dtype(n) && (n = i.cast(n, "int32"));var r = i.gather(this.embeddings.read(), n.as1D());return i.reshape(r, p.getExactlyOneShape(this.computeOutputShape(n.shape)));
        }, t.prototype.getClassName = function () {
          return "Embedding";
        }, t.prototype.getConfig = function () {
          var t = { inputDim: this.inputDim, outputDim: this.outputDim, embeddingsInitializer: u.serializeInitializer(this.embeddingsInitializer), embeddingsRegularizer: l.serializeRegularizer(this.embeddingsRegularizer), activityRegularizer: l.serializeRegularizer(this.activityRegularizer), embeddingsConstraint: a.serializeConstraint(this.embeddingsConstraint), maskZero: this.maskZero, inputLength: this.inputLength },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(o.Layer);n.Embedding = h, c.ClassNameMap.register("Embedding", h);
    }, { "../backend/tfjs_backend": 100, "../constraints": 103, "../engine/topology": 105, "../errors": 107, "../initializers": 110, "../regularizers": 127, "../utils/generic_utils": 130 }], 116: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("@tensorflow/tfjs-core"),
          a = e("../backend/tfjs_backend"),
          o = e("../engine/topology"),
          s = e("../errors"),
          u = e("../utils/generic_utils"),
          l = e("../utils/math_utils"),
          c = function (e) {
        function t(t) {
          var n = e.call(this, t || {}) || this;return n.supportsMasking = !0, n;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Merge";
        }, t.prototype.mergeFunction = function (e) {
          throw new s.NotImplementedError();
        }, t.prototype.computeElementwiseOpOutputShape = function (e, t) {
          if (null == e || null == t) return null;if (e.length < t.length) return this.computeElementwiseOpOutputShape(t, e);if (0 === t.length) return e;for (var n = e.slice(0, e.length - t.length), r = 0; r < t.length; ++r) {
            var i = e[e.length - t.length + r],
                a = t[r];if (null == i || null == a || i < 0 || a < 0) n.push(null);else if (1 === i) n.push(a);else if (1 === a) n.push(i);else {
              if (i !== a) throw new s.ValueError("Operands could not be broadcast together with shapes " + (0, _stringify2.default)(e) + " " + (0, _stringify2.default)(t));n.push(i);
            }
          }return n;
        }, t.prototype.build = function (e) {
          if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [u.getExactlyOneShape(e)]), (e = e).length < 2) throw new s.ValueError("A merge layer should be called on an Array of at least 2 inputs. Got " + e.length + " input(s).");for (var t = [], n = 0, r = e; n < r.length; n++) {
            null != (o = r[n]) && null !== o[0] && t.push(o[0]);
          }if ((t = u.unique(t)).length > 1) throw new s.ValueError("Can not merge tensors with different batch sizes. Got tensors with shapes: " + (0, _stringify2.default)(e) + ".");for (var i = null == e[0] ? null : e[0].slice(1), a = 1; a < e.length; ++a) {
            var o = null == e[a] ? null : e[a].slice(1);i = this.computeElementwiseOpOutputShape(i, o);
          }var l = e.map(function (e) {
            return e.length;
          });-1 === e.indexOf(null) && 1 === u.unique(l).length ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
        }, t.prototype.call = function (e, t) {
          if (e = e, this.reshapeRequired) {
            var n = [],
                r = e.map(function (e) {
              return a.ndim(e);
            });if (-1 === r.indexOf(null)) {
              for (var i = l.max(r), o = 0, s = e; o < s.length; o++) {
                for (var u = s[o], c = a.ndim(u), p = 0; p < i - c; ++p) {
                  u = a.expandDims(u, 1);
                }n.push(u);
              }return this.mergeFunction(n);
            }for (var h = !1, d = 0, f = e; d < f.length; d++) {
              u = f[d];if (null == (c = a.ndim(u))) {
                var g = a.shape(u),
                    m = g[0],
                    v = g.slice(1).concat([m]),
                    y = a.reshape(u, [m].concat(l.arrayProd(g.slice(1))));y = a.permuteDimensions(y, [1, 0]), y = a.reshape(y, v), n.push(y), h = !0;
              } else if (c > 1) {
                A = l.range(1, c).concat([0]);n.push(a.permuteDimensions(u, A)), h = !0;
              } else n.push(u);
            }var b = this.mergeFunction(n),
                w = a.ndim(b);if (h) if (null == w) {
              var x = a.shape(b),
                  v = [m = x[x.length - 1]].concat(x.slice(0, x.length - 1));b = a.reshape(a.permuteDimensions(a.reshape(b, [-1, m]), [1, 0]), v);
            } else if (w > 1) {
              var A = [w - 1].concat(l.range(0, w - 1));b = a.permuteDimensions(b, A);
            }return b;
          }return this.mergeFunction(e);
        }, t.prototype.computeOutputShape = function (e) {
          var t;t = null == (e = e)[0] ? null : e[0].slice(1);for (var n = 1; n < e.length; ++n) {
            var r = null == e[n] ? null : e[n].slice(1);t = this.computeElementwiseOpOutputShape(t, r);
          }for (var i = [], a = 0, o = e; a < o.length; a++) {
            null != (r = o[a]) && null !== r[0] && i.push(r[0]);
          }return i = u.unique(i), t = 1 === i.length ? i.concat(t) : [null].concat(t);
        }, t;
      }(o.Layer);n.Merge = c;var p = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Add";
        }, t.prototype.mergeFunction = function (e) {
          for (var t = a.zeros(e[0].shape), n = 0, r = e; n < r.length; n++) {
            var i = r[n];t = a.add(t, i);
          }return t;
        }, t;
      }(c);n.Add = p, u.ClassNameMap.register("Add", p), n.add = function (e) {
        return Array.isArray(e) ? new p({}).apply(e) : new p(e);
      };var h = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Multiply";
        }, t.prototype.mergeFunction = function (e) {
          for (var t = a.ones(e[0].shape), n = 0, r = e; n < r.length; n++) {
            var i = r[n];t = a.multiply(t, i);
          }return t;
        }, t;
      }(c);n.Multiply = h, u.ClassNameMap.register("Multiply", h), n.multiply = function (e) {
        return Array.isArray(e) ? new h({}).apply(e) : new h(e);
      };var d = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Average";
        }, t.prototype.mergeFunction = function (e) {
          for (var t = a.zeros(e[0].shape), n = 0, r = e; n < r.length; n++) {
            var i = r[n];t = a.add(t, i);
          }return a.scalarTimesArray(a.getScalar(1 / e.length), t);
        }, t;
      }(c);n.Average = d, u.ClassNameMap.register("Average", d), n.average = function (e) {
        return Array.isArray(e) ? new d({}).apply(e) : new d(e);
      };var f = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Maximum";
        }, t.prototype.mergeFunction = function (e) {
          for (var t = e[0], n = 1; n < e.length; ++n) {
            t = a.maximum(t, e[n]);
          }return t;
        }, t;
      }(c);n.Maximum = f, u.ClassNameMap.register("Maximum", f), n.maximum = function (e) {
        return Array.isArray(e) ? new f({}).apply(e) : new f(e);
      };var g = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Minimum";
        }, t.prototype.mergeFunction = function (e) {
          for (var t = e[0], n = 1; n < e.length; ++n) {
            t = a.minimum(t, e[n]);
          }return t;
        }, t;
      }(c);n.Minimum = g, u.ClassNameMap.register("Minimum", g), n.minimum = function (e) {
        return Array.isArray(e) ? new g({}).apply(e) : new g(e);
      };var m = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.DEFAULT_AXIS = -1, null == t && (t = {}), n.axis = null == t.axis ? n.DEFAULT_AXIS : t.axis, n.supportsMasking = !0, n.reshapeRequired = !1, n;
        }return r(t, e), t.prototype.getClassName = function () {
          return "Concatenate";
        }, t.prototype.build = function (e) {
          if (!Array.isArray(e) || !Array.isArray(e[0]) || 1 === e.length) throw new s.ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");for (var t = !0, n = 0, r = e = e; n < r.length; n++) {
            if (null != (h = r[n])) {
              t = !1;break;
            }
          }if (!t) {
            for (var a = [], o = 0; o < e.length; ++o) {
              var u = e[o].slice();u.splice(this.axis, 1);for (var l = !1, c = 0, p = a; c < p.length; c++) {
                var h = p[c];if (i.util.arraysEqual(h, u)) {
                  l = !0;break;
                }
              }l || a.push(u);
            }if (a.length > 1) throw new s.ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + (0, _stringify2.default)(e));
          }
        }, t.prototype.mergeFunction = function (e) {
          return a.concatenate(e, this.axis);
        }, t.prototype.computeOutputShape = function (e) {
          if (!Array.isArray(e) || !Array.isArray(e[0])) throw new s.ValueError("A `Concatenate` layer should be called on a list of inputs.");for (var t = e, n = t[0].slice(), r = this.axis < 0 ? n.length + this.axis : this.axis, i = 0, a = t.slice(1); i < a.length; i++) {
            var o = a[i];if (null == n[r] || null == o[r]) {
              n[r] = null;break;
            }n[r] += o[r];
          }return n;
        }, t;
      }(c);n.Concatenate = m, u.ClassNameMap.register("Concatenate", m), n.concatenate = function (e) {
        return Array.isArray(e) ? new m({}).apply(e) : new m(e);
      };
    }, { "../backend/tfjs_backend": 100, "../engine/topology": 105, "../errors": 107, "../utils/generic_utils": 130, "../utils/math_utils": 131, "@tensorflow/tfjs-core": 8 }], 117: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("@tensorflow/tfjs-core"),
          a = e("../backend/tfjs_backend"),
          o = e("../constraints"),
          s = e("../engine/topology"),
          u = e("../errors"),
          l = e("../initializers"),
          c = e("../regularizers"),
          p = e("../utils/generic_utils"),
          h = e("../utils/math_utils"),
          d = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.supportsMasking = !0, n.axis = null == t.axis ? -1 : t.axis, n.momentum = null == t.momentum ? .99 : t.momentum, n.epsilon = null == t.epsilon ? .001 : t.epsilon, n.center = null == t.center || t.center, n.scale = null == t.scale || t.scale, n.betaInitializer = l.getInitializer(t.betaInitializer || "zeros"), n.gammaInitializer = l.getInitializer(t.gammaInitializer || "ones"), n.movingMeanInitializer = l.getInitializer(t.movingMeanInitializer || "zeros"), n.movingVarianceInitializer = l.getInitializer(t.movingVarianceInitializer || "ones"), n.betaConstraint = o.getConstraint(t.betaConstraint), n.gammaConstraint = o.getConstraint(t.gammaConstraint), n.betaRegularizer = c.getRegularizer(t.betaRegularizer), n.gammaRegularizer = c.getRegularizer(t.gammaRegularizer), n.stepCount = 0, n;
        }return r(t, e), t.prototype.build = function (e) {
          e = p.getExactlyOneShape(e);var t = this.axis >= 0 ? this.axis : this.axis + e.length,
              n = e[t];if (null == n) throw new u.ValueError("Axis " + t + " of input tensor should have a defined dimension but the layer received an input with shape " + (0, _stringify2.default)(e) + ".");this.inputSpec = [new s.InputSpec({ ndim: e.length, axes: (i = {}, i[t] = n, i) })];var r = [n];this.scale && (this.gamma = this.addWeight("gamma", r, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", r, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", r, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", r, null, this.movingVarianceInitializer, null, !1), this.built = !0;var i;
        }, t.prototype.call = function (e, t) {
          var n = this;return i.tidy(function () {
            var r = null != t.training && t.training,
                o = p.getExactlyOneTensor(e),
                s = a.shape(o),
                u = s.length,
                l = h.range(0, u),
                c = n.axis >= 0 ? n.axis : n.axis + u;l.splice(c, 1);var d = p.pyListRepeat(1, u);d[c] = s[c];var f = l.slice();f.sort();var g = !i.util.arraysEqual(f, h.range(0, u).slice(0, u - 1));if (!r) return function () {
              if (g) {
                var e = a.reshape(n.movingMean.read(), d),
                    t = a.reshape(n.movingVariance.read(), d),
                    r = n.center ? a.reshape(n.beta.read(), d) : null,
                    i = n.scale ? a.reshape(n.gamma.read(), d) : null;return a.batchNormalization(o, e, t, r, i, n.epsilon);
              }return a.batchNormalization(o, n.movingMean.read(), n.movingVariance.read(), null == n.beta ? null : n.beta.read(), null == n.gamma ? null : n.gamma.read(), n.epsilon);
            }();var m = a.normalizeBatchInTraining(o, n.gamma.read(), n.beta.read(), l, n.epsilon),
                v = m[0],
                y = m[1],
                b = m[2],
                w = h.arrayProd(l.map(function (e) {
              return o.shape[e];
            })),
                x = b.mul(a.getScalar(w / (w - (1 + n.epsilon))));return function () {
              n.stepCount++;var e = i.movingAverage(n.movingMean.read(), y, n.momentum, n.stepCount);n.movingMean.write(e);var t = i.movingAverage(n.movingVariance.read(), x, n.momentum, n.stepCount);n.movingVariance.write(t);
            }(), v;
          });
        }, t.prototype.getClassName = function () {
          return "BatchNormalization";
        }, t.prototype.getConfig = function () {
          var t = { axis: this.axis, momentum: this.momentum, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: l.serializeInitializer(this.betaInitializer), gammaInitializer: l.serializeInitializer(this.gammaInitializer), movingMeanInitializer: l.serializeInitializer(this.movingMeanInitializer), movingVarianceInitializer: l.serializeInitializer(this.movingVarianceInitializer), betaRegularizer: c.serializeRegularizer(this.betaRegularizer), gammaRegularizer: c.serializeRegularizer(this.gammaRegularizer), betaConstraint: o.serializeConstraint(this.betaConstraint), gammaConstraint: o.serializeConstraint(this.gammaConstraint) },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(s.Layer);n.BatchNormalization = d, p.ClassNameMap.register("BatchNormalization", d);
    }, { "../backend/tfjs_backend": 100, "../constraints": 103, "../engine/topology": 105, "../errors": 107, "../initializers": 110, "../regularizers": 127, "../utils/generic_utils": 130, "../utils/math_utils": 131, "@tensorflow/tfjs-core": 8 }], 118: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../backend/common"),
          a = e("../backend/tfjs_backend"),
          o = e("../engine/topology"),
          s = e("../errors"),
          u = e("../utils/generic_utils"),
          l = function (e) {
        function t(t) {
          var n = this;if (null == t && (t = {}), n = e.call(this, t) || this, n.dataFormat = null == t.dataFormat ? i.imageDataFormat() : t.dataFormat, null == t.padding) n.padding = [[1, 1], [1, 1]];else if ("number" == typeof t.padding) n.padding = [[t.padding, t.padding], [t.padding, t.padding]];else {
            if (t.padding = t.padding, 2 !== t.padding.length) throw new s.ValueError("ZeroPadding2D expects padding to be a length-2 array, but received a length-" + t.padding.length + " array.");var r = void 0,
                a = void 0;if ("number" == typeof t.padding[0]) r = [t.padding[0], t.padding[0]], a = [t.padding[1], t.padding[1]];else {
              if (t.padding = t.padding, 2 !== t.padding[0].length) throw new s.ValueError("ZeroPadding2D expects height padding to be a length-2 array, but received a length-" + t.padding[0].length + " array.");if (r = t.padding[0], 2 !== t.padding[1].length) throw new s.ValueError("ZeroPadding2D expects width padding to be a length-2 array, but received a length-" + t.padding[1].length + " array.");a = t.padding[1];
            }n.padding = [r, a];
          }return n.inputSpec = [new o.InputSpec({ ndim: 4 })], n;
        }return r(t, e), t.prototype.computeOutputShape = function (e) {
          e = u.getExactlyOneShape(e);var t, n;return "channelsFirst" === this.dataFormat ? (t = null != e[2] && e[2] >= 0 ? e[2] + this.padding[0][0] + this.padding[0][1] : null, n = null != e[3] && e[3] >= 0 ? e[3] + this.padding[1][0] + this.padding[1][1] : null, [e[0], e[1], t, n]) : (t = null != e[1] && e[1] >= 0 ? e[1] + this.padding[0][0] + this.padding[0][1] : null, n = null != e[2] && e[2] >= 0 ? e[2] + this.padding[1][0] + this.padding[1][1] : null, [e[0], t, n, e[3]]);
        }, t.prototype.call = function (e, t) {
          return a.spatial2dPadding(u.getExactlyOneTensor(e), this.padding, this.dataFormat);
        }, t.prototype.getClassName = function () {
          return "ZeroPadding2D";
        }, t.prototype.getConfig = function () {
          var t = { padding: this.padding, dataFormat: this.dataFormat },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(o.Layer);n.ZeroPadding2D = l, u.ClassNameMap.register("ZeroPadding2D", l);
    }, { "../backend/common": 99, "../backend/tfjs_backend": 100, "../engine/topology": 105, "../errors": 107, "../utils/generic_utils": 130 }], 119: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../backend/tfjs_backend"),
          a = e("../common"),
          o = e("../engine/topology"),
          s = e("../engine/topology"),
          u = e("../errors"),
          l = e("../utils/conv_utils"),
          c = e("../utils/generic_utils"),
          p = function (e) {
        function t(t) {
          var n = this;return null == t.poolSize && (t.poolSize = 2), n = e.call(this, t) || this, n.poolSize = [t.poolSize], n.strides = null == t.strides ? n.poolSize : [t.strides], n.padding = null == t.padding ? "valid" : t.padding, a.checkPaddingMode(n.padding), n.inputSpec = [new o.InputSpec({ ndim: 3 })], n;
        }return r(t, e), t.prototype.computeOutputShape = function (e) {
          return e = c.getExactlyOneShape(e), length = l.convOutputLength(e[1], this.poolSize[0], this.padding, this.strides[0]), [e[0], length, e[2]];
        }, t.prototype.call = function (e, t) {
          this.invokeCallHook(e, t), e = i.expandDims(c.getExactlyOneTensor(e), 2);var n = this.poolingFunction(c.getExactlyOneTensor(e), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");return i.squeeze(n, 2);
        }, t.prototype.getConfig = function () {
          var t = { poolSize: this.poolSize, padding: this.padding, strides: this.strides },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(s.Layer);n.Pooling1D = p;var h = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "MaxPooling1D";
        }, t.prototype.poolingFunction = function (e, t, n, r, o) {
          return a.checkDataFormat(o), a.checkPaddingMode(r), i.pool2d(e, t, n, r, o, "max");
        }, t;
      }(p);n.MaxPooling1D = h, c.ClassNameMap.register("MaxPooling1D", h);var d = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "AveragePooling1D";
        }, t.prototype.poolingFunction = function (e, t, n, r, o) {
          return a.checkDataFormat(o), a.checkPaddingMode(r), i.pool2d(e, t, n, r, o, "avg");
        }, t;
      }(p);n.AveragePooling1D = d, c.ClassNameMap.register("AveragePooling1D", d);var f = function (e) {
        function t(t) {
          var n = this;return null == t.poolSize && (t.poolSize = [2, 2]), n = e.call(this, t) || this, n.poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize], n.strides = null == t.strides ? n.poolSize : t.strides, n.padding = null == t.padding ? "valid" : t.padding, n.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, a.checkDataFormat(n.dataFormat), a.checkPaddingMode(n.padding), n.inputSpec = [new o.InputSpec({ ndim: 4 })], n;
        }return r(t, e), t.prototype.computeOutputShape = function (e) {
          e = c.getExactlyOneShape(e);var t = "channelsFirst" === this.dataFormat ? e[2] : e[1],
              n = "channelsFirst" === this.dataFormat ? e[3] : e[2];return t = l.convOutputLength(t, this.poolSize[0], this.padding, this.strides[0]), n = l.convOutputLength(n, this.poolSize[1], this.padding, this.strides[1]), "channelsFirst" === this.dataFormat ? [e[0], e[1], t, n] : [e[0], t, n, e[3]];
        }, t.prototype.call = function (e, t) {
          return this.invokeCallHook(e, t), this.poolingFunction(c.getExactlyOneTensor(e), this.poolSize, this.strides, this.padding, this.dataFormat);
        }, t.prototype.getConfig = function () {
          var t = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(s.Layer);n.Pooling2D = f;var g = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "MaxPooling2D";
        }, t.prototype.poolingFunction = function (e, t, n, r, o) {
          return a.checkDataFormat(o), a.checkPaddingMode(r), i.pool2d(e, t, n, r, o, "max");
        }, t;
      }(f);n.MaxPooling2D = g, c.ClassNameMap.register("MaxPooling2D", g);var m = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "AveragePooling2D";
        }, t.prototype.poolingFunction = function (e, t, n, r, o) {
          return a.checkDataFormat(o), a.checkPaddingMode(r), i.pool2d(e, t, n, r, o, "avg");
        }, t;
      }(f);n.AveragePooling2D = m, c.ClassNameMap.register("AveragePooling2D", m);var v = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.inputSpec = [new o.InputSpec({ ndim: 3 })], n;
        }return r(t, e), t.prototype.computeOutputShape = function (e) {
          return [e[0], e[2]];
        }, t.prototype.call = function (e, t) {
          throw new u.NotImplementedError();
        }, t;
      }(s.Layer);n.GlobalPooling1D = v;var y = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "GlobalAveragePooling1D";
        }, t.prototype.call = function (e, t) {
          var n = c.getExactlyOneTensor(e);return i.mean(n, 1);
        }, t;
      }(v);n.GlobalAveragePooling1D = y, c.ClassNameMap.register("GlobalAveragePooling1D", y);var b = function (e) {
        function t(t) {
          return e.call(this, t) || this;
        }return r(t, e), t.prototype.getClassName = function () {
          return "GlobalMaxPooling1D";
        }, t.prototype.call = function (e, t) {
          var n = c.getExactlyOneTensor(e);return i.max(n, 1);
        }, t;
      }(v);n.GlobalMaxPooling1D = b, c.ClassNameMap.register("GlobalMaxPooling1D", b);var w = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, a.checkDataFormat(n.dataFormat), n.inputSpec = [new o.InputSpec({ ndim: 4 })], n;
        }return r(t, e), t.prototype.computeOutputShape = function (e) {
          return e = e, "channelsLast" === this.dataFormat ? [e[0], e[3]] : [e[0], e[1]];
        }, t.prototype.call = function (e, t) {
          throw new u.NotImplementedError();
        }, t.prototype.getConfig = function () {
          var t = { dataFormat: this.dataFormat },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(s.Layer);n.GlobalPooling2D = w;var x = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return r(t, e), t.prototype.call = function (e, t) {
          var n = c.getExactlyOneTensor(e);return "channelsLast" === this.dataFormat ? i.mean(n, [1, 2]) : i.mean(n, [2, 3]);
        }, t.prototype.getClassName = function () {
          return "GlobalAveragePooling2D";
        }, t;
      }(w);n.GlobalAveragePooling2D = x, c.ClassNameMap.register("GlobalAveragePooling2D", x);var A = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return r(t, e), t.prototype.call = function (e, t) {
          var n = c.getExactlyOneTensor(e);return "channelsLast" === this.dataFormat ? i.max(n, [1, 2]) : i.max(n, [2, 3]);
        }, t.prototype.getClassName = function () {
          return "GlobalMaxPooling2D";
        }, t;
      }(w);n.GlobalMaxPooling2D = A, c.ClassNameMap.register("GlobalMaxPooling2D", A);
    }, { "../backend/tfjs_backend": 100, "../common": 102, "../engine/topology": 105, "../errors": 107, "../utils/conv_utils": 129, "../utils/generic_utils": 130 }], 120: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }(),
          i = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var a = e("@tensorflow/tfjs-core"),
          o = e("../activations"),
          s = e("../backend/tfjs_backend"),
          u = e("../constraints"),
          l = e("../engine/topology"),
          c = e("../engine/topology"),
          p = e("../errors"),
          h = e("../initializers"),
          d = e("../regularizers"),
          f = e("../types"),
          g = e("../utils/generic_utils"),
          m = e("../utils/math_utils"),
          v = e("./serialization"),
          y = function (e) {
        function t(t) {
          var n,
              r = e.call(this, t) || this;if (null == t.cell) throw new p.ValueError("cell property is missing for the constructor of RNN.");if (null == (n = Array.isArray(t.cell) ? new S({ cells: t.cell }) : t.cell).stateSize) throw new p.ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");return r.cell = n, r.returnSequences = null != t.returnSequences && t.returnSequences, r.returnState = null != t.returnState && t.returnState, r.goBackwards = null != t.goBackwards && t.goBackwards, r._stateful = null != t.stateful && t.stateful, r.unroll = null != t.unroll && t.unroll, r.supportsMasking = !0, r.inputSpec = [new l.InputSpec({ ndim: 3 })], r.stateSpec = null, r.states = null, r.numConstants = null, r;
        }return r(t, e), t.prototype.getStates = function () {
          if (null == this.states) {
            var e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;return m.range(0, e).map(function (e) {
              return null;
            });
          }return this.states;
        }, t.prototype.setStates = function (e) {
          this.states = e;
        }, t.prototype.computeOutputShape = function (e) {
          g.isArrayOfShapes(e) && (e = e[0]), e = e;var t = this.cell.stateSize;Array.isArray(t) || (t = [t]);var n,
              r = t[0];if (n = this.returnSequences ? [e[0], e[1], r] : [e[0], r], this.returnState) {
            for (var i = [], a = 0, o = t; a < o.length; a++) {
              var s = o[a];i.push([e[0], s]);
            }return [n].concat(i);
          }return n;
        }, t.prototype.computeMask = function (e, t) {
          throw new p.NotImplementedError("computeMask has not been implemented for RNN yet");
        }, t.prototype.build = function (e) {
          if (null != this.numConstants) throw new p.NotImplementedError("Constants support is not implemented in RNN yet.");g.isArrayOfShapes(e) && (e = e[0]), e = e;var t = this.stateful ? e[0] : null,
              n = e[e.length - 1];this.inputSpec[0] = new l.InputSpec({ shape: [t, null, n] });var r = [e[0]].concat(e.slice(2));this.cell.build(r);var i;if (i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize : [this.cell.stateSize], null != this.stateSpec) {
            if (!a.util.arraysEqual(this.stateSpec.map(function (e) {
              return e.shape[e.shape.length - 1];
            }), i)) throw new p.ValueError("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=" + this.stateSpec + "; However cell.stateSize is " + this.cell.stateSize);
          } else this.stateSpec = i.map(function (e) {
            return new l.InputSpec({ shape: [null, e] });
          });if (this.stateful) throw new p.NotImplementedError("stateful RNN layer is not implemented yet");
        }, t.prototype.resetStates = function (e) {
          if (!this.stateful) throw new p.AttributeError("Cannot call resetState() on an RNN Layer that is not stateful.");var t = this.inputSpec[0].shape[0];if (null == t) throw new p.ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if (null == this.states) Array.isArray(this.cell.stateSize) ? this.states = this.cell.stateSize.map(function (e) {
            return s.zeros([t, e]);
          }) : this.states = [s.zeros([t, this.cell.stateSize])];else if (null == e) Array.isArray(this.cell.stateSize) ? this.states = this.cell.stateSize.map(function (e) {
            return s.zeros([t, e]);
          }) : this.states[0] = s.zeros([t, this.cell.stateSize]);else {
            if (Array.isArray(e) || (e = [e]), e.length !== this.states.length) throw new p.ValueError("Layer " + this.name + " expects " + this.states.length + " state(s), but it received " + e.length + " state value(s). Input received: " + e);for (var n = 0; n < this.states.length; ++n) {
              var r = e[n],
                  i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[n] : this.cell.stateSize,
                  o = [t, i];if (!a.util.arraysEqual(r.shape, o)) throw new p.ValueError("State " + n + " is incompatible with layer " + this.name + ": expected shape=" + o + ", received shape=" + r.shape);this.states[n] = r;
            }
          }
        }, t.prototype.standardizeArgs = function (e, t, n) {
          function r(e) {
            return null == e || Array.isArray(e) ? e : [e];
          }if (Array.isArray(e)) {
            if (null != t || null != n) throw new p.ValueError("When inputs is an array, neither initialState or constants should be provided");null != this.numConstants && (n = e.slice(e.length - this.numConstants, e.length), e = e.slice(0, e.length - this.numConstants)), e.length > 1 && (t = e.slice(1, e.length)), e = e[0];
          }return t = r(t), n = r(n), { inputs: e, initialState: t, constants: n };
        }, t.prototype.apply = function (t, n) {
          var r = null == n ? null : n.initialState,
              i = null == n ? null : n.constants;null == n && (n = {});var a = this.standardizeArgs(t, r, i);t = a.inputs, r = a.initialState, i = a.constants;var o = [],
              s = [];if (null != r) {
            n.initialState = r, o = o.concat(r), this.stateSpec = [];for (var u = 0, c = r; u < c.length; u++) {
              var p = c[u];this.stateSpec.push(new l.InputSpec({ shape: p.shape }));
            }s = s.concat(this.stateSpec);
          }if (null != i && (n.constants = i, o = o.concat(i), this.numConstants = i.length), o[0] instanceof f.SymbolicTensor) {
            var h = [t].concat(o),
                d = this.inputSpec.concat(s),
                g = this.inputSpec;this.inputSpec = d;var m = e.prototype.apply.call(this, h, n);return this.inputSpec = g, m;
          }return e.prototype.apply.call(this, t, n);
        }, t.prototype.call = function (e, t) {
          var n = this,
              r = null == t ? null : t.mask,
              i = null == t ? null : t.training,
              a = null == t ? null : t.initialState;if (e = g.getExactlyOneTensor(e), null == a) {
            if (this.stateful) throw new p.NotImplementedError("stateful RNN layer is not implemented yet.");a = this.getInitialState(e);
          }if (null != r) throw new p.NotImplementedError("Masking is not implemented for RNN yet");var o = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;if (a.length !== o) throw new p.ValueError("RNN Layer has " + o + " state(s) but was passed " + a.length + " initial state(s).");var u = e.shape[1];this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");var l = { training: i },
              c = s.rnn(function (e, t) {
            var r = n.cell.call([e].concat(t), l);return [r[0], r.slice(1)];
          }, e, a, this.goBackwards, null, null, this.unroll, u),
              h = c[0],
              d = c[1],
              f = c[2];if (this.stateful) throw new p.NotImplementedError("stateful RNN layer is not implemented yet");var m = this.returnSequences ? d : h;return this.returnState ? [m].concat(f) : m;
        }, t.prototype.getInitialState = function (e) {
          var t = s.zeros(e.shape);return t = s.sum(t, [1, 2]), t = s.expandDims(t), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map(function (e) {
            return e > 1 ? s.tile(t, [1, e]) : t;
          }) : this.cell.stateSize > 1 ? [s.tile(t, [1, this.cell.stateSize])] : [t];
        }, Object.defineProperty(t.prototype, "trainableWeights", { get: function get() {
            return this.trainable ? this.cell.trainableWeights : [];
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function get() {
            return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
          }, enumerable: !0, configurable: !0 }), t.prototype.getClassName = function () {
          return "RNN";
        }, t.prototype.getConfig = function () {
          var t = { returnSequences: this.returnSequences, returnState: this.returnState, goBackwards: this.goBackwards, stateful: this.stateful, unroll: this.unroll };null != this.numConstants && (t.numConstants = this.numConstants);var n = this.cell.getConfig();t.cell = { className: this.cell.getClassName(), config: n };var r = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, r), t;
        }, t;
      }(c.Layer);n.RNN = y, g.ClassNameMap.register("RNN", y);var b = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return r(t, e), t = i([a.doc({ heading: "Layers", subheading: "Classes" })], t);
      }(c.Layer);n.RNNCell = b;var w = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.DEFAULT_ACTIVATION = "tanh", n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n.DEFAULT_BIAS_INITIALIZER = "zeros", n.units = t.units, n.activation = o.getActivation(null == t.activation ? n.DEFAULT_ACTIVATION : t.activation), n.useBias = null == t.useBias || t.useBias, n.kernelInitializer = h.getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.recurrentInitializer = h.getInitializer(t.recurrentInitializer || n.DEFAULT_RECURRENT_INITIALIZER), n.biasInitializer = h.getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.kernelRegularizer = d.getRegularizer(t.kernelRegularizer), n.recurrentRegularizer = d.getRegularizer(t.recurrentRegularizer), n.biasRegularizer = d.getRegularizer(t.biasRegularizer), n.kernelConstraint = u.getConstraint(t.kernelConstraint), n.recurrentConstraint = u.getConstraint(t.recurrentConstraint), n.biasConstraint = u.getConstraint(t.biasConstraint), n.dropout = m.min([1, m.max([0, null == t.dropout ? 0 : t.dropout])]), n.recurrentDropout = m.min([1, m.max([0, null == t.recurrentDropout ? 0 : t.recurrentDropout])]), n.stateSize = n.units, n;
        }return r(t, e), t.prototype.build = function (e) {
          e = g.getExactlyOneShape(e), this.kernel = this.addWeight("kernel", [e[e.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
        }, t.prototype.call = function (e, t) {
          if (2 !== (e = e).length) throw new p.ValueError("SimpleRNNCell expects 2 input Tensors, got " + e.length + ".");var n = e[1];if (e = e[0], 0 !== this.dropout || 0 !== this.recurrentDropout) throw new p.NotImplementedError("Dropout is not implemented for SimpleRNNCell yet");var r = s.dot(e, this.kernel.read());null != this.bias && (r = s.biasAdd(r, this.bias.read()));var i = s.add(r, s.dot(n, this.recurrentKernel.read()));return null != this.activation && (i = this.activation(i)), [i, i];
        }, t.prototype.getClassName = function () {
          return "SimpleRNNCell";
        }, t.prototype.getConfig = function () {
          var t = { units: this.units, activation: o.serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: h.serializeInitializer(this.kernelInitializer), recurrentInitializer: h.serializeInitializer(this.recurrentInitializer), biasInitializer: h.serializeInitializer(this.biasInitializer), kernelRegularizer: d.serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: d.serializeRegularizer(this.recurrentRegularizer), biasRegularizer: d.serializeRegularizer(this.biasRegularizer), activityRegularizer: d.serializeRegularizer(this.activityRegularizer), kernelConstraint: u.serializeConstraint(this.kernelConstraint), recurrentConstraint: u.serializeConstraint(this.recurrentConstraint), biasConstraint: u.serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(b);n.SimpleRNNCell = w, g.ClassNameMap.register("SimpleRNNCell", w);var x = function (e) {
        function t(t) {
          return t.cell = new w(t), e.call(this, t) || this;
        }return r(t, e), t.prototype.call = function (t, n) {
          var r = null == n ? null : n.mask,
              i = null == n ? null : n.training,
              a = null == n ? null : n.initialState;return e.prototype.call.call(this, t, { mask: r, training: i, initialState: a });
        }, Object.defineProperty(t.prototype, "units", { get: function get() {
            return this.cell.units;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "activation", { get: function get() {
            return this.cell.activation;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "useBias", { get: function get() {
            return this.cell.useBias;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelInitializer", { get: function get() {
            return this.cell.kernelInitializer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentInitializer", { get: function get() {
            return this.cell.recurrentInitializer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasInitializer", { get: function get() {
            return this.cell.biasInitializer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelRegularizer", { get: function get() {
            return this.cell.kernelRegularizer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentRegularizer", { get: function get() {
            return this.cell.recurrentRegularizer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasRegularizer", { get: function get() {
            return this.cell.biasRegularizer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelConstraint", { get: function get() {
            return this.cell.kernelConstraint;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentConstraint", { get: function get() {
            return this.cell.recurrentConstraint;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasConstraint", { get: function get() {
            return this.cell.biasConstraint;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "dropout", { get: function get() {
            return this.cell.dropout;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentDropout", { get: function get() {
            return this.cell.recurrentDropout;
          }, enumerable: !0, configurable: !0 }), t.prototype.getClassName = function () {
          return "SimpleRNN";
        }, t.prototype.getConfig = function () {
          var t = { units: this.units, activation: o.serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: h.serializeInitializer(this.kernelInitializer), recurrentInitializer: h.serializeInitializer(this.recurrentInitializer), biasInitializer: h.serializeInitializer(this.biasInitializer), kernelRegularizer: d.serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: d.serializeRegularizer(this.recurrentRegularizer), biasRegularizer: d.serializeRegularizer(this.biasRegularizer), activityRegularizer: d.serializeRegularizer(this.activityRegularizer), kernelConstraint: u.serializeConstraint(this.kernelConstraint), recurrentConstraint: u.serializeConstraint(this.recurrentConstraint), biasConstraint: u.serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(y);n.SimpleRNN = x, g.ClassNameMap.register("SimpleRNN", x);var A = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.DEFAULT_ACTIVATION = "tanh", n.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n.DEFAULT_BIAS_INITIALIZER = "zeros", n.units = t.units, n.activation = o.getActivation(void 0 === t.activation ? n.DEFAULT_ACTIVATION : t.activation), n.recurrentActivation = o.getActivation(void 0 === t.activation ? n.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), n.useBias = null == t.useBias || t.useBias, n.kernelInitializer = h.getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.recurrentInitializer = h.getInitializer(t.recurrentInitializer || n.DEFAULT_RECURRENT_INITIALIZER), n.biasInitializer = h.getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.kernelRegularizer = d.getRegularizer(t.kernelRegularizer), n.recurrentRegularizer = d.getRegularizer(t.recurrentRegularizer), n.biasRegularizer = d.getRegularizer(t.biasRegularizer), n.kernelConstraint = u.getConstraint(t.kernelConstraint), n.recurrentConstraint = u.getConstraint(t.recurrentConstraint), n.biasConstraint = u.getConstraint(t.biasConstraint), n.dropout = m.min([1, m.max([0, null == t.dropout ? 0 : t.dropout])]), n.recurrentDropout = m.min([1, m.max([0, null == t.recurrentDropout ? 0 : t.recurrentDropout])]), n.implementation = t.implementation, n.stateSize = n.units, n;
        }return r(t, e), t.prototype.build = function (e) {
          var t = (e = g.getExactlyOneShape(e))[e.length - 1];this.kernel = this.addWeight("kernel", [t, 3 * this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 3 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [3 * this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
        }, t.prototype.call = function (e, t) {
          if (0 !== this.dropout || 0 !== this.recurrentDropout) throw new p.NotImplementedError("Dropout is not implemented for GRUCell yet");if (2 !== (e = e).length) throw new p.ValueError("GRUCell expects 2 input Tensors (inputs, h, c), got " + e.length + ".");var n = e[1];e = e[0];var r, i, a;if (1 === this.implementation) {
            var o = s.sliceAlongLastAxis(this.kernel.read(), 0, this.units),
                u = s.sliceAlongLastAxis(this.kernel.read(), this.units, this.units),
                l = s.sliceAlongLastAxis(this.kernel.read(), 2 * this.units, this.units),
                c = s.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units),
                h = s.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units),
                d = s.sliceAlongLastAxis(this.recurrentKernel.read(), 2 * this.units, this.units),
                f = e,
                g = e,
                m = e,
                v = s.dot(f, o),
                y = s.dot(g, u),
                b = s.dot(m, l);if (this.useBias) {
              var w = s.sliceAlongFirstAxis(this.bias.read(), 0, this.units),
                  x = s.sliceAlongFirstAxis(this.bias.read(), this.units, this.units),
                  A = s.sliceAlongFirstAxis(this.bias.read(), 2 * this.units, this.units);v = s.biasAdd(v, w), y = s.biasAdd(y, x), b = s.biasAdd(b, A);
            }var E = n,
                _ = n,
                T = n;r = this.recurrentActivation(s.add(v, s.dot(E, c))), i = this.recurrentActivation(s.add(y, s.dot(_, h))), a = this.activation(s.add(b, s.dot(s.multiply(i, T), d)));
          } else {
            var S = s.dot(e, this.kernel.read());this.useBias && (S = s.biasAdd(S, this.bias.read()));var C = s.dot(n, s.sliceAlongLastAxis(this.recurrentKernel.read(), 0, 2 * this.units)),
                v = s.sliceAlongLastAxis(S, 0, this.units),
                y = s.sliceAlongLastAxis(S, this.units, this.units),
                O = s.sliceAlongLastAxis(C, 0, this.units),
                k = s.sliceAlongLastAxis(C, this.units, this.units);r = this.recurrentActivation(s.add(v, O)), i = this.recurrentActivation(s.add(y, k));var b = s.sliceAlongLastAxis(S, 2 * this.units, this.units),
                R = s.dot(s.multiply(i, n), s.sliceAlongLastAxis(this.recurrentKernel.read(), 2 * this.units, this.units));a = this.activation(s.add(b, R));
          }var N = s.add(s.multiply(r, n), s.multiply(s.scalarPlusArray(s.getScalar(1), s.neg(r)), a));return [N, N];
        }, t.prototype.getClassName = function () {
          return "GRUCell";
        }, t.prototype.getConfig = function () {
          var t = { units: this.units, activation: o.serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: h.serializeInitializer(this.kernelInitializer), recurrentInitializer: h.serializeInitializer(this.recurrentInitializer), biasInitializer: h.serializeInitializer(this.biasInitializer), kernelRegularizer: d.serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: d.serializeRegularizer(this.recurrentRegularizer), biasRegularizer: d.serializeRegularizer(this.biasRegularizer), activityRegularizer: d.serializeRegularizer(this.activityRegularizer), kernelConstraint: u.serializeConstraint(this.kernelConstraint), recurrentConstraint: u.serializeConstraint(this.recurrentConstraint), biasConstraint: u.serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(b);n.GRUCell = A, g.ClassNameMap.register("GRUCell", A);var E = function (e) {
        function t(t) {
          return 0 === t.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new A(t), e.call(this, t) || this;
        }return r(t, e), t.prototype.call = function (t, n) {
          var r = null == n ? null : n.mask,
              i = null == n ? null : n.training,
              a = null == n ? null : n.initialState;return e.prototype.call.call(this, t, { mask: r, training: i, initialState: a });
        }, Object.defineProperty(t.prototype, "units", { get: function get() {
            return this.cell.units;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "activation", { get: function get() {
            return this.cell.activation;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "useBias", { get: function get() {
            return this.cell.useBias;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelInitializer", { get: function get() {
            return this.cell.kernelInitializer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentInitializer", { get: function get() {
            return this.cell.recurrentInitializer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasInitializer", { get: function get() {
            return this.cell.biasInitializer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelRegularizer", { get: function get() {
            return this.cell.kernelRegularizer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentRegularizer", { get: function get() {
            return this.cell.recurrentRegularizer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasRegularizer", { get: function get() {
            return this.cell.biasRegularizer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelConstraint", { get: function get() {
            return this.cell.kernelConstraint;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentConstraint", { get: function get() {
            return this.cell.recurrentConstraint;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasConstraint", { get: function get() {
            return this.cell.biasConstraint;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "dropout", { get: function get() {
            return this.cell.dropout;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentDropout", { get: function get() {
            return this.cell.recurrentDropout;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "implementation", { get: function get() {
            return this.cell.implementation;
          }, enumerable: !0, configurable: !0 }), t.prototype.getClassName = function () {
          return "GRU";
        }, t.prototype.getConfig = function () {
          var t = { units: this.units, activation: o.serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: h.serializeInitializer(this.kernelInitializer), recurrentInitializer: h.serializeInitializer(this.recurrentInitializer), biasInitializer: h.serializeInitializer(this.biasInitializer), kernelRegularizer: d.serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: d.serializeRegularizer(this.recurrentRegularizer), biasRegularizer: d.serializeRegularizer(this.biasRegularizer), activityRegularizer: d.serializeRegularizer(this.activityRegularizer), kernelConstraint: u.serializeConstraint(this.kernelConstraint), recurrentConstraint: u.serializeConstraint(this.recurrentConstraint), biasConstraint: u.serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t.fromConfig = function (e, t) {
          return 0 === t.implmentation && (t.implementation = 1), new e(t);
        }, t;
      }(y);n.GRU = E, g.ClassNameMap.register("GRU", E);var _ = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.DEFAULT_ACTIVATION = "tanh", n.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n.DEFAULT_BIAS_INITIALIZER = "zeros", n.units = t.units, n.activation = o.getActivation(void 0 === t.activation ? n.DEFAULT_ACTIVATION : t.activation), n.recurrentActivation = o.getActivation(void 0 === t.activation ? n.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), n.useBias = null == t.useBias || t.useBias, n.kernelInitializer = h.getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.recurrentInitializer = h.getInitializer(t.recurrentInitializer || n.DEFAULT_RECURRENT_INITIALIZER), n.biasInitializer = h.getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.unitForgetBias = t.unitForgetBias, n.kernelRegularizer = d.getRegularizer(t.kernelRegularizer), n.recurrentRegularizer = d.getRegularizer(t.recurrentRegularizer), n.biasRegularizer = d.getRegularizer(t.biasRegularizer), n.kernelConstraint = u.getConstraint(t.kernelConstraint), n.recurrentConstraint = u.getConstraint(t.recurrentConstraint), n.biasConstraint = u.getConstraint(t.biasConstraint), n.dropout = m.min([1, m.max([0, null == t.dropout ? 0 : t.dropout])]), n.recurrentDropout = m.min([1, m.max([0, null == t.recurrentDropout ? 0 : t.recurrentDropout])]), n.implementation = t.implementation, n.stateSize = [n.units, n.units], n;
        }return r(t, e), t.prototype.build = function (e) {
          var t = (e = g.getExactlyOneShape(e))[e.length - 1];this.kernel = this.addWeight("kernel", [t, 4 * this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 4 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint);var n;if (this.useBias) {
            if (this.unitForgetBias) {
              var i = this.biasInitializer,
                  a = this.units;n = new (function (e) {
                function t() {
                  return null !== e && e.apply(this, arguments) || this;
                }return r(t, e), t.prototype.apply = function (e, t) {
                  var n = i.apply([a]),
                      r = new h.Ones().apply([a]),
                      o = i.apply([2 * a]);return s.concatAlongFirstAxis(s.concatAlongFirstAxis(n, r), o);
                }, t.prototype.getClassName = function () {
                  return "CustomInit";
                }, t;
              }(h.Initializer))();
            } else n = this.biasInitializer;this.bias = this.addWeight("bias", [4 * this.units], null, n, this.biasRegularizer, !0, this.biasConstraint);
          } else this.bias = null;this.built = !0;
        }, t.prototype.call = function (e, t) {
          if (0 !== this.dropout || 0 !== this.recurrentDropout) throw new p.NotImplementedError("Dropout is not implemented for LSTMCell yet");if (3 !== (e = e).length) throw new p.ValueError("LSTMCell expects 3 input Tensors (inputs, h, c), got " + e.length + ".");var n = e[1],
              r = e[2];e = e[0];var i, a, o, u;if (1 === this.implementation) {
            var l = s.sliceAlongLastAxis(this.kernel.read(), 0, this.units),
                c = s.sliceAlongLastAxis(this.kernel.read(), this.units, this.units),
                h = s.sliceAlongLastAxis(this.kernel.read(), 2 * this.units, this.units),
                d = s.sliceAlongLastAxis(this.kernel.read(), 3 * this.units, this.units),
                f = s.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units),
                g = s.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units),
                m = s.sliceAlongLastAxis(this.recurrentKernel.read(), 2 * this.units, this.units),
                v = s.sliceAlongLastAxis(this.recurrentKernel.read(), 3 * this.units, this.units),
                y = e,
                b = e,
                w = e,
                x = e,
                A = s.dot(y, l),
                E = s.dot(b, c),
                _ = s.dot(w, h),
                T = s.dot(x, d);if (this.useBias) {
              var S = s.sliceAlongFirstAxis(this.bias.read(), 0, this.units),
                  C = s.sliceAlongFirstAxis(this.bias.read(), this.units, this.units),
                  O = s.sliceAlongFirstAxis(this.bias.read(), 2 * this.units, this.units),
                  k = s.sliceAlongFirstAxis(this.bias.read(), 3 * this.units, this.units);A = s.biasAdd(A, S), E = s.biasAdd(E, C), _ = s.biasAdd(_, O), T = s.biasAdd(T, k);
            }var R = n,
                N = n,
                I = n,
                z = n;i = this.recurrentActivation(s.add(A, s.dot(R, f))), a = this.recurrentActivation(s.add(E, s.dot(N, g))), o = s.add(s.multiply(a, r), s.multiply(i, this.activation(s.add(_, s.dot(I, m))))), u = this.recurrentActivation(s.add(T, s.dot(z, v)));
          } else {
            var M = s.dot(e, this.kernel.read());M = s.add(M, s.dot(n, this.recurrentKernel.read())), this.useBias && (M = s.biasAdd(M, this.bias.read()));var D = s.sliceAlongLastAxis(M, 0, this.units),
                P = s.sliceAlongLastAxis(M, this.units, this.units),
                L = s.sliceAlongLastAxis(M, 2 * this.units, this.units),
                F = s.sliceAlongLastAxis(M, 3 * this.units, this.units);i = this.recurrentActivation(D), a = this.recurrentActivation(P), o = s.add(s.multiply(a, r), s.multiply(i, this.activation(L))), u = this.recurrentActivation(F);
          }var V = s.multiply(u, this.activation(o));return [V, V, o];
        }, t.prototype.getClassName = function () {
          return "LSTMCell";
        }, t.prototype.getConfig = function () {
          var t = { units: this.units, activation: o.serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: h.serializeInitializer(this.kernelInitializer), recurrentInitializer: h.serializeInitializer(this.recurrentInitializer), biasInitializer: h.serializeInitializer(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: d.serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: d.serializeRegularizer(this.recurrentRegularizer), biasRegularizer: d.serializeRegularizer(this.biasRegularizer), activityRegularizer: d.serializeRegularizer(this.activityRegularizer), kernelConstraint: u.serializeConstraint(this.kernelConstraint), recurrentConstraint: u.serializeConstraint(this.recurrentConstraint), biasConstraint: u.serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t;
      }(b);n.LSTMCell = _, g.ClassNameMap.register("LSTMCell", _);var T = function (e) {
        function t(t) {
          return 0 === t.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new _(t), e.call(this, t) || this;
        }return r(t, e), t.prototype.call = function (t, n) {
          var r = null == n ? null : n.mask,
              i = null == n ? null : n.training,
              a = null == n ? null : n.initialState;return e.prototype.call.call(this, t, { mask: r, training: i, initialState: a });
        }, Object.defineProperty(t.prototype, "units", { get: function get() {
            return this.cell.units;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "activation", { get: function get() {
            return this.cell.activation;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "useBias", { get: function get() {
            return this.cell.useBias;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelInitializer", { get: function get() {
            return this.cell.kernelInitializer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentInitializer", { get: function get() {
            return this.cell.recurrentInitializer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasInitializer", { get: function get() {
            return this.cell.biasInitializer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "unitForgetBias", { get: function get() {
            return this.cell.unitForgetBias;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelRegularizer", { get: function get() {
            return this.cell.kernelRegularizer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentRegularizer", { get: function get() {
            return this.cell.recurrentRegularizer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasRegularizer", { get: function get() {
            return this.cell.biasRegularizer;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelConstraint", { get: function get() {
            return this.cell.kernelConstraint;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentConstraint", { get: function get() {
            return this.cell.recurrentConstraint;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasConstraint", { get: function get() {
            return this.cell.biasConstraint;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "dropout", { get: function get() {
            return this.cell.dropout;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentDropout", { get: function get() {
            return this.cell.recurrentDropout;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "implementation", { get: function get() {
            return this.cell.implementation;
          }, enumerable: !0, configurable: !0 }), t.prototype.getClassName = function () {
          return "LSTM";
        }, t.prototype.getConfig = function () {
          var t = { units: this.units, activation: o.serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: h.serializeInitializer(this.kernelInitializer), recurrentInitializer: h.serializeInitializer(this.recurrentInitializer), biasInitializer: h.serializeInitializer(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: d.serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: d.serializeRegularizer(this.recurrentRegularizer), biasRegularizer: d.serializeRegularizer(this.biasRegularizer), activityRegularizer: d.serializeRegularizer(this.activityRegularizer), kernelConstraint: u.serializeConstraint(this.kernelConstraint), recurrentConstraint: u.serializeConstraint(this.recurrentConstraint), biasConstraint: u.serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t.fromConfig = function (e, t) {
          return 0 === t.implmentation && (t.implementation = 1), new e(t);
        }, t;
      }(y);n.LSTM = T, g.ClassNameMap.register("LSTM", T);var S = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.cells = t.cells, n;
        }return r(t, e), Object.defineProperty(t.prototype, "stateSize", { get: function get() {
            for (var e = [], t = 0, n = this.cells.slice().reverse(); t < n.length; t++) {
              var r = n[t];Array.isArray(r.stateSize) ? e.push.apply(e, r.stateSize) : e.push(r.stateSize);
            }return e;
          }, enumerable: !0, configurable: !0 }), t.prototype.call = function (e, t) {
          for (var n = (e = e).slice(1), r = [], i = 0, a = this.cells.slice().reverse(); i < a.length; i++) {
            l = a[i];Array.isArray(l.stateSize) ? r.push(n.splice(0, l.stateSize.length)) : r.push(n.splice(0, 1));
          }r.reverse();for (var o, s = [], u = 0; u < this.cells.length; ++u) {
            var l = this.cells[u];n = r[u], o = 0 === u ? [e[0]].concat(n) : [o[0]].concat(n), o = l.call(o, t), s.push(o.slice(1));
          }n = [];for (var c = 0, p = s.slice().reverse(); c < p.length; c++) {
            var h = p[c];n.push.apply(n, h);
          }return [o[0]].concat(n);
        }, t.prototype.build = function (e) {
          g.isArrayOfShapes(e) && (e = e[0]), e = e;for (var t, n = 0, r = this.cells; n < r.length; n++) {
            var i = r[n];i.build(e), t = Array.isArray(i.stateSize) ? i.stateSize[0] : i.stateSize, e = [e[0], t];
          }this.built = !0;
        }, t.prototype.getClassName = function () {
          return "StackedRNNCells";
        }, t.prototype.getConfig = function () {
          for (var t = [], n = 0, r = this.cells; n < r.length; n++) {
            var i = r[n];t.push({ className: this.getClassName(), config: i.getConfig() });
          }var a = { cells: t },
              o = e.prototype.getConfig.call(this);return (0, _assign2.default)(a, o), a;
        }, t.fromConfig = function (e, t, n) {
          void 0 === n && (n = {});for (var r = [], i = 0, a = t.cells; i < a.length; i++) {
            var o = a[i];r.push(v.deserialize(o, n));
          }return new e({ cells: r });
        }, Object.defineProperty(t.prototype, "trainableWeights", { get: function get() {
            if (!this.trainable) return [];for (var e = [], t = 0, n = this.cells; t < n.length; t++) {
              var r = n[t];e.push.apply(e, r.trainableWeights);
            }return e;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function get() {
            for (var e = [], t = 0, n = this.cells; t < n.length; t++) {
              o = n[t];e.push.apply(e, o.nonTrainableWeights);
            }if (!this.trainable) {
              for (var r = [], i = 0, a = this.cells; i < a.length; i++) {
                var o = a[i];r.push.apply(r, o.trainableWeights);
              }return r.concat(e);
            }return e;
          }, enumerable: !0, configurable: !0 }), t.prototype.getWeights = function () {
          for (var e = [], t = 0, n = this.cells; t < n.length; t++) {
            var r = n[t];e.push.apply(e, r.weights);
          }return s.batchGetValue(e);
        }, t.prototype.setWeights = function (e) {
          for (var t = [], n = 0, r = this.cells; n < r.length; n++) {
            for (var i = r[n], a = i.weights.length, o = e.splice(a), u = 0; u < i.weights.length; ++u) {
              t.push([i.weights[u], o[u]]);
            }
          }s.batchSetValue(t);
        }, t;
      }(b);n.StackedRNNCells = S, g.ClassNameMap.register("StackedRNNCells", S);
    }, { "../activations": 98, "../backend/tfjs_backend": 100, "../constraints": 103, "../engine/topology": 105, "../errors": 107, "../initializers": 110, "../regularizers": 127, "../types": 128, "../utils/generic_utils": 130, "../utils/math_utils": 131, "./serialization": 121, "@tensorflow/tfjs-core": 8 }], 121: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("../utils/generic_utils");n.deserialize = function (e, t) {
        return void 0 === t && (t = {}), r.deserializeKerasObject(e, r.ClassNameMap.getMap().pythonClassNameMap, t, "layer");
      };
    }, { "../utils/generic_utils": 130 }], 122: [function (e, t, n) {
      "use strict";
      var r = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }();Object.defineProperty(n, "__esModule", { value: !0 });var i = e("../backend/tfjs_backend"),
          a = e("../engine/topology"),
          o = e("../errors"),
          s = e("../utils/generic_utils"),
          u = e("./serialization"),
          l = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.layer = t.layer, n;
        }return r(t, e), t.prototype.build = function (e) {
          this.built = !0;
        }, Object.defineProperty(t.prototype, "trainable", { get: function get() {
            return null != this.layer && this.layer.trainable;
          }, set: function set(e) {
            null != this.layer && (this.layer.trainable = e);
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "trainableWeights", { get: function get() {
            return this.layer.trainableWeights;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function get() {
            return this.layer.nonTrainableWeights;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "updates", { get: function get() {
            return this.layer._updates;
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "losses", { get: function get() {
            return this.layer.losses;
          }, enumerable: !0, configurable: !0 }), t.prototype.getWeights = function () {
          return this.layer.getWeights();
        }, t.prototype.setWeights = function (e) {
          this.layer.setWeights(e);
        }, t.prototype.getConfig = function () {
          var t = { layer: { className: this.layer.getClassName(), config: this.layer.getConfig() } },
              n = e.prototype.getConfig.call(this);return (0, _assign2.default)(t, n), t;
        }, t.fromConfig = function (e, t, n) {
          void 0 === n && (n = {});var r = t.layer,
              i = u.deserialize(r, n);delete t.layer;var a = { layer: i };return (0, _assign2.default)(a, t), new e(a);
        }, t;
      }(a.Layer);n.Wrapper = l;var c = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;return n.supportsMasking = !0, n;
        }return r(t, e), t.prototype.build = function (t) {
          if ((t = s.getExactlyOneShape(t)).length < 3) throw new o.ValueError("TimeDistributed layer expects an input shape >= 3D, but received input shape " + (0, _stringify2.default)(t));this.inputSpec = [{ shape: t }];var n = [t[0]].concat(t.slice(2));this.layer.built || (this.layer.build(n), this.layer.built = !0), e.prototype.build.call(this, t);
        }, t.prototype.computeOutputShape = function (e) {
          var t = [(e = s.getExactlyOneShape(e))[0]].concat(e.slice(2)),
              n = this.layer.computeOutputShape(t),
              r = e[1];return [n[0], r].concat(n.slice(1));
        }, t.prototype.call = function (e, t) {
          var n = this;e = s.getExactlyOneTensor(e);return i.rnn(function (e, r) {
            return [n.layer.call(e, t), []];
          }, e, [], !1, null, null, !1, e.shape[1])[1];
        }, t.prototype.getClassName = function () {
          return "TimeDistributed";
        }, t;
      }(l);n.TimeDistributed = c, s.ClassNameMap.register("TimeDistributed", c);var p;!function (e) {
        e[e.SUM = 0] = "SUM", e[e.MUL = 1] = "MUL", e[e.CONCAT = 2] = "CONCAT", e[e.AVE = 3] = "AVE";
      }(p = n.BidirectionalMergeMode || (n.BidirectionalMergeMode = {})), s.SerializableEnumRegistry.register("merge_mode", { sum: p.SUM, mul: p.MUL, concat: p.CONCAT, ave: p.AVE });var h = function (e) {
        function t(t) {
          var n = e.call(this, t) || this;n.forwardLayer = t.layer;var r = t.layer.getConfig();if (r.goBackwards = !0 !== r.goBackwards, n.backwardLayer = u.deserialize({ className: t.layer.getClassName(), config: r }), n.forwardLayer.name = "forward_" + n.forwardLayer.name, n.backwardLayer.name = "backward_" + n.backwardLayer.name, n.mergeMode = t.mergeMode, t.weights) throw new o.NotImplementedError("weights support is not implemented for Bidirectional layer yet.");return n._stateful = t.layer.stateful, n.returnSequences = t.layer.returnSequences, n.returnState = t.layer.returnState, n.supportsMasking = !0, n._trainable = !0, n.inputSpec = t.layer.inputSpec, n;
        }return r(t, e), Object.defineProperty(t.prototype, "trainable", { get: function get() {
            return this._trainable;
          }, set: function set(e) {
            this._trainable = e, null != this.forwardLayer && (this.forwardLayer.trainable = e), null != this.backwardLayer && (this.backwardLayer.trainable = e);
          }, enumerable: !0, configurable: !0 }), t.prototype.getWeights = function () {
          return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
        }, t.prototype.setWeights = function (e) {
          var t = e.length,
              n = Math.floor(t / 2);this.forwardLayer.setWeights(e.slice(0, n)), this.backwardLayer.setWeights(e.slice(n));
        }, t.prototype.computeOutputShape = function (e) {
          var t = this.forwardLayer.computeOutputShape(e);Array.isArray(t) && Array.isArray(t[0]) || (t = [t]), t = t;var n, r, i;return this.returnState ? (i = t.slice(1), n = t[0]) : n = t[0], n = n, this.mergeMode === p.CONCAT ? (n[n.length - 1] *= 2, r = [n]) : r = null == this.mergeMode ? [n, n.slice()] : [n], this.returnState ? null == this.mergeMode ? r.concat(i).concat(i.slice()) : [n].concat(i).concat(i.slice()) : s.singletonOrArray(r);
        }, t.prototype.apply = function (t, n) {
          var r = null;if (null != n && (r = n.initialState), Array.isArray(t) && (r = t.slice(1), t = t[0]), null == r || 0 === r.length) return e.prototype.apply.call(this, t, n);throw new o.NotImplementedError("The support for initial states is not implemented for Bidirectional layers yet.");
        }, t.prototype.call = function (e, t) {
          if (null != t.mask) throw new o.NotImplementedError("The support for masking is not implemented for Bidirectional layers yet.");if (null != t.initialState) throw new o.NotImplementedError("The support for initial states is not implemented for Bidirectional layers yet.");var n,
              r = this.forwardLayer.call(e, t),
              a = this.backwardLayer.call(e, t);this.returnState && (Array.isArray(r) && (n = r.slice(1).concat(a.slice(1))), r = r[0], a = a[0]), this.returnSequences && (a = i.reverse(a, 1));var s;return this.mergeMode === p.CONCAT ? s = i.concatenate([r, a]) : this.mergeMode === p.SUM ? s = i.add(r, a) : this.mergeMode === p.AVE ? s = i.scalarTimesArray(i.getScalar(.5), i.add(r, a)) : this.mergeMode === p.MUL ? s = i.multiply(r, a) : null == this.mergeMode && (s = [r, a]), this.returnState ? null == this.mergeMode ? s.concat(n) : [s].concat(n) : s;
        }, t.prototype.resetStates = function (e) {
          this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
        }, t.prototype.build = function (e) {
          var t = this;i.nameScope(this.forwardLayer.name, function () {
            t.forwardLayer.build(e);
          }), i.nameScope(this.backwardLayer.name, function () {
            t.backwardLayer.build(e);
          }), this.built = !0;
        }, Object.defineProperty(t.prototype, "trainableWeights", { get: function get() {
            return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
          }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function get() {
            return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
          }, enumerable: !0, configurable: !0 }), t.prototype.getClassName = function () {
          return "Bidirectional";
        }, t;
      }(l);n.Bidirectional = h, s.ClassNameMap.register("Bidirectional", h);
    }, { "../backend/tfjs_backend": 100, "../engine/topology": 105, "../errors": 107, "../utils/generic_utils": 130, "./serialization": 121 }], 123: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        return v.mean(v.square(v.subtract(t, e)), -1);
      }function i(e, t) {
        return v.mean(v.abs(v.subtract(t, e)), -1);
      }function a(e, t) {
        var n = v.subtract(e, t),
            r = v.clip(v.abs(e), v.epsilon(), Number.MAX_VALUE),
            i = v.abs(v.divide(n, r));return v.scalarTimesArray(v.getScalar(100), v.mean(i, -1));
      }function o(e, t) {
        var n = v.getScalar(1),
            r = v.clip(t, v.epsilon(), Number.MAX_VALUE),
            i = v.log(v.scalarPlusArray(n, r)),
            a = v.clip(e, v.epsilon(), Number.MAX_VALUE),
            o = v.log(v.scalarPlusArray(n, a));return v.mean(v.square(v.subtract(i, o)), -1);
      }function s(e, t) {
        var n = v.getScalar(0),
            r = v.getScalar(1),
            i = v.maximum(n, v.subtract(r, v.multiply(e, t)));return v.mean(v.square(i), -1);
      }function u(e, t) {
        var n = v.getScalar(0),
            r = v.getScalar(1),
            i = v.maximum(n, v.subtract(r, v.multiply(e, t)));return v.mean(i, -1);
      }function l(e, t) {
        var n = v.getScalar(0),
            r = v.getScalar(1),
            i = v.sum(v.multiply(e, t), -1),
            a = v.max(v.multiply(v.subtract(r, e), t), -1);return v.maximum(n, v.scalarPlusArray(r, v.subtract(a, i)));
      }function c(e, t) {
        var n = v.getScalar(Math.log(2)),
            r = v.subtract(t, e),
            i = v.subtract(v.add(r, v.softplus(v.scalarTimesArray(v.getScalar(-2), r))), n);return v.mean(i, -1);
      }function p(e, t) {
        return v.categoricalCrossentropy(e, t);
      }function h(e, t) {
        return v.sparseCategoricalCrossentropy(e, t);
      }function d(e, t) {
        return v.mean(v.binaryCrossentropy(e, t), -1);
      }function f(e, t) {
        var n = v.clip(e, v.epsilon(), 1),
            r = v.clip(t, v.epsilon(), 1);return v.sum(v.multiply(e, v.log(v.divide(n, r))), -1);
      }function g(e, t) {
        var n = v.log(v.scalarPlusArray(v.getScalar(v.epsilon()), t));return v.mean(v.subtract(t, v.multiply(e, n)), -1);
      }function m(e, t) {
        var n = v.l2Normalize(e, -1),
            r = v.l2Normalize(t, -1),
            i = v.multiply(n, r);return v.neg(v.sum(i, -1));
      }Object.defineProperty(n, "__esModule", { value: !0 });var v = e("./backend/tfjs_backend"),
          y = e("./errors");n.meanSquaredError = r, n.meanAbsoluteError = i, n.meanAbsolutePercentageError = a, n.meanSquaredLogarithmicError = o, n.squaredHinge = s, n.hinge = u, n.categoricalHinge = l, n.logcosh = c, n.categoricalCrossentropy = p, n.sparseCategoricalCrossentropy = h, n.binaryCrossentropy = d, n.kullbackLeiblerDivergence = f, n.poisson = g, n.cosineProximity = m, n.mse = r, n.MSE = r, n.mae = i, n.MAE = i, n.mape = a, n.MAPE = a, n.msle = o, n.MSLE = o, n.kld = f, n.KLD = f, n.cosine = m, n.get = function (e) {
        var t = { meanSquaredError: r, meanAbsoluteError: i, meanAbsolutePercentageError: a, meanSquaredLogarithmicError: o, squaredHinge: s, hinge: u, categoricalHinge: l, logcosh: c, categoricalCrossentropy: p, sparseCategoricalCrossentropy: h, binaryCrossentropy: d, kullbackLeiblerDivergence: f, poisson: g, cosineProximity: m };if ("string" == typeof e) {
          if (e in t) return t[e];throw new y.ValueError("Unknown loss " + e);
        }return e;
      };
    }, { "./backend/tfjs_backend": 100, "./errors": 107 }], 124: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        var n = o.scalarTimesArray(o.getScalar(.5), a.onesLike(t)),
            r = o.cast(o.greater(t, n), e.dtype);return o.mean(o.equal(e, r), -1);
      }function i(e, t) {
        return o.cast(o.equal(o.argmax(e, -1), o.argmax(t, -1)), "float32");
      }Object.defineProperty(n, "__esModule", { value: !0 });var a = e("@tensorflow/tfjs-core"),
          o = e("./backend/tfjs_backend"),
          s = e("./errors"),
          u = e("./losses");n.binaryAccuracy = r, n.categoricalAccuracy = i, n.binaryCrossentropy = function (e, t) {
        return o.mean(o.binaryCrossentropy(e, t), -1);
      }, n.sparseCategoricalAccuracy = function (e, t) {
        throw new s.NotImplementedError();
      }, n.topKCategoricalAccuracy = function (e, t) {
        throw new s.NotImplementedError();
      }, n.sparseTopKCategoricalAccuracy = function (e, t) {
        throw new s.NotImplementedError();
      }, n.mse = u.meanSquaredError, n.MSE = u.meanSquaredError, n.mae = u.meanAbsoluteError, n.MAE = u.meanAbsoluteError, n.mape = u.meanAbsolutePercentageError, n.MAPE = u.meanAbsolutePercentageError, n.categoricalCrossentropy = u.categoricalCrossentropy, n.cosine = u.cosineProximity, n.sparseCategoricalCrossentropy = u.sparseCategoricalCrossentropy, n.get = function (e) {
        var t = { binaryAccuracy: r, categoricalAccuracy: i, categoricalCrossentropy: n.categoricalCrossentropy, sparseCategoricalCrossentropy: n.sparseCategoricalCrossentropy, mse: n.mse, MSE: n.MSE, mae: n.mae, MAE: n.MAE, mape: n.mape, MAPE: n.MAPE, cosine: n.cosine };if ("string" == typeof e && e in t) return t[e];if ("string" != typeof e && null != e) return e;throw new s.ValueError("Unknown metric " + e);
      };
    }, { "./backend/tfjs_backend": 100, "./errors": 107, "./losses": 123, "@tensorflow/tfjs-core": 8 }], 125: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        return o(this, void 0, void 0, function () {
          var n, r, i, a, o, l, c, p, h, f;return s(this, function (s) {
            switch (s.label) {case 0:
                return null != (n = e.modelTopology).model_config && (n = n.model_config), r = g.convertPythonicToTs(n), i = d.deserialize(r, t), null == e.weightsManifest ? [3, 2] : [4, u.loadWeights(e.weightsManifest, e.pathPrefix, i.weights.map(function (e) {
                  return e.originalName;
                }))];case 1:
                for (a = s.sent(), o = {}, l = 0, c = i.weights; l < c.length; l++) {
                  p = c[l], o[p.name] = a[p.originalName];
                }h = null, f = !0, i.loadWeights(o, h, f), s.label = 2;case 2:
                return [2, i];}
          });
        });
      }var i = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }(),
          a = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      },
          o = this && this.__awaiter || function (e, t, n, r) {
        return new (n || (n = _promise2.default))(function (i, a) {
          function o(e) {
            try {
              u(r.next(e));
            } catch (e) {
              a(e);
            }
          }function s(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              a(e);
            }
          }function u(e) {
            e.done ? i(e.value) : new n(function (t) {
              t(e.value);
            }).then(o, s);
          }u((r = r.apply(e, t || [])).next());
        });
      },
          s = this && this.__generator || function (e, t) {
        function n(e) {
          return function (t) {
            return r([e, t]);
          };
        }function r(n) {
          if (i) throw new TypeError("Generator is already executing.");for (; u;) {
            try {
              if (i = 1, a && (o = a[2 & n[0] ? "return" : n[0] ? "throw" : "next"]) && !(o = o.call(a, n[1])).done) return o;switch (a = 0, o && (n = [0, o.value]), n[0]) {case 0:case 1:
                  o = n;break;case 4:
                  return u.label++, { value: n[1], done: !1 };case 5:
                  u.label++, a = n[1], n = [0];continue;case 7:
                  n = u.ops.pop(), u.trys.pop();continue;default:
                  if (o = u.trys, !(o = o.length > 0 && o[o.length - 1]) && (6 === n[0] || 2 === n[0])) {
                    u = 0;continue;
                  }if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) {
                    u.label = n[1];break;
                  }if (6 === n[0] && u.label < o[1]) {
                    u.label = o[1], o = n;break;
                  }if (o && u.label < o[2]) {
                    u.label = o[2], u.ops.push(n);break;
                  }o[2] && u.ops.pop(), u.trys.pop();continue;}n = t.call(e, u);
            } catch (e) {
              n = [6, e], a = 0;
            } finally {
              i = o = 0;
            }
          }if (5 & n[0]) throw n[1];return { value: n[0] ? n[1] : void 0, done: !0 };
        }var i,
            a,
            o,
            s,
            u = { label: 0, sent: function sent() {
            if (1 & o[0]) throw o[1];return o[1];
          }, trys: [], ops: [] };return s = { next: n(0), throw: n(1), return: n(2) }, "function" == typeof _symbol2.default && (s[_iterator2.default] = function () {
          return this;
        }), s;
      };Object.defineProperty(n, "__esModule", { value: !0 });var u = e("@tensorflow/tfjs-core"),
          l = e("./backend/tfjs_backend"),
          c = e("./engine/topology"),
          p = e("./engine/training"),
          h = e("./errors"),
          d = e("./layers/serialization"),
          f = e("./utils/generic_utils"),
          g = e("./utils/serialization_utils");n.modelFromJSON = r, n.loadModelInternal = function (e) {
        return o(this, void 0, void 0, function () {
          var t, n;return s(this, function (i) {
            switch (i.label) {case 0:
                return [4, fetch(e)];case 1:
                return t = i.sent(), [4, t.json()];case 2:
                if (null == (n = i.sent()).modelTopology) throw new h.ValueError('Missing field "modelTopology" from model JSON at path' + e);if (null == n.weightsManifest) throw new h.ValueError('Missing field "weightsManifest" from model JSON at path' + e);return n.pathPrefix = e.substring(0, e.lastIndexOf("/")), [2, r(n)];}
          });
        });
      };var m = function (e) {
        function t(t) {
          var n = e.call(this, { inputs: [], outputs: [] }) || this;if (t = t || {}, n.trainable = !0, n._updatable = !0, n.built = !1, n.name = null != t.name ? t.name : l.getUid("sequential_"), null != t.layers) for (var r = 0, i = t.layers; r < i.length; r++) {
            var a = i[r];n.add(a);
          }return n;
        }return i(t, e), n = t, t.prototype.getClassName = function () {
          return "Sequential";
        }, t.prototype.add = function (e) {
          if (0 === this.outputs.length) {
            if (0 === e.inboundNodes.length) {
              if (null == e.batchInputShape) throw new h.ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");var t = c.Input({ batchShape: e.batchInputShape, dtype: e.dtype, name: e.name + "_input" });e.apply(t);
            }if (1 !== e.inboundNodes.length) throw new h.ValueError("A layer added to a Sequential model must not already be connected somewhere else. Model received layer " + e.name + " which has " + e.inboundNodes.length + " pre-existing inbound connections.");if (1 !== e.inboundNodes[0].outputTensors.length) throw new h.ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.outputs = [e.inboundNodes[0].outputTensors[0]], this.inputs = c.getSourceInputs(this.outputs[0]), new c.Node({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: f.pyListRepeat(null, this.inputs.length), outputMasks: [null], inputShapes: this.inputs.map(function (e) {
                return e.shape;
              }), outputShapes: this.outputs[0].shape });
          } else {
            var n = e.apply(this.outputs[0]);if (Array.isArray(n)) throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.outputs = [n], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
          }this.layers.push(e), this.built = !1;
        }, t.prototype.pop = function () {
          if (0 === this.layers.length) throw new TypeError("There are no layers in the model.");if (this.layers.pop(), 0 === this.layers.length) this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];else {
            var e = this.layers.length - 1;this.layers[e].outboundNodes = [], this.outputs = [this.layers[e].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
          }
        }, t.prototype.call = function (e, t) {
          return null == this.model && this.build(), this.model.call(e, t);
        }, t.prototype.build = function (e) {
          if (0 === this.inputs.length || 0 === this.outputs.length) throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model = new p.Model({ inputs: this.inputs, outputs: this.outputs[0], name: this.name + "_model" }), this.model.trainable = this.trainable, this.model.updatable = this.updatable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
        }, t.prototype.setWeights = function (e) {
          null == this.model && this.build(), this.model.setWeights(e);
        }, Object.defineProperty(t.prototype, "updatable", { get: function get() {
            return this._updatable;
          }, set: function set(e) {
            this.built && (this.model.updatable = e), this._updatable = e;
          }, enumerable: !0, configurable: !0 }), t.prototype.evaluate = function (e, t, n) {
          if (void 0 === n && (n = {}), !this.built) throw new h.RuntimeError("The model needs to be compiled before being used.");return this.model.evaluate(e, t, n);
        }, t.prototype.predict = function (e, t) {
          return void 0 === t && (t = {}), null == this.model && this.build(), this.model.predict(e, t);
        }, t.prototype.predictOnBatch = function (e) {
          return null == this.model && this.build(), this.model.predictOnBatch(e);
        }, t.prototype.compile = function (e) {
          this.build(), this.model.compile(e), this.optimizer = this.model.optimizer, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
        }, t.prototype.fit = function (e, t, n) {
          return void 0 === n && (n = {}), o(this, void 0, void 0, function () {
            return s(this, function (r) {
              if (!this.built) throw new h.RuntimeError("The model needs to be compiled before being used.");return [2, this.model.fit(e, t, n)];
            });
          });
        }, t.fromConfig = function (e, t) {
          var r = new e({});if (!(r instanceof n)) throw new h.ValueError("Sequential.fromConfig called on non-Sequential input: " + r);if (!(t instanceof Array)) throw new h.ValueError("Sequential.fromConfig called without an array of configs");if (null == t[0].className || "Merge" === t[0].className) throw new h.ValueError("Legacy serialization format not supported yet.");for (var i = 0, a = t; i < a.length; i++) {
            var o = a[i],
                s = d.deserialize(o);r.add(s);
          }return r;
        }, t.prototype.getConfig = function () {
          for (var e = [], t = 0, n = this.layers; t < n.length; t++) {
            var r = n[t];e.push({ className: r.getClassName(), config: r.getConfig() });
          }return e;
        }, a([u.doc({ heading: "Models", subheading: "Classes" })], t.prototype, "add", null), a([u.doc({ heading: "Models", subheading: "Classes", configParamIndices: [2] })], t.prototype, "evaluate", null), a([u.doc({ heading: "Models", subheading: "Classes", configParamIndices: [1] })], t.prototype, "predict", null), a([u.doc({ heading: "Models", subheading: "Classes", configParamIndices: [2] })], t.prototype, "fit", null), t = n = a([u.doc({ heading: "Models", subheading: "Classes" })], t);var n;
      }(p.Model);n.Sequential = m, f.ClassNameMap.register("Sequential", m);
    }, { "./backend/tfjs_backend": 100, "./engine/topology": 105, "./engine/training": 106, "./errors": 107, "./layers/serialization": 121, "./utils/generic_utils": 130, "./utils/serialization_utils": 132, "@tensorflow/tfjs-core": 8 }], 126: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("@tensorflow/tfjs-core"),
          i = e("./backend/tfjs_backend"),
          a = e("./errors");n.getOptimizer = function (e) {
        var t = { Adagrad: function Adagrad() {
            return r.train.adagrad(.01);
          }, Adam: function Adam() {
            return r.train.adam(.001, .9, .999, i.epsilon());
          }, RMSProp: function RMSProp() {
            return r.train.rmsprop(.001, .9, null, i.epsilon());
          }, SGD: function SGD() {
            return r.train.sgd(.01);
          } };if (t.adagrad = t.Adagrad, t.adam = t.Adam, t.rmsprop = t.RMSProp, t.sgd = t.SGD, e in t) return t[e]();throw new a.ValueError("Unknown Optimizer " + e);
      };
    }, { "./backend/tfjs_backend": 100, "./errors": 107, "@tensorflow/tfjs-core": 8 }], 127: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        return void 0 === t && (t = {}), l.deserializeKerasObject(e, l.ClassNameMap.getMap().pythonClassNameMap, t, "regularizer");
      }var i = this && this.__extends || function () {
        var e = _setPrototypeOf2.default || { __proto__: [] } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }
        };return function (t, n) {
          function r() {
            this.constructor = t;
          }e(t, n), t.prototype = null === n ? (0, _create2.default)(n) : (r.prototype = n.prototype, new r());
        };
      }(),
          a = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var o = e("@tensorflow/tfjs-core"),
          s = e("./backend/tfjs_backend"),
          u = e("./types"),
          l = e("./utils/generic_utils"),
          c = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }return i(t, e), t;
      }(u.Serializable);n.Regularizer = c;var p = function (e) {
        function t(t) {
          var n = e.call(this) || this,
              r = null == t || null == t.l1 ? .01 : t.l1,
              i = null == t || null == t.l2 ? .01 : t.l2;return n.hasL1 = 0 !== r, n.hasL2 = 0 !== i, n.l1 = s.getScalar(r), n.l2 = s.getScalar(i), n;
        }return i(t, e), n = t, t.prototype.apply = function (e) {
          var t = o.zeros([1]);return this.hasL1 && (t = s.add(t, s.sum(s.scalarTimesArray(this.l1, s.abs(e))))), this.hasL2 && (t = s.add(t, s.sum(s.scalarTimesArray(this.l2, s.square(e))))), t.asScalar();
        }, t.prototype.getClassName = function () {
          return "L1L2";
        }, t.prototype.getConfig = function () {
          return { l1: this.l1.dataSync()[0], l2: this.l2.dataSync()[0] };
        }, t.fromConfig = function (e, t) {
          return new n({ l1: t.l1, l2: t.l2 });
        }, t = n = a([o.doc({ heading: "Regularizers", namespace: "regularizers" })], t);var n;
      }(c);n.L1L2 = p, l.ClassNameMap.register("L1L2", p), n.l1 = function (e) {
        return new p({ l1: null != e ? e.l1 : null, l2: 0 });
      }, n.l2 = function (e) {
        return new p({ l2: null != e ? e.l2 : null, l1: 0 });
      }, n.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = { l1l2: "L1L2" }, n.serializeRegularizer = function (e) {
        return l.serializeKerasObject(e);
      }, n.deserializeRegularizer = r, n.getRegularizer = function (e) {
        return null == e ? null : "string" == typeof e ? r({ className: e in n.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? n.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e, config: {} }) : e instanceof c ? e : r(e);
      };
    }, { "./backend/tfjs_backend": 100, "./types": 128, "./utils/generic_utils": 130, "@tensorflow/tfjs-core": 8 }], 128: [function (e, t, n) {
      "use strict";
      function r(e, t) {
        if (e.shape.toString() !== t.shape.toString()) throw new Error("Shape mismatch: " + (0, _stringify2.default)(e.shape) + " vs. " + (0, _stringify2.default)(t.shape));
      }function i(e) {
        return e instanceof p ? e.value() : e;
      }var a = this && this.__decorate || function (e, t, n, r) {
        var i,
            a = arguments.length,
            o = a < 3 ? t : null === r ? r = (0, _getOwnPropertyDescriptor2.default)(t, n) : r;if ("object" == (typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) {
          (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);
        }return a > 3 && o && (0, _defineProperty2.default)(t, n, o), o;
      };Object.defineProperty(n, "__esModule", { value: !0 });var o,
          s = e("@tensorflow/tfjs-core"),
          u = e("./common");!function (e) {
        e.float32 = "float32", e.int32 = "int32", e.bool = "bool";
      }(o = n.DType || (n.DType = {}));var l = 0,
          c = function () {
        function e(e, t, n, r, i, a, o) {
          this.dtype = e, this.shape = t, this.sourceLayer = n, this.inputs = r, this.callArgs = i, this.outputTensorIndex = o, this.id = l++, null != a && (this.originalName = u.getScopedTensorName(a), this.name = u.getUniqueTensorName(this.originalName));
        }return e = a([s.doc({ heading: "Models", subheading: "Classes" })], e);
      }();n.SymbolicTensor = c;var p = function () {
        function e(e, t) {
          this.dtype = o.float32, this.shape = e.shape, this.val = e, this.id = l++, null != t && (this.originalName = u.getScopedTensorName(t), this.name = u.getUniqueTensorName(this.originalName));
        }return e.prototype.value = function () {
          return this.val;
        }, e;
      }();n.ConcreteTensor = p;var h = "Variable",
          d = function () {
        function e(e, t, n, r, a) {
          void 0 === t && (t = o.float32), void 0 === n && (n = h), void 0 === r && (r = !0), void 0 === a && (a = null), this.dtype = null == t ? o.float32 : t, this.shape = e.shape, this.id = l++, n = null == n ? h : n, this.originalName = u.getScopedTensorName(n), this.name = u.getUniqueTensorName(this.originalName), this.trainable = r, this.constraint = a, this.val = s.variable(i(e), this.trainable, this.name, this.dtype);
        }return e.prototype.read = function () {
          return this.val;
        }, e.prototype.write = function (e) {
          return r(this.val, e), this.val.assign(i(e)), null != this.constraint && this.val.assign(this.constraint.apply(this.val)), this;
        }, e;
      }();n.LayerVariable = d;var f = function () {
        return function () {};
      }();n.Serializable = f;
    }, { "./common": 102, "@tensorflow/tfjs-core": 8 }], 129: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });var r = e("../errors"),
          i = e("./generic_utils"),
          a = e("./math_utils");n.normalizeArray = function (e, t, n) {
        if ("number" == typeof e) return i.pyListRepeat(e, t);if (e.length !== t) throw new r.ValueError("The " + n + " argument must be a tuple of " + t + " integers. Received: " + e.length + " elements.");for (var o = 0; o < t; ++o) {
          var s = e[o];if (!a.isInteger(s)) throw new r.ValueError("The " + n + " argument must be a tuple of " + t + " integers. Received: " + (0, _stringify2.default)(e) + " including a non-integer number " + s);
        }return e;
      }, n.convOutputLength = function (e, t, n, r, i) {
        if (void 0 === i && (i = 1), null == e) return e;var a,
            o = t + (t - 1) * (i - 1);return a = "same" === n ? e : e - o + 1, Math.floor((a + r - 1) / r);
      }, n.deconvLength = function (e, t, n, i) {
        if (null == e) return null;if ("valid" === i) e = e * t + a.max([n - t, 0]);else {
          if ("same" !== i) throw new r.ValueError("Unsupport padding mode: " + i + ".");e *= t;
        }return e;
      };
    }, { "../errors": 107, "./generic_utils": 130, "./math_utils": 131 }], 130: [function (e, t, n) {
      "use strict";
      function r(e) {
        return Array.isArray(e) ? e : [e];
      }function i(e, t) {
        return e < t ? -1 : e > t ? 1 : 0;
      }var a = this && this.__assign || _assign2.default || function (e) {
        for (var t, n = 1, r = arguments.length; n < r; n++) {
          t = arguments[n];for (var i in t) {
            Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
          }
        }return e;
      };Object.defineProperty(n, "__esModule", { value: !0 });var o = e("../errors"),
          s = e("../types");n.pyListRepeat = function (e, t) {
        if (Array.isArray(e)) {
          for (var n = [], r = 0; r < t; r++) {
            n = n.concat(e);
          }return n;
        }return (n = new Array(t)).fill(e), n;
      }, n.pyGetAttr = function (e, t, n) {
        if (t in e) return e[t];if (void 0 === n) throw new o.AttributeError("pyGetAttr: Attempting to get attribute " + t + "with no default value defined");return n;
      }, n.pyNormalizeArrayIndex = function (e, t) {
        if (null == e || null == t) throw new o.ValueError("Must provide a valid array and index for pyNormalizeArrayIndex(). Got array " + e + " and index " + t + ".");var n = "Index " + t + " out of range for array of length " + e.length;if (t < 0) {
          if (t < -e.length) throw new o.IndexError(n);return e.length + t;
        }if (t >= e.length) throw new o.IndexError(n);return t;
      }, n.assert = function (e, t) {
        if (!e) throw new o.AssertionError(t);
      }, n.count = function (e, t) {
        for (var n = 0, r = 0, i = e; r < i.length; r++) {
          i[r] === t && n++;
        }return n;
      };var u = function () {
        function e() {
          this.pythonClassNameMap = {};
        }return e.getMap = function () {
          return null == e.instance && (e.instance = new e()), e.instance;
        }, e.register = function (e, t) {
          this.getMap().pythonClassNameMap[e] = [t, t.fromConfig];
        }, e;
      }();n.ClassNameMap = u;var l = function () {
        function e() {
          this.enumRegistry = {};
        }return e.getMap = function () {
          return null == e.instance && (e.instance = new e()), e.instance;
        }, e.register = function (t, n) {
          if (e.contains(t)) throw new o.ValueError("Attempting to register a repeated enum: " + t);this.getMap().enumRegistry[t] = n;
        }, e.contains = function (e) {
          return e in this.getMap().enumRegistry;
        }, e.lookup = function (e, t) {
          return this.getMap().enumRegistry[e][t];
        }, e.reverseLookup = function (e, t) {
          var n = this.getMap().enumRegistry[e];for (var r in n) {
            if (n[r] === t) return r;
          }throw new o.ValueError("Could not find serialization string for " + t);
        }, e;
      }();n.SerializableEnumRegistry = l, n.singletonOrArray = function (e) {
        return 1 === e.length ? e[0] : e;
      }, n.toList = r, n.objectListUid = function (e) {
        for (var t = "", n = 0, i = r(e); n < i.length; n++) {
          var a = i[n];if (null == a.id) throw new o.ValueError("Object " + a + " passed to objectListUid without an id");"" !== t && (t += ", "), t += Math.abs(a.id);
        }return t;
      }, n.isArrayOfShapes = function (e) {
        return Array.isArray(e) && Array.isArray(e[0]);
      }, n.normalizeShapeList = function (e) {
        return 0 === e.length ? [] : Array.isArray(e[0]) ? e : [e];
      }, n.toSnakeCase = function (e) {
        var t = e.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();return "_" !== t[0] ? t : "private" + t;
      }, n.toCamelCase = function (e) {
        return e.length <= 1 ? e : -1 === e.indexOf("_") ? e : e.replace(/[_]+(\w|$)/g, function (e, t) {
          return t.toUpperCase();
        });
      };var c = {};n.serializeKerasObject = function (e) {
        return null === e || void 0 === e ? null : { className: e.getClassName(), config: e.getConfig() };
      }, n.deserializeKerasObject = function (e, t, n, r) {
        if (void 0 === t && (t = {}), void 0 === n && (n = {}), void 0 === r && (r = "object"), "string" == typeof e) {
          var i = e,
              s = void 0;if (i in n) s = n[i];else if (i in c) s = c[i];else if (null == (s = t[i])) throw new o.ValueError("Unknown " + r + ": " + e);return s;
        }var u = e;if (null == u.className || null == u.config) throw new o.ValueError(r + ": Improper config format: " + (0, _stringify2.default)(u) + ".\n'className' and 'config' must set.");var l = u.className,
            p = void 0,
            h = void 0;if (l in n ? (p = (T = n.get(l))[0], h = T[1]) : l in c ? (p = (S = c.className)[0], h = S[1]) : l in t && (p = (C = t[l])[0], h = C[1]), null == p) throw new o.ValueError("Unknown " + r + ": " + l);if (null != h) {
          for (var d = {}, f = 0, g = (0, _keys2.default)(c); f < g.length; f++) {
            d[E = g[f]] = c[E];
          }for (var m = 0, v = (0, _keys2.default)(n); m < v.length; m++) {
            d[E = v[m]] = n[E];
          }u.config.customObjects = d;for (var y = a({}, c), b = 0, w = (0, _keys2.default)(n); b < w.length; b++) {
            E = w[b], c[E] = n[E];
          }return _ = h(p, u.config), c = a({}, y), _;
        }for (var y = a({}, c), x = 0, A = (0, _keys2.default)(n); x < A.length; x++) {
          var E = A[x];c[E] = n[E];
        }var _ = new p(u.config);return c = a({}, y), _;var T, S, C;
      }, n.getExactlyOneTensor = function (e) {
        var t;if (Array.isArray(e)) {
          if (1 !== e.length) throw new o.ValueError("Expected Tensor length to be 1; got " + e.length);t = e[0];
        } else t = e;return t;
      }, n.getExactlyOneShape = function (e) {
        if (Array.isArray(e) && Array.isArray(e[0])) {
          if (1 === e.length) return (e = e)[0];throw new o.ValueError("Expected exactly 1 Shape; got " + e.length);
        }return e;
      }, n.numberCompare = i, n.reverseNumberCompare = function (e, t) {
        return -1 * i(e, t);
      }, n.stringToDType = function (e) {
        switch (e) {case "float32":
            return s.DType.float32;default:
            throw new o.ValueError("Invalid dtype: " + e);}
      }, n.stringsEqual = function (e, t) {
        if (null == e || null == t) return e === t;if (e.length !== t.length) return !1;for (var n = 0; n < e.length; ++n) {
          if (e[n] !== t[n]) return !1;
        }return !0;
      }, n.unique = function (e) {
        if (null == e) return e;for (var t = [], n = 0, r = e; n < r.length; n++) {
          var i = r[n];-1 === t.indexOf(i) && t.push(i);
        }return t;
      }, n.isObjectEmpty = function (e) {
        if (null == e) throw new o.ValueError("Invalid value in obj: " + (0, _stringify2.default)(e));for (var t in e) {
          if (e.hasOwnProperty(t)) return !1;
        }return !0;
      };
    }, { "../errors": 107, "../types": 128 }], 131: [function (e, t, n) {
      "use strict";
      function r(e) {
        return e = Array.isArray(e) ? new Float32Array(e) : e, s.tensor1d(e);
      }function i(e) {
        return o.sum(r(e)).dataSync()[0];
      }function a(e) {
        return i(e) / e.length;
      }Object.defineProperty(n, "__esModule", { value: !0 });var o = e("@tensorflow/tfjs-core"),
          s = e("@tensorflow/tfjs-core"),
          u = e("../errors");n.isInteger = function (e) {
        return e === parseInt(e.toString(), 10);
      }, n.arrayProd = function (e, t, n) {
        null == t && (t = 0), null == n && (n = e.length);for (var r = 1, i = t; i < n; ++i) {
          r *= e[i];
        }return r;
      }, n.min = function (e) {
        return o.min(r(e)).dataSync()[0];
      }, n.max = function (e) {
        return o.max(r(e)).dataSync()[0];
      }, n.sum = i, n.mean = a, n.variance = function (e) {
        var t = o.sub(r(e), s.scalar(a(e)));return o.sum(o.mulStrict(t, t)).dataSync()[0] / e.length;
      }, n.range = function (e, t) {
        if (t < e) throw new u.ValueError("end (" + t + ") < begin (" + e + ") is forbidden.");for (var n = [], r = e; r < t; ++r) {
          n.push(r);
        }return n;
      };
    }, { "../errors": 107, "@tensorflow/tfjs-core": 8 }], 132: [function (e, t, n) {
      "use strict";
      function r(e, t, n) {
        return ("inboundNodes" === e || "outputLayers" === e || "inputLayers" === e) && 0 === t && "string" == typeof n;
      }function i(e, t) {
        if (null === e) return null;if ("string" == typeof e) return s.toCamelCase(e);if ("number" == typeof e || "boolean" == typeof e) return e;if (e instanceof Array) {
          for (var n = [], a = e.length, u = 0; u < a; ++u) {
            var l = e[u];r(t, u, l) ? n.push(l) : n.push(i(l, t));
          }return n;
        }for (var c = {}, p = 0, h = (0, _keys2.default)(e); p < h.length; p++) {
          var d = h[p],
              f = e[d];if ("name" === d && "string" == typeof f) c[d] = f;else {
            var g = s.toCamelCase(d);if (!s.SerializableEnumRegistry.contains(d) || "string" != typeof f && null != f) c[g] = i(f, g);else {
              var m = s.SerializableEnumRegistry.lookup(d, f);if (null == m) throw new o.ValueError("Unkown value " + f + " for " + d + " Enum");c[g] = m;
            }
          }
        }return c;
      }function a(e, t) {
        if (null === e || void 0 === e) return null;if ("string" == typeof e) return s.toSnakeCase(e);if ("number" == typeof e || "boolean" == typeof e) return e;if (e instanceof Array) {
          for (var n = [], i = e.length, o = 0; o < i; ++o) {
            var u = e[o];r(t, o, u) ? n.push(u) : n.push(a(u, t));
          }return n;
        }for (var l = {}, c = 0, p = (0, _keys2.default)(e); c < p.length; c++) {
          var h = p[c],
              d = e[h],
              f = s.toSnakeCase(h);if ("name" !== h && "className" !== h || "string" != typeof d) {
            if (!s.SerializableEnumRegistry.contains(f) || "string" != typeof d && null != d) l[f] = a(d, h);else {
              var g = s.SerializableEnumRegistry.reverseLookup(f, d);l[f] = g;
            }
          } else l[f] = d;
        }return l;
      }Object.defineProperty(n, "__esModule", { value: !0 });var o = e("../errors"),
          s = e("../utils/generic_utils");n.convertPythonicToTs = i, n.convertTsToPythonic = a;
    }, { "../errors": 107, "../utils/generic_utils": 130 }], 133: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });n.version = "0.5.3";
    }, {}], 134: [function (e, t, n) {}, {}], 135: [function (e, t, n) {
      var r = e("./lib/alea"),
          i = e("./lib/xor128"),
          a = e("./lib/xorwow"),
          o = e("./lib/xorshift7"),
          s = e("./lib/xor4096"),
          u = e("./lib/tychei"),
          l = e("./seedrandom");l.alea = r, l.xor128 = i, l.xorwow = a, l.xorshift7 = o, l.xor4096 = s, l.tychei = u, t.exports = l;
    }, { "./lib/alea": 136, "./lib/tychei": 137, "./lib/xor128": 138, "./lib/xor4096": 139, "./lib/xorshift7": 140, "./lib/xorwow": 141, "./seedrandom": 142 }], 136: [function (e, t, n) {
      !function (e, t, n) {
        function r(e) {
          var t = this,
              n = o();t.next = function () {
            var e = 2091639 * t.s0 + 2.3283064365386963e-10 * t.c;return t.s0 = t.s1, t.s1 = t.s2, t.s2 = e - (t.c = 0 | e);
          }, t.c = 1, t.s0 = n(" "), t.s1 = n(" "), t.s2 = n(" "), t.s0 -= n(e), t.s0 < 0 && (t.s0 += 1), t.s1 -= n(e), t.s1 < 0 && (t.s1 += 1), t.s2 -= n(e), t.s2 < 0 && (t.s2 += 1), n = null;
        }function i(e, t) {
          return t.c = e.c, t.s0 = e.s0, t.s1 = e.s1, t.s2 = e.s2, t;
        }function a(e, t) {
          var n = new r(e),
              a = t && t.state,
              o = n.next;return o.int32 = function () {
            return 4294967296 * n.next() | 0;
          }, o.double = function () {
            return o() + 1.1102230246251565e-16 * (2097152 * o() | 0);
          }, o.quick = o, a && ("object" == (typeof a === "undefined" ? "undefined" : (0, _typeof3.default)(a)) && i(a, n), o.state = function () {
            return i(n, {});
          }), o;
        }function o() {
          var e = 4022871197;return function (t) {
            t = t.toString();for (var n = 0; n < t.length; n++) {
              var r = .02519603282416938 * (e += t.charCodeAt(n));r -= e = r >>> 0, e = (r *= e) >>> 0, e += 4294967296 * (r -= e);
            }return 2.3283064365386963e-10 * (e >>> 0);
          };
        }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
          return a;
        }) : this.alea = a;
      }(0, "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && t, !1);
    }, {}], 137: [function (e, t, n) {
      !function (e, t, n) {
        function r(e) {
          var t = this,
              n = "";t.next = function () {
            var e = t.b,
                n = t.c,
                r = t.d,
                i = t.a;return e = e << 25 ^ e >>> 7 ^ n, n = n - r | 0, r = r << 24 ^ r >>> 8 ^ i, i = i - e | 0, t.b = e = e << 20 ^ e >>> 12 ^ n, t.c = n = n - r | 0, t.d = r << 16 ^ n >>> 16 ^ i, t.a = i - e | 0;
          }, t.a = 0, t.b = 0, t.c = -1640531527, t.d = 1367130551, e === Math.floor(e) ? (t.a = e / 4294967296 | 0, t.b = 0 | e) : n += e;for (var r = 0; r < n.length + 20; r++) {
            t.b ^= 0 | n.charCodeAt(r), t.next();
          }
        }function i(e, t) {
          return t.a = e.a, t.b = e.b, t.c = e.c, t.d = e.d, t;
        }function a(e, t) {
          var n = new r(e),
              a = t && t.state,
              o = function o() {
            return (n.next() >>> 0) / 4294967296;
          };return o.double = function () {
            do {
              var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === e);return e;
          }, o.int32 = n.next, o.quick = o, a && ("object" == (typeof a === "undefined" ? "undefined" : (0, _typeof3.default)(a)) && i(a, n), o.state = function () {
            return i(n, {});
          }), o;
        }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
          return a;
        }) : this.tychei = a;
      }(0, "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && t, !1);
    }, {}], 138: [function (e, t, n) {
      !function (e, t, n) {
        function r(e) {
          var t = this,
              n = "";t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.next = function () {
            var e = t.x ^ t.x << 11;return t.x = t.y, t.y = t.z, t.z = t.w, t.w ^= t.w >>> 19 ^ e ^ e >>> 8;
          }, e === (0 | e) ? t.x = e : n += e;for (var r = 0; r < n.length + 64; r++) {
            t.x ^= 0 | n.charCodeAt(r), t.next();
          }
        }function i(e, t) {
          return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t;
        }function a(e, t) {
          var n = new r(e),
              a = t && t.state,
              o = function o() {
            return (n.next() >>> 0) / 4294967296;
          };return o.double = function () {
            do {
              var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === e);return e;
          }, o.int32 = n.next, o.quick = o, a && ("object" == (typeof a === "undefined" ? "undefined" : (0, _typeof3.default)(a)) && i(a, n), o.state = function () {
            return i(n, {});
          }), o;
        }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
          return a;
        }) : this.xor128 = a;
      }(0, "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && t, !1);
    }, {}], 139: [function (e, t, n) {
      !function (e, t, n) {
        function r(e) {
          var t = this;t.next = function () {
            var e,
                n,
                r = t.w,
                i = t.X,
                a = t.i;return t.w = r = r + 1640531527 | 0, n = i[a + 34 & 127], e = i[a = a + 1 & 127], n ^= n << 13, e ^= e << 17, n ^= n >>> 15, e ^= e >>> 12, n = i[a] = n ^ e, t.i = a, n + (r ^ r >>> 16) | 0;
          }, function (e, t) {
            var n,
                r,
                i,
                a,
                o,
                s = [],
                u = 128;for (t === (0 | t) ? (r = t, t = null) : (t += "\0", r = 0, u = Math.max(u, t.length)), i = 0, a = -32; a < u; ++a) {
              t && (r ^= t.charCodeAt((a + 32) % t.length)), 0 === a && (o = r), r ^= r << 10, r ^= r >>> 15, r ^= r << 4, r ^= r >>> 13, a >= 0 && (o = o + 1640531527 | 0, i = 0 == (n = s[127 & a] ^= r + o) ? i + 1 : 0);
            }for (i >= 128 && (s[127 & (t && t.length || 0)] = -1), i = 127, a = 512; a > 0; --a) {
              r = s[i + 34 & 127], n = s[i = i + 1 & 127], r ^= r << 13, n ^= n << 17, r ^= r >>> 15, n ^= n >>> 12, s[i] = r ^ n;
            }e.w = o, e.X = s, e.i = i;
          }(t, e);
        }function i(e, t) {
          return t.i = e.i, t.w = e.w, t.X = e.X.slice(), t;
        }function a(e, t) {
          null == e && (e = +new Date());var n = new r(e),
              a = t && t.state,
              o = function o() {
            return (n.next() >>> 0) / 4294967296;
          };return o.double = function () {
            do {
              var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === e);return e;
          }, o.int32 = n.next, o.quick = o, a && (a.X && i(a, n), o.state = function () {
            return i(n, {});
          }), o;
        }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
          return a;
        }) : this.xor4096 = a;
      }(0, "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && t, !1);
    }, {}], 140: [function (e, t, n) {
      !function (e, t, n) {
        function r(e) {
          var t = this;t.next = function () {
            var e,
                n,
                r = t.x,
                i = t.i;return e = r[i], e ^= e >>> 7, n = e ^ e << 24, e = r[i + 1 & 7], n ^= e ^ e >>> 10, e = r[i + 3 & 7], n ^= e ^ e >>> 3, e = r[i + 4 & 7], n ^= e ^ e << 7, e = r[i + 7 & 7], e ^= e << 13, n ^= e ^ e << 9, r[i] = n, t.i = i + 1 & 7, n;
          }, function (e, t) {
            var n,
                r = [];if (t === (0 | t)) r[0] = t;else for (t = "" + t, n = 0; n < t.length; ++n) {
              r[7 & n] = r[7 & n] << 15 ^ t.charCodeAt(n) + r[n + 1 & 7] << 13;
            }for (; r.length < 8;) {
              r.push(0);
            }for (n = 0; n < 8 && 0 === r[n]; ++n) {}for (8 == n ? r[7] = -1 : r[n], e.x = r, e.i = 0, n = 256; n > 0; --n) {
              e.next();
            }
          }(t, e);
        }function i(e, t) {
          return t.x = e.x.slice(), t.i = e.i, t;
        }function a(e, t) {
          null == e && (e = +new Date());var n = new r(e),
              a = t && t.state,
              o = function o() {
            return (n.next() >>> 0) / 4294967296;
          };return o.double = function () {
            do {
              var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === e);return e;
          }, o.int32 = n.next, o.quick = o, a && (a.x && i(a, n), o.state = function () {
            return i(n, {});
          }), o;
        }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
          return a;
        }) : this.xorshift7 = a;
      }(0, "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && t, !1);
    }, {}], 141: [function (e, t, n) {
      !function (e, t, n) {
        function r(e) {
          var t = this,
              n = "";t.next = function () {
            var e = t.x ^ t.x >>> 2;return t.x = t.y, t.y = t.z, t.z = t.w, t.w = t.v, (t.d = t.d + 362437 | 0) + (t.v = t.v ^ t.v << 4 ^ e ^ e << 1) | 0;
          }, t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.v = 0, e === (0 | e) ? t.x = e : n += e;for (var r = 0; r < n.length + 64; r++) {
            t.x ^= 0 | n.charCodeAt(r), r == n.length && (t.d = t.x << 10 ^ t.x >>> 4), t.next();
          }
        }function i(e, t) {
          return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t.v = e.v, t.d = e.d, t;
        }function a(e, t) {
          var n = new r(e),
              a = t && t.state,
              o = function o() {
            return (n.next() >>> 0) / 4294967296;
          };return o.double = function () {
            do {
              var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === e);return e;
          }, o.int32 = n.next, o.quick = o, a && ("object" == (typeof a === "undefined" ? "undefined" : (0, _typeof3.default)(a)) && i(a, n), o.state = function () {
            return i(n, {});
          }), o;
        }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
          return a;
        }) : this.xorwow = a;
      }(0, "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && t, !1);
    }, {}], 142: [function (e, t, n) {
      !function (n, r) {
        function i(e, t, i) {
          var p = [],
              h = u(s((t = 1 == t ? { entropy: !0 } : t || {}).entropy ? [e, c(n)] : null == e ? l() : e, 3), p),
              b = new a(p),
              w = function w() {
            for (var e = b.g(f), t = m, n = 0; e < v;) {
              e = (e + n) * d, t *= d, n = b.g(1);
            }for (; e >= y;) {
              e /= 2, t /= 2, n >>>= 1;
            }return (e + n) / t;
          };return w.int32 = function () {
            return 0 | b.g(4);
          }, w.quick = function () {
            return b.g(4) / 4294967296;
          }, w.double = w, u(c(b.S), n), (t.pass || i || function (e, t, n, i) {
            return i && (i.S && o(i, b), e.state = function () {
              return o(b, {});
            }), n ? (r[g] = e, t) : e;
          })(w, h, "global" in t ? t.global : this == r, t.state);
        }function a(e) {
          var t,
              n = e.length,
              r = this,
              i = 0,
              a = r.i = r.j = 0,
              o = r.S = [];for (n || (e = [n++]); i < d;) {
            o[i] = i++;
          }for (i = 0; i < d; i++) {
            o[i] = o[a = b & a + e[i % n] + (t = o[i])], o[a] = t;
          }(r.g = function (e) {
            for (var t, n = 0, i = r.i, a = r.j, o = r.S; e--;) {
              t = o[i = b & i + 1], n = n * d + o[b & (o[i] = o[a = b & a + t]) + (o[a] = t)];
            }return r.i = i, r.j = a, n;
          })(d);
        }function o(e, t) {
          return t.i = e.i, t.j = e.j, t.S = e.S.slice(), t;
        }function s(e, t) {
          var n,
              r = [],
              i = typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);if (t && "object" == i) for (n in e) {
            try {
              r.push(s(e[n], t - 1));
            } catch (e) {}
          }return r.length ? r : "string" == i ? e : e + "\0";
        }function u(e, t) {
          for (var n, r = e + "", i = 0; i < r.length;) {
            t[b & i] = b & (n ^= 19 * t[b & i]) + r.charCodeAt(i++);
          }return c(t);
        }function l() {
          try {
            var e;return p && (e = p.randomBytes) ? e = e(d) : (e = new Uint8Array(d), (h.crypto || h.msCrypto).getRandomValues(e)), c(e);
          } catch (e) {
            var t = h.navigator,
                r = t && t.plugins;return [+new Date(), h, r, h.screen, c(n)];
          }
        }function c(e) {
          return String.fromCharCode.apply(0, e);
        }var p,
            h = this,
            d = 256,
            f = 6,
            g = "random",
            m = r.pow(d, f),
            v = r.pow(2, 52),
            y = 2 * v,
            b = d - 1;if (r["seed" + g] = i, u(r.random(), n), "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && t.exports) {
          t.exports = i;try {
            p = e("crypto");
          } catch (e) {}
        }
      }([], Math);
    }, { crypto: 134 }], 143: [function (e, t, n) {
      "use strict";
      function r(e) {
        for (var t in e) {
          n.hasOwnProperty(t) || (n[t] = e[t]);
        }
      }Object.defineProperty(n, "__esModule", { value: !0 }), r(e("@tensorflow/tfjs-core")), r(e("@tensorflow/tfjs-layers"));var i = e("@tensorflow/tfjs-core"),
          a = e("@tensorflow/tfjs-layers"),
          o = e("./version");n.version = { "tfjs-core": i.version_core, "tfjs-layers": a.version_layers, tfjs: o.version };
    }, { "./version": 144, "@tensorflow/tfjs-core": 8, "@tensorflow/tfjs-layers": 109 }], 144: [function (e, t, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: !0 });n.version = "0.10.3";
    }, {}] }, {}, [143])(143);
});
},{"babel-runtime/core-js/set":14,"babel-runtime/core-js/map":15,"babel-runtime/core-js/math/tanh":16,"babel-runtime/core-js/array/from":17,"babel-runtime/core-js/object/assign":18,"babel-runtime/core-js/object/create":19,"babel-runtime/core-js/object/set-prototype-of":20,"babel-runtime/core-js/json/stringify":21,"babel-runtime/core-js/math/atanh":22,"babel-runtime/core-js/math/acosh":23,"babel-runtime/core-js/math/asinh":24,"babel-runtime/core-js/math/cosh":25,"babel-runtime/core-js/math/sinh":26,"babel-runtime/core-js/math/log1p":27,"babel-runtime/core-js/math/expm1":28,"babel-runtime/core-js/object/keys":29,"babel-runtime/core-js/weak-map":30,"babel-runtime/core-js/symbol/iterator":31,"babel-runtime/core-js/symbol":32,"babel-runtime/core-js/promise":33,"babel-runtime/core-js/object/define-property":34,"babel-runtime/core-js/object/get-own-property-descriptor":35,"babel-runtime/helpers/typeof":36}],37:[function(require,module,exports) {
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],38:[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
},{"../core-js/object/define-property":34}],206:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isMobile() {
    var a = navigator.userAgent || navigator.vendor || window.opera;
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i
        .test(a) ||
        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i
            .test(a.substr(0, 4));
}
exports.isMobile = isMobile;

},{}],121:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function doc(info) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
    };
}
exports.doc = doc;

},{}],114:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tensor_1 = require("./tensor");
function assertArgumentIsTensor(x, argName, functionName) {
    assert(x instanceof tensor_1.Tensor, "Argument '" + argName + "' passed to '" + functionName + "' must be a Tensor, " +
        ("but got " + typeof x + "."));
}
function assertArgumentsAreTensors(args, functionName) {
    var _loop_1 = function (argName) {
        var arg = args[argName];
        if (Array.isArray(arg)) {
            arg.forEach(function (t, i) {
                assertArgumentIsTensor(t, argName + "[" + i + "]", functionName);
            });
        }
        else {
            assertArgumentIsTensor(arg, argName, functionName);
        }
    };
    for (var argName in args) {
        _loop_1(argName);
    }
}
exports.assertArgumentsAreTensors = assertArgumentsAreTensors;
function shuffle(array) {
    var counter = array.length;
    var temp = 0;
    var index = 0;
    while (counter > 0) {
        index = (Math.random() * counter) | 0;
        counter--;
        temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
    }
}
exports.shuffle = shuffle;
function clamp(min, x, max) {
    return Math.max(min, Math.min(x, max));
}
exports.clamp = clamp;
function randUniform(a, b) {
    return Math.random() * (b - a) + a;
}
exports.randUniform = randUniform;
function distSquared(a, b) {
    var result = 0;
    for (var i = 0; i < a.length; i++) {
        var diff = Number(a[i]) - Number(b[i]);
        result += diff * diff;
    }
    return result;
}
exports.distSquared = distSquared;
function assert(expr, msg) {
    if (!expr) {
        throw new Error(msg);
    }
}
exports.assert = assert;
function assertShapesMatch(shapeA, shapeB, errorMessagePrefix) {
    if (errorMessagePrefix === void 0) { errorMessagePrefix = ''; }
    assert(arraysEqual(shapeA, shapeB), errorMessagePrefix + (" Shapes " + shapeA + " and " + shapeB + " must match"));
}
exports.assertShapesMatch = assertShapesMatch;
function assertTypesMatch(a, b) {
    assert(a.dtype === b.dtype, " The dtypes of the first(" + a.dtype + ") and" +
        (" second(" + b.dtype + ") input must match"));
}
exports.assertTypesMatch = assertTypesMatch;
function flatten(arr, ret) {
    if (ret === void 0) { ret = []; }
    if (Array.isArray(arr)) {
        for (var i = 0; i < arr.length; ++i) {
            flatten(arr[i], ret);
        }
    }
    else {
        ret.push(arr);
    }
    return ret;
}
exports.flatten = flatten;
function inferShape(val) {
    if (isTypedArray(val)) {
        return [val.length];
    }
    if (!Array.isArray(val)) {
        return [];
    }
    var shape = [];
    while (val instanceof Array) {
        shape.push(val.length);
        val = val[0];
    }
    return shape;
}
exports.inferShape = inferShape;
function sizeFromShape(shape) {
    if (shape.length === 0) {
        return 1;
    }
    var size = shape[0];
    for (var i = 1; i < shape.length; i++) {
        size *= shape[i];
    }
    return size;
}
exports.sizeFromShape = sizeFromShape;
function isScalarShape(shape) {
    return shape.length === 0;
}
exports.isScalarShape = isScalarShape;
function arraysEqual(n1, n2) {
    if (n1.length !== n2.length) {
        return false;
    }
    for (var i = 0; i < n1.length; i++) {
        if (n1[i] !== n2[i]) {
            return false;
        }
    }
    return true;
}
exports.arraysEqual = arraysEqual;
function isInt(a) {
    return a % 1 === 0;
}
exports.isInt = isInt;
function tanh(x) {
    if (Math.tanh != null) {
        return Math.tanh(x);
    }
    if (x === Infinity) {
        return 1;
    }
    else if (x === -Infinity) {
        return -1;
    }
    else {
        var e2x = Math.exp(2 * x);
        return (e2x - 1) / (e2x + 1);
    }
}
exports.tanh = tanh;
function sizeToSquarishShape(size) {
    for (var a = Math.floor(Math.sqrt(size)); a > 1; --a) {
        if (size % a === 0) {
            return [a, size / a];
        }
    }
    return [1, size];
}
exports.sizeToSquarishShape = sizeToSquarishShape;
function createShuffledIndices(n) {
    var shuffledIndices = new Uint32Array(n);
    for (var i = 0; i < n; ++i) {
        shuffledIndices[i] = i;
    }
    shuffle(shuffledIndices);
    return shuffledIndices;
}
exports.createShuffledIndices = createShuffledIndices;
function rightPad(a, size) {
    if (size <= a.length) {
        return a;
    }
    return a + ' '.repeat(size - a.length);
}
exports.rightPad = rightPad;
function repeatedTry(checkFn, delayFn, maxCounter) {
    if (delayFn === void 0) { delayFn = function (counter) { return 0; }; }
    return new Promise(function (resolve, reject) {
        var tryCount = 0;
        var tryFn = function () {
            if (checkFn()) {
                resolve();
                return;
            }
            tryCount++;
            var nextBackoff = delayFn(tryCount);
            if (maxCounter != null && tryCount >= maxCounter) {
                reject();
                return;
            }
            setTimeout(tryFn, nextBackoff);
        };
        setTimeout(tryFn, 0);
    });
}
exports.repeatedTry = repeatedTry;
function getQueryParams(queryString) {
    var params = {};
    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (s) {
        var t = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            t[_i - 1] = arguments[_i];
        }
        decodeParam(params, t[0], t[1]);
        return t.join('=');
    });
    return params;
}
exports.getQueryParams = getQueryParams;
function decodeParam(params, name, value) {
    params[decodeURIComponent(name)] = decodeURIComponent(value || '');
}
function inferFromImplicitShape(shape, size) {
    var shapeProd = 1;
    var implicitIdx = -1;
    for (var i = 0; i < shape.length; ++i) {
        if (shape[i] > 0) {
            shapeProd *= shape[i];
        }
        else if (shape[i] === -1) {
            if (implicitIdx !== -1) {
                throw Error("Shapes can only have 1 implicit size. " +
                    ("Found - 1 at dim " + implicitIdx + " and dim " + i));
            }
            implicitIdx = i;
        }
        else if (shape[i] <= 0) {
            throw Error("Shapes can not be <= 0. Found " + shape[i] + " at dim " + i);
        }
    }
    if (implicitIdx === -1) {
        if (size > 0 && size !== shapeProd) {
            throw Error("Size(" + size + ") must match the product of shape " + shape);
        }
        return shape;
    }
    if (size % shapeProd !== 0) {
        throw Error("The implicit shape can't be a fractional number. " +
            ("Got " + size + " / " + shapeProd));
    }
    var newShape = shape.slice();
    newShape[implicitIdx] = size / shapeProd;
    return newShape;
}
exports.inferFromImplicitShape = inferFromImplicitShape;
function squeezeShape(shape, axis) {
    var newShape = [];
    var keptDims = [];
    var j = 0;
    for (var i = 0; i < shape.length; ++i) {
        if (axis != null) {
            if (axis[j] === i && shape[i] > 1) {
                throw new Error("Can't squeeze axis " + i + " since its dim '" + shape[i] + "' is not 1");
            }
            if ((axis[j] == null || axis[j] > i) && shape[i] === 1) {
                newShape.push(shape[i]);
                keptDims.push(i);
            }
            if (axis[j] <= i) {
                j++;
            }
        }
        if (shape[i] > 1) {
            newShape.push(shape[i]);
            keptDims.push(i);
        }
    }
    return { newShape: newShape, keptDims: keptDims };
}
exports.squeezeShape = squeezeShape;
function getTypedArrayFromDType(dtype, size) {
    var values = null;
    if (dtype == null || dtype === 'float32') {
        values = new Float32Array(size);
    }
    else if (dtype === 'int32') {
        values = new Int32Array(size);
    }
    else if (dtype === 'bool') {
        values = new Uint8Array(size);
    }
    else {
        throw new Error("Unknown data type " + dtype);
    }
    return values;
}
exports.getTypedArrayFromDType = getTypedArrayFromDType;
function isTensorInList(tensor, tensorList) {
    for (var i = 0; i < tensorList.length; i++) {
        if (tensorList[i].id === tensor.id) {
            return true;
        }
    }
    return false;
}
exports.isTensorInList = isTensorInList;
function checkForNaN(vals, dtype, name) {
    if (dtype !== 'float32') {
        return;
    }
    for (var i = 0; i < vals.length; i++) {
        if (isNaN(vals[i])) {
            throw Error("The result of the '" + name + "' has NaNs.");
        }
    }
}
exports.checkForNaN = checkForNaN;
function flattenNameArrayMap(nameArrayMap, keys) {
    var xs = [];
    if (nameArrayMap instanceof tensor_1.Tensor) {
        xs.push(nameArrayMap);
    }
    else {
        var xMap = nameArrayMap;
        for (var i = 0; i < keys.length; i++) {
            xs.push(xMap[keys[i]]);
        }
    }
    return xs;
}
exports.flattenNameArrayMap = flattenNameArrayMap;
function unflattenToNameArrayMap(keys, flatArrays) {
    if (keys.length !== flatArrays.length) {
        throw new Error("Cannot unflatten Tensor[], keys and arrays are not of same length.");
    }
    var result = {};
    for (var i = 0; i < keys.length; i++) {
        result[keys[i]] = flatArrays[i];
    }
    return result;
}
exports.unflattenToNameArrayMap = unflattenToNameArrayMap;
function hasEncodingLoss(oldType, newType) {
    if (newType === 'float32') {
        return false;
    }
    if (newType === 'int32' && oldType !== 'float32') {
        return false;
    }
    if (newType === 'bool' && oldType === 'bool') {
        return false;
    }
    return true;
}
exports.hasEncodingLoss = hasEncodingLoss;
function copyTypedArray(array, dtype) {
    if (dtype == null || dtype === 'float32') {
        return new Float32Array(array);
    }
    else if (dtype === 'int32') {
        return new Int32Array(array);
    }
    else if (dtype === 'bool') {
        var bool = new Uint8Array(array.length);
        for (var i = 0; i < bool.length; ++i) {
            if (Math.round(array[i]) !== 0) {
                bool[i] = 1;
            }
        }
        return bool;
    }
    else {
        throw new Error("Unknown data type " + dtype);
    }
}
exports.copyTypedArray = copyTypedArray;
function isTypedArray(a) {
    return a instanceof Float32Array || a instanceof Int32Array ||
        a instanceof Uint8Array;
}
exports.isTypedArray = isTypedArray;
function bytesPerElement(dtype) {
    if (dtype === 'float32' || dtype === 'int32') {
        return 4;
    }
    else if (dtype === 'bool') {
        return 1;
    }
    else {
        throw new Error("Unknown dtype " + dtype);
    }
}
exports.bytesPerElement = bytesPerElement;
function isFunction(f) {
    return !!(f && f.constructor && f.call && f.apply);
}
exports.isFunction = isFunction;
function extractTensorsFromContainer(result) {
    return extractTensorsFromAny(result);
}
exports.extractTensorsFromContainer = extractTensorsFromContainer;
function extractTensorsFromAny(result) {
    if (result == null) {
        return [];
    }
    if (result instanceof tensor_1.Tensor) {
        return [result];
    }
    var list = [];
    var resultObj = result;
    if (!isIterable(resultObj)) {
        return [];
    }
    for (var k in resultObj) {
        var sublist = flatten(resultObj[k]).filter(function (x) { return x instanceof tensor_1.Tensor; });
        list.push.apply(list, sublist);
    }
    return list;
}
exports.extractTensorsFromAny = extractTensorsFromAny;
function isIterable(obj) {
    return Array.isArray(obj) || typeof obj === 'object';
}

},{"./tensor":117}],218:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("./util");
var FORMAT_LIMIT_NUM_VALS = 20;
var FORMAT_NUM_FIRST_LAST_VALS = 3;
var FORMAT_NUM_SIG_DIGITS = 7;
function tensorToString(t, verbose) {
    var vals = t.dataSync();
    var padPerCol = computeMaxSizePerColumn(t);
    var valsLines = subTensorToString(vals, t.shape, t.strides, padPerCol);
    var lines = ['Tensor'];
    if (verbose) {
        lines.push("  dtype: " + t.dtype);
        lines.push("  rank: " + t.rank);
        lines.push("  shape: [" + t.shape + "]");
        lines.push("  values:");
    }
    lines.push(valsLines.map(function (l) { return '    ' + l; }).join('\n'));
    return lines.join('\n');
}
exports.tensorToString = tensorToString;
function computeMaxSizePerColumn(t) {
    var vals = t.dataSync();
    var n = t.size;
    var numCols = t.strides[t.strides.length - 1];
    var padPerCol = new Array(numCols).fill(0);
    if (t.rank > 1) {
        for (var row = 0; row < n / numCols; row++) {
            var offset = row * numCols;
            for (var j = 0; j < numCols; j++) {
                padPerCol[j] =
                    Math.max(padPerCol[j], valToString(vals[offset + j], 0).length);
            }
        }
    }
    return padPerCol;
}
function valToString(val, pad) {
    return util.rightPad(parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), pad);
}
function subTensorToString(vals, shape, strides, padPerCol, isLast) {
    if (isLast === void 0) { isLast = true; }
    var size = shape[0];
    var rank = shape.length;
    if (rank === 0) {
        return [vals[0].toString()];
    }
    if (rank === 1) {
        if (size > FORMAT_LIMIT_NUM_VALS) {
            var firstVals = Array.from(vals.subarray(0, FORMAT_NUM_FIRST_LAST_VALS));
            var lastVals = Array.from(vals.subarray(size - FORMAT_NUM_FIRST_LAST_VALS, size));
            return [
                '[' + firstVals.map(function (x, i) { return valToString(x, padPerCol[i]); }).join(', ') +
                    ', ..., ' +
                    lastVals
                        .map(function (x, i) { return valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i]); })
                        .join(', ') +
                    ']'
            ];
        }
        return [
            '[' +
                Array.from(vals).map(function (x, i) { return valToString(x, padPerCol[i]); }).join(', ') +
                ']'
        ];
    }
    var subshape = shape.slice(1);
    var substrides = strides.slice(1);
    var stride = strides[0];
    var lines = [];
    if (size > FORMAT_LIMIT_NUM_VALS) {
        for (var i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {
            var start = i * stride;
            var end = start + stride;
            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, false));
        }
        lines.push('...');
        for (var i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {
            var start = i * stride;
            var end = start + stride;
            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));
        }
    }
    else {
        for (var i = 0; i < size; i++) {
            var start = i * stride;
            var end = start + stride;
            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));
        }
    }
    var sep = rank === 2 ? ',' : '';
    lines[0] = '[' + lines[0] + sep;
    for (var i = 1; i < lines.length - 1; i++) {
        lines[i] = ' ' + lines[i] + sep;
    }
    var newLineSep = ',\n';
    for (var i = 2; i < rank; i++) {
        newLineSep += '\n';
    }
    lines[lines.length - 1] =
        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);
    return lines;
}

},{"./util":114}],220:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
function axesAreInnerMostDims(axes, rank) {
    for (var i = 0; i < axes.length; ++i) {
        if (axes[axes.length - i - 1] !== rank - 1 - i) {
            return false;
        }
    }
    return true;
}
exports.axesAreInnerMostDims = axesAreInnerMostDims;
function combineLocations(outputLoc, reduceLoc, axes) {
    var rank = outputLoc.length + reduceLoc.length;
    var loc = [];
    var outIdx = 0;
    var reduceIdx = 0;
    for (var dim = 0; dim < rank; dim++) {
        if (axes.indexOf(dim) === -1) {
            loc.push(outputLoc[outIdx++]);
        }
        else {
            loc.push(reduceLoc[reduceIdx++]);
        }
    }
    return loc;
}
exports.combineLocations = combineLocations;
function computeOutAndReduceShapes(aShape, axes) {
    var outShape = [];
    var rank = aShape.length;
    for (var dim = 0; dim < rank; dim++) {
        if (axes.indexOf(dim) === -1) {
            outShape.push(aShape[dim]);
        }
    }
    var reduceShape = axes.map(function (dim) { return aShape[dim]; });
    return [outShape, reduceShape];
}
exports.computeOutAndReduceShapes = computeOutAndReduceShapes;
function expandShapeToKeepDim(shape, axes) {
    var reduceSubShape = axes.map(function (x) { return 1; });
    return combineLocations(shape, reduceSubShape, axes);
}
exports.expandShapeToKeepDim = expandShapeToKeepDim;
function parseAxisParam(axis, shape) {
    var rank = shape.length;
    axis = axis == null ? shape.map(function (s, i) { return i; }) : [].concat(axis);
    util.assert(axis.every(function (ax) { return ax >= -rank && ax < rank; }), "All values in axis param must be in range [-" + rank + ", " + rank + ") but " +
        ("got axis " + axis));
    util.assert(axis.every(function (ax) { return util.isInt(ax); }), "All values in axis param must be integers but " +
        ("got axis " + axis));
    return axis.map(function (a) { return a < 0 ? rank + a : a; });
}
exports.parseAxisParam = parseAxisParam;
function assertAxesAreInnerMostDims(msg, axes, rank) {
    util.assert(axesAreInnerMostDims(axes, rank), msg + " supports only inner-most axes for now. " +
        ("Got axes " + axes + " and rank-" + rank + " input."));
}
exports.assertAxesAreInnerMostDims = assertAxesAreInnerMostDims;
function getAxesPermutation(axes, rank) {
    if (axesAreInnerMostDims(axes, rank)) {
        return null;
    }
    var result = [];
    for (var i = 0; i < rank; ++i) {
        if (axes.indexOf(i) === -1) {
            result.push(i);
        }
    }
    axes.forEach(function (axis) { return result.push(axis); });
    return result;
}
exports.getAxesPermutation = getAxesPermutation;
function getUndoAxesPermutation(axes) {
    return axes.map(function (axis, i) { return [i, axis]; })
        .sort(function (a, b) { return a[1] - b[1]; })
        .map(function (x) { return x[0]; });
}
exports.getUndoAxesPermutation = getUndoAxesPermutation;
function getInnerMostAxes(numAxes, rank) {
    var res = [];
    for (var i = rank - numAxes; i < rank; ++i) {
        res.push(i);
    }
    return res;
}
exports.getInnerMostAxes = getInnerMostAxes;

},{"../util":114}],222:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
function assertParams(aShape, bShape, axis) {
    var aRank = aShape.length;
    var bRank = bShape.length;
    util.assert(aShape.length === bShape.length, "Error in concat" + aRank + "D: rank of x1 (" + aRank + ") and x2 (" + bRank + ") " +
        "must be the same.");
    util.assert(axis >= 0 && axis < aRank, "Error in concat" + aRank + "D: axis must be " +
        ("between 0 and " + (aRank - 1) + "."));
    for (var i = 0; i < aRank; i++) {
        util.assert((i === axis) || (aShape[i] === bShape[i]), "Error in concat" + aRank + "D: Shape (" + aShape + ") does not match " +
            ("(" + bShape + ") along the non-concatenated axis " + i + "."));
    }
}
exports.assertParams = assertParams;
function computeOutShape1D(x1Shape, x2Shape) {
    util.assert(x1Shape.length === 1 && x2Shape.length === 1, 'x1 and x2 should be 1d array.');
    var outputShape = x1Shape.slice();
    outputShape[0] += x2Shape[0];
    return outputShape;
}
exports.computeOutShape1D = computeOutShape1D;
function computeOutShape(x1Shape, x2Shape, axis) {
    util.assert(x1Shape.length === x2Shape.length, 'x1 and x2 should have the same rank.');
    var outputShape = x1Shape.slice();
    outputShape[axis] += x2Shape[axis];
    return outputShape;
}
exports.computeOutShape = computeOutShape;
function computeGradientSliceShapes(aShape, bShape) {
    return {
        aBegin: [0, 0],
        aSize: aShape,
        bBegin: [0, aShape[1]],
        bSize: bShape
    };
}
exports.computeGradientSliceShapes = computeGradientSliceShapes;

},{"../util":114}],229:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("../globals");
function operation(target, name, descriptor) {
    var fn = descriptor.value;
    descriptor.value = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return globals_1.tidy(name, function () { return fn.apply(void 0, args); });
    };
    return descriptor;
}
exports.operation = operation;

},{"../globals":120}],267:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var axis_util_1 = require("./axis_util");
var concat_util = require("./concat_util");
var operation_1 = require("./operation");
var ConcatOps = (function () {
    function ConcatOps() {
    }
    ConcatOps.concat1d = function (tensors) {
        return ConcatOps.concat(tensors, 0);
    };
    ConcatOps.concat2d = function (tensors, axis) {
        return ConcatOps.concat(tensors, axis);
    };
    ConcatOps.concat3d = function (tensors, axis) {
        return ConcatOps.concat(tensors, axis);
    };
    ConcatOps.concat4d = function (tensors, axis) {
        return ConcatOps.concat(tensors, axis);
    };
    ConcatOps.concat = function (tensors, axis) {
        if (axis === void 0) { axis = 0; }
        util.assert(tensors.length >= 1, 'Pass at least one tensor to concat');
        util.assertArgumentsAreTensors({ tensors: tensors }, 'concat');
        var result = tensors[0];
        if (tensors.length === 1) {
            return result;
        }
        var axes = axis_util_1.parseAxisParam(axis, result.shape);
        for (var i = 1; i < tensors.length; ++i) {
            result = concat2Tensors(result, tensors[i], axes[0]);
        }
        return result;
    };
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),
        operation_1.operation
    ], ConcatOps, "concat", null);
    return ConcatOps;
}());
exports.ConcatOps = ConcatOps;
function concat2Tensors(a, b, axis) {
    concat_util.assertParams(a.shape, b.shape, axis);
    var outShape = concat_util.computeOutShape(a.shape, b.shape, axis);
    var a2D = a.as2D(-1, util.sizeFromShape(a.shape.slice(axis)));
    var b2D = b.as2D(-1, util.sizeFromShape(b.shape.slice(axis)));
    var _a = concat_util.computeGradientSliceShapes(a2D.shape, b2D.shape), aBegin = _a.aBegin, aSize = _a.aSize, bBegin = _a.bBegin, bSize = _a.bSize;
    var der = function (dy) {
        return { a: function () { return dy.slice(aBegin, aSize); }, b: function () { return dy.slice(bBegin, bSize); } };
    };
    var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.concat(a2D, b2D); }, { a: a2D, b: b2D }, der);
    return res.reshape(outShape);
}

},{"../doc":121,"../environment":111,"../util":114,"./axis_util":220,"./concat_util":222,"./operation":229}],311:[function(require,module,exports) {
var define;
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = data.toString();
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.alea = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],312:[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor128 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],313:[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorwow = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],314:[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorshift7 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);


},{}],315:[function(require,module,exports) {
var define;
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);

},{}],316:[function(require,module,exports) {
var define;
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.tychei = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],325:[function(require,module,exports) {

},{}],310:[function(require,module,exports) {
var global = arguments[3];
var define;
/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ((typeof module) == 'object' && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = require('crypto');
  } catch (ex) {}
} else if ((typeof define) == 'function' && define.amd) {
  define(function() { return seedrandom; });
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);

},{"crypto":325}],228:[function(require,module,exports) {
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require('./lib/alea');

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require('./lib/xor128');

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require('./lib/xorwow');

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require('./lib/xorshift7');

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require('./lib/xor4096');

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require('./lib/tychei');

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require('./seedrandom');

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;

},{"./lib/alea":311,"./lib/xor128":312,"./lib/xorwow":313,"./lib/xorshift7":314,"./lib/xor4096":315,"./lib/tychei":316,"./seedrandom":310}],320:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var seedrandom = require("seedrandom");
var MPRandGauss = (function () {
    function MPRandGauss(mean, stdDeviation, dtype, truncated, seed) {
        this.mean = mean;
        this.stdDev = stdDeviation;
        this.dtype = dtype;
        this.nextVal = NaN;
        this.truncated = truncated;
        if (this.truncated) {
            this.upper = this.mean + this.stdDev * 2;
            this.lower = this.mean - this.stdDev * 2;
        }
        var seedValue = seed ? seed : Math.random();
        this.random = seedrandom.alea(seedValue.toString());
    }
    MPRandGauss.prototype.nextValue = function () {
        if (!isNaN(this.nextVal)) {
            var value = this.nextVal;
            this.nextVal = NaN;
            return value;
        }
        var resultX, resultY;
        var isValid = false;
        while (!isValid) {
            var v1 = void 0, v2 = void 0, s = void 0;
            do {
                v1 = 2 * this.random() - 1;
                v2 = 2 * this.random() - 1;
                s = v1 * v1 + v2 * v2;
            } while (s >= 1 || s === 0);
            var mul = Math.sqrt(-2.0 * Math.log(s) / s);
            resultX = this.mean + this.stdDev * v1 * mul;
            resultY = this.mean + this.stdDev * v2 * mul;
            if (!this.truncated || this.isValidTruncated(resultX)) {
                isValid = true;
            }
        }
        if (!this.truncated || this.isValidTruncated(resultY)) {
            this.nextVal = this.convertValue(resultY);
        }
        return this.convertValue(resultX);
    };
    MPRandGauss.prototype.convertValue = function (value) {
        if (this.dtype == null || this.dtype === 'float32') {
            return value;
        }
        return Math.round(value);
    };
    MPRandGauss.prototype.isValidTruncated = function (value) {
        return value <= this.upper && value >= this.lower;
    };
    return MPRandGauss;
}());
exports.MPRandGauss = MPRandGauss;

},{"seedrandom":228}],263:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var tensor_1 = require("../tensor");
var tensor_util = require("../tensor_util");
var util = require("../util");
var axis_util_1 = require("./axis_util");
var concat_1 = require("./concat");
var operation_1 = require("./operation");
var rand_1 = require("./rand");
var ArrayOps = (function () {
    function ArrayOps() {
    }
    ArrayOps.tensor = function (values, shape, dtype) {
        if (dtype === void 0) { dtype = 'float32'; }
        var inferredShape = util.inferShape(values);
        if (shape != null && inferredShape.length !== 1) {
            util.assertShapesMatch(shape, inferredShape, "Error creating a new Tensor. " +
                ("Inferred shape (" + inferredShape + ") does not match the ") +
                ("provided shape (" + shape + "). "));
        }
        if (!util.isTypedArray(values) && !Array.isArray(values)) {
            values = [values];
        }
        shape = shape || inferredShape;
        return tensor_1.Tensor.make(shape, { values: toTypedArray(values, dtype) }, dtype);
    };
    ArrayOps.scalar = function (value, dtype) {
        if (dtype === void 0) { dtype = 'float32'; }
        if (util.isTypedArray(value) || Array.isArray(value)) {
            throw new Error('Error creating a new Scalar: value must be a primitive ' +
                '(number|boolean)');
        }
        return ArrayOps.tensor(value, [], dtype);
    };
    ArrayOps.tensor1d = function (values, dtype) {
        if (dtype === void 0) { dtype = 'float32'; }
        var inferredShape = util.inferShape(values);
        if (inferredShape.length !== 1) {
            throw new Error('tensor1d() requires values to be a flat/TypedArray');
        }
        return ArrayOps.tensor(values, inferredShape, dtype);
    };
    ArrayOps.tensor2d = function (values, shape, dtype) {
        if (dtype === void 0) { dtype = 'float32'; }
        var inferredShape = util.inferShape(values);
        if (inferredShape.length !== 2 && inferredShape.length !== 1) {
            throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor2d() requires shape to be provided when `values` ' +
                'are a flat/TypedArray');
        }
        shape = shape || inferredShape;
        return ArrayOps.tensor(values, shape, dtype);
    };
    ArrayOps.tensor3d = function (values, shape, dtype) {
        if (dtype === void 0) { dtype = 'float32'; }
        var inferredShape = util.inferShape(values);
        if (inferredShape.length !== 3 && inferredShape.length !== 1) {
            throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor3d() requires shape to be provided when `values` ' +
                'are a flat array');
        }
        shape = shape || inferredShape;
        return ArrayOps.tensor(values, shape, dtype);
    };
    ArrayOps.tensor4d = function (values, shape, dtype) {
        if (dtype === void 0) { dtype = 'float32'; }
        var inferredShape = util.inferShape(values);
        if (inferredShape.length !== 4 && inferredShape.length !== 1) {
            throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor4d() requires shape to be provided when `values` ' +
                'are a flat array');
        }
        shape = shape || inferredShape;
        return ArrayOps.tensor(values, shape, dtype);
    };
    ArrayOps.ones = function (shape, dtype) {
        if (dtype === void 0) { dtype = 'float32'; }
        var values = makeOnesTypedArray(util.sizeFromShape(shape), dtype);
        return tensor_1.Tensor.make(shape, { values: values }, dtype);
    };
    ArrayOps.zeros = function (shape, dtype) {
        if (dtype === void 0) { dtype = 'float32'; }
        var values = makeZerosTypedArray(util.sizeFromShape(shape), dtype);
        return tensor_1.Tensor.make(shape, { values: values }, dtype);
    };
    ArrayOps.fill = function (shape, value, dtype) {
        if (dtype === void 0) { dtype = 'float32'; }
        var values = util.getTypedArrayFromDType(dtype, util.sizeFromShape(shape));
        values.fill(value);
        return tensor_1.Tensor.make(shape, { values: values }, dtype);
    };
    ArrayOps.onesLike = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'onesLike');
        return ArrayOps.ones(x.shape, x.dtype);
    };
    ArrayOps.zerosLike = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'zerosLike');
        return ArrayOps.zeros(x.shape, x.dtype);
    };
    ArrayOps.clone = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'clone');
        var der = function (dy) {
            return { x: function () { return dy.toFloat(); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) {
            return tensor_1.Tensor.make(x.shape, { dataId: x.dataId }, x.dtype);
        }, { x: x }, der);
    };
    ArrayOps.randomNormal = function (shape, mean, stdDev, dtype, seed) {
        if (mean === void 0) { mean = 0; }
        if (stdDev === void 0) { stdDev = 1; }
        if (dtype != null && dtype === 'bool') {
            throw new Error("Unsupported data type " + dtype);
        }
        var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, false, seed);
        var res = ArrayOps.buffer(shape, dtype);
        for (var i = 0; i < res.values.length; i++) {
            res.values[i] = randGauss.nextValue();
        }
        return res.toTensor();
    };
    ArrayOps.truncatedNormal = function (shape, mean, stdDev, dtype, seed) {
        if (mean === void 0) { mean = 0; }
        if (stdDev === void 0) { stdDev = 1; }
        if (dtype != null && dtype === 'bool') {
            throw new Error("Unsupported data type " + dtype);
        }
        var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, true, seed);
        var res = ArrayOps.buffer(shape, dtype);
        for (var i = 0; i < res.values.length; i++) {
            res.values[i] = randGauss.nextValue();
        }
        return res.toTensor();
    };
    ArrayOps.randomUniform = function (shape, minval, maxval, dtype) {
        if (minval === void 0) { minval = 0; }
        if (maxval === void 0) { maxval = 1; }
        if (dtype === void 0) { dtype = 'float32'; }
        var res = ArrayOps.buffer(shape, dtype);
        for (var i = 0; i < res.values.length; i++) {
            res.values[i] = util.randUniform(minval, maxval);
        }
        return res.toTensor();
    };
    ArrayOps.rand = function (shape, randFunction, dtype) {
        var size = util.sizeFromShape(shape);
        var values = null;
        if (dtype == null || dtype === 'float32') {
            values = new Float32Array(size);
        }
        else if (dtype === 'int32') {
            values = new Int32Array(size);
        }
        else if (dtype === 'bool') {
            values = new Uint8Array(size);
        }
        else {
            throw new Error("Unknown data type " + dtype);
        }
        for (var i = 0; i < size; i++) {
            values[i] = randFunction();
        }
        return tensor_1.Tensor.make(shape, { values: values }, dtype);
    };
    ArrayOps.multinomial = function (logits, numSamples, seed, normalized) {
        if (normalized === void 0) { normalized = false; }
        util.assertArgumentsAreTensors({ logits: logits }, 'multinomial');
        var numOutcomes = logits.size;
        var origRank = logits.rank;
        if (numOutcomes < 2) {
            throw new Error("Error in multinomial: you need at least 2 outcomes, but got " +
                (numOutcomes + "."));
        }
        if (origRank > 2) {
            throw new Error("Rank of probabilities must be 1 or 2, but is " + origRank);
        }
        seed = seed || Math.random();
        var logits2D = origRank === 1 ? logits.as2D(1, -1) : logits;
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.multinomial(logits2D, normalized, numSamples, seed); }, { logits2D: logits2D });
        return origRank === 1 ? res.as1D() : res;
    };
    ArrayOps.oneHot = function (indices, depth, onValue, offValue) {
        if (onValue === void 0) { onValue = 1; }
        if (offValue === void 0) { offValue = 0; }
        util.assert(indices.dtype === 'int32', 'Indices must be of dtype `int32`');
        if (depth < 2) {
            throw new Error("Error in oneHot: depth must be >=2, but it is " + depth);
        }
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.oneHot(indices, depth, onValue, offValue); }, { indices: indices });
    };
    ArrayOps.fromPixels = function (pixels, numChannels) {
        if (numChannels === void 0) { numChannels = 3; }
        if (numChannels > 4) {
            throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');
        }
        return environment_1.ENV.engine.fromPixels(pixels, numChannels);
    };
    ArrayOps.toPixels = function (img, canvas) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, height, width, depth, min, max, data, multiplier, bytes, i, r, g, b, a, j, ctx, imageData;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        util.assertArgumentsAreTensors({ img: img }, 'toPixels');
                        if (img.rank !== 2 && img.rank !== 3) {
                            throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + img.rank + ".");
                        }
                        _a = img.shape.slice(0, 2), height = _a[0], width = _a[1];
                        depth = img.rank === 2 ? 1 : img.shape[2];
                        if (depth > 4 || depth === 2) {
                            throw new Error("toPixels only supports depth of size " +
                                ("1, 3 or 4 but got " + depth));
                        }
                        return [4, img.min().data()];
                    case 1:
                        min = (_b.sent())[0];
                        return [4, img.max().data()];
                    case 2:
                        max = (_b.sent())[0];
                        if (img.dtype === 'float32') {
                            if (min < 0 || max > 1) {
                                throw new Error("Tensor values for a float32 Tensor must be in the " +
                                    ("range [0 - 1] but got range [" + min + " - " + max + "]."));
                            }
                        }
                        else if (img.dtype === 'int32') {
                            if (min < 0 || max > 255) {
                                throw new Error("Tensor values for a int32 Tensor must be in the " +
                                    ("range [0 - 255] but got range [" + min + " - " + max + "]."));
                            }
                        }
                        else {
                            throw new Error("Unsupported type for toPixels: " + img.dtype + "." +
                                " Please use float32 or int32 tensors.");
                        }
                        return [4, img.data()];
                    case 3:
                        data = _b.sent();
                        multiplier = img.dtype === 'float32' ? 255 : 1;
                        bytes = new Uint8ClampedArray(width * height * 4);
                        for (i = 0; i < height * width; ++i) {
                            r = void 0, g = void 0, b = void 0, a = void 0;
                            if (depth === 1) {
                                r = data[i] * multiplier;
                                g = data[i] * multiplier;
                                b = data[i] * multiplier;
                                a = 255;
                            }
                            else if (depth === 3) {
                                r = data[i * 3] * multiplier;
                                g = data[i * 3 + 1] * multiplier;
                                b = data[i * 3 + 2] * multiplier;
                                a = 255;
                            }
                            else if (depth === 4) {
                                r = data[i * 4] * multiplier;
                                g = data[i * 4 + 1] * multiplier;
                                b = data[i * 4 + 2] * multiplier;
                                a = data[i * 4 + 3] * multiplier;
                            }
                            j = i * 4;
                            bytes[j + 0] = Math.round(r);
                            bytes[j + 1] = Math.round(g);
                            bytes[j + 2] = Math.round(b);
                            bytes[j + 3] = Math.round(a);
                        }
                        if (canvas != null) {
                            canvas.width = width;
                            canvas.height = height;
                            ctx = canvas.getContext('2d');
                            imageData = new ImageData(bytes, width, height);
                            ctx.putImageData(imageData, 0, 0);
                        }
                        return [2, bytes];
                }
            });
        });
    };
    ArrayOps.reshape = function (x, shape) {
        util.assertArgumentsAreTensors({ x: x }, 'reshape');
        shape = util.inferFromImplicitShape(shape, x.size);
        util.assert(x.size === util.sizeFromShape(shape), 'new shape and old shape must have the same number of elements.');
        var grad = function (dy) {
            return { x: function () { return dy.reshape(x.shape); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.reshape(x, shape); }, { x: x }, grad);
    };
    ArrayOps.squeeze = function (x, axis) {
        util.assertArgumentsAreTensors({ x: x }, 'squeeze');
        return ArrayOps.reshape(x, util.squeezeShape(x.shape, axis).newShape);
    };
    ArrayOps.cast = function (x, dtype) {
        util.assertArgumentsAreTensors({ x: x }, 'cast');
        var grad = function (dy) {
            return { x: function () { return dy.clone(); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.cast(x, dtype); }, { x: x }, grad);
    };
    ArrayOps.tile = function (x, reps) {
        util.assertArgumentsAreTensors({ x: x }, 'tile');
        util.assert(x.rank === reps.length, "Error in transpose: rank of input " + x.rank + " " +
            ("must match length of reps " + reps + "."));
        var grad = function (dy) {
            var derX = function () {
                var xGrad = ArrayOps.zerosLike(x);
                if (x.rank === 1) {
                    for (var i = 0; i < reps[0]; ++i) {
                        xGrad = xGrad.add(dy.slice([i * x.shape[0]], [x.shape[0]]));
                    }
                }
                else if (x.rank === 2) {
                    for (var i = 0; i < reps[0]; ++i) {
                        for (var j = 0; j < reps[1]; ++j) {
                            xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));
                        }
                    }
                }
                else if (x.rank === 3) {
                    for (var i = 0; i < reps[0]; ++i) {
                        for (var j = 0; j < reps[1]; ++j) {
                            for (var k = 0; k < reps[2]; ++k) {
                                xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));
                            }
                        }
                    }
                }
                else if (x.rank === 4) {
                    for (var i = 0; i < reps[0]; ++i) {
                        for (var j = 0; j < reps[1]; ++j) {
                            for (var k = 0; k < reps[2]; ++k) {
                                for (var l = 0; l < reps[3]; ++l) {
                                    xGrad = xGrad.add(dy.slice([
                                        i * x.shape[0], j * x.shape[1], k * x.shape[2],
                                        l * x.shape[3]
                                    ], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));
                                }
                            }
                        }
                    }
                }
                else {
                    throw new Error("Gradient for tile operation is not implemented for rank-" +
                        (x.rank + " tensors yet."));
                }
                return xGrad;
            };
            return { x: derX };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.tile(x, reps); }, { x: x }, grad);
    };
    ArrayOps.gather = function (x, indices, axis) {
        if (axis === void 0) { axis = 0; }
        util.assertArgumentsAreTensors({ x: x, indices: indices }, 'gather');
        util.assert(indices.dtype === 'int32', 'Indices must be of dtype `int32`');
        var axes = axis_util_1.parseAxisParam(axis, x.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.gather(x, indices, axes[0]); }, { x: x, indices: indices });
    };
    ArrayOps.pad1d = function (x, paddings, constantValue) {
        if (constantValue === void 0) { constantValue = 0; }
        util.assert(paddings.length === 2, 'Invalid number of paddings. Must be length of 2.');
        return ArrayOps.pad(x, [paddings], constantValue);
    };
    ArrayOps.pad2d = function (x, paddings, constantValue) {
        if (constantValue === void 0) { constantValue = 0; }
        util.assert(paddings.length === 2 && paddings[0].length === 2 &&
            paddings[1].length === 2, 'Invalid number of paddings. Must be length of 2 each.');
        return ArrayOps.pad(x, paddings, constantValue);
    };
    ArrayOps.pad3d = function (x, paddings, constantValue) {
        if (constantValue === void 0) { constantValue = 0; }
        util.assert(paddings.length === 3 && paddings[0].length === 2 &&
            paddings[1].length === 2 && paddings[2].length === 2, 'Invalid number of paddings. Must be length of 2 each.');
        return ArrayOps.pad(x, paddings, constantValue);
    };
    ArrayOps.pad4d = function (x, paddings, constantValue) {
        if (constantValue === void 0) { constantValue = 0; }
        util.assert(paddings.length === 4 && paddings[0].length === 2 &&
            paddings[1].length === 2 && paddings[2].length === 2 &&
            paddings[3].length === 2, 'Invalid number of paddings. Must be length of 2 each.');
        return ArrayOps.pad(x, paddings, constantValue);
    };
    ArrayOps.pad = function (x, paddings, constantValue) {
        if (constantValue === void 0) { constantValue = 0; }
        util.assertArgumentsAreTensors({ x: x }, 'pad');
        if (x.rank === 0) {
            throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
        }
        var begin = paddings.map(function (p) { return p[0]; });
        var grad = function (dy) {
            return { x: function () { return dy.slice(begin, x.shape); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.pad(x, paddings, constantValue); }, { x: x }, grad);
    };
    ArrayOps.stack = function (tensors, axis) {
        if (axis === void 0) { axis = 0; }
        util.assertArgumentsAreTensors({ tensors: tensors }, 'stack');
        util.assert(tensors.length >= 1, 'Pass at least one tensor to tf.stack');
        if (tensors.length === 1) {
            return tensors[0].expandDims(axis);
        }
        var rank = tensors[0].rank;
        var shape = tensors[0].shape;
        var dtype = tensors[0].dtype;
        util.assert(axis <= rank, 'Axis must be <= rank of the tensor');
        tensors.forEach(function (t) {
            util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');
        });
        tensors.forEach(function (t) {
            util.assert(dtype === t.dtype, 'All tensors passed to stack must have matching dtypes');
        });
        var expandedTensors = tensors.map(function (t) { return t.expandDims(axis); });
        return concat_1.ConcatOps.concat(expandedTensors, axis);
    };
    ArrayOps.split = function (x, numOrSizeSplits, axis) {
        if (axis === void 0) { axis = 0; }
        util.assertArgumentsAreTensors({ x: x }, 'split');
        axis = axis_util_1.parseAxisParam(axis, x.shape)[0];
        var splitSizes;
        if (typeof (numOrSizeSplits) === 'number') {
            util.assert(x.shape[axis] % numOrSizeSplits === 0, 'Number of splits must evenly divide the axis.');
            splitSizes = Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);
        }
        else {
            util.assert(x.shape[axis] === numOrSizeSplits.reduce(function (a, b) { return a + b; }), 'The sum of sizes must match the size of the axis dimension.');
            splitSizes = numOrSizeSplits;
        }
        var begin = Array(x.rank).fill(0);
        var size = x.shape.slice();
        return splitSizes.map(function (s) {
            size[axis] = s;
            var slice = x.slice(begin, size);
            begin[axis] += s;
            return slice;
        });
    };
    ArrayOps.expandDims = function (x, axis) {
        if (axis === void 0) { axis = 0; }
        util.assertArgumentsAreTensors({ x: x }, 'expandDims');
        util.assert(axis <= x.rank, 'Axis must be <= rank of the tensor');
        var newShape = x.shape.slice();
        newShape.splice(axis, 0, 1);
        return ArrayOps.reshape(x, newShape);
    };
    ArrayOps.linspace = function (start, stop, num) {
        if (num === 0) {
            throw new Error('Cannot request zero samples');
        }
        var step = (stop - start) / (num - 1);
        var values = makeZerosTypedArray(num, 'float32');
        values[0] = start;
        for (var i = 1; i < values.length; i++) {
            values[i] = values[i - 1] + step;
        }
        return ArrayOps.tensor1d(values, 'float32');
    };
    ArrayOps.range = function (start, stop, step, dtype) {
        if (step === void 0) { step = 1; }
        if (dtype === void 0) { dtype = 'float32'; }
        if (step === 0) {
            throw new Error('Cannot have a step of zero');
        }
        var sameStartStop = start === stop;
        var increasingRangeNegativeStep = start < stop && step < 0;
        var decreasingRangePositiveStep = stop < start && step > 1;
        if (sameStartStop || increasingRangeNegativeStep ||
            decreasingRangePositiveStep) {
            return ArrayOps.zeros([0], dtype);
        }
        var numElements = Math.abs(Math.ceil((stop - start) / step));
        var values = makeZerosTypedArray(numElements, dtype);
        if (stop < start && step === 1) {
            step = -1;
        }
        values[0] = start;
        for (var i = 1; i < values.length; i++) {
            values[i] = values[i - 1] + step;
        }
        return ArrayOps.tensor1d(values, dtype);
    };
    ArrayOps.buffer = function (shape, dtype, values) {
        if (dtype === void 0) { dtype = 'float32'; }
        return new tensor_1.TensorBuffer(shape, dtype, values);
    };
    ArrayOps.print = function (x, verbose) {
        if (verbose === void 0) { verbose = false; }
        console.log(tensor_util.tensorToString(x, verbose));
    };
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "tensor", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "scalar", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "tensor1d", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "tensor2d", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "tensor3d", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "tensor4d", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "ones", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "zeros", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "fill", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "onesLike", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "zerosLike", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "clone", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "randomNormal", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "truncatedNormal", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "randomUniform", null);
    __decorate([
        operation_1.operation
    ], ArrayOps, "rand", null);
    __decorate([
        operation_1.operation
    ], ArrayOps, "multinomial", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "oneHot", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),
        operation_1.operation
    ], ArrayOps, "fromPixels", null);
    __decorate([
        doc_1.doc({ heading: 'Visualization' })
    ], ArrayOps, "toPixels", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),
        operation_1.operation
    ], ArrayOps, "reshape", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' })
    ], ArrayOps, "squeeze", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),
        operation_1.operation
    ], ArrayOps, "cast", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),
        operation_1.operation
    ], ArrayOps, "tile", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),
        operation_1.operation
    ], ArrayOps, "gather", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),
        operation_1.operation
    ], ArrayOps, "pad", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),
        operation_1.operation
    ], ArrayOps, "stack", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),
        operation_1.operation
    ], ArrayOps, "split", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),
        operation_1.operation
    ], ArrayOps, "expandDims", null);
    __decorate([
        operation_1.operation,
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "linspace", null);
    __decorate([
        operation_1.operation,
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "range", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "buffer", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], ArrayOps, "print", null);
    return ArrayOps;
}());
exports.ArrayOps = ArrayOps;
function makeZerosTypedArray(size, dtype) {
    if (dtype == null || dtype === 'float32') {
        return new Float32Array(size);
    }
    else if (dtype === 'int32') {
        return new Int32Array(size);
    }
    else if (dtype === 'bool') {
        return new Uint8Array(size);
    }
    else {
        throw new Error("Unknown data type $ {dtype}");
    }
}
function makeOnesTypedArray(size, dtype) {
    var array = makeZerosTypedArray(size, dtype);
    for (var i = 0; i < array.length; i++) {
        array[i] = 1;
    }
    return array;
}
function toTypedArray(a, dtype) {
    if (noConversionNeeded(a, dtype)) {
        return a;
    }
    if (Array.isArray(a)) {
        a = util.flatten(a);
    }
    return util.copyTypedArray(a, dtype);
}
function noConversionNeeded(a, dtype) {
    return (a instanceof Float32Array && dtype === 'float32') ||
        (a instanceof Int32Array && dtype === 'int32') ||
        (a instanceof Uint8Array && dtype === 'bool');
}

},{"../doc":121,"../environment":111,"../tensor":117,"../tensor_util":218,"../util":114,"./axis_util":220,"./concat":267,"./operation":229,"./rand":320}],221:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getBroadcastDims(inShape, outShape) {
    var inRank = inShape.length;
    var dims = [];
    for (var i = 0; i < inRank; i++) {
        var dim = inRank - 1 - i;
        var a = inShape[dim] || 1;
        var b = outShape[outShape.length - 1 - i] || 1;
        if (b > 1 && a === 1) {
            dims.unshift(dim);
        }
    }
    return dims;
}
exports.getBroadcastDims = getBroadcastDims;
function getReductionAxes(inShape, outShape) {
    var result = [];
    for (var i = 0; i < outShape.length; i++) {
        var inDim = inShape[inShape.length - i - 1];
        var outAxis = outShape.length - i - 1;
        var outDim = outShape[outAxis];
        if (inDim == null || (inDim === 1 && outDim > 1)) {
            result.unshift(outAxis);
        }
    }
    return result;
}
exports.getReductionAxes = getReductionAxes;
function broadcastDimsAreOuter(dims) {
    for (var i = 0; i < dims.length; i++) {
        if (dims[i] !== i) {
            return false;
        }
    }
    return true;
}
exports.broadcastDimsAreOuter = broadcastDimsAreOuter;
function assertAndGetBroadcastShape(shapeA, shapeB) {
    var result = [];
    var errMsg = "Operands could not be broadcast together with shapes " +
        (shapeA + " and " + shapeB + ".");
    var l = Math.max(shapeA.length, shapeB.length);
    for (var i = 0; i < l; i++) {
        var a = shapeA[shapeA.length - i - 1] || 1;
        var b = shapeB[shapeB.length - i - 1] || 1;
        if (a > 1 && b > 1 && a !== b) {
            throw Error(errMsg);
        }
        result.unshift(Math.max(a, b));
    }
    return result;
}
exports.assertAndGetBroadcastShape = assertAndGetBroadcastShape;

},{}],264:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var array_ops_1 = require("./array_ops");
var broadcast_util_1 = require("./broadcast_util");
var operation_1 = require("./operation");
var ops_1 = require("./ops");
var BatchNormOps = (function () {
    function BatchNormOps() {
    }
    BatchNormOps.batchNormalization2d = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }
        util.assert(x.rank === 2, "Error in batchNormalization3D: x must be rank 3 but got rank " +
            (x.rank + "."));
        util.assert(mean.rank === 2 || mean.rank === 1, "Error in batchNormalization2D: mean must be rank 2 or rank 1 but " +
            ("got rank " + mean.rank + "."));
        util.assert(variance.rank === 2 || variance.rank === 1, "Error in batchNormalization2D: variance must be rank 2 or rank 1 " +
            ("but got rank " + variance.rank + "."));
        if (scale != null) {
            util.assert(scale.rank === 2 || scale.rank === 1, "Error in batchNormalization2D: scale must be rank 2 or rank 1 " +
                ("but got rank " + scale.rank + "."));
        }
        if (offset != null) {
            util.assert(offset.rank === 2 || offset.rank === 1, "Error in batchNormalization2D: offset must be rank 2 or rank 1 " +
                ("but got rank " + offset.rank + "."));
        }
        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);
    };
    BatchNormOps.batchNormalization3d = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }
        util.assert(x.rank === 3, "Error in batchNormalization3D: x must be rank 3 but got rank " +
            (x.rank + "."));
        util.assert(mean.rank === 3 || mean.rank === 1, "Error in batchNormalization3D: mean must be rank 3 or rank 1 but " +
            ("got rank " + mean.rank + "."));
        util.assert(variance.rank === 3 || variance.rank === 1, "Error in batchNormalization3D: variance must be rank 3 or rank 1 " +
            ("but got rank " + variance.rank + "."));
        if (scale != null) {
            util.assert(scale.rank === 3 || scale.rank === 1, "Error in batchNormalization3D: scale must be rank 3 or rank 1 " +
                ("but got rank " + scale.rank + "."));
        }
        if (offset != null) {
            util.assert(offset.rank === 3 || offset.rank === 1, "Error in batchNormalization3D: offset must be rank 3 or rank 1 " +
                ("but got rank " + offset.rank + "."));
        }
        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);
    };
    BatchNormOps.batchNormalization4d = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }
        util.assert(x.rank === 4, "Error in batchNormalization4D: x must be rank 4 but got rank " +
            (x.rank + "."));
        util.assert(mean.rank === 4 || mean.rank === 1, "Error in batchNormalization4D: mean must be rank 4 or rank 1 but " +
            ("got rank " + mean.rank + "."));
        util.assert(variance.rank === 4 || variance.rank === 1, "Error in batchNormalization4D: variance must be rank 4 or rank 1 " +
            ("but got rank " + variance.rank + "."));
        if (scale != null) {
            util.assert(scale.rank === 4 || scale.rank === 1, "Error in batchNormalization4D: scale must be rank 4 or rank 1 " +
                ("but got rank " + scale.rank + "."));
        }
        if (offset != null) {
            util.assert(offset.rank === 4 || offset.rank === 1, "Error in batchNormalization4D: offset must be rank 4 or rank 1 " +
                ("but got rank " + offset.rank + "."));
        }
        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);
    };
    BatchNormOps.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }
        util.assertArgumentsAreTensors({ x: x, mean: mean, variance: variance }, 'batchNormalization');
        if (scale != null) {
            util.assertArgumentsAreTensors({ scale: scale }, 'batchNormalization');
        }
        if (offset != null) {
            util.assertArgumentsAreTensors({ offset: offset }, 'batchNormalization');
        }
        util.assert(mean.rank === variance.rank, 'Batch normalization gradient requires mean and variance to have ' +
            'equal ranks.');
        util.assert(offset == null || mean.rank === offset.rank, 'Batch normalization gradient requires mean and offset to have ' +
            'equal ranks.');
        util.assert(scale == null || mean.rank === scale.rank, 'Batch normalization gradient requires mean and scale to have ' +
            'equal ranks.');
        var x4D;
        if (x.rank === 0 || x.rank === 1) {
            x4D = x.as4D(1, 1, 1, x.size);
        }
        else if (x.rank === 2) {
            x4D = x.as4D(1, 1, x.shape[0], x.shape[1]);
        }
        else if (x.rank === 3) {
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        else {
            x4D = x;
        }
        var der = function (dy) {
            var scaleValue = scale == null ? array_ops_1.ArrayOps.scalar(1) : scale;
            var reductionAxes = broadcast_util_1.getReductionAxes(mean.shape, x4D.shape);
            var tileShape = [];
            if (mean.rank === 1) {
                for (var i = 0; i < x4D.shape.length - 1; ++i) {
                    tileShape.push(x4D.shape[i]);
                }
                tileShape.push(1);
            }
            var xMinusMean = x.sub(mean);
            var dyTimesScaleValue = dy.mul(scaleValue);
            var oneOverSqrtVariance = ops_1.rsqrt(variance.add(array_ops_1.ArrayOps.scalar(varianceEpsilon)));
            var minusHalfRCube = oneOverSqrtVariance.mul(oneOverSqrtVariance)
                .mul(oneOverSqrtVariance)
                .mul(array_ops_1.ArrayOps.scalar(-0.5));
            var derX = function () {
                if (mean.rank === 1) {
                    return dy
                        .mul(array_ops_1.ArrayOps.tile(oneOverSqrtVariance.as4D(1, 1, 1, mean.shape[0]), tileShape))
                        .mul(scaleValue)
                        .reshape(x.shape);
                }
                else {
                    return dy.mul(oneOverSqrtVariance).mul(scaleValue).reshape(x.shape);
                }
            };
            var derMean = function () {
                var meanDer = oneOverSqrtVariance.mul(array_ops_1.ArrayOps.scalar(-1)).mul(dyTimesScaleValue);
                if (mean.rank === 1) {
                    meanDer = meanDer.sum(reductionAxes);
                }
                return meanDer.reshape(mean.shape);
            };
            var derVariance = function () {
                var varianceDer = minusHalfRCube.mul(xMinusMean).mul(dyTimesScaleValue);
                if (mean.rank === 1) {
                    varianceDer = varianceDer.sum(reductionAxes);
                }
                return varianceDer.reshape(mean.shape);
            };
            var derScale = function () {
                var xMinusMean2TimesRsqrt = xMinusMean.mul(oneOverSqrtVariance);
                var scaleDer = dy.mul(xMinusMean2TimesRsqrt);
                if (mean.rank === 1) {
                    scaleDer = scaleDer.sum(reductionAxes);
                }
                return scaleDer.reshape(mean.shape);
            };
            var derOffset = function () {
                var offsetDer = dy;
                if (mean.rank === 1) {
                    offsetDer = offsetDer.sum(reductionAxes);
                }
                return offsetDer.reshape(mean.shape);
            };
            return {
                x: derX,
                mean: derMean,
                variance: derVariance,
                scale: derScale,
                offset: derOffset
            };
        };
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.batchNormalization(x4D, batchnormReshape4D(mean), batchnormReshape4D(variance), varianceEpsilon, batchnormReshape4D(scale), batchnormReshape4D(offset)); }, { x: x, mean: mean, variance: variance, scale: scale, offset: offset }, der);
        return res.reshape(x.shape);
    };
    __decorate([
        operation_1.operation
    ], BatchNormOps, "batchNormalization2d", null);
    __decorate([
        operation_1.operation
    ], BatchNormOps, "batchNormalization3d", null);
    __decorate([
        operation_1.operation
    ], BatchNormOps, "batchNormalization4d", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Normalization' })
    ], BatchNormOps, "batchNormalization", null);
    return BatchNormOps;
}());
exports.BatchNormOps = BatchNormOps;
function batchnormReshape4D(x) {
    if (x == null) {
        return null;
    }
    if (x.rank === 0) {
        return x.as1D();
    }
    else if (x.rank === 1) {
        return x;
    }
    else if (x.rank === 2) {
        return x.as4D(1, 1, x.shape[0], x.shape[1]);
    }
    else if (x.rank === 3) {
        return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
    }
    return x;
}

},{"../doc":121,"../environment":111,"../util":114,"./array_ops":263,"./broadcast_util":221,"./operation":229,"./ops":132}],116:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DType;
(function (DType) {
    DType["float32"] = "float32";
    DType["int32"] = "int32";
    DType["bool"] = "bool";
})(DType = exports.DType || (exports.DType = {}));
var Rank;
(function (Rank) {
    Rank["R0"] = "R0";
    Rank["R1"] = "R1";
    Rank["R2"] = "R2";
    Rank["R3"] = "R3";
    Rank["R4"] = "R4";
})(Rank = exports.Rank || (exports.Rank = {}));
var UpcastInt32AndMap;
(function (UpcastInt32AndMap) {
    UpcastInt32AndMap["float32"] = "float32";
    UpcastInt32AndMap["int32"] = "int32";
    UpcastInt32AndMap["bool"] = "int32";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
var UpcastBoolAndMap;
(function (UpcastBoolAndMap) {
    UpcastBoolAndMap["float32"] = "float32";
    UpcastBoolAndMap["int32"] = "int32";
    UpcastBoolAndMap["bool"] = "bool";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
var UpcastFloat32AndMap;
(function (UpcastFloat32AndMap) {
    UpcastFloat32AndMap["float32"] = "float32";
    UpcastFloat32AndMap["int32"] = "float32";
    UpcastFloat32AndMap["bool"] = "float32";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
var upcastTypeMap = {
    float32: UpcastFloat32AndMap,
    int32: UpcastInt32AndMap,
    bool: UpcastBoolAndMap
};
function upcastType(typeA, typeB) {
    return upcastTypeMap[typeA][typeB];
}
exports.upcastType = upcastType;
function sumOutType(type) {
    return upcastType(type, 'int32');
}
exports.sumOutType = sumOutType;

},{}],265:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var types_1 = require("../types");
var util = require("../util");
var broadcast_util = require("./broadcast_util");
var operation_1 = require("./operation");
var ops_1 = require("./ops");
var BinaryOps = (function () {
    function BinaryOps() {
    }
    BinaryOps.add = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'add');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var res = dy;
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(a.shape);
            };
            var derB = function () {
                var res = dy;
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(b.shape);
            };
            return { a: derA, b: derB };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.add(a, b); }, { a: a, b: b }, der);
    };
    BinaryOps.addStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in addStrict: ');
        return a.add(b);
    };
    BinaryOps.sub = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'sub');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var res = dy;
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(a.shape);
            };
            var derB = function () {
                var res = dy;
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.neg().reshape(b.shape);
            };
            return { a: derA, b: derB };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.subtract(a, b); }, { a: a, b: b }, der);
    };
    BinaryOps.subStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in subStrict: ');
        return a.sub(b);
    };
    BinaryOps.pow = function (base, exp) {
        util.assertArgumentsAreTensors({ base: base, exp: exp }, 'pow');
        var outShape = broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);
        base = base.cast(types_1.upcastType(base.dtype, exp.dtype));
        exp = exp.cast(types_1.upcastType(base.dtype, exp.dtype));
        var grad = function (dy, saved) {
            var y = saved[0];
            var derBase = function () {
                var res = dy.mul(exp.toFloat().mul(y.div(base)));
                var reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(base.shape);
            };
            var derExp = function () {
                var res = dy.mul(y.mul(base.log()).toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(exp.shape);
            };
            return { base: derBase, exp: derExp };
        };
        return environment_1.ENV.engine.runKernel(function (backend, save) { return save(backend.pow(base, exp)); }, { base: base, exp: exp }, grad);
    };
    BinaryOps.powStrict = function (base, exp) {
        util.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');
        return base.pow(exp);
    };
    BinaryOps.mul = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'mul');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var res = dy.mul(b.toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    return res.sum(reduceAxes).reshape(a.shape);
                }
                return res;
            };
            var derB = function () {
                var res = dy.mul(a.toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    return res.sum(reduceAxes).reshape(b.shape);
                }
                return res;
            };
            return { a: derA, b: derB };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.multiply(a, b); }, { a: a, b: b }, der);
    };
    BinaryOps.mulStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in multiplyStrict: ');
        return a.mul(b);
    };
    BinaryOps.div = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'div');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var res = dy.div(b.toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    return res.sum(reduceAxes).reshape(a.shape);
                }
                return res;
            };
            var derB = function () {
                var res = dy.mul(a.toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes).reshape(b.shape);
                }
                var tmp = b.square();
                return res.div(tmp.toFloat()).neg();
            };
            return { a: derA, b: derB };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.divide(a, b); }, { a: a, b: b }, der);
    };
    BinaryOps.divStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in divideStrict: ');
        return a.div(b);
    };
    BinaryOps.mod = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'mod');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    return dy.sum(reduceAxes).reshape(a.shape);
                }
                return dy;
            };
            var derB = function () {
                var res = dy.mul(a.div(b).floor().neg());
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    return res.sum(reduceAxes).reshape(b.shape);
                }
                return res;
            };
            return { a: derA, b: derB };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.mod(a, b); }, { a: a, b: b }, der);
    };
    BinaryOps.modStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in modStrict: ');
        return a.mod(b);
    };
    BinaryOps.minimum = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'minimum');
        util.assertTypesMatch(a, b);
        if (a.dtype === 'bool') {
            a = a.toInt();
        }
        if (b.dtype === 'bool') {
            b = b.toInt();
        }
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () { return dy.mul(a.lessEqual(b).toFloat()); };
            var derB = function () { return dy.mul(a.greater(b).toFloat()); };
            return { a: derA, b: derB };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.minimum(a, b); }, { a: a, b: b }, der);
    };
    BinaryOps.minimumStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');
        return a.minimum(b);
    };
    BinaryOps.maximum = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'maximum');
        util.assertTypesMatch(a, b);
        if (a.dtype === 'bool') {
            a = a.toInt();
        }
        if (b.dtype === 'bool') {
            b = b.toInt();
        }
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () { return dy.mul(a.greaterEqual(b).toFloat()); };
            var derB = function () { return dy.mul(a.less(b).toFloat()); };
            return { a: derA, b: derB };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.maximum(a, b); }, { a: a, b: b }, der);
    };
    BinaryOps.maximumStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');
        return a.maximum(b);
    };
    BinaryOps.squaredDifference = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'squaredDifference');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var two = ops_1.scalar(2);
            var derA = function () { return dy.mul(a.sub(b).mul(two)); };
            var derB = function () { return dy.mul(b.sub(a).mul(two)); };
            return { a: derA, b: derB };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.squaredDifference(a, b); }, { a: a, b: b }, der);
    };
    BinaryOps.squaredDifferenceStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in squaredDifferenceStrict: ');
        return a.squaredDifference(b);
    };
    BinaryOps.atan2 = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'atan2');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var d = BinaryOps.add(ops_1.square(a), ops_1.square(b));
                var res = dy.mul(b.div(d));
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(a.shape);
            };
            var derB = function () {
                var d = BinaryOps.add(ops_1.square(a), ops_1.square(b));
                var res = ops_1.neg(dy.mul(a.div(d)));
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(b.shape);
            };
            return { a: derA, b: derB };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.atan2(a, b); }, { a: a, b: b }, der);
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),
        operation_1.operation
    ], BinaryOps, "add", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "addStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),
        operation_1.operation
    ], BinaryOps, "sub", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "subStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),
        operation_1.operation
    ], BinaryOps, "pow", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "powStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),
        operation_1.operation
    ], BinaryOps, "mul", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "mulStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),
        operation_1.operation
    ], BinaryOps, "div", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "divStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),
        operation_1.operation
    ], BinaryOps, "mod", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "modStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),
        operation_1.operation
    ], BinaryOps, "minimum", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "minimumStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),
        operation_1.operation
    ], BinaryOps, "maximum", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "maximumStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),
        operation_1.operation
    ], BinaryOps, "squaredDifference", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "squaredDifferenceStrict", null);
    __decorate([
        operation_1.operation
    ], BinaryOps, "atan2", null);
    return BinaryOps;
}());
exports.BinaryOps = BinaryOps;

},{"../doc":121,"../environment":111,"../types":116,"../util":114,"./broadcast_util":221,"./operation":229,"./ops":132}],266:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var broadcast_util = require("./broadcast_util");
var operation_1 = require("./operation");
var CompareOps = (function () {
    function CompareOps() {
    }
    CompareOps.notEqual = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'notEqual');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.notEqual(a, b); }, { a: a, b: b });
    };
    CompareOps.notEqualStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in notEqualStrict: ');
        return a.notEqual(b);
    };
    CompareOps.less = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'less');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.less(a, b); }, { a: a, b: b });
    };
    CompareOps.lessStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in lessStrict: ');
        return a.less(b);
    };
    CompareOps.equal = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'equal');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.equal(a, b); }, { a: a, b: b });
    };
    CompareOps.equalStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in equalStrict: ');
        return a.equal(b);
    };
    CompareOps.lessEqual = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'lessEqual');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.lessEqual(a, b); }, { a: a, b: b });
    };
    CompareOps.lessEqualStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in lessEqualStrict: ');
        return a.lessEqual(b);
    };
    CompareOps.greater = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'greater');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.greater(a, b); }, { a: a, b: b });
    };
    CompareOps.greaterStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in greaterStrict: ');
        return a.greater(b);
    };
    CompareOps.greaterEqual = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'greaterEqual');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.greaterEqual(a, b); }, { a: a, b: b });
    };
    CompareOps.greaterEqualStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in greaterEqualStrict: ');
        return a.greaterEqual(b);
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], CompareOps, "notEqual", null);
    __decorate([
        operation_1.operation
    ], CompareOps, "notEqualStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], CompareOps, "less", null);
    __decorate([
        operation_1.operation
    ], CompareOps, "lessStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], CompareOps, "equal", null);
    __decorate([
        operation_1.operation
    ], CompareOps, "equalStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], CompareOps, "lessEqual", null);
    __decorate([
        operation_1.operation
    ], CompareOps, "lessEqualStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], CompareOps, "greater", null);
    __decorate([
        operation_1.operation
    ], CompareOps, "greaterStrict", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], CompareOps, "greaterEqual", null);
    __decorate([
        operation_1.operation
    ], CompareOps, "greaterEqualStrict", null);
    return CompareOps;
}());
exports.CompareOps = CompareOps;

},{"../doc":121,"../environment":111,"../util":114,"./broadcast_util":221,"./operation":229}],321:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
function computePool2DInfo(inShape, filterSize, strides, pad, roundingMode, dataFormat) {
    if (dataFormat === void 0) { dataFormat = 'channelsLast'; }
    var _a = parseTupleParam(filterSize), filterHeight = _a[0], filterWidth = _a[1];
    var filterShape;
    if (dataFormat === 'channelsLast') {
        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];
    }
    else if (dataFormat === 'channelsFirst') {
        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];
    }
    else {
        throw new Error("Unknown dataFormat " + dataFormat);
    }
    var dilations = 1;
    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
}
exports.computePool2DInfo = computePool2DInfo;
function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise, dataFormat) {
    if (depthwise === void 0) { depthwise = false; }
    if (dataFormat === void 0) { dataFormat = 'channelsLast'; }
    var _a = [-1, -1, -1, -1], batchSize = _a[0], inHeight = _a[1], inWidth = _a[2], inChannels = _a[3];
    if (dataFormat === 'channelsLast') {
        batchSize = inShape[0], inHeight = inShape[1], inWidth = inShape[2], inChannels = inShape[3];
    }
    else if (dataFormat === 'channelsFirst') {
        batchSize = inShape[0], inChannels = inShape[1], inHeight = inShape[2], inWidth = inShape[3];
    }
    else {
        throw new Error("Unknown dataFormat " + dataFormat);
    }
    var filterHeight = filterShape[0], filterWidth = filterShape[1], filterChannels = filterShape[3];
    var _b = parseTupleParam(strides), strideHeight = _b[0], strideWidth = _b[1];
    var _c = parseTupleParam(dilations), dilationHeight = _c[0], dilationWidth = _c[1];
    var effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    var effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    var _d = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode), padInfo = _d.padInfo, outHeight = _d.outHeight, outWidth = _d.outWidth;
    var outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    var outShape;
    if (dataFormat === 'channelsFirst') {
        outShape = [batchSize, outChannels, outHeight, outWidth];
    }
    else if (dataFormat === 'channelsLast') {
        outShape = [batchSize, outHeight, outWidth, outChannels];
    }
    return {
        batchSize: batchSize,
        dataFormat: dataFormat,
        inHeight: inHeight,
        inWidth: inWidth,
        inChannels: inChannels,
        outHeight: outHeight,
        outWidth: outWidth,
        outChannels: outChannels,
        padInfo: padInfo,
        strideHeight: strideHeight,
        strideWidth: strideWidth,
        filterHeight: filterHeight,
        filterWidth: filterWidth,
        dilationHeight: dilationHeight,
        dilationWidth: dilationWidth,
        inShape: inShape,
        outShape: outShape,
        filterShape: filterShape
    };
}
exports.computeConv2DInfo = computeConv2DInfo;
function computeOutputShape3D(inShape, fieldSize, outDepth, stride, zeroPad, roundingMode) {
    if (zeroPad == null) {
        zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    }
    var inputRows = inShape[0];
    var inputCols = inShape[1];
    var outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    util.assert(util.isInt(outputRows), "The output # of rows (" + outputRows + ") must be an integer. Change the " +
        "stride and/or zero pad parameters");
    var outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    util.assert(util.isInt(outputCols), "The output # of columns (" + outputCols + ") must be an integer. Change " +
        "the stride and/or zero pad parameters");
    return [outputRows, outputCols, outDepth];
}
function computeDefaultPad(inputShape, fieldSize, stride, dilation) {
    if (dilation === void 0) { dilation = 1; }
    var effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
}
exports.computeDefaultPad = computeDefaultPad;
function parseTupleParam(param) {
    return typeof param === 'number' ? [param, param] : param;
}
function getEffectiveFilterSize(filterSize, dilation) {
    if (dilation <= 1) {
        return filterSize;
    }
    return filterSize + (filterSize - 1) * (dilation - 1);
}
function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode) {
    var padInfo;
    var outHeight;
    var outWidth;
    if (typeof pad === 'number') {
        var padType = (pad === 0) ? 'VALID' : 'NUMBER';
        padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };
        var outShape = computeOutputShape3D([inHeight, inWidth, 1], filterHeight, 1, strideHeight, pad, roundingMode);
        outHeight = outShape[0];
        outWidth = outShape[1];
    }
    else if (pad === 'same') {
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        var padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
        var padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
        var top_1 = Math.floor(padAlongHeight / 2);
        var bottom = padAlongHeight - top_1;
        var left = Math.floor(padAlongWidth / 2);
        var right = padAlongWidth - left;
        padInfo = { top: top_1, bottom: bottom, left: left, right: right, type: 'SAME' };
    }
    else if (pad === 'valid') {
        padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    }
    else {
        throw Error("Unknown padding parameter: " + pad);
    }
    return { padInfo: padInfo, outHeight: outHeight, outWidth: outWidth };
}
function conditionalRound(value, roundingMode) {
    if (!roundingMode) {
        return value;
    }
    switch (roundingMode) {
        case 'round':
            return Math.round(value);
        case 'ceil':
            return Math.ceil(value);
        case 'floor':
            return Math.floor(value);
        default:
            throw new Error("Unknown roundingMode " + roundingMode);
    }
}

},{"../util":114}],268:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var conv_util = require("./conv_util");
var operation_1 = require("./operation");
var ConvOps = (function () {
    function ConvOps() {
    }
    ConvOps.conv1d = function (x, filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
        if (dataFormat === void 0) { dataFormat = 'NWC'; }
        if (dilation === void 0) { dilation = 1; }
        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'conv1d');
        var x3D = x;
        var reshapedTo3D = false;
        if (x.rank === 2) {
            reshapedTo3D = true;
            x3D = x.as3D(1, x.shape[0], x.shape[1]);
        }
        util.assert(x3D.rank === 3, "Error in conv1d: input must be rank 3, but got rank " + x3D.rank + ".");
        util.assert(filter.rank === 3, "Error in conv1d: filter must be rank 3, but got rank " +
            (filter.rank + "."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in conv1d: pad must be an integer when using, " +
                ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        util.assert(x3D.shape[2] === filter.shape[1], "Error in conv1d: depth of input (" + x3D.shape[2] + ") must match  " +
            ("input depth for filter " + filter.shape[1] + "."));
        util.assert(eitherStridesOrDilationsAreOne(stride, dilation), 'Error in conv1D: Either stride or dilation must be 1.' +
            ("Got stride " + stride + " and dilation '" + dilation + "'"));
        util.assert(dataFormat === 'NWC', "Error in conv1d: got dataFormat of " + dataFormat + " but only NWC is currently supported.");
        var filter4D = filter.as4D(1, filter.shape[0], filter.shape[1], filter.shape[2]);
        var input4D = x3D.as4D(x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]);
        var strides = [1, stride];
        var dilations = [1, dilation];
        var conv2dDataFormat = 'NHWC';
        var res = ConvOps.conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);
        if (reshapedTo3D) {
            return res.as2D(res.shape[2], res.shape[3]);
        }
        return res.as3D(res.shape[0], res.shape[2], res.shape[3]);
    };
    ConvOps.conv2d = function (x, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
        if (dataFormat === void 0) { dataFormat = 'NHWC'; }
        if (dilations === void 0) { dilations = [1, 1]; }
        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'conv2d');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in conv2d: input must be rank 4, but got rank " + x4D.rank + ".");
        util.assert(filter.rank === 4, "Error in conv2d: filter must be rank 4, but got rank " +
            (filter.rank + "."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in conv2d: pad must be an integer when using, " +
                ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        util.assert(x4D.shape[3] === filter.shape[2], "Error in conv2d: depth of input (" + x4D.shape[3] + ") must match  " +
            ("input depth for filter " + filter.shape[2] + "."));
        util.assert(eitherStridesOrDilationsAreOne(strides, dilations), 'Error in conv2D: Either strides or dilations must be 1.' +
            ("Got strides " + strides + " and dilations '" + dilations + "'"));
        util.assert(dataFormat === 'NHWC', "Error in conv2d: got dataFormat of " + dataFormat + " but only NHWC is currently supported.");
        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filter.shape, strides, dilations, pad, dimRoundingMode);
        var grad = function (dy) {
            util.assert(tupleValuesAreOne(dilations), 'Error in gradient of conv2D: dilation rates greater than 1 are not' +
                ("yet supported in gradients. Got dilations '" + dilations + "'"));
            return {
                x: function () { return ConvOps.conv2dDerInput(x4D.shape, dy, filter, strides, pad); },
                filter: function () {
                    return ConvOps.conv2dDerFilter(x4D, dy, filter.shape, strides, pad);
                }
            };
        };
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.conv2d(x4D, filter, convInfo); }, { x: x4D, filter: filter }, grad);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    ConvOps.conv2dDerInput = function (xShape, dy, filter, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ dy: dy, filter: filter }, 'conv2dDerInput');
        util.assert(xShape.length === dy.rank, "Length of inShape " +
            ("(" + xShape.length + ") and rank of dy (" + dy.rank + ") must match"));
        var xShape4D = xShape;
        var dy4D = dy;
        var reshapedTo4D = false;
        if (dy.rank === 3) {
            reshapedTo4D = true;
            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);
            xShape4D = [1, xShape[0], xShape[1], xShape[2]];
        }
        var inDepth = xShape4D[3];
        var outDepth = dy4D.shape[3];
        util.assert(xShape4D.length === 4, "Error in conv2dDerInput: inShape must be length 4, but got length " +
            (xShape4D.length + "."));
        util.assert(dy4D.rank === 4, "Error in conv2dDerInput: dy must be rank 4, but got " +
            ("rank " + dy4D.rank));
        util.assert(filter.rank === 4, "Error in conv2dDerInput: filter must be rank 4, but got " +
            ("rank " + filter.rank));
        util.assert(inDepth === filter.shape[2], "Error in conv2dDerInput: depth of input (" + inDepth + ") must " +
            ("match input depth for filter " + filter.shape[2] + "."));
        util.assert(outDepth === filter.shape[3], "Error in conv2dDerInput: depth of output (" + outDepth + ") must" +
            ("match output depth for filter " + filter.shape[3] + "."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in conv2dDerInput: pad must be an integer when using, " +
                ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var dilations = 1;
        var convInfo = conv_util.computeConv2DInfo(xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode);
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.conv2dDerInput(dy4D, filter, convInfo); }, { dy4D: dy4D });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    ConvOps.conv2dDerFilter = function (x, dy, filterShape, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ x: x, dy: dy }, 'conv2dDerFilter');
        var x4D = x;
        if (x.rank === 3) {
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        var dy4D = dy;
        if (dy4D.rank === 3) {
            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in conv2dDerFilter: input must be rank 4, but got shape " +
            (x4D.shape + "."));
        util.assert(dy4D.rank === 4, "Error in conv2dDerFilter: dy must be rank 4, but got shape " +
            (dy4D.shape + "."));
        util.assert(filterShape.length === 4, "Error in conv2dDerFilter: filterShape must be length 4, but got " +
            (filterShape + "."));
        util.assert(x4D.shape[3] === filterShape[2], "Error in conv2dDerFilter: depth of input " + x4D.shape[3] + ") must " +
            ("match input depth in filter (" + filterShape[2] + "."));
        util.assert(dy4D.shape[3] === filterShape[3], "Error in conv2dDerFilter: depth of dy (" + dy4D.shape[3] + ") must " +
            ("match output depth for filter (" + filterShape[3] + ")."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in conv2dDerFilter: pad must be an integer when using, " +
                ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var dilations = 1;
        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.conv2dDerFilter(x4D, dy4D, convInfo); }, { x4D: x4D, dy4D: dy4D });
    };
    ConvOps.conv2dTranspose = function (x, filter, outputShape, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'conv2dTranspose');
        return ConvOps.conv2dDerInput(outputShape, x, filter, strides, pad, dimRoundingMode);
    };
    ConvOps.depthwiseConv2d = function (x, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
        if (dataFormat === void 0) { dataFormat = 'NHWC'; }
        if (dilations === void 0) { dilations = [1, 1]; }
        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'depthwiseConv2d');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in depthwiseConv2D: input must be rank 4, but got " +
            ("rank " + x4D.rank + "."));
        util.assert(filter.rank === 4, "Error in depthwiseConv2D: filter must be rank 4, but got rank " +
            (filter.rank + "."));
        util.assert(x4D.shape[3] === filter.shape[2], "Error in depthwiseConv2D: number of input channels " +
            ("(" + x4D.shape[3] + ") must match the inChannels dimension in ") +
            ("filter " + filter.shape[2] + "."));
        if (dilations == null) {
            dilations = [1, 1];
        }
        util.assert(eitherStridesOrDilationsAreOne(strides, dilations), 'Error in depthwiseConv2d: Either strides or dilations must be 1.' +
            ("Got strides " + strides + " and dilations '" + dilations + "'"));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in depthwiseConv2D: pad must be an integer when using, " +
                ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filter.shape, strides, dilations, pad, dimRoundingMode, true);
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.depthwiseConv2D(x4D, filter, convInfo); }, { x4D: x4D, filter: filter });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    ConvOps.separableConv2d = function (x, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {
        if (dilation === void 0) { dilation = [1, 1]; }
        if (dataFormat === void 0) { dataFormat = 'NHWC'; }
        util.assertArgumentsAreTensors({ x: x, depthwiseFilter: depthwiseFilter, pointwiseFilter: pointwiseFilter }, 'separableConv2d');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        if (dataFormat === 'NCHW') {
            throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' +
                'NHWC is supported');
        }
        util.assert(x4D.rank === 4, "Error in separableConv2d: input must be rank 4, but got " +
            ("rank " + x4D.rank + "."));
        util.assert(depthwiseFilter.rank === 4, "Error in separableConv2d: depthwise filter must be rank 4, but got " +
            ("rank " + depthwiseFilter.rank + "."));
        util.assert(pointwiseFilter.rank === 4, "Error in separableConv2d: pointwise filter must be rank 4, but got " +
            ("rank " + depthwiseFilter.rank + "."));
        util.assert(pointwiseFilter.shape[0] === 1, "Error in separableConv2d: the first dimension of pointwise filter " +
            (" must be 1, but got " + pointwiseFilter.shape[0] + "."));
        util.assert(pointwiseFilter.shape[1] === 1, "Error in separableConv2d: the second dimension of pointwise filter " +
            (" must be 1, but got " + pointwiseFilter.shape[1] + "."));
        var inChannels = depthwiseFilter.shape[2];
        var channelMultiplier = depthwiseFilter.shape[3];
        util.assert(pointwiseFilter.shape[2] === inChannels * channelMultiplier, "Error in separableConv2d: the third dimension of pointwise filter " +
            ("must be " + inChannels * channelMultiplier + ", ") +
            ("but got " + pointwiseFilter.shape[2] + "."));
        var depthwise = ConvOps.depthwiseConv2d(x4D, depthwiseFilter, strides, pad, dataFormat, dilation);
        var pointwiseStride = 1;
        var res = ConvOps.conv2d(depthwise, pointwiseFilter, pointwiseStride, 'valid', dataFormat);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),
        operation_1.operation
    ], ConvOps, "conv1d", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),
        operation_1.operation
    ], ConvOps, "conv2d", null);
    __decorate([
        operation_1.operation
    ], ConvOps, "conv2dDerInput", null);
    __decorate([
        operation_1.operation
    ], ConvOps, "conv2dDerFilter", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),
        operation_1.operation
    ], ConvOps, "conv2dTranspose", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),
        operation_1.operation
    ], ConvOps, "depthwiseConv2d", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),
        operation_1.operation
    ], ConvOps, "separableConv2d", null);
    return ConvOps;
}());
exports.ConvOps = ConvOps;
function parseTupleParam(param) {
    return typeof param === 'number' ? [param, param] : param;
}
function tupleValuesAreOne(param) {
    var _a = parseTupleParam(param), dimA = _a[0], dimB = _a[1];
    return dimA === 1 && dimB === 1;
}
function eitherStridesOrDilationsAreOne(strides, dilations) {
    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
}

},{"../doc":121,"../environment":111,"../util":114,"./conv_util":321,"./operation":229}],269:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var operation_1 = require("./operation");
var ImageOps = (function () {
    function ImageOps() {
    }
    ImageOps.resizeBilinear = function (images, size, alignCorners) {
        if (alignCorners === void 0) { alignCorners = false; }
        util.assertArgumentsAreTensors({ images: images }, 'resizeBilinear');
        util.assert(images.rank === 3 || images.rank === 4, "Error in resizeBilinear: x must be rank 3 or 4, but got " +
            ("rank " + images.rank + "."));
        util.assert(size.length === 2, "Error in resizeBilinear: new shape must 2D, but got shape " +
            (size + "."));
        var batchImages = images;
        var reshapedTo4D = false;
        if (images.rank === 3) {
            reshapedTo4D = true;
            batchImages =
                images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);
        }
        var newHeight = size[0], newWidth = size[1];
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners); }, { batchImages: batchImages });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    ImageOps.resizeNearestNeighbor = function (images, size, alignCorners) {
        if (alignCorners === void 0) { alignCorners = false; }
        util.assertArgumentsAreTensors({ images: images }, 'resizeNearestNeighbor');
        util.assert(images.rank === 3 || images.rank === 4, "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got " +
            ("rank " + images.rank + "."));
        util.assert(size.length === 2, "Error in resizeNearestNeighbor: new shape must 2D, but got shape " +
            (size + "."));
        util.assert(images.dtype === 'float32' || images.dtype === 'int32', '`images` must have `int32` or `float32` as dtype');
        var batchImages = images;
        var reshapedTo4D = false;
        if (images.rank === 3) {
            reshapedTo4D = true;
            batchImages =
                images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);
        }
        var newHeight = size[0], newWidth = size[1];
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners); }, { batchImages: batchImages });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Images', namespace: 'image' }),
        operation_1.operation
    ], ImageOps, "resizeBilinear", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Images', namespace: 'image' }),
        operation_1.operation
    ], ImageOps, "resizeNearestNeighbor", null);
    return ImageOps;
}());
exports.ImageOps = ImageOps;

},{"../doc":121,"../environment":111,"../util":114,"./operation":229}],270:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var types = require("../types");
var util = require("../util");
var broadcast_util = require("./broadcast_util");
var operation_1 = require("./operation");
var LogicalOps = (function () {
    function LogicalOps() {
    }
    LogicalOps.logicalNot = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'logicalNot');
        util.assert(x.dtype === 'bool', 'Error Array must be of type bool.');
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalNot(x); }, { x: x });
    };
    LogicalOps.logicalAnd = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'logicalAnd');
        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalAnd(a, b); }, { a: a, b: b });
    };
    LogicalOps.logicalOr = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'logicalOr');
        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalOr(a, b); }, { a: a, b: b });
    };
    LogicalOps.logicalXor = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'logicalXor');
        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return LogicalOps.logicalOr(a, b).logicalAnd(LogicalOps.logicalAnd(a, b).logicalNot());
    };
    LogicalOps.where = function (condition, a, b) {
        util.assertArgumentsAreTensors({ condition: condition, a: a, b: b }, 'where');
        util.assert(condition.dtype === 'bool' || a.dtype === 'bool' || b.dtype === 'bool', 'Error Array must be of type bool.');
        util.assertShapesMatch(a.shape, b.shape, 'Error in where: ');
        if (condition.rank === 1) {
            util.assert(condition.shape[0] === a.shape[0], 'The first dimension of `a` must match the size of `condition`.');
        }
        else {
            util.assertShapesMatch(condition.shape, b.shape, 'Error in where: ');
        }
        var dtype = types.upcastType(a.dtype, b.dtype);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.where(condition, a, b, dtype); }, { condition: condition, a: a, b: b });
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], LogicalOps, "logicalNot", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], LogicalOps, "logicalAnd", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], LogicalOps, "logicalOr", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], LogicalOps, "logicalXor", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),
        operation_1.operation
    ], LogicalOps, "where", null);
    return LogicalOps;
}());
exports.LogicalOps = LogicalOps;

},{"../doc":121,"../environment":111,"../types":116,"../util":114,"./broadcast_util":221,"./operation":229}],133:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var util = require("../util");
var operation_1 = require("./operation");
var ops = require("./ops");
var Reduction;
(function (Reduction) {
    Reduction[Reduction["NONE"] = 0] = "NONE";
    Reduction[Reduction["MEAN"] = 1] = "MEAN";
    Reduction[Reduction["SUM"] = 2] = "SUM";
    Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Reduction = exports.Reduction || (exports.Reduction = {}));
var LossOps = (function () {
    function LossOps() {
    }
    LossOps.computeWeightedLoss = function (losses, weights, reduction) {
        if (reduction === void 0) { reduction = Reduction.SUM_BY_NONZERO_WEIGHTS; }
        util.assertArgumentsAreTensors({ losses: losses }, 'computeWeightedLoss');
        if (weights != null) {
            util.assertArgumentsAreTensors({ weights: weights }, 'computeWeightedLoss');
        }
        var weightedLoss = (weights == null) ? losses : losses.mul(weights);
        if (reduction === Reduction.NONE) {
            return weightedLoss;
        }
        if (reduction === Reduction.SUM) {
            return weightedLoss.sum();
        }
        if (reduction === Reduction.MEAN) {
            return (weights == null) ? weightedLoss.mean() :
                weightedLoss.sum().div(weights.sum());
        }
        if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {
            if (weights == null) {
                return weightedLoss.sum().div(ops.scalar(losses.size));
            }
            else {
                var numNonZeros = weights.notEqual(ops.scalar(0)).sum().toFloat();
                return weightedLoss.sum().div(numNonZeros);
            }
        }
        throw Error("Unknown reduction: " + reduction);
    };
    LossOps.absoluteDifference = function (labels, predictions, weights, reduction) {
        if (reduction === void 0) { reduction = Reduction.SUM_BY_NONZERO_WEIGHTS; }
        util.assertArgumentsAreTensors({ labels: labels, predictions: predictions }, 'absoluteDifference');
        if (weights != null) {
            util.assertArgumentsAreTensors({ weights: weights }, 'absoluteDifference');
        }
        util.assertShapesMatch(labels.shape, predictions.shape, 'Error in absoluteDifference: ');
        var losses = labels.sub(predictions).abs();
        return LossOps.computeWeightedLoss(losses, weights, reduction);
    };
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }),
        operation_1.operation
    ], LossOps, "computeWeightedLoss", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }),
        operation_1.operation
    ], LossOps, "absoluteDifference", null);
    return LossOps;
}());
exports.LossOps = LossOps;

},{"../doc":121,"../util":114,"./operation":229,"./ops":132}],271:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var operation_1 = require("./operation");
var LRNOps = (function () {
    function LRNOps() {
    }
    LRNOps.localResponseNormalization = function (x, radius, bias, alpha, beta) {
        if (radius === void 0) { radius = 5; }
        if (bias === void 0) { bias = 1; }
        if (alpha === void 0) { alpha = 1; }
        if (beta === void 0) { beta = 0.5; }
        util.assertArgumentsAreTensors({ x: x }, 'localResponseNormalization');
        util.assert(x.rank === 4 || x.rank === 3, "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + x.rank + ".");
        util.assert(util.isInt(radius), "Error in localResponseNormalization3D: radius must be an integer\n                     but got radius " + radius + ".");
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.localResponseNormalization4D(x4D, radius, bias, alpha, beta); }, { x4D: x4D });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        else {
            return res;
        }
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Normalization' }),
        operation_1.operation
    ], LRNOps, "localResponseNormalization", null);
    return LRNOps;
}());
exports.LRNOps = LRNOps;

},{"../doc":121,"../environment":111,"../util":114,"./operation":229}],272:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var util = require("../util");
var operation_1 = require("./operation");
var LSTMOps = (function () {
    function LSTMOps() {
    }
    LSTMOps.multiRNNCell = function (lstmCells, data, c, h) {
        util.assertArgumentsAreTensors({ data: data, c: c, h: h }, 'multiRNNCell');
        var input = data;
        var newStates = [];
        for (var i = 0; i < lstmCells.length; i++) {
            var output = lstmCells[i](input, c[i], h[i]);
            newStates.push(output[0]);
            newStates.push(output[1]);
            input = output[1];
        }
        var newC = [];
        var newH = [];
        for (var i = 0; i < newStates.length; i += 2) {
            newC.push(newStates[i]);
            newH.push(newStates[i + 1]);
        }
        return [newC, newH];
    };
    LSTMOps.basicLSTMCell = function (forgetBias, lstmKernel, lstmBias, data, c, h) {
        util.assertArgumentsAreTensors({ forgetBias: forgetBias, lstmKernel: lstmKernel, lstmBias: lstmBias, data: data, c: c, h: h }, 'basicLSTMCell');
        var combined = data.concat(h, 1);
        var weighted = combined.matMul(lstmKernel);
        var res = weighted.add(lstmBias);
        var batchSize = res.shape[0];
        var sliceCols = res.shape[1] / 4;
        var sliceSize = [batchSize, sliceCols];
        var i = res.slice([0, 0], sliceSize);
        var j = res.slice([0, sliceCols], sliceSize);
        var f = res.slice([0, sliceCols * 2], sliceSize);
        var o = res.slice([0, sliceCols * 3], sliceSize);
        var newC = i.sigmoid().mulStrict(j.tanh()).addStrict(c.mulStrict(forgetBias.add(f).sigmoid()));
        var newH = newC.tanh().mulStrict(o.sigmoid());
        return [newC, newH];
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'RNN' }),
        operation_1.operation
    ], LSTMOps, "multiRNNCell", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'RNN' }),
        operation_1.operation
    ], LSTMOps, "basicLSTMCell", null);
    return LSTMOps;
}());
exports.LSTMOps = LSTMOps;

},{"../doc":121,"../util":114,"./operation":229}],273:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var operation_1 = require("./operation");
var MatmulOps = (function () {
    function MatmulOps() {
    }
    MatmulOps.matMul = function (a, b, transposeA, transposeB) {
        if (transposeA === void 0) { transposeA = false; }
        if (transposeB === void 0) { transposeB = false; }
        util.assertArgumentsAreTensors({ a: a, b: b }, 'matMul');
        var innerShapeA = transposeA ? a.shape[0] : a.shape[1];
        var innerShapeB = transposeB ? b.shape[1] : b.shape[0];
        util.assert(a.rank === 2 && b.rank === 2, "Error in matMul: inputs must be rank 2, got ranks " + a.rank +
            (" and " + b.rank + "."));
        util.assert(innerShapeA === innerShapeB, "Error in matMul: inner shapes (" + innerShapeA + ") and (" +
            (innerShapeB + ") of Tensors with shapes " + a.shape + " and ") +
            (b.shape + " and transposeA=" + transposeA) +
            (" and transposeB=" + transposeB + " must match."));
        var grad = function (dy) {
            if (!transposeA && !transposeB) {
                return {
                    a: function () { return dy.matMul(b.toFloat(), false, true); },
                    b: function () { return a.toFloat().matMul(dy, true, false); }
                };
            }
            else if (!transposeA && transposeB) {
                return {
                    a: function () { return dy.matMul(b.toFloat(), false, false); },
                    b: function () { return dy.matMul(a.toFloat(), true, false); }
                };
            }
            else if (transposeA && !transposeB) {
                return {
                    a: function () { return b.toFloat().matMul(dy, false, true); },
                    b: function () { return a.toFloat().matMul(dy, false, false); }
                };
            }
            else {
                return {
                    a: function () { return b.toFloat().matMul(dy, true, true); },
                    b: function () { return dy.matMul(a.toFloat(), true, true); }
                };
            }
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.matMul(a, b, transposeA, transposeB); }, { a: a, b: b }, grad);
    };
    MatmulOps.vectorTimesMatrix = function (v, matrix) {
        util.assert(v.rank === 1, "Error in vectorTimesMatrix: first input must be rank 1, but got " +
            ("rank " + v.rank + "."));
        util.assert(matrix.rank === 2, "Error in vectorTimesMatrix: second input must be rank 2, but got " +
            ("rank " + matrix.rank + "."));
        util.assert(v.size === matrix.shape[0], "Error in vectorTimesMatrix: size of vector (" + v.size + ") " +
            ("must match first dimension of matrix (" + matrix.shape[0] + ")"));
        return v.as2D(1, -1).matMul(matrix).as1D();
    };
    MatmulOps.matrixTimesVector = function (matrix, v) {
        util.assert(v.rank === 1, "Error in matrixTimesVector: second input must rank 1, but got " +
            ("rank " + v.rank + "."));
        util.assert(matrix.rank === 2, "Error in matrixTimesVector: first input must be a rank 2, but got " +
            ("rank " + matrix.rank + "."));
        util.assert(v.size === matrix.shape[1], "Error in matrixTimesVector: size of first rank 1 input " + v.size + " " +
            "must match inner dimension of second rank 2 input, but got " +
            ("shape " + matrix.shape + "."));
        return matrix.matMul(v.as2D(-1, 1)).as1D();
    };
    MatmulOps.dotProduct = function (v1, v2) {
        util.assert(v1.rank === 1 && v2.rank === 1, "Error in dotProduct: inputs must be rank 1, but got ranks " +
            (v1.rank + " and " + v2.rank + "."));
        util.assert(v1.size === v2.size, "Error in dotProduct: size of inputs (" + v1.size + ") and (" +
            (v2.size + ") must match."));
        return v1.as2D(1, -1).matMul(v2.as2D(-1, 1)).asScalar();
    };
    MatmulOps.outerProduct = function (v1, v2) {
        util.assert(v1.rank === 1 && v2.rank === 1, "Error in outerProduct: inputs must be rank 1, but got ranks " +
            (v1.rank + " and " + v2.rank + "."));
        return v1.as2D(-1, 1).matMul(v2.as2D(1, -1));
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Matrices' }),
        operation_1.operation
    ], MatmulOps, "matMul", null);
    __decorate([
        operation_1.operation
    ], MatmulOps, "vectorTimesMatrix", null);
    __decorate([
        operation_1.operation
    ], MatmulOps, "matrixTimesVector", null);
    __decorate([
        operation_1.operation
    ], MatmulOps, "dotProduct", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Matrices' }),
        operation_1.operation
    ], MatmulOps, "outerProduct", null);
    return MatmulOps;
}());
exports.MatmulOps = MatmulOps;

},{"../doc":121,"../environment":111,"../util":114,"./operation":229}],274:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var util = require("../util");
var array_ops_1 = require("./array_ops");
var binary_ops_1 = require("./binary_ops");
var operation_1 = require("./operation");
var MovingAverageOps = (function () {
    function MovingAverageOps() {
    }
    MovingAverageOps.movingAverage = function (v, x, decay, step, zeroDebias) {
        if (zeroDebias === void 0) { zeroDebias = true; }
        util.assertArgumentsAreTensors({ v: v, x: x }, 'movingAverage');
        util.assertTypesMatch(v, x);
        util.assert(util.arraysEqual(v.shape, x.shape), 'Shape mismatch in v and x');
        var one = array_ops_1.ArrayOps.scalar(1);
        decay = typeof decay === 'number' ? array_ops_1.ArrayOps.scalar(decay) : decay;
        var oneMinusDecay = one.sub(decay);
        var update = x.sub(v).mul(oneMinusDecay);
        if (zeroDebias) {
            util.assert(step != null, 'When using zeroDebias: true, step is required.');
            step = typeof step === 'number' ? array_ops_1.ArrayOps.scalar(step) : step;
            update = update.div(one.sub(binary_ops_1.BinaryOps.pow(decay, step)));
        }
        return v.add(update);
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Moving Average' }),
        operation_1.operation
    ], MovingAverageOps, "movingAverage", null);
    return MovingAverageOps;
}());
exports.MovingAverageOps = MovingAverageOps;

},{"../doc":121,"../util":114,"./array_ops":263,"./binary_ops":265,"./operation":229}],275:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var util = require("../util");
var axis_util = require("./axis_util");
var operation_1 = require("./operation");
var ops = require("./ops");
var NormOps = (function () {
    function NormOps() {
    }
    NormOps.norm = function (x, ord, axis, keepDims) {
        if (ord === void 0) { ord = 'euclidean'; }
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        util.assertArgumentsAreTensors({ x: x }, 'norm');
        var norm = normImpl(x, ord, axis);
        var keepDimsShape = norm.shape;
        if (keepDims) {
            var axes = axis_util.parseAxisParam(axis, x.shape);
            keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);
        }
        return norm.reshape(keepDimsShape);
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Matrices' }),
        operation_1.operation
    ], NormOps, "norm", null);
    return NormOps;
}());
exports.NormOps = NormOps;
function normImpl(x, p, axis) {
    if (axis === void 0) { axis = null; }
    if (x.rank === 0) {
        return x.abs();
    }
    if (x.rank !== 1 && axis === null) {
        return normImpl(x.reshape([-1]), p, axis);
    }
    if (x.rank === 1 || typeof axis === 'number' ||
        axis instanceof Array && axis.length === 1) {
        if (p === 1) {
            return x.abs().sum(axis);
        }
        if (p === Infinity) {
            return x.abs().max(axis);
        }
        if (p === -Infinity) {
            return x.abs().min(axis);
        }
        if (p === 'euclidean' || p === 2) {
            return x.abs().pow(ops.scalar(2, 'int32')).sum(axis).sqrt();
        }
        throw new Error("Error in norm: invalid ord value: " + p);
    }
    if (axis instanceof Array && axis.length === 2) {
        if (p === 1) {
            return x.abs().sum(axis[0]).max(axis[1] - 1);
        }
        if (p === Infinity) {
            return x.abs().sum(axis[1]).max(axis[0]);
        }
        if (p === -Infinity) {
            return x.abs().sum(axis[1]).min(axis[0]);
        }
        if (p === 'fro' || p === 'euclidean') {
            return x.square().sum(axis).sqrt();
        }
        throw new Error("Error in norm: invalid ord value: " + p);
    }
    throw new Error("Error in norm: invalid axis: " + axis);
}

},{"../doc":121,"../util":114,"./axis_util":220,"./operation":229,"./ops":132}],276:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var conv_util = require("./conv_util");
var operation_1 = require("./operation");
var PoolOps = (function () {
    function PoolOps() {
    }
    PoolOps.maxPool = function (x, filterSize, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ x: x }, 'maxPool');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in maxPool: input must be rank 4 but got rank " + x4D.rank + ".");
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in maxPool: pad must be an integer when using, " +
                ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad, dimRoundingMode);
        var grad = function (dy, saved) {
            var y4D = saved[0];
            return {
                x: function () { return PoolOps.maxPoolBackprop(dy, x4D, y4D, filterSize, strides, pad); }
            };
        };
        var res = environment_1.ENV.engine.runKernel(function (backend, save) { return save(backend.maxPool(x4D, convInfo)); }, { x: x4D }, grad);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    PoolOps.maxPoolBackprop = function (dy, input, output, filterSize, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ dy: dy, input: input, output: output }, 'maxPoolBackprop');
        util.assert(input.rank === dy.rank, "Rank of input (" + input.rank + ") does not match rank of dy (" + dy.rank + ")");
        util.assert(dy.rank === 4, "Error in maxPoolBackprop: dy must be rank 4 but got rank " +
            (dy.rank + "."));
        util.assert(input.rank === 4, "Error in maxPoolBackprop: input must be rank 4 but got rank " +
            (input.rank + "."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in maxPoolBackprop: pad must be an integer when using, " +
                ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var convInfo = conv_util.computePool2DInfo(input.shape, filterSize, strides, pad, dimRoundingMode);
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.maxPoolBackprop(dy, input, output, convInfo); }, { dy: dy, input: input });
        return res;
    };
    PoolOps.avgPool = function (x, filterSize, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ x: x }, 'avgPool');
        util.assert(x.dtype === 'float32', 'The input dtype to avgPool must be float32');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in avgPool: x must be rank 4 but got rank " + x4D.rank + ".");
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in avgPool: pad must be an integer when using, " +
                ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad);
        var grad = function (dy) {
            return {
                x: function () { return PoolOps.avgPoolBackprop(dy, x4D, filterSize, strides, pad); }
            };
        };
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.avgPool(x4D, convInfo); }, { x: x4D }, grad);
        res = res.cast(x.dtype);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    PoolOps.avgPoolBackprop = function (dy, input, filterSize, strides, pad) {
        util.assertArgumentsAreTensors({ dy: dy, input: input }, 'avgPoolBackprop');
        util.assert(input.rank === dy.rank, "Rank of input (" + input.rank + ") does not match rank of dy (" + dy.rank + ")");
        var input4D = input;
        var dy4D = dy;
        var reshapedTo4D = false;
        if (input.rank === 3) {
            reshapedTo4D = true;
            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);
            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);
        }
        util.assert(dy4D.rank === 4, "Error in avgPoolBackprop: dy must be rank 4 but got rank " +
            (dy4D.rank + "."));
        util.assert(input4D.rank === 4, "Error in avgPoolBackprop: input must be rank 4 but got rank " +
            (input4D.rank + "."));
        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad);
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.avgPoolBackprop(dy4D, input4D, convInfo); }, { dy4D: dy4D, input4D: input4D });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),
        operation_1.operation
    ], PoolOps, "maxPool", null);
    __decorate([
        operation_1.operation
    ], PoolOps, "maxPoolBackprop", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),
        operation_1.operation
    ], PoolOps, "avgPool", null);
    __decorate([
        operation_1.operation
    ], PoolOps, "avgPoolBackprop", null);
    return PoolOps;
}());
exports.PoolOps = PoolOps;

},{"../doc":121,"../environment":111,"../util":114,"./conv_util":321,"./operation":229}],277:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var globals_1 = require("../globals");
var util = require("../util");
var axis_util = require("./axis_util");
var operation_1 = require("./operation");
var ops = require("./ops");
var ReductionOps = (function () {
    function ReductionOps() {
    }
    ReductionOps.logSumExp = function (x, axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        util.assertArgumentsAreTensors({ x: x }, 'logSumExp');
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var xMax = x.max(axes, true);
        var a = x.sub(xMax);
        var b = a.exp();
        var c = b.sum(axes);
        var d = c.log();
        var res = xMax.reshape(d.shape).add(d);
        if (keepDims) {
            var newShape = axis_util.expandShapeToKeepDim(res.shape, axes);
            return res.reshape(newShape);
        }
        return res;
    };
    ReductionOps.sum = function (x, axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        util.assertArgumentsAreTensors({ x: x }, 'sum');
        if (x.dtype === 'bool') {
            x = x.toInt();
        }
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var customOp = globals_1.customGrad(function (x) {
            var permutation = axis_util.getAxesPermutation(axes, x.rank);
            var reductionAxes = axes;
            var permutedX = x;
            if (permutation != null) {
                permutedX = x.transpose(permutation);
                reductionAxes =
                    axis_util.getInnerMostAxes(reductionAxes.length, x.rank);
            }
            var value = environment_1.ENV.engine.runKernel(function (backend) { return backend.sum(permutedX, reductionAxes); }, { permutedX: permutedX });
            if (keepDims) {
                var newShape = axis_util.expandShapeToKeepDim(value.shape, axes);
                value = value.reshape(newShape);
            }
            var gradFunc = function (dy) {
                var expandedDyShape = x.shape.slice();
                axes.forEach(function (axis) {
                    expandedDyShape[axis] = 1;
                });
                var expandedDy = dy.reshape(expandedDyShape);
                var derX = expandedDy.mul(ops.ones(x.shape, 'float32'));
                return derX;
            };
            return { value: value, gradFunc: gradFunc };
        });
        return customOp(x);
    };
    ReductionOps.mean = function (x, axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        util.assertArgumentsAreTensors({ x: x }, 'mean');
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var shapes = axis_util.computeOutAndReduceShapes(x.shape, axes);
        var reduceShape = shapes[1];
        var reduceSize = util.sizeFromShape(reduceShape);
        var customOp = globals_1.customGrad(function (x) {
            var reduceSizeScalar = ops.scalar(reduceSize);
            var xReduce = reduceSizeScalar.dtype === x.dtype ?
                x :
                x.cast(reduceSizeScalar.dtype);
            var res = xReduce.div(reduceSizeScalar);
            var value = res.sum(axis, keepDims);
            var gradFunc = function (dy) {
                var expandedDyShape = x.shape.slice();
                axes.forEach(function (axis) {
                    expandedDyShape[axis] = 1;
                });
                var expandedDy = dy.reshape(expandedDyShape);
                var derX = expandedDy.mul(ops.ones(x.shape, 'float32')).div(reduceSizeScalar);
                return derX;
            };
            return { value: value, gradFunc: gradFunc };
        });
        return customOp(x);
    };
    ReductionOps.min = function (x, axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        util.assertArgumentsAreTensors({ x: x }, 'min');
        var origAxes = axis_util.parseAxisParam(axis, x.shape);
        var axes = origAxes;
        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);
        if (permutedAxes != null) {
            x = x.transpose(permutedAxes);
            axes = axis_util.getInnerMostAxes(axes.length, x.rank);
        }
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.min(x, axes); }, { x: x });
        if (keepDims) {
            var newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);
            return res.reshape(newShape);
        }
        return res;
    };
    ReductionOps.max = function (x, axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        util.assertArgumentsAreTensors({ x: x }, 'max');
        var origAxes = axis_util.parseAxisParam(axis, x.shape);
        var axes = origAxes;
        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);
        if (permutedAxes != null) {
            x = x.transpose(permutedAxes);
            axes = axis_util.getInnerMostAxes(axes.length, x.rank);
        }
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.max(x, axes); }, { x: x });
        if (keepDims) {
            var newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);
            return res.reshape(newShape);
        }
        return res;
    };
    ReductionOps.argMin = function (x, axis) {
        if (axis === void 0) { axis = 0; }
        util.assertArgumentsAreTensors({ x: x }, 'argMin');
        if (axis == null) {
            axis = 0;
        }
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);
        if (permutedAxes != null) {
            x = x.transpose(permutedAxes);
            axes = axis_util.getInnerMostAxes(axes.length, x.rank);
        }
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.argMin(x, axes[0]); }, { x: x });
    };
    ReductionOps.argMax = function (x, axis) {
        if (axis === void 0) { axis = 0; }
        util.assertArgumentsAreTensors({ x: x }, 'argMax');
        if (axis == null) {
            axis = 0;
        }
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);
        if (permutedAxes != null) {
            x = x.transpose(permutedAxes);
            axes = axis_util.getInnerMostAxes(axes.length, x.rank);
        }
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.argMax(x, axes[0]); }, { x: x });
    };
    ReductionOps.moments = function (x, axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        util.assertArgumentsAreTensors({ x: x }, 'moments');
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var mean = x.mean(axes, keepDims);
        var keepDimsShape = mean.shape;
        if (!keepDims) {
            keepDimsShape = axis_util.expandShapeToKeepDim(mean.shape, axes);
        }
        var devSquared = x.toFloat().sub(mean.reshape(keepDimsShape)).square();
        var variance = devSquared.mean(axes, keepDims);
        return { mean: mean, variance: variance };
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }),
        operation_1.operation
    ], ReductionOps, "logSumExp", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }),
        operation_1.operation
    ], ReductionOps, "sum", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }),
        operation_1.operation
    ], ReductionOps, "mean", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }),
        operation_1.operation
    ], ReductionOps, "min", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }),
        operation_1.operation
    ], ReductionOps, "max", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }),
        operation_1.operation
    ], ReductionOps, "argMin", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }),
        operation_1.operation
    ], ReductionOps, "argMax", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Normalization' }),
        operation_1.operation
    ], ReductionOps, "moments", null);
    return ReductionOps;
}());
exports.ReductionOps = ReductionOps;

},{"../doc":121,"../environment":111,"../globals":120,"../util":114,"./axis_util":220,"./operation":229,"./ops":132}],278:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var axis_util_1 = require("./axis_util");
var operation_1 = require("./operation");
var ReverseOps = (function () {
    function ReverseOps() {
    }
    ReverseOps.reverse1d = function (x) {
        util.assert(x.rank === 1, "Error in reverse1D: x must be rank 1 but got\n             rank " + x.rank + ".");
        return ReverseOps.reverse(x, 0);
    };
    ReverseOps.reverse2d = function (x, axis) {
        util.assert(x.rank === 2, "Error in reverse2D: x must be rank 2 but got\n             rank " + x.rank + ".");
        return ReverseOps.reverse(x, axis);
    };
    ReverseOps.reverse3d = function (x, axis) {
        util.assert(x.rank === 3, "Error in reverse3D: x must be rank 3 but got\n             rank " + x.rank + ".");
        return ReverseOps.reverse(x, axis);
    };
    ReverseOps.reverse4d = function (x, axis) {
        util.assert(x.rank === 4, "Error in reverse4D: x must be rank 4 but got\n             rank " + x.rank + ".");
        return ReverseOps.reverse(x, axis);
    };
    ReverseOps.reverse = function (x, axis) {
        util.assertArgumentsAreTensors({ x: x }, 'reverse');
        if (x.rank === 0) {
            return x.clone();
        }
        var axes = axis_util_1.parseAxisParam(axis, x.shape);
        var grad = function (dy) {
            return { x: function () { return dy.reverse(axes); } };
        };
        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.reverse(x, axes); }, { x: x }, grad);
        return res.reshapeAs(x);
    };
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),
        operation_1.operation
    ], ReverseOps, "reverse", null);
    return ReverseOps;
}());
exports.ReverseOps = ReverseOps;

},{"../doc":121,"../environment":111,"../util":114,"./axis_util":220,"./operation":229}],322:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
function assertParamsValid(input, begin, size) {
    util.assert(input.rank === begin.length, "Error in slice" + input.rank + "D: Length of begin " + begin + " must " +
        ("match the rank of the array (" + input.rank + ")."));
    util.assert(input.rank === size.length, "Error in slice" + input.rank + "D: Length of size " + size + " must " +
        ("match the rank of the array (" + input.rank + ")."));
    for (var i = 0; i < input.rank; ++i) {
        util.assert(begin[i] + size[i] <= input.shape[i], "Error in slice" + input.rank + "D: begin[" + i + "] + size[" + i + "] " +
            ("(" + (begin[i] + size[i]) + ") would overflow input.shape[" + i + "] (" + input.shape[i] + ")"));
    }
}
exports.assertParamsValid = assertParamsValid;

},{"../util":114}],279:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var operation_1 = require("./operation");
var slice_util = require("./slice_util");
var SliceOps = (function () {
    function SliceOps() {
    }
    SliceOps.slice1d = function (x, begin, size) {
        util.assert(x.rank === 1, "slice1d expects a rank-1 tensor, but got a rank-" + x.rank + " tensor");
        return SliceOps.slice(x, [begin], [size]);
    };
    SliceOps.slice2d = function (x, begin, size) {
        util.assert(x.rank === 2, "slice1d expects a rank-2 tensor, but got a rank-" + x.rank + " tensor");
        return SliceOps.slice(x, begin, size);
    };
    SliceOps.slice3d = function (x, begin, size) {
        util.assert(x.rank === 3, "slice1d expects a rank-3 tensor, but got a rank-" + x.rank + " tensor");
        return SliceOps.slice(x, begin, size);
    };
    SliceOps.slice4d = function (x, begin, size) {
        util.assert(x.rank === 4, "slice1d expects a rank-4 tensor, but got a rank-" + x.rank + " tensor");
        return SliceOps.slice(x, begin, size);
    };
    SliceOps.slice = function (x, begin, size) {
        util.assertArgumentsAreTensors({ x: x }, 'slice');
        if (x.rank === 0) {
            throw new Error('Slicing scalar is not possible');
        }
        var begin_;
        if (typeof begin === 'number') {
            begin_ = [begin].concat(new Array(x.rank - 1).fill(0));
        }
        else if (begin.length < x.rank) {
            begin_ = begin.concat(new Array(x.rank - begin.length).fill(0));
        }
        else {
            begin_ = begin;
        }
        var size_;
        if (size == null) {
            size_ = new Array(x.rank).fill(-1);
        }
        else if (typeof size === 'number') {
            size_ = [size].concat(new Array(x.rank - 1).fill(-1));
        }
        else if (size.length < x.rank) {
            size_ = size.concat(new Array(x.rank - size.length).fill(-1));
        }
        else {
            size_ = size;
        }
        size_ = size_.map(function (d, i) {
            if (d >= 0) {
                return d;
            }
            else {
                util.assert(d === -1, 'Bad value in size');
                return x.shape[i] - begin_[i];
            }
        });
        slice_util.assertParamsValid(x, begin_, size_);
        var inputShape = x.shape;
        var grad = function (dy) {
            var paddings = [];
            for (var i = 0; i < dy.rank; i++) {
                paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);
            }
            return { x: function () { return dy.pad(paddings); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.slice(x, begin_, size_); }, { x: x }, grad);
    };
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),
        operation_1.operation
    ], SliceOps, "slice", null);
    return SliceOps;
}());
exports.SliceOps = SliceOps;

},{"../doc":121,"../environment":111,"../util":114,"./operation":229,"./slice_util":322}],280:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var globals_1 = require("../globals");
var util = require("../util");
var axis_util = require("./axis_util");
var operation_1 = require("./operation");
var ops = require("./ops");
var SoftmaxOps = (function () {
    function SoftmaxOps() {
    }
    SoftmaxOps.softmax = function (logits, dim) {
        if (dim === void 0) { dim = -1; }
        util.assertArgumentsAreTensors({ logits: logits }, 'softmax');
        if (dim === -1) {
            dim = logits.rank - 1;
        }
        if (dim !== logits.rank - 1) {
            throw Error('Softmax along a non-last dimension is not yet supported. ' +
                ("Logits was rank " + logits.rank + " and dim was " + dim));
        }
        var customOp = globals_1.customGrad(function (logits) {
            var keepDims = true;
            var lse = logits.logSumExp([dim], keepDims);
            var logResult = logits.toFloat().sub(lse);
            var y = logResult.exp();
            var gradFunc = function (dy) {
                var dyTimesY = dy.mul(y);
                var keepDims = true;
                return dyTimesY.sub(dyTimesY.sum([dim], keepDims).mul(y));
            };
            return { value: y, gradFunc: gradFunc };
        });
        return customOp(logits);
    };
    SoftmaxOps.softmaxCrossEntropy = function (labels, logits, dim) {
        if (dim === void 0) { dim = -1; }
        util.assertArgumentsAreTensors({ labels: labels, logits: logits }, 'softmaxCrossEntropy');
        util.assertShapesMatch(labels.shape, logits.shape, 'Error in softmaxCrossEntropy: ');
        if (dim === -1) {
            dim = logits.rank - 1;
        }
        if (dim !== logits.rank - 1) {
            throw Error("Softmax cross entropy along a non-last dimension is not yet " +
                ("supported. Labels / logits was rank " + logits.rank + " ") +
                ("and dim was " + dim));
        }
        var customOp = globals_1.customGrad(function (labels, logits) {
            var predictedProbs = logits.softmax(dim);
            var costVector = ops.scalar(1e-5).add(predictedProbs).log().mul(labels).neg();
            var value = costVector.sum([dim]);
            var gradFunc = function (dy) {
                var dyShape = axis_util.expandShapeToKeepDim(dy.shape, [dim]);
                return [
                    dy.reshape(dyShape).mul(labels.toFloat().sub(predictedProbs)),
                    dy.reshape(dyShape).mul(predictedProbs.sub(labels.toFloat())),
                ];
            };
            return { value: value, gradFunc: gradFunc };
        });
        return customOp(labels, logits);
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Normalization' }),
        operation_1.operation
    ], SoftmaxOps, "softmax", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }),
        operation_1.operation
    ], SoftmaxOps, "softmaxCrossEntropy", null);
    return SoftmaxOps;
}());
exports.SoftmaxOps = SoftmaxOps;

},{"../doc":121,"../globals":120,"../util":114,"./axis_util":220,"./operation":229,"./ops":132}],281:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var axis_util = require("./axis_util");
var operation_1 = require("./operation");
var TransposeOps = (function () {
    function TransposeOps() {
    }
    TransposeOps.transpose = function (x, perm) {
        util.assertArgumentsAreTensors({ x: x }, 'transpose');
        if (perm == null) {
            perm = x.shape.map(function (s, i) { return i; }).reverse();
        }
        var der = function (dy) {
            var undoPerm = axis_util.getUndoAxesPermutation(perm);
            return { x: function () { return dy.transpose(undoPerm); } };
        };
        util.assert(x.rank === perm.length, "Error in transpose: rank of input " + x.rank + " " +
            ("must match length of perm " + perm + "."));
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.transpose(x, perm); }, { x: x }, der);
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Matrices' }),
        operation_1.operation
    ], TransposeOps, "transpose", null);
    return TransposeOps;
}());
exports.TransposeOps = TransposeOps;

},{"../doc":121,"../environment":111,"../util":114,"./axis_util":220,"./operation":229}],223:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SELU_SCALEALPHA = 1.7580993408473768599402175208123;
exports.SELU_SCALE = 1.0507009873554804934193349852946;

},{}],282:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var util = require("../util");
var operation_1 = require("./operation");
var ops = require("./ops");
var ops_1 = require("./ops");
var selu_util = require("./selu_util");
var UnaryOps = (function () {
    function UnaryOps() {
    }
    UnaryOps.neg = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'neg');
        var grad = function (dy) {
            return { x: function () { return dy.neg(); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.neg(x); }, { x: x }, grad);
    };
    UnaryOps.ceil = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'ceil');
        var grad = function (dy) {
            return { x: function () { return ops.zerosLike(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.ceil(x); }, { x: x }, grad);
    };
    UnaryOps.floor = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'floor');
        var grad = function (dy) {
            return { x: function () { return ops.zerosLike(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.floor(x); }, { x: x }, grad);
    };
    UnaryOps.sign = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sign');
        var grad = function (dy) {
            return { x: function () { return ops.zerosLike(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.sign(x); }, { x: x }, grad);
    };
    UnaryOps.round = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'round');
        var grad = function (dy) {
            return { x: function () { return ops.zerosLike(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.round(x); }, { x: x }, grad);
    };
    UnaryOps.exp = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'exp');
        var bck = function (dy, saved) {
            var y = saved[0];
            return { x: function () { return dy.mulStrict(y); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend, save) { return save(backend.exp(x)); }, { x: x }, bck);
    };
    UnaryOps.expm1 = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'expm1');
        var grad = function (dy) {
            return { x: function () { return dy.mulStrict(x.exp()); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.expm1(x); }, { x: x }, grad);
    };
    UnaryOps.log = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'log');
        var grad = function (dy) {
            return { x: function () { return dy.divStrict(x.toFloat()); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.log(x); }, { x: x }, grad);
    };
    UnaryOps.log1p = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'log1p');
        var grad = function (dy) {
            return { x: function () { return dy.divStrict(x.add(ops.scalar(1))); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.log1p(x); }, { x: x }, grad);
    };
    UnaryOps.sqrt = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sqrt');
        var grad = function (dy) {
            return { x: function () { return dy.divStrict(x.toFloat().sqrt().mul(ops.scalar(2))); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.sqrt(x); }, { x: x }, grad);
    };
    UnaryOps.rsqrt = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'rsqrt');
        var grad = function (dy) {
            return {
                x: function () { return dy.divStrict(x.pow(ops.scalar(1.5)).mul(ops.scalar(2))).neg(); }
            };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.rsqrt(x); }, { x: x }, grad);
    };
    UnaryOps.square = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'square');
        var grad = function (dy) {
            return { x: function () { return dy.mulStrict(x.toFloat().mul(ops.scalar(2))); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.square(x); }, { x: x }, grad);
    };
    UnaryOps.reciprocal = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'reciprocal');
        var grad = function (dy) {
            return { x: function () { return dy.divStrict(x.square().neg()); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.reciprocal(x); }, { x: x }, grad);
    };
    UnaryOps.abs = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'abs');
        var grad = function (dy) {
            return { x: function () { return dy.mulStrict(x.toFloat().step(-1)); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.abs(x); }, { x: x }, grad);
    };
    UnaryOps.clipByValue = function (x, clipValueMin, clipValueMax) {
        util.assertArgumentsAreTensors({ x: x }, 'clipByValue');
        util.assert((clipValueMin <= clipValueMax), "Error in clip: min (" + clipValueMin + ") must be " +
            ("less than or equal to max (" + clipValueMax + ")."));
        var grad = function (dy) {
            return {
                x: function () { return dy.where(x.greater(ops.scalar(clipValueMin))
                    .logicalAnd(x.less(ops.scalar(clipValueMax))), ops_1.zerosLike(dy)); },
            };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.clip(x, clipValueMin, clipValueMax); }, { x: x }, grad);
    };
    UnaryOps.relu = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'relu');
        if (x.dtype === 'bool') {
            return x.toInt();
        }
        var grad = function (dy) {
            var stepRes = x.step();
            return { x: function () { return dy.mulStrict(stepRes.toFloat()); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.relu(x); }, { x: x }, grad);
    };
    UnaryOps.elu = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'elu');
        var grad = function (dy, saved) {
            var y = saved[0];
            return {
                x: function () {
                    return environment_1.ENV.engine.runKernel(function (backend) { return backend.eluDer(dy, y); }, { dy: dy, y: y });
                }
            };
        };
        return environment_1.ENV.engine.runKernel(function (backend, save) { return save(backend.elu(x)); }, { x: x }, grad);
    };
    UnaryOps.selu = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'selu');
        var grad = function (dy) {
            return {
                x: function () {
                    var mask = x.greater(ops.scalar(0));
                    var scaleAlpha = ops.scalar(selu_util.SELU_SCALEALPHA);
                    var scale = ops.scalar(selu_util.SELU_SCALE);
                    var greaterThanZeroDer = dy.mul(scale);
                    var lessEqualZeroDer = dy.mul(scaleAlpha).mul(x.toFloat().exp());
                    return ops.where(mask, greaterThanZeroDer, lessEqualZeroDer);
                }
            };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.selu(x); }, { x: x }, grad);
    };
    UnaryOps.leakyRelu = function (x, alpha) {
        if (alpha === void 0) { alpha = 0.2; }
        util.assertArgumentsAreTensors({ x: x }, 'leakyRelu');
        return ops.maximum(ops.scalar(alpha).mul(x), x);
    };
    UnaryOps.prelu = function (x, alpha) {
        util.assertArgumentsAreTensors({ x: x, alpha: alpha }, 'prelu');
        var zero = ops.scalar(0);
        return ops.maximum(zero, x).add(alpha.mul(ops.minimum(zero, x)));
    };
    UnaryOps.sigmoid = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sigmoid');
        var grad = function (dy, saved) {
            var y = saved[0];
            return { x: function () { return dy.mulStrict(y.mul(ops.scalar(1).sub(y))); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend, save) { return save(backend.sigmoid(x)); }, { x: x }, grad);
    };
    UnaryOps.logSigmoid = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'logSigmoid');
        var grad = function (dy) {
            return { x: function () { return dy.mulStrict(x.neg().sigmoid()); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.softplus(x.neg()).neg(); }, { x: x }, grad);
    };
    UnaryOps.softplus = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'softplus');
        var grad = function (dy) {
            return { x: function () { return dy.mulStrict(x.sigmoid()); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.softplus(x); }, { x: x }, grad);
    };
    UnaryOps.sin = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sin');
        var grad = function (dy) {
            return { x: function () { return x.toFloat().cos().mulStrict(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.sin(x); }, { x: x }, grad);
    };
    UnaryOps.cos = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'cos');
        var grad = function (dy) {
            return { x: function () { return x.toFloat().sin().neg().mulStrict(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.cos(x); }, { x: x }, grad);
    };
    UnaryOps.tan = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'tan');
        var grad = function (dy) {
            return { x: function () { return dy.divStrict(x.cos().square()); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.tan(x); }, { x: x }, grad);
    };
    UnaryOps.asin = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'asin');
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).sub(x.toFloat().square())));
                }
            };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.asin(x); }, { x: x }, grad);
    };
    UnaryOps.acos = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'acos');
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).sub(x.toFloat().square())))
                        .neg();
                }
            };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.acos(x); }, { x: x }, grad);
    };
    UnaryOps.atan = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'atan');
        var grad = function (dy) {
            return { x: function () { return dy.divStrict(ops.scalar(1).add(x.toFloat().square())); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.atan(x); }, { x: x }, grad);
    };
    UnaryOps.sinh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sinh');
        var grad = function (dy) {
            return { x: function () { return x.toFloat().cosh().mulStrict(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.sinh(x); }, { x: x }, grad);
    };
    UnaryOps.cosh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'cosh');
        var grad = function (dy) {
            return { x: function () { return x.toFloat().sinh().mulStrict(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.cosh(x); }, { x: x }, grad);
    };
    UnaryOps.tanh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'tanh');
        var grad = function (dy, saved) {
            var y = saved[0];
            return { x: function () { return ops.scalar(1).sub(y.square()).mulStrict(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend, save) { return save(backend.tanh(x)); }, { x: x }, grad);
    };
    UnaryOps.asinh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'asinh');
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).add(x.toFloat().square())));
                }
            };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.asinh(x); }, { x: x }, grad);
    };
    UnaryOps.acosh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'acosh');
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.divStrict(UnaryOps.sqrt(x.toFloat().square().sub(ops.scalar(1))));
                }
            };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.acosh(x); }, { x: x }, grad);
    };
    UnaryOps.atanh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'atanh');
        var grad = function (dy) {
            return { x: function () { return dy.divStrict(ops.scalar(1).sub(x.toFloat().square())); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.atanh(x); }, { x: x }, grad);
    };
    UnaryOps.erf = function (x) {
        util.assert(x.dtype === 'int32' || x.dtype === 'float32', 'Input dtype must be `int32` or `float32`.');
        if (x.dtype === 'int32') {
            x = x.toFloat();
        }
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.mulStrict(ops.scalar(2 / Math.sqrt(Math.PI))
                        .mul(x.square().neg().exp()));
                }
            };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.erf(x); }, { x: x }, grad);
    };
    UnaryOps.step = function (x, alpha) {
        if (alpha === void 0) { alpha = 0.0; }
        util.assertArgumentsAreTensors({ x: x }, 'step');
        var grad = function (dy) {
            return { x: function () { return ops.zerosLike(dy); } };
        };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.step(x, alpha); }, { x: x }, grad);
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "neg", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "ceil", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "floor", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "sign", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "round", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "exp", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "expm1", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "log", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "log1p", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "sqrt", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "rsqrt", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "square", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "reciprocal", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "abs", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "clipByValue", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "relu", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "elu", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "selu", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "leakyRelu", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "prelu", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "sigmoid", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "logSigmoid", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "softplus", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "sin", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "cos", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "tan", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "asin", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "acos", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "atan", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "sinh", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "cosh", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "tanh", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "asinh", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "acosh", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "atanh", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "erf", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }),
        operation_1.operation
    ], UnaryOps, "step", null);
    return UnaryOps;
}());
exports.UnaryOps = UnaryOps;

},{"../doc":121,"../environment":111,"../util":114,"./operation":229,"./ops":132,"./selu_util":223}],132:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var array_ops_1 = require("./array_ops");
var batchnorm_1 = require("./batchnorm");
var binary_ops_1 = require("./binary_ops");
var compare_1 = require("./compare");
var concat_1 = require("./concat");
var conv_1 = require("./conv");
var image_ops_1 = require("./image_ops");
var logical_ops_1 = require("./logical_ops");
var loss_ops_1 = require("./loss_ops");
var lrn_1 = require("./lrn");
var lstm_1 = require("./lstm");
var matmul_1 = require("./matmul");
var moving_average_1 = require("./moving_average");
var norm_1 = require("./norm");
var pool_1 = require("./pool");
var reduction_ops_1 = require("./reduction_ops");
var reverse_1 = require("./reverse");
var slice_1 = require("./slice");
var softmax_1 = require("./softmax");
var transpose_1 = require("./transpose");
var unary_ops_1 = require("./unary_ops");
exports.batchNormalization = batchnorm_1.BatchNormOps.batchNormalization;
exports.batchNormalization2d = batchnorm_1.BatchNormOps.batchNormalization2d;
exports.batchNormalization3d = batchnorm_1.BatchNormOps.batchNormalization3d;
exports.batchNormalization4d = batchnorm_1.BatchNormOps.batchNormalization4d;
exports.concat = concat_1.ConcatOps.concat;
exports.concat1d = concat_1.ConcatOps.concat1d;
exports.concat2d = concat_1.ConcatOps.concat2d;
exports.concat3d = concat_1.ConcatOps.concat3d;
exports.concat4d = concat_1.ConcatOps.concat4d;
exports.conv1d = conv_1.ConvOps.conv1d;
exports.conv2d = conv_1.ConvOps.conv2d;
exports.conv2dTranspose = conv_1.ConvOps.conv2dTranspose;
exports.depthwiseConv2d = conv_1.ConvOps.depthwiseConv2d;
exports.separableConv2d = conv_1.ConvOps.separableConv2d;
exports.matMul = matmul_1.MatmulOps.matMul;
exports.matrixTimesVector = matmul_1.MatmulOps.matrixTimesVector;
exports.outerProduct = matmul_1.MatmulOps.outerProduct;
exports.vectorTimesMatrix = matmul_1.MatmulOps.vectorTimesMatrix;
exports.avgPool = pool_1.PoolOps.avgPool;
exports.maxPool = pool_1.PoolOps.maxPool;
exports.transpose = transpose_1.TransposeOps.transpose;
exports.reverse = reverse_1.ReverseOps.reverse;
exports.reverse1d = reverse_1.ReverseOps.reverse1d;
exports.reverse2d = reverse_1.ReverseOps.reverse2d;
exports.reverse3d = reverse_1.ReverseOps.reverse3d;
exports.reverse4d = reverse_1.ReverseOps.reverse4d;
exports.slice = slice_1.SliceOps.slice;
exports.slice1d = slice_1.SliceOps.slice1d;
exports.slice2d = slice_1.SliceOps.slice2d;
exports.slice3d = slice_1.SliceOps.slice3d;
exports.slice4d = slice_1.SliceOps.slice4d;
exports.argMax = reduction_ops_1.ReductionOps.argMax;
exports.argMin = reduction_ops_1.ReductionOps.argMin;
exports.logSumExp = reduction_ops_1.ReductionOps.logSumExp;
exports.max = reduction_ops_1.ReductionOps.max;
exports.mean = reduction_ops_1.ReductionOps.mean;
exports.min = reduction_ops_1.ReductionOps.min;
exports.moments = reduction_ops_1.ReductionOps.moments;
exports.sum = reduction_ops_1.ReductionOps.sum;
exports.equal = compare_1.CompareOps.equal;
exports.equalStrict = compare_1.CompareOps.equalStrict;
exports.greater = compare_1.CompareOps.greater;
exports.greaterStrict = compare_1.CompareOps.greaterStrict;
exports.greaterEqual = compare_1.CompareOps.greaterEqual;
exports.greaterEqualStrict = compare_1.CompareOps.greaterEqualStrict;
exports.less = compare_1.CompareOps.less;
exports.lessStrict = compare_1.CompareOps.lessStrict;
exports.lessEqual = compare_1.CompareOps.lessEqual;
exports.lessEqualStrict = compare_1.CompareOps.lessEqualStrict;
exports.notEqual = compare_1.CompareOps.notEqual;
exports.notEqualStrict = compare_1.CompareOps.notEqualStrict;
exports.logicalNot = logical_ops_1.LogicalOps.logicalNot;
exports.logicalAnd = logical_ops_1.LogicalOps.logicalAnd;
exports.logicalOr = logical_ops_1.LogicalOps.logicalOr;
exports.logicalXor = logical_ops_1.LogicalOps.logicalXor;
exports.where = logical_ops_1.LogicalOps.where;
exports.abs = unary_ops_1.UnaryOps.abs;
exports.acos = unary_ops_1.UnaryOps.acos;
exports.acosh = unary_ops_1.UnaryOps.acosh;
exports.asin = unary_ops_1.UnaryOps.asin;
exports.asinh = unary_ops_1.UnaryOps.asinh;
exports.atan = unary_ops_1.UnaryOps.atan;
exports.atanh = unary_ops_1.UnaryOps.atanh;
exports.ceil = unary_ops_1.UnaryOps.ceil;
exports.clipByValue = unary_ops_1.UnaryOps.clipByValue;
exports.cos = unary_ops_1.UnaryOps.cos;
exports.cosh = unary_ops_1.UnaryOps.cosh;
exports.elu = unary_ops_1.UnaryOps.elu;
exports.exp = unary_ops_1.UnaryOps.exp;
exports.expm1 = unary_ops_1.UnaryOps.expm1;
exports.floor = unary_ops_1.UnaryOps.floor;
exports.sign = unary_ops_1.UnaryOps.sign;
exports.leakyRelu = unary_ops_1.UnaryOps.leakyRelu;
exports.log = unary_ops_1.UnaryOps.log;
exports.log1p = unary_ops_1.UnaryOps.log1p;
exports.logSigmoid = unary_ops_1.UnaryOps.logSigmoid;
exports.neg = unary_ops_1.UnaryOps.neg;
exports.prelu = unary_ops_1.UnaryOps.prelu;
exports.relu = unary_ops_1.UnaryOps.relu;
exports.reciprocal = unary_ops_1.UnaryOps.reciprocal;
exports.round = unary_ops_1.UnaryOps.round;
exports.selu = unary_ops_1.UnaryOps.selu;
exports.sigmoid = unary_ops_1.UnaryOps.sigmoid;
exports.sin = unary_ops_1.UnaryOps.sin;
exports.sinh = unary_ops_1.UnaryOps.sinh;
exports.softplus = unary_ops_1.UnaryOps.softplus;
exports.sqrt = unary_ops_1.UnaryOps.sqrt;
exports.rsqrt = unary_ops_1.UnaryOps.rsqrt;
exports.square = unary_ops_1.UnaryOps.square;
exports.step = unary_ops_1.UnaryOps.step;
exports.tan = unary_ops_1.UnaryOps.tan;
exports.tanh = unary_ops_1.UnaryOps.tanh;
exports.erf = unary_ops_1.UnaryOps.erf;
exports.add = binary_ops_1.BinaryOps.add;
exports.addStrict = binary_ops_1.BinaryOps.addStrict;
exports.atan2 = binary_ops_1.BinaryOps.atan2;
exports.div = binary_ops_1.BinaryOps.div;
exports.divStrict = binary_ops_1.BinaryOps.divStrict;
exports.maximum = binary_ops_1.BinaryOps.maximum;
exports.maximumStrict = binary_ops_1.BinaryOps.maximumStrict;
exports.minimum = binary_ops_1.BinaryOps.minimum;
exports.minimumStrict = binary_ops_1.BinaryOps.minimumStrict;
exports.mod = binary_ops_1.BinaryOps.mod;
exports.modStrict = binary_ops_1.BinaryOps.modStrict;
exports.mul = binary_ops_1.BinaryOps.mul;
exports.mulStrict = binary_ops_1.BinaryOps.mulStrict;
exports.pow = binary_ops_1.BinaryOps.pow;
exports.powStrict = binary_ops_1.BinaryOps.powStrict;
exports.sub = binary_ops_1.BinaryOps.sub;
exports.subStrict = binary_ops_1.BinaryOps.subStrict;
exports.squaredDifference = binary_ops_1.BinaryOps.squaredDifference;
exports.squaredDifferenceStrict = binary_ops_1.BinaryOps.squaredDifferenceStrict;
exports.norm = norm_1.NormOps.norm;
exports.cast = array_ops_1.ArrayOps.cast;
exports.clone = array_ops_1.ArrayOps.clone;
exports.fromPixels = array_ops_1.ArrayOps.fromPixels;
exports.toPixels = array_ops_1.ArrayOps.toPixels;
exports.ones = array_ops_1.ArrayOps.ones;
exports.onesLike = array_ops_1.ArrayOps.onesLike;
exports.zeros = array_ops_1.ArrayOps.zeros;
exports.zerosLike = array_ops_1.ArrayOps.zerosLike;
exports.rand = array_ops_1.ArrayOps.rand;
exports.randomNormal = array_ops_1.ArrayOps.randomNormal;
exports.truncatedNormal = array_ops_1.ArrayOps.truncatedNormal;
exports.randomUniform = array_ops_1.ArrayOps.randomUniform;
exports.multinomial = array_ops_1.ArrayOps.multinomial;
exports.reshape = array_ops_1.ArrayOps.reshape;
exports.squeeze = array_ops_1.ArrayOps.squeeze;
exports.tile = array_ops_1.ArrayOps.tile;
exports.gather = array_ops_1.ArrayOps.gather;
exports.oneHot = array_ops_1.ArrayOps.oneHot;
exports.linspace = array_ops_1.ArrayOps.linspace;
exports.range = array_ops_1.ArrayOps.range;
exports.buffer = array_ops_1.ArrayOps.buffer;
exports.fill = array_ops_1.ArrayOps.fill;
exports.tensor = array_ops_1.ArrayOps.tensor;
exports.scalar = array_ops_1.ArrayOps.scalar;
exports.tensor1d = array_ops_1.ArrayOps.tensor1d;
exports.tensor2d = array_ops_1.ArrayOps.tensor2d;
exports.tensor3d = array_ops_1.ArrayOps.tensor3d;
exports.tensor4d = array_ops_1.ArrayOps.tensor4d;
exports.print = array_ops_1.ArrayOps.print;
exports.expandDims = array_ops_1.ArrayOps.expandDims;
exports.stack = array_ops_1.ArrayOps.stack;
exports.split = array_ops_1.ArrayOps.split;
exports.pad = array_ops_1.ArrayOps.pad;
exports.pad1d = array_ops_1.ArrayOps.pad1d;
exports.pad2d = array_ops_1.ArrayOps.pad2d;
exports.pad3d = array_ops_1.ArrayOps.pad3d;
exports.pad4d = array_ops_1.ArrayOps.pad4d;
exports.movingAverage = moving_average_1.MovingAverageOps.movingAverage;
exports.basicLSTMCell = lstm_1.LSTMOps.basicLSTMCell;
exports.multiRNNCell = lstm_1.LSTMOps.multiRNNCell;
exports.softmax = softmax_1.SoftmaxOps.softmax;
exports.localResponseNormalization = lrn_1.LRNOps.localResponseNormalization;
var tensor_1 = require("../tensor");
var types_1 = require("../types");
[tensor_1.Tensor, types_1.Rank];
[loss_ops_1.Reduction];
exports.losses = {
    softmaxCrossEntropy: softmax_1.SoftmaxOps.softmaxCrossEntropy,
    absoluteDifference: loss_ops_1.LossOps.absoluteDifference,
    computeWeightedLoss: loss_ops_1.LossOps.computeWeightedLoss
};
exports.image = {
    resizeBilinear: image_ops_1.ImageOps.resizeBilinear,
    resizeNearestNeighbor: image_ops_1.ImageOps.resizeNearestNeighbor,
};

},{"./array_ops":263,"./batchnorm":264,"./binary_ops":265,"./compare":266,"./concat":267,"./conv":268,"./image_ops":269,"./logical_ops":270,"./loss_ops":133,"./lrn":271,"./lstm":272,"./matmul":273,"./moving_average":274,"./norm":275,"./pool":276,"./reduction_ops":277,"./reverse":278,"./slice":279,"./softmax":280,"./transpose":281,"./unary_ops":282,"../tensor":117,"../types":116}],117:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("./doc");
var environment_1 = require("./environment");
var ops = require("./ops/ops");
var tensor_util = require("./tensor_util");
var util = require("./util");
var TensorBuffer = (function () {
    function TensorBuffer(shape, dtype, values) {
        this.dtype = dtype;
        if (values != null) {
            var n = values.length;
            var size = util.sizeFromShape(shape);
            util.assert(n === size, "Length of values '" + n + "' does not match the size " +
                ("inferred by the shape '" + size + "'"));
        }
        this.shape = shape.slice();
        this.values =
            values || util.getTypedArrayFromDType(dtype, util.sizeFromShape(shape));
        this.strides = computeStrides(shape);
        this.size = util.sizeFromShape(shape);
    }
    TensorBuffer.prototype.set = function (value) {
        var locs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            locs[_i - 1] = arguments[_i];
        }
        if (locs.length === 0) {
            locs = [0];
        }
        util.assert(locs.length === this.rank, "The number of provided coordinates (" + locs.length + ") must " +
            ("match the rank (" + this.rank + ")"));
        var index = this.locToIndex(locs);
        this.values[index] = value;
    };
    TensorBuffer.prototype.get = function () {
        var locs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            locs[_i] = arguments[_i];
        }
        if (locs.length === 0) {
            locs = [0];
        }
        var index = locs[locs.length - 1];
        for (var i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return this.values[index];
    };
    TensorBuffer.prototype.locToIndex = function (locs) {
        if (this.rank === 0) {
            return 0;
        }
        else if (this.rank === 1) {
            return locs[0];
        }
        var index = locs[locs.length - 1];
        for (var i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return index;
    };
    TensorBuffer.prototype.indexToLoc = function (index) {
        if (this.rank === 0) {
            return [];
        }
        else if (this.rank === 1) {
            return [index];
        }
        var locs = new Array(this.shape.length);
        for (var i = 0; i < locs.length - 1; ++i) {
            locs[i] = Math.floor(index / this.strides[i]);
            index -= locs[i] * this.strides[i];
        }
        locs[locs.length - 1] = index;
        return locs;
    };
    Object.defineProperty(TensorBuffer.prototype, "rank", {
        get: function () {
            return this.shape.length;
        },
        enumerable: true,
        configurable: true
    });
    TensorBuffer.prototype.toTensor = function () {
        return Tensor.make(this.shape, { values: this.values }, this.dtype);
    };
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], TensorBuffer.prototype, "set", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], TensorBuffer.prototype, "get", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], TensorBuffer.prototype, "toTensor", null);
    TensorBuffer = __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], TensorBuffer);
    return TensorBuffer;
}());
exports.TensorBuffer = TensorBuffer;
var Tensor = (function () {
    function Tensor(shape, dtype, values, dataId) {
        this.isDisposed = false;
        this.size = util.sizeFromShape(shape);
        if (values != null) {
            util.assert(this.size === values.length, "Constructing tensor of shape (" + this.size + ") should match the " +
                ("length of values (" + values.length + ")"));
        }
        this.shape = shape.slice();
        this.dtype = dtype || 'float32';
        this.strides = computeStrides(shape);
        this.dataId = dataId != null ? dataId : {};
        this.id = Tensor_1.nextId++;
        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');
        environment_1.ENV.engine.registerTensor(this);
        if (values != null) {
            environment_1.ENV.engine.write(this.dataId, values);
        }
    }
    Tensor_1 = Tensor;
    Tensor.make = function (shape, data, dtype) {
        return new Tensor_1(shape, dtype, data.values, data.dataId);
    };
    Tensor.prototype.flatten = function () {
        this.throwIfDisposed();
        return this.as1D();
    };
    Tensor.prototype.asScalar = function () {
        this.throwIfDisposed();
        util.assert(this.size === 1, 'The array must have only 1 element.');
        return this.reshape([]);
    };
    Tensor.prototype.as1D = function () {
        this.throwIfDisposed();
        return this.reshape([this.size]);
    };
    Tensor.prototype.as2D = function (rows, columns) {
        this.throwIfDisposed();
        return this.reshape([rows, columns]);
    };
    Tensor.prototype.as3D = function (rows, columns, depth) {
        this.throwIfDisposed();
        return this.reshape([rows, columns, depth]);
    };
    Tensor.prototype.as4D = function (rows, columns, depth, depth2) {
        this.throwIfDisposed();
        return this.reshape([rows, columns, depth, depth2]);
    };
    Tensor.prototype.asType = function (dtype) {
        this.throwIfDisposed();
        return ops.cast(this, dtype);
    };
    Object.defineProperty(Tensor.prototype, "rank", {
        get: function () {
            return this.shape.length;
        },
        enumerable: true,
        configurable: true
    });
    Tensor.prototype.get = function () {
        var locs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            locs[_i] = arguments[_i];
        }
        util.assert(locs.length === this.rank, 'Number of coordinates in get() must match the rank of the tensor');
        this.throwIfDisposed();
        if (locs.length === 0) {
            locs = [0];
        }
        var index = locs[locs.length - 1];
        for (var i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return this.dataSync()[index];
    };
    Tensor.prototype.buffer = function () {
        return ops.buffer(this.shape, this.dtype, this.dataSync());
    };
    Tensor.prototype.data = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.throwIfDisposed();
                return [2, environment_1.ENV.engine.read(this.dataId)];
            });
        });
    };
    Tensor.prototype.dataSync = function () {
        this.throwIfDisposed();
        return environment_1.ENV.engine.readSync(this.dataId);
    };
    Tensor.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this.isDisposed = true;
        environment_1.ENV.engine.disposeTensor(this);
    };
    Tensor.prototype.throwIfDisposed = function () {
        if (this.isDisposed) {
            throw new Error("Tensor is disposed.");
        }
    };
    Tensor.prototype.toFloat = function () {
        return this.asType('float32');
    };
    Tensor.prototype.toInt = function () {
        return this.asType('int32');
    };
    Tensor.prototype.toBool = function () {
        return this.asType('bool');
    };
    Tensor.prototype.print = function (verbose) {
        if (verbose === void 0) { verbose = false; }
        return ops.print(this, verbose);
    };
    Tensor.prototype.reshape = function (newShape) {
        this.throwIfDisposed();
        return ops.reshape(this, newShape);
    };
    Tensor.prototype.reshapeAs = function (x) {
        this.throwIfDisposed();
        return this.reshape(x.shape);
    };
    Tensor.prototype.expandDims = function (axis) {
        if (axis === void 0) { axis = 0; }
        return ops.expandDims(this, axis);
    };
    Tensor.prototype.squeeze = function (axis) {
        this.throwIfDisposed();
        return ops.squeeze(this, axis);
    };
    Tensor.prototype.clone = function () {
        this.throwIfDisposed();
        return ops.clone(this);
    };
    Tensor.prototype.toString = function (verbose) {
        if (verbose === void 0) { verbose = false; }
        return tensor_util.tensorToString(this, verbose);
    };
    Tensor.prototype.tile = function (reps) {
        this.throwIfDisposed();
        return ops.tile(this, reps);
    };
    Tensor.prototype.gather = function (indices, axis) {
        if (axis === void 0) { axis = 0; }
        this.throwIfDisposed();
        return ops.gather(this, indices, axis);
    };
    Tensor.prototype.matMul = function (b, transposeA, transposeB) {
        if (transposeA === void 0) { transposeA = false; }
        if (transposeB === void 0) { transposeB = false; }
        this.throwIfDisposed();
        return ops.matMul(this, b, transposeA, transposeB);
    };
    Tensor.prototype.norm = function (ord, axis, keepDims) {
        if (ord === void 0) { ord = 'euclidean'; }
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        this.throwIfDisposed();
        return ops.norm(this, ord, axis, keepDims);
    };
    Tensor.prototype.slice = function (begin, size) {
        this.throwIfDisposed();
        return ops.slice(this, begin, size);
    };
    Tensor.prototype.reverse = function (axis) {
        this.throwIfDisposed();
        return ops.reverse(this, axis);
    };
    Tensor.prototype.concat = function (x, axis) {
        if (axis === void 0) { axis = 0; }
        this.throwIfDisposed();
        return ops.concat([this, x], axis);
    };
    Tensor.prototype.stack = function (x, axis) {
        if (axis === void 0) { axis = 0; }
        return ops.stack([this, x], axis);
    };
    Tensor.prototype.pad = function (paddings, constantValue) {
        if (constantValue === void 0) { constantValue = 0; }
        return ops.pad(this, paddings, constantValue);
    };
    Tensor.prototype.batchNormalization = function (mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }
        this.throwIfDisposed();
        return ops.batchNormalization(this, mean, variance, varianceEpsilon, scale, offset);
    };
    Tensor.prototype.logSumExp = function (axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        this.throwIfDisposed();
        return ops.logSumExp(this, axis, keepDims);
    };
    Tensor.prototype.sum = function (axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        this.throwIfDisposed();
        return ops.sum(this, axis, keepDims);
    };
    Tensor.prototype.mean = function (axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        this.throwIfDisposed();
        return ops.mean(this, axis, keepDims);
    };
    Tensor.prototype.min = function (axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        this.throwIfDisposed();
        return ops.min(this, axis, keepDims);
    };
    Tensor.prototype.max = function (axis, keepDims) {
        if (axis === void 0) { axis = null; }
        if (keepDims === void 0) { keepDims = false; }
        this.throwIfDisposed();
        return ops.max(this, axis, keepDims);
    };
    Tensor.prototype.argMin = function (axis) {
        if (axis === void 0) { axis = null; }
        this.throwIfDisposed();
        return ops.argMin(this, axis);
    };
    Tensor.prototype.argMax = function (axis) {
        if (axis === void 0) { axis = null; }
        this.throwIfDisposed();
        return ops.argMax(this, axis);
    };
    Tensor.prototype.cast = function (dtype) {
        this.throwIfDisposed();
        return ops.cast(this, dtype);
    };
    Tensor.prototype.add = function (x) {
        this.throwIfDisposed();
        return ops.add(this, x);
    };
    Tensor.prototype.addStrict = function (x) {
        this.throwIfDisposed();
        return ops.addStrict(this, x);
    };
    Tensor.prototype.sub = function (x) {
        this.throwIfDisposed();
        return ops.sub(this, x);
    };
    Tensor.prototype.subStrict = function (x) {
        this.throwIfDisposed();
        return ops.subStrict(this, x);
    };
    Tensor.prototype.pow = function (exp) {
        this.throwIfDisposed();
        return ops.pow(this, exp);
    };
    Tensor.prototype.powStrict = function (exp) {
        this.throwIfDisposed();
        return ops.powStrict(this, exp);
    };
    Tensor.prototype.mul = function (x) {
        this.throwIfDisposed();
        return ops.mul(this, x);
    };
    Tensor.prototype.mulStrict = function (x) {
        this.throwIfDisposed();
        return ops.mulStrict(this, x);
    };
    Tensor.prototype.div = function (x) {
        this.throwIfDisposed();
        return ops.div(this, x);
    };
    Tensor.prototype.divStrict = function (x) {
        this.throwIfDisposed();
        return ops.divStrict(this, x);
    };
    Tensor.prototype.minimum = function (x) {
        this.throwIfDisposed();
        return ops.minimum(this, x);
    };
    Tensor.prototype.minimumStrict = function (x) {
        this.throwIfDisposed();
        return ops.minimumStrict(this, x);
    };
    Tensor.prototype.maximum = function (x) {
        this.throwIfDisposed();
        return ops.maximum(this, x);
    };
    Tensor.prototype.maximumStrict = function (x) {
        this.throwIfDisposed();
        return ops.maximumStrict(this, x);
    };
    Tensor.prototype.mod = function (x) {
        this.throwIfDisposed();
        return ops.mod(this, x);
    };
    Tensor.prototype.modStrict = function (x) {
        this.throwIfDisposed();
        return ops.modStrict(this, x);
    };
    Tensor.prototype.squaredDifference = function (x) {
        this.throwIfDisposed();
        return ops.squaredDifference(this, x);
    };
    Tensor.prototype.squaredDifferenceStrict = function (x) {
        this.throwIfDisposed();
        return ops.squaredDifferenceStrict(this, x);
    };
    Tensor.prototype.transpose = function (perm) {
        this.throwIfDisposed();
        return ops.transpose(this, perm);
    };
    Tensor.prototype.notEqual = function (x) {
        this.throwIfDisposed();
        return ops.notEqual(this, x);
    };
    Tensor.prototype.notEqualStrict = function (x) {
        this.throwIfDisposed();
        return ops.notEqualStrict(this, x);
    };
    Tensor.prototype.less = function (x) {
        this.throwIfDisposed();
        return ops.less(this, x);
    };
    Tensor.prototype.lessStrict = function (x) {
        this.throwIfDisposed();
        return ops.lessStrict(this, x);
    };
    Tensor.prototype.equal = function (x) {
        this.throwIfDisposed();
        return ops.equal(this, x);
    };
    Tensor.prototype.equalStrict = function (x) {
        this.throwIfDisposed();
        return ops.equalStrict(this, x);
    };
    Tensor.prototype.lessEqual = function (x) {
        this.throwIfDisposed();
        return ops.lessEqual(this, x);
    };
    Tensor.prototype.lessEqualStrict = function (x) {
        this.throwIfDisposed();
        return ops.lessEqualStrict(this, x);
    };
    Tensor.prototype.greater = function (x) {
        this.throwIfDisposed();
        return ops.greater(this, x);
    };
    Tensor.prototype.greaterStrict = function (x) {
        this.throwIfDisposed();
        return ops.greaterStrict(this, x);
    };
    Tensor.prototype.greaterEqual = function (x) {
        this.throwIfDisposed();
        return ops.greaterEqual(this, x);
    };
    Tensor.prototype.greaterEqualStrict = function (x) {
        this.throwIfDisposed();
        return ops.greaterEqualStrict(this, x);
    };
    Tensor.prototype.logicalAnd = function (x) {
        this.throwIfDisposed();
        return ops.logicalAnd(this, x);
    };
    Tensor.prototype.logicalOr = function (x) {
        this.throwIfDisposed();
        return ops.logicalOr(this, x);
    };
    Tensor.prototype.logicalNot = function () {
        this.throwIfDisposed();
        return ops.logicalNot(this);
    };
    Tensor.prototype.logicalXor = function (x) {
        this.throwIfDisposed();
        return ops.logicalXor(this, x);
    };
    Tensor.prototype.where = function (condition, x) {
        this.throwIfDisposed();
        return ops.where(condition, this, x);
    };
    Tensor.prototype.neg = function () {
        this.throwIfDisposed();
        return ops.neg(this);
    };
    Tensor.prototype.ceil = function () {
        this.throwIfDisposed();
        return ops.ceil(this);
    };
    Tensor.prototype.floor = function () {
        this.throwIfDisposed();
        return ops.floor(this);
    };
    Tensor.prototype.sign = function () {
        this.throwIfDisposed();
        return ops.sign(this);
    };
    Tensor.prototype.exp = function () {
        this.throwIfDisposed();
        return ops.exp(this);
    };
    Tensor.prototype.expm1 = function () {
        this.throwIfDisposed();
        return ops.expm1(this);
    };
    Tensor.prototype.log = function () {
        this.throwIfDisposed();
        return ops.log(this);
    };
    Tensor.prototype.log1p = function () {
        this.throwIfDisposed();
        return ops.log1p(this);
    };
    Tensor.prototype.sqrt = function () {
        this.throwIfDisposed();
        return ops.sqrt(this);
    };
    Tensor.prototype.rsqrt = function () {
        this.throwIfDisposed();
        return ops.rsqrt(this);
    };
    Tensor.prototype.square = function () {
        this.throwIfDisposed();
        return ops.square(this);
    };
    Tensor.prototype.reciprocal = function () {
        this.throwIfDisposed();
        return ops.reciprocal(this);
    };
    Tensor.prototype.abs = function () {
        this.throwIfDisposed();
        return ops.abs(this);
    };
    Tensor.prototype.clipByValue = function (min, max) {
        this.throwIfDisposed();
        return ops.clipByValue(this, min, max);
    };
    Tensor.prototype.relu = function () {
        this.throwIfDisposed();
        return ops.relu(this);
    };
    Tensor.prototype.elu = function () {
        this.throwIfDisposed();
        return ops.elu(this);
    };
    Tensor.prototype.selu = function () {
        this.throwIfDisposed();
        return ops.selu(this);
    };
    Tensor.prototype.leakyRelu = function (alpha) {
        if (alpha === void 0) { alpha = 0.2; }
        this.throwIfDisposed();
        return ops.leakyRelu(this, alpha);
    };
    Tensor.prototype.prelu = function (alpha) {
        this.throwIfDisposed();
        return ops.prelu(this, alpha);
    };
    Tensor.prototype.sigmoid = function () {
        this.throwIfDisposed();
        return ops.sigmoid(this);
    };
    Tensor.prototype.logSigmoid = function () {
        this.throwIfDisposed();
        return ops.logSigmoid(this);
    };
    Tensor.prototype.softplus = function () {
        this.throwIfDisposed();
        return ops.softplus(this);
    };
    Tensor.prototype.sin = function () {
        this.throwIfDisposed();
        return ops.sin(this);
    };
    Tensor.prototype.cos = function () {
        this.throwIfDisposed();
        return ops.cos(this);
    };
    Tensor.prototype.tan = function () {
        this.throwIfDisposed();
        return ops.tan(this);
    };
    Tensor.prototype.asin = function () {
        this.throwIfDisposed();
        return ops.asin(this);
    };
    Tensor.prototype.acos = function () {
        this.throwIfDisposed();
        return ops.acos(this);
    };
    Tensor.prototype.atan = function () {
        this.throwIfDisposed();
        return ops.atan(this);
    };
    Tensor.prototype.sinh = function () {
        this.throwIfDisposed();
        return ops.sinh(this);
    };
    Tensor.prototype.cosh = function () {
        this.throwIfDisposed();
        return ops.cosh(this);
    };
    Tensor.prototype.tanh = function () {
        this.throwIfDisposed();
        return ops.tanh(this);
    };
    Tensor.prototype.asinh = function () {
        this.throwIfDisposed();
        return ops.asinh(this);
    };
    Tensor.prototype.acosh = function () {
        this.throwIfDisposed();
        return ops.acosh(this);
    };
    Tensor.prototype.atanh = function () {
        this.throwIfDisposed();
        return ops.atanh(this);
    };
    Tensor.prototype.erf = function () {
        this.throwIfDisposed();
        return ops.erf(this);
    };
    Tensor.prototype.step = function (alpha) {
        if (alpha === void 0) { alpha = 0.0; }
        this.throwIfDisposed();
        return ops.step(this, alpha);
    };
    Tensor.prototype.softmax = function (dim) {
        if (dim === void 0) { dim = -1; }
        this.throwIfDisposed();
        return ops.softmax(this, dim);
    };
    Tensor.prototype.resizeBilinear = function (newShape2D, alignCorners) {
        if (alignCorners === void 0) { alignCorners = false; }
        this.throwIfDisposed();
        return ops.image.resizeBilinear(this, newShape2D, alignCorners);
    };
    Tensor.prototype.resizeNearestNeighbor = function (newShape2D, alignCorners) {
        if (alignCorners === void 0) { alignCorners = false; }
        this.throwIfDisposed();
        return ops.image.resizeNearestNeighbor(this, newShape2D, alignCorners);
    };
    Tensor.prototype.conv1d = function (filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
        if (dataFormat === void 0) { dataFormat = 'NWC'; }
        if (dilation === void 0) { dilation = 1; }
        this.throwIfDisposed();
        return ops.conv1d(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);
    };
    Tensor.prototype.conv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
        if (dataFormat === void 0) { dataFormat = 'NHWC'; }
        if (dilations === void 0) { dilations = [1, 1]; }
        this.throwIfDisposed();
        return ops.conv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
    };
    Tensor.prototype.conv2dTranspose = function (filter, outputShape, strides, pad, dimRoundingMode) {
        this.throwIfDisposed();
        return ops.conv2dTranspose(this, filter, outputShape, strides, pad, dimRoundingMode);
    };
    Tensor.prototype.depthwiseConv2D = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
        if (dataFormat === void 0) { dataFormat = 'NHWC'; }
        if (dilations === void 0) { dilations = [1, 1]; }
        this.throwIfDisposed();
        return ops.depthwiseConv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
    };
    Tensor.prototype.avgPool = function (filterSize, strides, pad, dimRoundingMode) {
        this.throwIfDisposed();
        return ops.avgPool(this, filterSize, strides, pad, dimRoundingMode);
    };
    Tensor.prototype.maxPool = function (filterSize, strides, pad, dimRoundingMode) {
        this.throwIfDisposed();
        return ops.maxPool(this, filterSize, strides, pad, dimRoundingMode);
    };
    Tensor.prototype.localResponseNormalization = function (radius, bias, alpha, beta) {
        if (radius === void 0) { radius = 5; }
        if (bias === void 0) { bias = 1; }
        if (alpha === void 0) { alpha = 1; }
        if (beta === void 0) { beta = 0.5; }
        return ops.localResponseNormalization(this, radius, bias, alpha, beta);
    };
    Tensor.prototype.variable = function (trainable, name, dtype) {
        if (trainable === void 0) { trainable = true; }
        this.throwIfDisposed();
        return Variable.variable(this, trainable, name, dtype);
    };
    Tensor.nextId = 0;
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "flatten", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "asScalar", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "as1D", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "as2D", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "as3D", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "as4D", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "asType", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "buffer", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "data", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "dataSync", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "dispose", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "toFloat", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "toInt", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "toBool", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "print", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "reshape", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "reshapeAs", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "expandDims", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "squeeze", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "clone", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor.prototype, "toString", null);
    Tensor = Tensor_1 = __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Tensor);
    return Tensor;
    var Tensor_1;
}());
exports.Tensor = Tensor;
var Variable = (function (_super) {
    __extends(Variable, _super);
    function Variable(initialValue, trainable, name) {
        if (trainable === void 0) { trainable = true; }
        var _this = _super.call(this, initialValue.shape, initialValue.dtype, null, initialValue.dataId) || this;
        _this.trainable = trainable;
        _this.name = name;
        if (_this.name == null) {
            _this.name = Variable_1.nextVarId.toString();
            Variable_1.nextVarId++;
        }
        environment_1.ENV.engine.registerVariable(_this);
        return _this;
    }
    Variable_1 = Variable;
    Variable.variable = function (initialValue, trainable, name, dtype) {
        if (trainable === void 0) { trainable = true; }
        if (dtype != null && dtype !== initialValue.dtype) {
            initialValue = initialValue.asType(dtype);
        }
        return new Variable_1(initialValue, trainable, name);
    };
    Variable.prototype.assign = function (newValue) {
        if (newValue.dtype !== this.dtype) {
            throw new Error("dtype of the new value (" + newValue.dtype + ") and " +
                ("previous value (" + this.dtype + ") must match"));
        }
        if (!util.arraysEqual(newValue.shape, this.shape)) {
            throw new Error("shape of the new value (" + newValue.shape + ") and " +
                ("previous value (" + this.shape + ") must match"));
        }
        environment_1.ENV.engine.disposeTensor(this);
        this.dataId = newValue.dataId;
        environment_1.ENV.engine.registerTensor(this);
    };
    Variable.nextVarId = 0;
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Variable.prototype, "assign", null);
    __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })
    ], Variable, "variable", null);
    Variable = Variable_1 = __decorate([
        doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })
    ], Variable);
    return Variable;
    var Variable_1;
}(Tensor));
exports.Variable = Variable;
var variable = Variable.variable;
exports.variable = variable;
function computeStrides(shape) {
    var rank = shape.length;
    if (rank < 2) {
        return [];
    }
    var strides = new Array(rank - 1);
    strides[rank - 2] = shape[rank - 1];
    for (var i = rank - 3; i >= 0; --i) {
        strides[i] = strides[i + 1] * shape[i + 1];
    }
    return strides;
}

},{"./doc":121,"./environment":111,"./ops/ops":132,"./tensor_util":218,"./util":114}],226:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("./doc");
var environment_1 = require("./environment");
var globals_1 = require("./globals");
var tensor_1 = require("./tensor");
var util = require("./util");
var Gradients = (function () {
    function Gradients() {
    }
    Gradients.gradScope = function (nameOrScopeFn, scopeFn) {
        return globals_1.tidy(nameOrScopeFn, scopeFn, true);
    };
    Gradients.grad = function (f) {
        util.assert(util.isFunction(f), 'The f passed in grad(f) must be a function');
        return function (x, dy) {
            util.assert(x instanceof tensor_1.Tensor, 'The x passed in grad(f)(x) must be a tensor');
            util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in grad(f)(x, dy) must be a tensor');
            var _a = environment_1.ENV.engine.gradients(function () { return f(x); }, [x], dy), value = _a.value, grads = _a.grads;
            if (dy != null) {
                util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' +
                    'returned by f(x)');
            }
            value.dispose();
            checkGrads(grads);
            return grads[0];
        };
    };
    Gradients.grads = function (f) {
        util.assert(util.isFunction(f), 'The f passed in grads(f) must be a function');
        return function (args, dy) {
            util.assert(Array.isArray(args) && args.every(function (arg) { return arg instanceof tensor_1.Tensor; }), 'The args passed in grads(f)(args) must be an array of tensors');
            util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in grads(f)(args, dy) must be a tensor');
            var _a = environment_1.ENV.engine.gradients(function () { return f.apply(void 0, args); }, args, dy), value = _a.value, grads = _a.grads;
            if (dy != null) {
                util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must match the ' +
                    'shape returned by f([x1,...])');
            }
            value.dispose();
            checkGrads(grads);
            return grads;
        };
    };
    Gradients.valueAndGrad = function (f) {
        util.assert(util.isFunction(f), 'The f passed in valueAndGrad(f) must be a function');
        return function (x, dy) {
            util.assert(x instanceof tensor_1.Tensor, 'The x passed in valueAndGrad(f)(x) must be a tensor');
            util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');
            var _a = environment_1.ENV.engine.gradients(function () { return f(x); }, [x], dy), grads = _a.grads, value = _a.value;
            checkGrads(grads);
            return { grad: grads[0], value: value };
        };
    };
    Gradients.valueAndGrads = function (f) {
        util.assert(util.isFunction(f), 'The f passed in valueAndGrads(f) must be a function');
        return function (args, dy) {
            util.assert(Array.isArray(args) && args.every(function (arg) { return arg instanceof tensor_1.Tensor; }), 'The args passed in valueAndGrads(f)(args) must be array of tensors');
            util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');
            var res = environment_1.ENV.engine.gradients(function () { return f.apply(void 0, args); }, args, dy);
            if (dy != null) {
                util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +
                    'match the shape returned by f([x1,...])');
            }
            checkGrads(res.grads);
            return res;
        };
    };
    Gradients.variableGrads = function (f, varList) {
        util.assert(util.isFunction(f), 'The f passed in variableGrads(f) must be a function');
        util.assert(varList == null ||
            Array.isArray(varList) && varList.every(function (v) { return v instanceof tensor_1.Variable; }), 'The varList passed in variableGrads(f, varList) must be an array ' +
            'of variables');
        if (varList == null) {
            varList = [];
            for (var varName in environment_1.ENV.engine.registeredVariables) {
                varList.push(environment_1.ENV.engine.registeredVariables[varName]);
            }
        }
        var originalVarCount = varList.length;
        varList = varList.filter(function (variable) { return variable.trainable; });
        util.assert(varList.length > 0, "variableGrads() expects at least one of the input variables to be " +
            ("trainable, but none of the " + originalVarCount + " variables is ") +
            "trainable.");
        var allowNoGradients = true;
        var _a = environment_1.ENV.engine.gradients(f, varList, null, allowNoGradients), value = _a.value, grads = _a.grads;
        util.assert(grads.some(function (g) { return g != null; }), 'Cannot find a connection between any variable and the result of the ' +
            'loss function y=f(x). Please make sure the operations that use ' +
            'variables are inside the function f passed to minimize().');
        util.assert(value.rank === 0, "The f passed in variableGrads(f) must return a scalar, but it " +
            ("returned a rank-" + value.rank + " tensor"));
        var namedGrads = {};
        varList.forEach(function (v, i) {
            if (grads[i] != null) {
                namedGrads[v.name] = grads[i];
            }
        });
        return { value: value, grads: namedGrads };
    };
    Gradients.customGrad = function (f) {
        return environment_1.ENV.engine.customGrad(f);
    };
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Gradients' })
    ], Gradients, "grad", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Gradients' })
    ], Gradients, "grads", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Gradients' })
    ], Gradients, "valueAndGrad", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Gradients' })
    ], Gradients, "valueAndGrads", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Gradients' })
    ], Gradients, "variableGrads", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Gradients' })
    ], Gradients, "customGrad", null);
    return Gradients;
}());
exports.Gradients = Gradients;
function checkGrads(grads) {
    var numNullGradients = grads.filter(function (g) { return g == null; }).length;
    if (numNullGradients > 0) {
        throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
    }
}

},{"./doc":121,"./environment":111,"./globals":120,"./tensor":117,"./util":114}],227:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("./doc");
var environment_1 = require("./environment");
var util_1 = require("./util");
var Tracking = (function () {
    function Tracking() {
    }
    Tracking.tidy = function (nameOrFn, fn, gradMode) {
        if (gradMode === void 0) { gradMode = false; }
        var name = null;
        if (fn == null) {
            if (typeof nameOrFn !== 'function') {
                throw new Error('Please provide a function to tidy()');
            }
            fn = nameOrFn;
        }
        else {
            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {
                throw new Error('When calling with two arguments, the first argument ' +
                    'to tidy() must be a string');
            }
            if (typeof fn !== 'function') {
                throw new Error('When calling with two arguments, the 2nd argument ' +
                    'to tidy() must be a function');
            }
            name = nameOrFn;
        }
        environment_1.ENV.engine.startScope(name, gradMode);
        var result = fn();
        if (result instanceof Promise) {
            console.error('Cannot return a Promise inside of tidy.');
        }
        environment_1.ENV.engine.endScope(result, gradMode);
        return result;
    };
    Tracking.dispose = function (container) {
        var tensors = util_1.extractTensorsFromAny(container);
        tensors.forEach(function (tensor) { return tensor.dispose(); });
    };
    Tracking.keep = function (result) {
        return environment_1.ENV.engine.keep(result);
    };
    Tracking.time = function (f) {
        return environment_1.ENV.engine.time(f);
    };
    __decorate([
        doc_1.doc({ heading: 'Performance', subheading: 'Memory' })
    ], Tracking, "tidy", null);
    __decorate([
        doc_1.doc({ heading: 'Performance', subheading: 'Memory' })
    ], Tracking, "keep", null);
    __decorate([
        doc_1.doc({ heading: 'Performance', subheading: 'Timing' })
    ], Tracking, "time", null);
    return Tracking;
}());
exports.Tracking = Tracking;

},{"./doc":121,"./environment":111,"./util":114}],120:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gradients_1 = require("./gradients");
var tracking_1 = require("./tracking");
exports.tidy = tracking_1.Tracking.tidy;
exports.keep = tracking_1.Tracking.keep;
exports.dispose = tracking_1.Tracking.dispose;
exports.time = tracking_1.Tracking.time;
exports.grad = gradients_1.Gradients.grad;
exports.valueAndGrad = gradients_1.Gradients.valueAndGrad;
exports.grads = gradients_1.Gradients.grads;
exports.valueAndGrads = gradients_1.Gradients.valueAndGrads;
exports.variableGrads = gradients_1.Gradients.variableGrads;
exports.customGrad = gradients_1.Gradients.customGrad;

},{"./gradients":226,"./tracking":227}],308:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("./util");
var Profiler = (function () {
    function Profiler(backendTimer, logger) {
        this.backendTimer = backendTimer;
        this.logger = logger;
        if (logger == null) {
            this.logger = new Logger();
        }
    }
    Profiler.prototype.profileKernel = function (name, f) {
        var _this = this;
        var result;
        var holdResultWrapperFn = function () {
            result = f();
        };
        var timer = this.backendTimer.time(holdResultWrapperFn);
        var vals = result.dataSync();
        util.checkForNaN(vals, result.dtype, name);
        timer.then(function (timing) {
            _this.logger.logKernelProfile(name, result, vals, timing.kernelMs);
        });
        return result;
    };
    return Profiler;
}());
exports.Profiler = Profiler;
var Logger = (function () {
    function Logger() {
    }
    Logger.prototype.logKernelProfile = function (name, result, vals, timeMs) {
        var time = util.rightPad(timeMs + "ms", 9);
        var paddedName = util.rightPad(name, 25);
        var rank = result.rank;
        var size = result.size;
        var shape = util.rightPad(result.shape.toString(), 14);
        console.log("%c" + paddedName + "\t%c" + time + "\t%c" + rank + "D " + shape + "\t%c" + size, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange');
    };
    return Logger;
}());
exports.Logger = Logger;

},{"./util":114}],309:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("./util");
function getFilteredNodesXToY(tape, xs, y) {
    var tensorsFromX = {};
    var nodesFromX = {};
    for (var i = 0; i < xs.length; i++) {
        tensorsFromX[xs[i].id] = true;
    }
    for (var i = 0; i < tape.length; i++) {
        var node = tape[i];
        var nodeInputs = node.inputs;
        for (var inputName in nodeInputs) {
            var input = nodeInputs[inputName];
            var anyInputFromX = false;
            for (var j = 0; j < xs.length; j++) {
                if (tensorsFromX[input.id]) {
                    tensorsFromX[node.output.id] = true;
                    anyInputFromX = true;
                    nodesFromX[node.id] = true;
                    break;
                }
            }
            if (anyInputFromX) {
                break;
            }
        }
    }
    var tensorsLeadToY = {};
    tensorsLeadToY[y.id] = true;
    var nodesToY = {};
    for (var i = tape.length - 1; i >= 0; i--) {
        var node = tape[i];
        var nodeInputs = node.inputs;
        var outputs = [];
        outputs.push(node.output);
        for (var j = 0; j < outputs.length; j++) {
            if (tensorsLeadToY[outputs[j].id]) {
                for (var inputName in nodeInputs) {
                    tensorsLeadToY[nodeInputs[inputName].id] = true;
                    nodesToY[node.id] = true;
                }
                break;
            }
        }
    }
    var filteredTape = [];
    for (var i = 0; i < tape.length; i++) {
        var node = tape[i];
        if (nodesFromX[node.id] && nodesToY[node.id]) {
            var prunedInputs = {};
            for (var inputName in node.inputs) {
                var nodeInput = node.inputs[inputName];
                if (tensorsFromX[nodeInput.id]) {
                    prunedInputs[inputName] = nodeInput;
                }
            }
            var prunedNode = Object.assign({}, node);
            prunedNode.inputs = prunedInputs;
            prunedNode.output = node.output;
            filteredTape.push(prunedNode);
        }
    }
    return filteredTape;
}
exports.getFilteredNodesXToY = getFilteredNodesXToY;
function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape) {
    for (var i = filteredTape.length - 1; i >= 0; i--) {
        var node = filteredTape[i];
        var dy = tensorAccumulatedGradientMap[node.output.id];
        if (node.gradient == null) {
            throw new Error("Cannot compute gradient: gradient function not found " +
                ("for " + node.name + "."));
        }
        var inputGradients = node.gradient(dy);
        for (var inputName in node.inputs) {
            if (!(inputName in inputGradients)) {
                throw new Error("Cannot backprop through input " + inputName + ". " +
                    ("Available gradients found: " + Object.keys(inputGradients) + "."));
            }
            var dx = inputGradients[inputName]();
            var x = node.inputs[inputName];
            if (!util.arraysEqual(dx.shape, x.shape)) {
                throw new Error("Error in gradient for op " + node.name + ". The gradient of input " +
                    ("'" + inputName + "' has shape '" + dx.shape + "', which does not match ") +
                    ("the shape of the input '" + x.shape + "'"));
            }
            if (tensorAccumulatedGradientMap[x.id] == null) {
                tensorAccumulatedGradientMap[x.id] = dx;
            }
            else {
                var curGradient = tensorAccumulatedGradientMap[x.id];
                tensorAccumulatedGradientMap[x.id] = curGradient.add(dx);
                curGradient.dispose();
            }
        }
    }
}
exports.backpropagateGradients = backpropagateGradients;

},{"./util":114}],207:[function(require,module,exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("./environment");
var globals_1 = require("./globals");
var ops = require("./ops/ops");
var profiler_1 = require("./profiler");
var tape_1 = require("./tape");
var tensor_1 = require("./tensor");
var util = require("./util");
var Engine = (function () {
    function Engine(backend, safeMode) {
        this.backend = backend;
        this.safeMode = safeMode;
        this.registeredVariables = {};
        this.refCounter = new WeakMap();
        this.nextTapeNodeId = 0;
        this.numBytes = 0;
        this.numTensors = 0;
        this.numDataBuffers = 0;
        this.gradientScopeCount = 0;
        this.customGradientDepth = 0;
        this.activeScope = { keep: [], track: [] };
        this.scopeStack = [this.activeScope];
        this.profiler = new profiler_1.Profiler(backend);
    }
    Engine.prototype.runKernel = function (forwardFunc, inputs, backwardsFunc) {
        var _this = this;
        var result;
        var saved = [];
        var saveFunc = function (x) {
            saved.push(x);
            return x;
        };
        var scopeName = this.activeScope.name;
        this.customGradientDepth++;
        if (!environment_1.ENV.get('DEBUG')) {
            result = forwardFunc(this.backend, saveFunc);
        }
        else {
            result = this.profiler.profileKernel(scopeName, function () { return forwardFunc(_this.backend, saveFunc); });
        }
        this.customGradientDepth--;
        if (this.shouldRecord()) {
            var tapeNode = {
                id: this.nextTapeNodeId++,
                name: scopeName,
                inputs: inputs,
                output: result,
            };
            if (backwardsFunc != null) {
                tapeNode.gradient = function (dy) { return backwardsFunc(dy, saved); };
            }
            this.activeTape.push(tapeNode);
        }
        return result;
    };
    Engine.prototype.registerTensor = function (a) {
        var refCount = this.refCounter.has(a.dataId) ? this.refCounter.get(a.dataId) : 0;
        this.numTensors++;
        if (refCount === 0) {
            this.numDataBuffers++;
            this.numBytes +=
                util.sizeFromShape(a.shape) * util.bytesPerElement(a.dtype);
            this.backend.register(a.dataId, a.shape, a.dtype);
        }
        this.refCounter.set(a.dataId, refCount + 1);
        if (!(a instanceof tensor_1.Variable)) {
            this.track(a);
        }
    };
    Engine.prototype.registerVariable = function (v) {
        if (this.registeredVariables[v.name] != null) {
            throw new Error("Variable with name " + v.name + " was already registered");
        }
        this.registeredVariables[v.name] = v;
    };
    Engine.prototype.disposeTensor = function (a) {
        if (!this.refCounter.has(a.dataId)) {
            return;
        }
        this.numTensors--;
        var refCount = this.refCounter.get(a.dataId);
        if (refCount <= 1) {
            this.refCounter.delete(a.dataId);
            this.backend.disposeData(a.dataId);
            this.numDataBuffers--;
            this.numBytes -=
                util.sizeFromShape(a.shape) * util.bytesPerElement(a.dtype);
        }
        else {
            this.refCounter.set(a.dataId, refCount - 1);
        }
    };
    Engine.prototype.memory = function () {
        var info = this.backend.memory();
        info.numTensors = this.numTensors;
        info.numDataBuffers = this.numDataBuffers;
        info.numBytes = this.numBytes;
        return info;
    };
    Engine.prototype.shouldRecord = function () {
        return this.activeTape != null && this.customGradientDepth === 0;
    };
    Engine.prototype.addTapeNode = function (inputs, result, gradientsFunc) {
        var inputsMap = {};
        inputs.forEach(function (input, idx) {
            inputsMap[idx] = input;
        });
        var gradient = function (dy) {
            var res = gradientsFunc(dy);
            var resMap = {};
            res.forEach(function (r, idx) {
                resMap[idx] = function () { return r; };
            });
            return resMap;
        };
        var tapeNode = {
            id: this.nextTapeNodeId++,
            name: this.activeScope.name,
            inputs: inputsMap,
            output: result,
            gradient: gradient
        };
        this.activeTape.push(tapeNode);
    };
    Engine.prototype.keep = function (result) {
        if (this.scopeStack.length === 1 && environment_1.ENV.engine.safeMode) {
            throw new Error('Safe mode is ON. Enclose all tensor operations inside tf.tidy(): ' +
                'tf.tidy(() => {...}) to avoid memory leaks.');
        }
        this.activeScope.keep.push(result);
        return result;
    };
    Engine.prototype.startScope = function (name, gradientsMode) {
        if (gradientsMode === void 0) { gradientsMode = false; }
        if (gradientsMode && this.gradientScopeCount === 0) {
            this.activeTape = [];
        }
        if (gradientsMode) {
            this.gradientScopeCount++;
        }
        var scopeInfo = { keep: [], track: [] };
        if (name) {
            scopeInfo.name = name;
        }
        this.scopeStack.push(scopeInfo);
        this.activeScope = scopeInfo;
    };
    Engine.prototype.endScope = function (result, gradientsMode) {
        var _this = this;
        if (gradientsMode === void 0) { gradientsMode = false; }
        if (gradientsMode) {
            this.gradientScopeCount--;
            if (this.gradientScopeCount === 0) {
                this.activeTape = null;
            }
        }
        var tensorsToKeep = this.activeScope.keep;
        var tensorsToTrackInParent = util.extractTensorsFromContainer(result);
        tensorsToKeep = tensorsToKeep.concat(tensorsToTrackInParent);
        for (var i = 0; i < this.activeScope.track.length; i++) {
            var tensor = this.activeScope.track[i];
            if (util.isTensorInList(tensor, tensorsToKeep)) {
                continue;
            }
            if (this.activeTape != null) {
                tensorsToTrackInParent.push(tensor);
            }
            else {
                tensor.dispose();
            }
        }
        this.scopeStack.pop();
        this.activeScope = this.scopeStack.length === 0 ?
            { keep: [], track: [] } :
            this.scopeStack[this.scopeStack.length - 1];
        tensorsToTrackInParent.forEach(function (tensor) {
            if (!util.isTensorInList(tensor, _this.activeScope.keep)) {
                _this.track(tensor);
            }
        });
    };
    Engine.prototype.dispose = function () { };
    Engine.prototype.gradients = function (f, xs, dy, allowNoGradients) {
        var _this = this;
        if (allowNoGradients === void 0) { allowNoGradients = false; }
        util.assert(xs.length > 0, 'gradients() received an empty list of xs.');
        return globals_1.tidy('gradients', function () {
            var y = f();
            util.assert(y instanceof tensor_1.Tensor, 'The result y returned by f() must be a tensor.');
            var filteredTape = tape_1.getFilteredNodesXToY(_this.activeTape, xs, y);
            if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {
                throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +
                    'that the f you passed encloses all operations that lead from x ' +
                    'to y.');
            }
            var accumulatedGradientMap = {};
            accumulatedGradientMap[y.id] = (dy == null) ? ops.ones(y.shape) : dy;
            tape_1.backpropagateGradients(accumulatedGradientMap, filteredTape);
            var grads = xs.map(function (x) { return accumulatedGradientMap[x.id]; });
            return { value: y, grads: grads };
        }, true);
    };
    Engine.prototype.customGrad = function (f) {
        var _this = this;
        util.assert(util.isFunction(f), 'The f passed in customGrad(f) must be a function.');
        return function () {
            var inputs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                inputs[_i] = arguments[_i];
            }
            util.assert(inputs.every(function (t) { return t instanceof tensor_1.Tensor; }), 'The args passed in customGrad(f)(x1, x2,...) must all be tensors');
            _this.customGradientDepth++;
            var gradientsFunc;
            var gradientsMode = true;
            var result = globals_1.tidy(f.name, function () {
                var _a = f.apply(void 0, inputs), value = _a.value, gradFunc = _a.gradFunc;
                util.assert(value instanceof tensor_1.Tensor, 'The function f passed in customGrad(f) must return an object ' +
                    'where `obj.value` is a tensor');
                util.assert(util.isFunction(gradFunc), 'The function f passed in customGrad(f) must return an object ' +
                    'where `obj.gradFunc` is a function.');
                gradientsFunc = gradFunc;
                return value;
            }, gradientsMode);
            _this.customGradientDepth--;
            if (_this.shouldRecord()) {
                var gradFunc = function (dy) {
                    var res = gradientsFunc(dy);
                    var grads = Array.isArray(res) ? res : [res];
                    util.assert(grads.length === inputs.length, 'The function f passed in customGrad(f) must return an object ' +
                        'where `obj.gradFunc` is a function that returns the same ' +
                        'number of tensors as inputs passed to f(...).');
                    util.assert(grads.every(function (t) { return t instanceof tensor_1.Tensor; }), 'The function f passed in customGrad(f) must return an object ' +
                        'where `obj.gradFunc` is a function that returns a list of ' +
                        'only tensors.');
                    return grads;
                };
                _this.addTapeNode(inputs, result, gradFunc);
            }
            return result;
        };
    };
    Engine.prototype.write = function (dataId, values) {
        this.backend.write(dataId, values);
    };
    Engine.prototype.readSync = function (dataId) {
        return this.backend.readSync(dataId);
    };
    Engine.prototype.read = function (dataId) {
        return this.backend.read(dataId);
    };
    Engine.prototype.fromPixels = function (pixels, numChannels) {
        return this.backend.fromPixels(pixels, numChannels);
    };
    Engine.prototype.time = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var start, timingInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        start = performance.now();
                        return [4, this.backend.time(query)];
                    case 1:
                        timingInfo = _a.sent();
                        timingInfo.wallMs = performance.now() - start;
                        return [2, timingInfo];
                }
            });
        });
    };
    Engine.prototype.track = function (result) {
        if (this.scopeStack.length === 1 && this.safeMode) {
            throw new Error('Safe mode is ON. Enclose all tensor operations inside tf.tidy(): ' +
                'tf.tidy(() => {op();...}); to avoid memory leaks.');
        }
        this.activeScope.track.push(result);
        return result;
    };
    return Engine;
}());
exports.Engine = Engine;

},{"./environment":111,"./globals":120,"./ops/ops":132,"./profiler":308,"./tape":309,"./tensor":117,"./util":114}],111:[function(require,module,exports) {
var global = arguments[3];
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var device_util = require("./device_util");
var doc_1 = require("./doc");
var engine_1 = require("./engine");
var util = require("./util");
var Type;
(function (Type) {
    Type[Type["NUMBER"] = 0] = "NUMBER";
    Type[Type["BOOLEAN"] = 1] = "BOOLEAN";
    Type[Type["STRING"] = 2] = "STRING";
})(Type = exports.Type || (exports.Type = {}));
exports.URL_PROPERTIES = [
    { name: 'DEBUG', type: Type.BOOLEAN },
    { name: 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', type: Type.NUMBER },
    { name: 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', type: Type.BOOLEAN },
    { name: 'WEBGL_VERSION', type: Type.NUMBER },
    { name: 'WEBGL_FLOAT_TEXTURE_ENABLED', type: Type.BOOLEAN }, {
        name: 'WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED',
        type: Type.BOOLEAN
    },
    { name: 'BACKEND', type: Type.STRING }
];
function hasExtension(gl, extensionName) {
    var ext = gl.getExtension(extensionName);
    return ext != null;
}
function getWebGLRenderingContext(webGLVersion) {
    if (webGLVersion === 0) {
        throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');
    }
    var tempCanvas = document.createElement('canvas');
    if (webGLVersion === 1) {
        return (tempCanvas.getContext('webgl') ||
            tempCanvas.getContext('experimental-webgl'));
    }
    return tempCanvas.getContext('webgl2');
}
function loseContext(gl) {
    if (gl != null) {
        var loseContextExtension = gl.getExtension('WEBGL_lose_context');
        if (loseContextExtension == null) {
            throw new Error('Extension WEBGL_lose_context not supported on this browser.');
        }
        loseContextExtension.loseContext();
    }
}
function isWebGLVersionEnabled(webGLVersion) {
    var gl = getWebGLRenderingContext(webGLVersion);
    if (gl != null) {
        loseContext(gl);
        return true;
    }
    return false;
}
function getWebGLDisjointQueryTimerVersion(webGLVersion) {
    if (webGLVersion === 0) {
        return 0;
    }
    var queryTimerVersion;
    var gl = getWebGLRenderingContext(webGLVersion);
    if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&
        webGLVersion === 2) {
        queryTimerVersion = 2;
    }
    else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {
        queryTimerVersion = 1;
    }
    else {
        queryTimerVersion = 0;
    }
    if (gl != null) {
        loseContext(gl);
    }
    return queryTimerVersion;
}
function isFloatTextureReadPixelsEnabled(webGLVersion) {
    if (webGLVersion === 0) {
        return false;
    }
    var gl = getWebGLRenderingContext(webGLVersion);
    if (webGLVersion === 1) {
        if (!hasExtension(gl, 'OES_texture_float')) {
            return false;
        }
    }
    else {
        if (!hasExtension(gl, 'EXT_color_buffer_float')) {
            return false;
        }
    }
    var frameBuffer = gl.createFramebuffer();
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    var internalFormat = webGLVersion === 2 ? gl.RGBA32F : gl.RGBA;
    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
    var frameBufferComplete = (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE);
    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, new Float32Array(4));
    var readPixelsNoError = gl.getError() === gl.NO_ERROR;
    loseContext(gl);
    return frameBufferComplete && readPixelsNoError;
}
function isWebGLGetBufferSubDataAsyncExtensionEnabled(webGLVersion) {
    if (webGLVersion > 0) {
        return false;
    }
    if (webGLVersion !== 2) {
        return false;
    }
    var gl = getWebGLRenderingContext(webGLVersion);
    var isEnabled = hasExtension(gl, 'WEBGL_get_buffer_sub_data_async');
    loseContext(gl);
    return isEnabled;
}
var Environment = (function () {
    function Environment(features) {
        this.features = {};
        this.registry = {};
        if (features != null) {
            this.features = features;
        }
        if (this.get('DEBUG')) {
            console.warn('Debugging mode is ON. The output of every math call will ' +
                'be downloaded to CPU and checked for NaNs. ' +
                'This significantly impacts performance.');
        }
    }
    Environment.setBackend = function (backendType, safeMode) {
        if (safeMode === void 0) { safeMode = false; }
        if (!(backendType in exports.ENV.registry)) {
            throw new Error("Backend type '" + backendType + "' not found in registry");
        }
        exports.ENV.initBackend(backendType, safeMode);
    };
    Environment.getBackend = function () {
        exports.ENV.initDefaultBackend();
        return exports.ENV.currentBackend;
    };
    Environment.memory = function () {
        return exports.ENV.engine.memory();
    };
    Environment.prototype.get = function (feature) {
        if (feature in this.features) {
            return this.features[feature];
        }
        this.features[feature] = this.evaluateFeature(feature);
        return this.features[feature];
    };
    Environment.prototype.set = function (feature, value) {
        this.features[feature] = value;
    };
    Environment.prototype.getBestBackendType = function () {
        var _this = this;
        if (Object.keys(this.registry).length === 0) {
            throw new Error('No backend found in registry.');
        }
        var sortedBackends = Object.keys(this.registry)
            .map(function (name) {
            return { name: name, entry: _this.registry[name] };
        })
            .sort(function (a, b) {
            return b.entry.priority - a.entry.priority;
        });
        return sortedBackends[0].name;
    };
    Environment.prototype.evaluateFeature = function (feature) {
        if (feature === 'DEBUG') {
            return false;
        }
        else if (feature === 'BACKEND') {
            return this.getBestBackendType();
        }
        else if (feature === 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') {
            var webGLVersion = this.get('WEBGL_VERSION');
            if (webGLVersion === 0) {
                return 0;
            }
            return getWebGLDisjointQueryTimerVersion(webGLVersion);
        }
        else if (feature === 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') {
            return this.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&
                !device_util.isMobile();
        }
        else if (feature === 'WEBGL_VERSION') {
            if (isWebGLVersionEnabled(2)) {
                return 2;
            }
            else if (isWebGLVersionEnabled(1)) {
                return 1;
            }
            return 0;
        }
        else if (feature === 'WEBGL_FLOAT_TEXTURE_ENABLED') {
            return isFloatTextureReadPixelsEnabled(this.get('WEBGL_VERSION'));
        }
        else if (feature === 'WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED') {
            return isWebGLGetBufferSubDataAsyncExtensionEnabled(this.get('WEBGL_VERSION'));
        }
        throw new Error("Unknown feature " + feature + ".");
    };
    Environment.prototype.setFeatures = function (features) {
        this.features = features;
    };
    Environment.prototype.reset = function () {
        this.features = getFeaturesFromURL();
        if (this.globalEngine != null) {
            this.globalEngine.dispose();
            this.globalEngine = null;
        }
    };
    Environment.prototype.initBackend = function (backendType, safeMode) {
        if (safeMode === void 0) { safeMode = false; }
        this.currentBackend = backendType;
        if (this.globalEngine != null) {
            this.globalEngine.dispose();
        }
        var backend = exports.ENV.findBackend(backendType);
        this.globalEngine = new engine_1.Engine(backend, safeMode);
    };
    Environment.prototype.findBackend = function (name) {
        if (!(name in this.registry)) {
            return null;
        }
        return this.registry[name].backend;
    };
    Environment.prototype.registerBackend = function (name, factory, priority) {
        if (priority === void 0) { priority = 1; }
        if (name in this.registry) {
            console.warn(name + " backend was already registered");
        }
        try {
            var backend = factory();
            this.registry[name] = { backend: backend, priority: priority };
            return true;
        }
        catch (err) {
            console.warn(err.message);
            return false;
        }
    };
    Environment.prototype.removeBackend = function (name) {
        if (!(name in this.registry)) {
            throw new Error(name + " backend not found in registry");
        }
        this.registry[name].backend.dispose();
        delete this.registry[name];
    };
    Object.defineProperty(Environment.prototype, "engine", {
        get: function () {
            this.initDefaultBackend();
            return this.globalEngine;
        },
        enumerable: true,
        configurable: true
    });
    Environment.prototype.initDefaultBackend = function () {
        if (this.globalEngine == null) {
            this.initBackend(exports.ENV.get('BACKEND'), false);
        }
    };
    __decorate([
        doc_1.doc({ heading: 'Environment' })
    ], Environment, "setBackend", null);
    __decorate([
        doc_1.doc({ heading: 'Environment' })
    ], Environment, "getBackend", null);
    __decorate([
        doc_1.doc({ heading: 'Performance', subheading: 'Memory' })
    ], Environment, "memory", null);
    return Environment;
}());
exports.Environment = Environment;
var TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';
function getFeaturesFromURL() {
    var features = {};
    if (typeof window === 'undefined') {
        return features;
    }
    var urlParams = util.getQueryParams(window.location.search);
    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
        var urlFlags_1 = {};
        var keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');
        keyValues.forEach(function (keyValue) {
            var _a = keyValue.split(':'), key = _a[0], value = _a[1];
            urlFlags_1[key] = value;
        });
        exports.URL_PROPERTIES.forEach(function (urlProperty) {
            if (urlProperty.name in urlFlags_1) {
                console.log("Setting feature override from URL " + urlProperty.name + ": " +
                    ("" + urlFlags_1[urlProperty.name]));
                if (urlProperty.type === Type.NUMBER) {
                    features[urlProperty.name] = +urlFlags_1[urlProperty.name];
                }
                else if (urlProperty.type === Type.BOOLEAN) {
                    features[urlProperty.name] = urlFlags_1[urlProperty.name] === 'true';
                }
                else if (urlProperty.type === Type.STRING) {
                    features[urlProperty.name] = urlFlags_1[urlProperty.name];
                }
                else {
                    console.warn("Unknown URL param: " + urlProperty.name + ".");
                }
            }
        });
    }
    return features;
}
function getGlobalNamespace() {
    var ns;
    if (typeof (window) !== 'undefined') {
        ns = window;
    }
    else if (typeof (global) !== 'undefined') {
        ns = global;
    }
    else {
        throw new Error('Could not find a global object');
    }
    return ns;
}
function getOrMakeEnvironment() {
    var ns = getGlobalNamespace();
    ns.ENV = ns.ENV || new Environment(getFeaturesFromURL());
    return ns.ENV;
}
exports.ENV = getOrMakeEnvironment();

},{"./device_util":206,"./doc":121,"./engine":207,"./util":114}],230:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PARALLELIZE_THRESHOLD = 30;
function computeOptimalWindowSize(inSize) {
    if (inSize <= exports.PARALLELIZE_THRESHOLD) {
        return inSize;
    }
    return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));
}
exports.computeOptimalWindowSize = computeOptimalWindowSize;
function nearestDivisor(size, start) {
    for (var i = start; i < size; ++i) {
        if (size % i === 0) {
            return i;
        }
    }
    return size;
}

},{}],225:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var array_ops_1 = require("../ops/array_ops");
function castTensor(x, dtype, backend) {
    if (!__1.util.hasEncodingLoss(x.dtype, dtype)) {
        return __1.Tensor.make(x.shape, { dataId: x.dataId }, dtype);
    }
    if (dtype === 'int32') {
        return backend.int(x);
    }
    else if (dtype === 'bool') {
        return backend.notEqual(x, array_ops_1.ArrayOps.scalar(0, x.dtype));
    }
    else {
        throw new Error("Error in Cast: unknown dtype argument (" + dtype + ")");
    }
}
exports.castTensor = castTensor;
function reshapeTensor(x, shape) {
    return __1.Tensor.make(shape, { dataId: x.dataId }, x.dtype);
}
exports.reshapeTensor = reshapeTensor;

},{"..":64,"../ops/array_ops":263}],231:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ArgMinMaxProgram = (function () {
    function ArgMinMaxProgram(reduceInfo, op, firstPass) {
        this.variableNames = ['A'];
        var windowSize = reduceInfo.windowSize;
        var batchSize = reduceInfo.batchSize;
        var inSize = reduceInfo.inSize;
        var outSize = Math.ceil(inSize / windowSize);
        if (!firstPass) {
            this.variableNames.push('bestIndicesA');
        }
        this.outputShape = [batchSize, outSize];
        var compOp = (op === 'max') ? '>' : '<';
        var indexSnippet = firstPass ?
            'inOffset + i;' :
            'round(getBestIndicesA(batch, inOffset + i));';
        this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + windowSize + ";\n\n        int bestIndex = 0;\n        float bestValue = getA(batch, inOffset);\n\n        for (int i = 0; i < " + windowSize + "; i++) {\n          int inIdx = " + indexSnippet + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + compOp + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
    }
    return ArgMinMaxProgram;
}());
exports.ArgMinMaxProgram = ArgMinMaxProgram;

},{}],232:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AvgPool2DBackpropProgram = (function () {
    function AvgPool2DBackpropProgram(convInfo) {
        this.variableNames = ['dy'];
        this.outputShape = convInfo.inShape;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        var avgMultiplier = 1 / (filterHeight * filterWidth);
        this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n      const float avgMultiplier = float(" + avgMultiplier + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return AvgPool2DBackpropProgram;
}());
exports.AvgPool2DBackpropProgram = AvgPool2DBackpropProgram;

},{}],233:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var broadcast_util = require("../../ops/broadcast_util");
var BatchNormProgram = (function () {
    function BatchNormProgram(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
        this.outputShape = [];
        this.supportsBroadcasting = true;
        this.variableNames = ['x', 'mean', 'variance'];
        broadcast_util.assertAndGetBroadcastShape(xShape, meanShape);
        broadcast_util.assertAndGetBroadcastShape(xShape, varianceShape);
        var offsetSnippet = '0.0';
        if (offsetShape != null) {
            broadcast_util.assertAndGetBroadcastShape(xShape, offsetShape);
            this.variableNames.push('offset');
            offsetSnippet = 'getOffsetAtOutCoords()';
        }
        var scaleSnippet = '1.0';
        if (scaleShape != null) {
            broadcast_util.assertAndGetBroadcastShape(xShape, scaleShape);
            this.variableNames.push('scale');
            scaleSnippet = 'getScaleAtOutCoords()';
        }
        this.outputShape = xShape;
        this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + offsetSnippet + ";\n        float scale = " + scaleSnippet + ";\n        float inv = scale * inversesqrt(variance + float(" + varianceEpsilon + "));\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
    }
    return BatchNormProgram;
}());
exports.BatchNormProgram = BatchNormProgram;

},{"../../ops/broadcast_util":221}],234:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var broadcast_util = require("../../ops/broadcast_util");
var CHECK_NAN_SNIPPET = "\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n";
exports.ADD = 'return a + b;';
exports.SUB = 'return a - b;';
exports.MUL = 'return a * b;';
exports.DIV = 'return a / b;';
exports.INT_DIV = "\n  float resultSign = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  int result = ia / ib;\n  int amodb = ia - ib * result;\n\n  if (resultSign < 0.0 && amodb != 0) {\n    result -= 1;\n  }\n  return float(result);\n";
exports.POW = "\n  return (round(mod(b, 2.0)) == 0 || round(mod(b, 2.0)) == 2) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n";
exports.SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
exports.EQUAL = "return float(a == b);";
exports.NOT_EQUAL = "return float(a != b);";
exports.LESS = "return float(a < b);";
exports.LESS_EQUAL = "return float(a <= b);";
exports.GREATER = "return float(a > b);";
exports.GREATER_EQUAL = "return float(a >= b);";
exports.LOGICAL_AND = "return float(a >= 1.0 && b >= 1.0);";
exports.LOGICAL_OR = "return float(a >= 1.0 || b >= 1.0);";
exports.MAX = CHECK_NAN_SNIPPET + "\n  return max(a, b);\n";
exports.MIN = CHECK_NAN_SNIPPET + "\n  return min(a, b);\n";
exports.MOD = "return mod(a, b);";
exports.ATAN2 = CHECK_NAN_SNIPPET + "\n  return atan(a, b);\n";
exports.ELU_DER = "return (b >= 1.0) ? a : a * (b + 1.0);";
var BinaryOpProgram = (function () {
    function BinaryOpProgram(op, aShape, bShape) {
        this.variableNames = ['A', 'B'];
        this.supportsBroadcasting = true;
        this.outputShape =
            broadcast_util.assertAndGetBroadcastShape(aShape, bShape);
        this.userCode = "\n      float binaryOperation(float a, float b) {\n        " + op + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
    }
    return BinaryOpProgram;
}());
exports.BinaryOpProgram = BinaryOpProgram;

},{"../../ops/broadcast_util":221}],235:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClipProgram = (function () {
    function ClipProgram(aShape, min, max) {
        this.variableNames = ['A'];
        this.outputShape = aShape;
        var minFixed = min.toFixed(20);
        var maxFixed = max.toFixed(20);
        this.userCode = "\n      void main() {\n        float value = getAAtOutCoords();\n        if (isNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, " + minFixed + ", " + maxFixed + "));\n      }\n    ";
    }
    return ClipProgram;
}());
exports.ClipProgram = ClipProgram;

},{}],236:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var concat_util = require("../../ops/concat_util");
var ConcatProgram = (function () {
    function ConcatProgram(aShape, bShape) {
        this.variableNames = ['A', 'B'];
        this.outputShape = [];
        this.outputShape =
            concat_util.computeOutShape(aShape, bShape, 1);
        this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        float value = 0.0;\n        if (yC < " + aShape[1] + ") {\n          value = getA(yR, yC);\n        } else {\n          yC -= " + aShape[1] + ";\n          value = getB(yR, yC);\n        }\n\n        setOutput(value);\n      }\n    ";
    }
    return ConcatProgram;
}());
exports.ConcatProgram = ConcatProgram;

},{"../../ops/concat_util":222}],237:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Conv2DDerFilterProgram = (function () {
    function Conv2DDerFilterProgram(convInfo) {
        this.variableNames = ['x', 'dy'];
        this.outputShape = convInfo.filterShape;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + convInfo.batchSize + "; b++) {\n          for (int yR = 0; yR < " + convInfo.outHeight + "; yR++) {\n            int xR = wR + yR * " + strideHeight + " - " + padTop + ";\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + convInfo.outWidth + "; yC++) {\n              int xC = wC + yC * " + strideWidth + " - " + padLeft + ";\n\n              if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return Conv2DDerFilterProgram;
}());
exports.Conv2DDerFilterProgram = Conv2DDerFilterProgram;
var Conv2DDerInputProgram = (function () {
    function Conv2DDerInputProgram(convInfo) {
        this.variableNames = ['dy', 'W'];
        this.outputShape = convInfo.inShape;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + filterHeight + " - 1 - wR;\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + filterWidth + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + convInfo.outChannels + "; d2++) {\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return Conv2DDerInputProgram;
}());
exports.Conv2DDerInputProgram = Conv2DDerInputProgram;

},{}],238:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Conv2DProgram = (function () {
    function Conv2DProgram(convInfo) {
        this.variableNames = ['x', 'W'];
        this.outputShape = convInfo.outShape;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var dilationHeight = convInfo.dilationHeight;
        var dilationWidth = convInfo.dilationWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
        var inputDepthVec4Remainder = convInfo.inChannels % 4;
        this.userCode = "\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          int xR = xRCorner + wR * " + dilationHeight + ";\n\n          if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            int xC = xCCorner + wC * " + dilationWidth + ";\n\n            if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + inputDepthNearestVec4 + "; d1 += 4) {\n              vec4 xValues = vec4(\n                getX(batch, xR, xC, d1),\n                getX(batch, xR, xC, d1 + 1),\n                getX(batch, xR, xC, d1 + 2),\n                getX(batch, xR, xC, d1 + 3)\n              );\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              dotProd += dot(xValues, wValues);\n            }\n\n            if (" + (inputDepthVec4Remainder === 1) + ") {\n              dotProd +=\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + ") *\n                getW(wR, wC, " + inputDepthNearestVec4 + ", d2);\n            } else if (" + (inputDepthVec4Remainder === 2) + ") {\n              vec2 xValues = vec2(\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + "),\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + " + 1)\n              );\n              vec2 wValues = vec2(\n                getW(wR, wC, " + inputDepthNearestVec4 + ", d2),\n                getW(wR, wC, " + inputDepthNearestVec4 + " + 1, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            } else if (" + (inputDepthVec4Remainder === 3) + ") {\n              vec3 xValues = vec3(\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + "),\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + " + 1),\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + " + 2)\n              );\n              vec3 wValues = vec3(\n                getW(wR, wC, " + inputDepthNearestVec4 + ", d2),\n                getW(wR, wC, " + inputDepthNearestVec4 + " + 1, d2),\n                getW(wR, wC, " + inputDepthNearestVec4 + " + 2, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return Conv2DProgram;
}());
exports.Conv2DProgram = Conv2DProgram;

},{}],239:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DepthwiseConv2DProgram = (function () {
    function DepthwiseConv2DProgram(convInfo) {
        this.variableNames = ['x', 'W'];
        this.outputShape = convInfo.outShape;
        var xNumRows = convInfo.inHeight;
        var xNumCols = convInfo.inWidth;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var dilationHeight = convInfo.dilationHeight;
        var dilationWidth = convInfo.dilationWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var channelMul = convInfo.outChannels / convInfo.inChannels;
        this.userCode = "\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + channelMul + ";\n        int q = d2 - d1 * " + channelMul + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          int xR = xRCorner + wR * " + dilationHeight + ";\n\n          if (xR < 0 || xR >= " + xNumRows + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            int xC = xCCorner + wC * " + dilationWidth + ";\n\n            if (xC < 0 || xC >= " + xNumCols + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return DepthwiseConv2DProgram;
}());
exports.DepthwiseConv2DProgram = DepthwiseConv2DProgram;

},{}],240:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FromPixelsProgram = (function () {
    function FromPixelsProgram(outputShape) {
        this.variableNames = ['A'];
        var height = outputShape[0], width = outputShape[1];
        this.outputShape = outputShape;
        this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + width + ".0, " + height + ".0);\n\n        vec4 values = texture2D(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
    }
    return FromPixelsProgram;
}());
exports.FromPixelsProgram = FromPixelsProgram;

},{}],257:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TextureType;
(function (TextureType) {
    TextureType[TextureType["FLOAT"] = 0] = "FLOAT";
    TextureType[TextureType["UNSIGNED_BYTE"] = 1] = "UNSIGNED_BYTE";
})(TextureType = exports.TextureType || (exports.TextureType = {}));
function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {
    return [columns, rows];
}
exports.getUnpackedMatrixTextureShapeWidthHeight = getUnpackedMatrixTextureShapeWidthHeight;
function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {
    return matrixSize * channelsPerTexture;
}
exports.getUnpackedArraySizeFromMatrixSize = getUnpackedArraySizeFromMatrixSize;
function getColorMatrixTextureShapeWidthHeight(rows, columns) {
    return [columns * 4, rows];
}
exports.getColorMatrixTextureShapeWidthHeight = getColorMatrixTextureShapeWidthHeight;
function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {
    if (unpackedSize % channelsPerTexture !== 0) {
        throw new Error("unpackedSize (" + unpackedSize + ") must be a multiple of " +
            ("" + channelsPerTexture));
    }
    return unpackedSize / channelsPerTexture;
}
exports.getMatrixSizeFromUnpackedArraySize = getMatrixSizeFromUnpackedArraySize;
function encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture) {
    var requiredSize = getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture);
    if (unpackedArray.length < requiredSize) {
        throw new Error("unpackedArray length (" + unpackedArray.length + ") must be >= " +
            ("" + requiredSize));
    }
    var dst = 0;
    for (var src = 0; src < matrix.length; ++src) {
        unpackedArray[dst] = matrix[src];
        dst += channelsPerTexture;
    }
}
exports.encodeMatrixToUnpackedArray = encodeMatrixToUnpackedArray;
exports.FLOAT_MAX = 20000;
exports.FLOAT_MIN = -exports.FLOAT_MAX;
var FLOAT_RANGE = (exports.FLOAT_MAX - exports.FLOAT_MIN) / 255;
var FLOAT_DELTAS = [1, 1 / 255, 1 / (255 * 255), 1 / (255 * 255 * 255)];
var FLOAT_POWERS = [1, 255, 255 * 255];
exports.BYTE_NAN_VALUE = 0;
function encodeFloatArray(floatArray) {
    var uintArray = new Uint8Array(floatArray.length * 4);
    var _loop_1 = function (i) {
        var value = floatArray[i / 4];
        if (isNaN(value)) {
            uintArray[i] = exports.BYTE_NAN_VALUE;
            uintArray[i + 1] = exports.BYTE_NAN_VALUE;
            uintArray[i + 2] = exports.BYTE_NAN_VALUE;
            uintArray[i + 3] = exports.BYTE_NAN_VALUE;
            return "continue";
        }
        var normalizedValue = (value - exports.FLOAT_MIN) / FLOAT_RANGE;
        var enc = FLOAT_POWERS.map(function (pow) { return pow * normalizedValue; });
        var buckets = enc.map(function (value) { return Math.floor((value % 1) * 255); });
        uintArray[i] = Math.floor(normalizedValue);
        uintArray[i + 1] = buckets[0];
        uintArray[i + 2] = buckets[1];
        uintArray[i + 3] = buckets[2];
    };
    for (var i = 0; i < uintArray.length; i += 4) {
        _loop_1(i);
    }
    return uintArray;
}
exports.encodeFloatArray = encodeFloatArray;
function decodeToFloatArray(uintArray) {
    var floatArray = new Float32Array(uintArray.length / 4);
    var _loop_2 = function (i) {
        if (uintArray[i] === exports.BYTE_NAN_VALUE &&
            uintArray[i + 1] === exports.BYTE_NAN_VALUE &&
            uintArray[i + 2] === exports.BYTE_NAN_VALUE &&
            uintArray[i + 3] === exports.BYTE_NAN_VALUE) {
            floatArray[i / 4] = NaN;
            return "continue";
        }
        var dot = 0;
        FLOAT_DELTAS.forEach(function (delta, j) {
            dot += delta * uintArray[i + j];
        });
        var value = dot * FLOAT_RANGE + exports.FLOAT_MIN;
        floatArray[i / 4] = value;
    };
    for (var i = 0; i < uintArray.length; i += 4) {
        _loop_2(i);
    }
    return floatArray;
}
exports.decodeToFloatArray = decodeToFloatArray;
function decodeMatrixFromUnpackedArray(unpackedArray, matrix, channelsPerTexture) {
    var requiredSize = getMatrixSizeFromUnpackedArraySize(unpackedArray.length, channelsPerTexture);
    if (matrix.length < requiredSize) {
        throw new Error("matrix length (" + matrix.length + ") must be >= " + requiredSize);
    }
    var dst = 0;
    for (var src = 0; src < unpackedArray.length; src += channelsPerTexture) {
        matrix[dst++] = unpackedArray[src];
    }
}
exports.decodeMatrixFromUnpackedArray = decodeMatrixFromUnpackedArray;
function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {
    var requiredSize = unpackedArray.length * channels / 4;
    if (matrix.length < requiredSize) {
        throw new Error("matrix length (" + matrix.length + ") must be >= " + requiredSize);
    }
    var dst = 0;
    for (var src = 0; src < unpackedArray.length; src += 4) {
        for (var c = 0; c < channels; c++) {
            matrix[dst++] = unpackedArray[src + c];
        }
    }
}
exports.decodeMatrixFromUnpackedColorRGBAArray = decodeMatrixFromUnpackedColorRGBAArray;
function getPackedMatrixTextureShapeWidthHeight(rows, columns) {
    return [Math.ceil(columns / 2), Math.ceil(rows / 2)];
}
exports.getPackedMatrixTextureShapeWidthHeight = getPackedMatrixTextureShapeWidthHeight;
function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {
    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    return w * h * 4;
}
exports.getPackedRGBAArraySizeFromMatrixShape = getPackedRGBAArraySizeFromMatrixShape;
function encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA) {
    var requiredSize = getPackedRGBAArraySizeFromMatrixShape(rows, columns);
    if (packedRGBA.length < requiredSize) {
        throw new Error("packedRGBA length (" + packedRGBA.length + ") must be >= " + requiredSize);
    }
    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), textureWidth = _a[0], textureHeight = _a[1];
    var oddWidth = (columns % 2) === 1;
    var oddHeight = (rows % 2) === 1;
    var widthInFullBlocks = Math.floor(columns / 2);
    var heightInFullBlocks = Math.floor(rows / 2);
    {
        var dstStride = (oddWidth ? 4 : 0);
        var oneRow = columns;
        var dst = 0;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            var matrixSrcRow = (blockY * 2 * columns);
            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
                var matrixSrcCol = blockX * 2;
                var src = matrixSrcRow + matrixSrcCol;
                packedRGBA[dst] = matrix[src];
                packedRGBA[dst + 1] = matrix[src + 1];
                packedRGBA[dst + 2] = matrix[src + oneRow];
                packedRGBA[dst + 3] = matrix[src + oneRow + 1];
                dst += 4;
            }
            dst += dstStride;
        }
    }
    if (oddWidth) {
        var src = columns - 1;
        var dst = (textureWidth - 1) * 4;
        var srcStride = 2 * columns;
        var dstStride = textureWidth * 4;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            packedRGBA[dst] = matrix[src];
            packedRGBA[dst + 2] = matrix[src + columns];
            src += srcStride;
            dst += dstStride;
        }
    }
    if (oddHeight) {
        var src = (rows - 1) * columns;
        var dst = (textureHeight - 1) * textureWidth * 4;
        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
            packedRGBA[dst++] = matrix[src++];
            packedRGBA[dst++] = matrix[src++];
            dst += 2;
        }
    }
    if (oddWidth && oddHeight) {
        packedRGBA[packedRGBA.length - 4] = matrix[matrix.length - 1];
    }
    return packedRGBA;
}
exports.encodeMatrixToPackedRGBA = encodeMatrixToPackedRGBA;
function decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix) {
    var requiredSize = rows * columns;
    if (requiredSize < matrix.length) {
        throw new Error("matrix length (" + matrix.length + ") must be >= " + requiredSize);
    }
    var oddWidth = (columns % 2) === 1;
    var oddHeight = (rows % 2) === 1;
    var widthInFullBlocks = Math.floor(columns / 2);
    var heightInFullBlocks = Math.floor(rows / 2);
    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), textureWidth = _a[0], textureHeight = _a[1];
    {
        var srcStride = oddWidth ? 4 : 0;
        var dstStride = columns + (oddWidth ? 1 : 0);
        var src = 0;
        var dstRow1 = 0;
        var dstRow2 = columns;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
                matrix[dstRow1++] = packedRGBA[src++];
                matrix[dstRow1++] = packedRGBA[src++];
                matrix[dstRow2++] = packedRGBA[src++];
                matrix[dstRow2++] = packedRGBA[src++];
            }
            src += srcStride;
            dstRow1 += dstStride;
            dstRow2 += dstStride;
        }
    }
    if (oddWidth) {
        var src = (textureWidth - 1) * 4;
        var dst = columns - 1;
        var srcStride = textureWidth * 4;
        var dstStride = 2 * columns;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            matrix[dst] = packedRGBA[src];
            matrix[dst + columns] = packedRGBA[src + 2];
            src += srcStride;
            dst += dstStride;
        }
    }
    if (oddHeight) {
        var src = (textureHeight - 1) * textureWidth * 4;
        var dst = (rows - 1) * columns;
        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
            matrix[dst++] = packedRGBA[src++];
            matrix[dst++] = packedRGBA[src++];
            src += 2;
        }
    }
    if (oddWidth && oddHeight) {
        matrix[matrix.length - 1] = packedRGBA[packedRGBA.length - 4];
    }
    return matrix;
}
exports.decodeMatrixFromPackedRGBA = decodeMatrixFromPackedRGBA;

},{}],318:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../../environment");
var util = require("../../util");
var broadcast_util = require("../../ops/broadcast_util");
var tex_util = require("./tex_util");
function makeShader(inputsInfo, outputShape, userCode, broadcast) {
    var sampleSnippet = getSampleSnippet();
    var setOutputSnippet = getSetOutputSnippet();
    var inputPrefixSnippet = inputsInfo.map(function (x) { return "uniform sampler2D " + x.name + ";"; }).join('\n');
    var inputSamplingSnippet = inputsInfo.map(function (x) { return getInputSamplingSnippet(x, outputShape, broadcast); })
        .join('\n');
    var outTexShape = outputShape.texShape;
    var outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);
    var source = [
        SHADER_PREFIX, sampleSnippet, setOutputSnippet, inputPrefixSnippet,
        outputSamplingSnippet, inputSamplingSnippet, userCode
    ].join('\n');
    return source;
}
exports.makeShader = makeShader;
function getSampleSnippet() {
    return environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ?
        FLOAT_TEXTURE_SAMPLE_SNIPPET :
        UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET;
}
function getSetOutputSnippet() {
    return environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ?
        FLOAT_TEXTURE_SETOUTPUT_SNIPPET :
        UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET;
}
function getSamplerFromInInfo(inInfo) {
    var shape = inInfo.shapeInfo.logicalShape;
    switch (shape.length) {
        case 0:
            return getSamplerScalar(inInfo);
        case 1:
            return getSampler1D(inInfo);
        case 2:
            return getSampler2D(inInfo);
        case 3:
            return getSampler3D(inInfo);
        case 4:
            return getSampler4D(inInfo);
        default:
            throw new Error(shape.length + "-D input sampling" +
                " is not yet supported");
    }
}
function getInputSamplingSnippet(inInfo, outShapeInfo, broadcast) {
    var res = getSamplerFlat(inInfo);
    res += getSamplerFromInInfo(inInfo);
    if (broadcast ||
        util.arraysEqual(inInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape)) {
        res += getSamplerAtOutputCoords(inInfo, outShapeInfo, broadcast);
    }
    return res;
}
function getOutputSamplingSnippet(outShape, outTexShape) {
    switch (outShape.length) {
        case 0:
            return getOutputScalarCoords();
        case 1:
            return getOutput1DCoords(outShape, outTexShape);
        case 2:
            return getOutput2DCoords(outShape, outTexShape);
        case 3:
            return getOutput3DCoords(outShape, outTexShape);
        case 4:
            return getOutput4DCoords(outShape, outTexShape);
        default:
            throw new Error(outShape.length + "-D output sampling is not yet supported");
    }
}
var SAMPLE_1D_SNIPPET = "\nvec2 UVfrom1D(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var SAMPLE_2D_SNIPPET = "\nvec2 UVfrom2D(int texNumR, int texNumC, int numC, int row, int col) {\n  int index = row * numC + col;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var SAMPLE_3D_SNIPPET = "\nvec2 UVfrom3D(int texNumR, int texNumC, int stride0,\n    int stride1, int row, int col, int depth) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var SAMPLE_4D_SNIPPET = "\nvec2 UVfrom4D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int row, int col, int depth,\n    int depth2) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET = "\n  uniform float NaN;\n\n  const vec4 floatDeltas = vec4(\n      1.0,\n      1.0 / 255.0,\n      1.0 / (255.0 * 255.0),\n      1.0 / (255.0 * 255.0 * 255.0)\n  );\n  const float minValue = " + tex_util.FLOAT_MIN + ".0;\n  const float maxValue = " + tex_util.FLOAT_MAX + ".0;\n  const float range = (maxValue - minValue) / 255.0;\n  const vec2 dotRange = vec2(1.0, range);\n\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\n    vec4 sampleValue = texture2D(textureSampler, uv);\n    if (all(equal(sampleValue, vec4(" + tex_util.BYTE_NAN_VALUE + ")))) {\n      return NaN;\n    }\n\n    vec4 encValue = floor(sampleValue * 255.0 + 0.5);\n    float decodedValue = dot(encValue, floatDeltas);\n    return dot(vec2(minValue, decodedValue), dotRange);\n  }\n";
var UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET = "\n  const vec4 floatPowers = vec4(\n    1.0,\n    255.0,\n    255.0 * 255.0,\n    255.0 * 255.0 * 255.0\n  );\n  const vec2 recipRange = vec2(1.0/range);\n  const vec2 recipRange255 = vec2(1.0/(maxValue - minValue));\n\n  void setOutput(float decodedValue) {\n    if (isNaN(decodedValue)) {\n      gl_FragColor = vec4(" + tex_util.BYTE_NAN_VALUE + ");\n      return;\n    }\n\n    float a = dot(vec2(decodedValue, -minValue), recipRange);\n    float b = fract(a) * 255.0;\n    float c = fract(b) * 255.0;\n    float d = fract(c) * 255.0;\n    gl_FragColor = floor(vec4(a, b, c, d)) / 255.0;\n\n    // TODO(dsmilkov): Version above gets better accuracy but probably slower\n    // than the version below. Benchmark to determine if the accuracy is worth\n    // the cost.\n\n    // float normValue = dot(vec2(decodedValue, -minValue), recipRange255);\n    // vec4 f = normValue * floatPowers;\n    // gl_FragColor = floor(fract(f) * 255.0) / 255.0;\n  }\n";
var FLOAT_TEXTURE_SAMPLE_SNIPPET = "\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\n    return texture2D(textureSampler, uv).r;\n  }\n";
var FLOAT_TEXTURE_SETOUTPUT_SNIPPET = "\n  void setOutput(float val) {\n    gl_FragColor = vec4(val, 0, 0, 0);\n  }\n";
var SHADER_PREFIX = "\n  precision highp float;\n  precision highp int;\n  varying vec2 resultUV;\n  const vec2 halfCR = vec2(0.5, 0.5);\n\n  bool isNaN(float val) {\n    float v1 = val * val;\n    float v2 = val * val;\n    return v1 == v2 ? false : true;\n  }\n\n  bool hasNaN(vec4 values) {\n    vec4 v1 = values * values;\n    vec4 v2 = values * values;\n    return any(notEqual(v1, v2));\n  }\n\n  float getNaN(vec4 values) {\n    return dot(vec4(1), values);\n  }\n\n  int round(float value) {\n    return int(floor(value + 0.5));\n  }\n\n  int imod(int x, int y) {\n    return x - y * (x / y);\n  }\n\n  const vec2 randomConst = vec2(\n    23.14069263277926, // e^pi (Gelfond's constant)\n     2.665144142690225 // 2^sqrt(2) (Gelfond\u2013Schneider constant)\n  );\n\n  float random(float seed) {\n      return fract(cos(dot(resultUV * seed, randomConst)) * 12345.6789);\n  }\n\n  " + SAMPLE_1D_SNIPPET + "\n  " + SAMPLE_2D_SNIPPET + "\n  " + SAMPLE_3D_SNIPPET + "\n  " + SAMPLE_4D_SNIPPET + "\n";
function getOutputScalarCoords() {
    return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
}
function getOutput1DCoords(shape, texShape) {
    if (texShape[0] === 1) {
        return "\n      int getOutputCoords() {\n        return int(resultUV.x * " + texShape[1] + ".0);\n      }\n    ";
    }
    if (texShape[1] === 1) {
        return "\n      int getOutputCoords() {\n        return int(resultUV.y * " + texShape[0] + ".0);\n      }\n    ";
    }
    return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + texShape[0] + ", " + texShape[1] + "));\n      return resTexRC.x * " + texShape[1] + " + resTexRC.y;\n    }\n  ";
}
function getOutput3DCoords(shape, texShape) {
    var stride0 = shape[1] * shape[2];
    var stride1 = shape[2];
    return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n      int r = index / " + stride0 + ";\n      index -= r * " + stride0 + ";\n      int c = index / " + stride1 + ";\n      int d = index - c * " + stride1 + ";\n      return ivec3(r, c, d);\n    }\n  ";
}
function getOutput4DCoords(shape, texShape) {
    var stride2 = shape[3];
    var stride1 = shape[2] * stride2;
    var stride0 = shape[1] * stride1;
    return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n\n      int r = index / " + stride0 + ";\n      index -= r * " + stride0 + ";\n\n      int c = index / " + stride1 + ";\n      index -= c * " + stride1 + ";\n\n      int d = index / " + stride2 + ";\n      int d2 = index - d * " + stride2 + ";\n\n      return ivec4(r, c, d, d2);\n    }\n  ";
}
function getOutput2DCoords(shape, texShape) {
    if (util.arraysEqual(shape, texShape)) {
        return "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + texShape[0] + ", " + texShape[1] + "));\n      }\n    ";
    }
    if (shape[1] === 1) {
        return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + texShape[0] + ", " + texShape[1] + "));\n        int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ";
    }
    if (shape[0] === 1) {
        return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + texShape[0] + ", " + texShape[1] + "));\n        int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ";
    }
    return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n      int r = index / " + shape[1] + ";\n      int c = index - r * " + shape[1] + ";\n      return ivec2(r, c);\n    }\n  ";
}
function getSamplerScalar(inputInfo) {
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    return "\n    float " + funcName + "() {\n      return sampleTexture(" + texName + ", halfCR);\n    }\n  ";
}
function getSampler1D(inputInfo) {
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    return "\n    float " + funcName + "(int index) {\n      return " + funcName + "Flat(index);\n    }\n  ";
}
function getSampler2D(inputInfo) {
    var shape = inputInfo.shapeInfo.logicalShape;
    var texShape = inputInfo.shapeInfo.texShape;
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    var texNumR = texShape[0];
    var texNumC = texShape[1];
    if (util.arraysEqual(shape, texShape)) {
        return "\n    float " + funcName + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + texNumC + ".0, " + texNumR + ".0);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
    }
    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
    var squeezedShape = newShape;
    if (squeezedShape.length < shape.length) {
        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
        var params = ['row', 'col'];
        return "\n      " + getSamplerFromInInfo(newInputInfo) + "\n      float " + funcName + "(int row, int col) {\n        return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n      }\n    ";
    }
    if (texNumC === 1) {
        return "\n    float " + funcName + "(int row, int col) {\n      int index = row * " + shape[1] + " + col;\n      vec2 uv = vec2(0.5, (float(index) + 0.5) / " + texNumR + ".0);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
    }
    if (texNumR === 1) {
        return "\n    float " + funcName + "(int row, int col) {\n      int index = row * " + shape[1] + " + col;\n      vec2 uv = vec2((float(index) + 0.5) / " + texNumC + ".0, 0.5);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
    }
    return "\n  float " + funcName + "(int row, int col) {\n    vec2 uv = UVfrom2D(" + texNumR + ", " + texNumC + ", " + shape[1] + ", row, col);\n    return sampleTexture(" + texName + ", uv);\n  }\n";
}
function getSampler3D(inputInfo) {
    var texShape = inputInfo.shapeInfo.texShape;
    var shape = inputInfo.shapeInfo.logicalShape;
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    var texNumR = texShape[0];
    var texNumC = texShape[1];
    var stride0 = shape[1] * shape[2];
    var stride1 = shape[2];
    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
    var squeezedShape = newShape;
    if (squeezedShape.length < shape.length) {
        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
        var params = ['row', 'col', 'depth'];
        return "\n        " + getSamplerFromInInfo(newInputInfo) + "\n        float " + funcName + "(int row, int col, int depth) {\n          return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n        }\n      ";
    }
    if (texNumC === stride0) {
        return "\n        float " + funcName + "(int row, int col, int depth) {\n          int texR = row;\n          int texC = col * " + stride1 + " + depth;\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + texNumC + ".0, " + texNumR + ".0);\n          return sampleTexture(" + texName + ", uv);\n        }\n      ";
    }
    if (texNumC === stride1) {
        return "\n    float " + funcName + "(int row, int col, int depth) {\n      int texR = row * " + shape[1] + " + col;\n      int texC = depth;\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + texNumC + ".0, " + texNumR + ".0);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
    }
    return "\n      float " + funcName + "(int row, int col, int depth) {\n        vec2 uv = UVfrom3D(\n            " + texNumR + ", " + texNumC + ", " + stride0 + ", " + stride1 + ", row, col, depth);\n        return sampleTexture(" + texName + ", uv);\n      }\n  ";
}
function getSampler4D(inputInfo) {
    var shape = inputInfo.shapeInfo.logicalShape;
    var texShape = inputInfo.shapeInfo.texShape;
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    var texNumR = texShape[0];
    var texNumC = texShape[1];
    var stride2 = shape[3];
    var stride1 = shape[2] * stride2;
    var stride0 = shape[1] * stride1;
    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
    if (newShape.length < shape.length) {
        var newInputInfo = squeezeInputInfo(inputInfo, newShape);
        var params = ['row', 'col', 'depth', 'depth2'];
        return "\n      " + getSamplerFromInInfo(newInputInfo) + "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n      }\n    ";
    }
    if (texNumC === stride0) {
        return "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        int texR = row;\n        int texC = col * " + stride1 + " + depth * " + stride2 + " + depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
    }
    if (texNumC === stride2) {
        return "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        int texR = row * " + shape[1] * shape[2] + " + col * " + shape[2] + " + depth;\n        int texC = depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
    }
    return "\n    float " + funcName + "(int row, int col, int depth, int depth2) {\n      vec2 uv = UVfrom4D(" + texNumR + ", " + texNumC + ", " + stride0 + ", " + stride1 + ",\n          " + stride2 + ", row, col, depth, depth2);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
}
function getSamplerFlat(inputInfo) {
    var texName = inputInfo.name;
    var texShape = inputInfo.shapeInfo.texShape;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1) + 'Flat';
    var tNumR = texShape[0];
    var tNumC = texShape[1];
    if (tNumC === 1 && tNumR === 1) {
        return "\n      float " + funcName + "(int index) {\n        return sampleTexture(" + texName + ", halfCR);\n      }\n    ";
    }
    if (tNumC === 1) {
        return "\n      float " + funcName + "(int index) {\n        vec2 uv = vec2(0.5, (float(index) + 0.5) / " + tNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
    }
    if (tNumR === 1) {
        return "\n      float " + funcName + "(int index) {\n        vec2 uv = vec2((float(index) + 0.5) / " + tNumC + ".0, 0.5);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
    }
    return "\n    float " + funcName + "(int index) {\n      vec2 uv = UVfrom1D(" + tNumR + ", " + tNumC + ", index);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
}
function getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName) {
    var inRank = inputInfo.shapeInfo.logicalShape.length;
    var outRank = outShapeInfo.logicalShape.length;
    var type = 'int';
    if (outRank === 2) {
        type = 'ivec2';
    }
    else if (outRank === 3) {
        type = 'ivec3';
    }
    else if (outRank === 4) {
        type = 'ivec4';
    }
    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
    var rankDiff = outRank - inRank;
    var coordsSnippet;
    if (inRank === 0) {
        coordsSnippet = '';
    }
    else if (outRank < 2 && broadcastDims.length >= 1) {
        coordsSnippet = 'coords = 0;';
    }
    else {
        coordsSnippet =
            broadcastDims.map(function (d) { return "coords[" + (d + rankDiff) + "] = 0;"; }).join('\n');
    }
    var unpackedCoordsSnippet = '';
    if (outRank < 2 && inRank > 0) {
        unpackedCoordsSnippet = 'coords';
    }
    else {
        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape
            .map(function (s, i) { return "coords[" + (i + rankDiff) + "]"; })
            .join(', ');
    }
    return "\n    float " + funcName + "() {\n      " + type + " coords = getOutputCoords();\n      " + coordsSnippet + "\n      return get" + texFuncSnippet + "(" + unpackedCoordsSnippet + ");\n    }\n  ";
}
function getSamplerAtOutputCoords(inputInfo, outShapeInfo, supportsBroadcasting) {
    var inTexShape = inputInfo.shapeInfo.texShape;
    var texName = inputInfo.name;
    var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
    var funcName = 'get' + texFuncSnippet + 'AtOutCoords';
    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
    var inRank = inputInfo.shapeInfo.logicalShape.length;
    var outRank = outShapeInfo.logicalShape.length;
    var doBroadcast = supportsBroadcasting && ((outRank > inRank) || broadcastDims.length > 0);
    var broadcastOverOuter = broadcast_util.broadcastDimsAreOuter(broadcastDims);
    if (doBroadcast && !broadcastOverOuter) {
        return getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName);
    }
    var outTexShape = outShapeInfo.texShape;
    if (util.arraysEqual(inTexShape, outTexShape)) {
        return "\n      float " + funcName + "() {\n        return sampleTexture(" + texName + ", resultUV);\n      }\n    ";
    }
    var inSize = util.sizeFromShape(inTexShape);
    var broadcastSnippet = '';
    if (doBroadcast && broadcastOverOuter) {
        broadcastSnippet = "\n        int mainPart = index / " + inSize + ";\n        index -= mainPart * " + inSize + ";\n      ";
    }
    return "\n    float " + funcName + "() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + outTexShape[0] + ", " + outTexShape[1] + "));\n      int index = resTexRC.x * " + outTexShape[1] + " + resTexRC.y;\n      " + broadcastSnippet + "\n      int texR = index / " + inTexShape[1] + ";\n      int texC = index - texR * " + inTexShape[1] + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) /\n                 vec2(" + inTexShape[1] + ".0, " + inTexShape[0] + ".0);\n\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
}
function getCoordsDataType(rank) {
    if (rank <= 1) {
        return 'int';
    }
    else if (rank === 2) {
        return 'ivec2';
    }
    else if (rank === 3) {
        return 'ivec3';
    }
    else if (rank === 4) {
        return 'ivec4';
    }
    else {
        throw Error("GPU for rank " + rank + " is not yet supported");
    }
}
exports.getCoordsDataType = getCoordsDataType;
function squeezeInputInfo(inInfo, squeezedShape) {
    var newInputInfo = JSON.parse(JSON.stringify(inInfo));
    newInputInfo.shapeInfo.logicalShape = squeezedShape;
    return newInputInfo;
}
function getSqueezedParams(params, keptDims) {
    return keptDims.map(function (d) { return params[d]; }).join(', ');
}

},{"../../environment":111,"../../util":114,"../../ops/broadcast_util":221,"./tex_util":257}],241:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shader_compiler_1 = require("./shader_compiler");
var GatherProgram = (function () {
    function GatherProgram(aShape, indicesLength, axis) {
        this.variableNames = ['A', 'indices'];
        var outputShape = aShape.slice();
        outputShape[axis] = indicesLength;
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        var dtype = shader_compiler_1.getCoordsDataType(this.rank);
        var sourceCoords = getSourceCoords(aShape, axis);
        this.userCode = "\n      void main() {\n        " + dtype + " resRC = getOutputCoords();\n        setOutput(getA(" + sourceCoords + "));\n      }\n    ";
    }
    return GatherProgram;
}());
exports.GatherProgram = GatherProgram;
function getSourceCoords(aShape, axis) {
    var rank = aShape.length;
    if (rank > 4) {
        throw Error("Gather for rank " + rank + " is not yet supported");
    }
    if (rank === 1) {
        return "int(getIndices(resRC))";
    }
    var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
    var sourceCoords = [];
    for (var i = 0; i < aShape.length; i++) {
        if (i === axis) {
            sourceCoords.push("int(getIndices(" + currentCoords[i] + "))");
        }
        else {
            sourceCoords.push("" + currentCoords[i]);
        }
    }
    return sourceCoords.join();
}

},{"./shader_compiler":318}],136:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MAX_TEXTURE_SIZE = null;
var util = require("../../util");
var environment_1 = require("../../environment");
function createWebGLRenderingContext(attributes) {
    var canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = 1;
    return createWebGLRenderingContextFromCanvas(canvas, attributes);
}
exports.createWebGLRenderingContext = createWebGLRenderingContext;
function createWebGLRenderingContextFromCanvas(canvas, attributes) {
    var gl;
    var webglVersion = environment_1.ENV.get('WEBGL_VERSION');
    if (webglVersion === 2) {
        gl = canvas.getContext('webgl2', attributes);
    }
    else if (webglVersion === 1) {
        gl = (canvas.getContext('webgl', attributes) ||
            canvas.getContext('experimental-webgl', attributes));
    }
    if (webglVersion === 0 || gl == null) {
        throw new Error('This browser does not support WebGL.');
    }
    return gl;
}
exports.createWebGLRenderingContextFromCanvas = createWebGLRenderingContextFromCanvas;
function callAndCheck(gl, func) {
    var returnValue = func();
    checkWebGLError(gl);
    return returnValue;
}
exports.callAndCheck = callAndCheck;
var webGLDebugErrorCheckingEnabled = false;
function enableDebugWebGLErrorChecking(enabled) {
    webGLDebugErrorCheckingEnabled = enabled;
}
exports.enableDebugWebGLErrorChecking = enableDebugWebGLErrorChecking;
function checkWebGLError(gl) {
    if (webGLDebugErrorCheckingEnabled) {
        var error = gl.getError();
        if (error !== gl.NO_ERROR) {
            throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));
        }
    }
}
exports.checkWebGLError = checkWebGLError;
function getWebGLErrorMessage(gl, status) {
    switch (status) {
        case gl.NO_ERROR:
            return 'NO_ERROR';
        case gl.INVALID_ENUM:
            return 'INVALID_ENUM';
        case gl.INVALID_VALUE:
            return 'INVALID_VALUE';
        case gl.INVALID_OPERATION:
            return 'INVALID_OPERATION';
        case gl.INVALID_FRAMEBUFFER_OPERATION:
            return 'INVALID_FRAMEBUFFER_OPERATION';
        case gl.OUT_OF_MEMORY:
            return 'OUT_OF_MEMORY';
        case gl.CONTEXT_LOST_WEBGL:
            return 'CONTEXT_LOST_WEBGL';
        default:
            return "Unknown error code " + status;
    }
}
exports.getWebGLErrorMessage = getWebGLErrorMessage;
function getExtensionOrThrow(gl, extensionName) {
    return throwIfNull(gl, function () { return gl.getExtension(extensionName); }, 'Extension "' + extensionName + '" not supported on this browser.');
}
exports.getExtensionOrThrow = getExtensionOrThrow;
function createVertexShader(gl, vertexShaderSource) {
    var vertexShader = throwIfNull(gl, function () { return gl.createShader(gl.VERTEX_SHADER); }, 'Unable to create vertex WebGLShader.');
    callAndCheck(gl, function () { return gl.shaderSource(vertexShader, vertexShaderSource); });
    callAndCheck(gl, function () { return gl.compileShader(vertexShader); });
    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {
        console.log(gl.getShaderInfoLog(vertexShader));
        throw new Error('Failed to compile vertex shader.');
    }
    return vertexShader;
}
exports.createVertexShader = createVertexShader;
function createFragmentShader(gl, fragmentShaderSource) {
    var fragmentShader = throwIfNull(gl, function () { return gl.createShader(gl.FRAGMENT_SHADER); }, 'Unable to create fragment WebGLShader.');
    callAndCheck(gl, function () { return gl.shaderSource(fragmentShader, fragmentShaderSource); });
    callAndCheck(gl, function () { return gl.compileShader(fragmentShader); });
    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {
        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));
        throw new Error('Failed to compile fragment shader.');
    }
    return fragmentShader;
}
exports.createFragmentShader = createFragmentShader;
var lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;
function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {
    var lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);
    if (lineNumberRegexResult == null) {
        console.log("Couldn't parse line number in error: " + shaderInfoLog);
        console.log(shaderSource);
        return;
    }
    var lineNumber = +lineNumberRegexResult[1];
    var shaderLines = shaderSource.split('\n');
    var pad = shaderLines.length.toString().length + 2;
    var linesWithLineNumbers = shaderLines.map(function (line, lineNumber) {
        return util.rightPad((lineNumber + 1).toString(), pad) + line;
    });
    var maxLineLength = 0;
    for (var i = 0; i < linesWithLineNumbers.length; i++) {
        maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);
    }
    var beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);
    var errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);
    var afterErrorLines = linesWithLineNumbers.slice(lineNumber);
    console.log(beforeErrorLines.join('\n'));
    console.log(shaderInfoLog.split('\n')[0]);
    console.log("%c " + util.rightPad(errorLine[0], maxLineLength), 'border:1px solid red; background-color:#e3d2d2; color:#a61717');
    console.log(afterErrorLines.join('\n'));
}
function createProgram(gl) {
    return throwIfNull(gl, function () { return gl.createProgram(); }, 'Unable to create WebGLProgram.');
}
exports.createProgram = createProgram;
function linkProgram(gl, program) {
    callAndCheck(gl, function () { return gl.linkProgram(program); });
    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
        console.log(gl.getProgramInfoLog(program));
        throw new Error('Failed to link vertex and fragment shaders.');
    }
}
exports.linkProgram = linkProgram;
function validateProgram(gl, program) {
    callAndCheck(gl, function () { return gl.validateProgram(program); });
    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {
        console.log(gl.getProgramInfoLog(program));
        throw new Error('Shader program validation failed.');
    }
}
exports.validateProgram = validateProgram;
function createStaticVertexBuffer(gl, data) {
    var buffer = throwIfNull(gl, function () { return gl.createBuffer(); }, 'Unable to create WebGLBuffer');
    callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, buffer); });
    callAndCheck(gl, function () { return gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW); });
    return buffer;
}
exports.createStaticVertexBuffer = createStaticVertexBuffer;
function createStaticIndexBuffer(gl, data) {
    var buffer = throwIfNull(gl, function () { return gl.createBuffer(); }, 'Unable to create WebGLBuffer');
    callAndCheck(gl, function () { return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer); });
    callAndCheck(gl, function () { return gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); });
    return buffer;
}
exports.createStaticIndexBuffer = createStaticIndexBuffer;
function queryMaxTextureSize(gl) {
    if (MAX_TEXTURE_SIZE != null) {
        return MAX_TEXTURE_SIZE;
    }
    MAX_TEXTURE_SIZE =
        callAndCheck(gl, function () { return gl.getParameter(gl.MAX_TEXTURE_SIZE); });
    return MAX_TEXTURE_SIZE;
}
exports.queryMaxTextureSize = queryMaxTextureSize;
function getChannelsPerTexture() {
    if (!environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        return 4;
    }
    if (environment_1.ENV.get('WEBGL_VERSION') === 2) {
        return 1;
    }
    return 4;
}
exports.getChannelsPerTexture = getChannelsPerTexture;
function createTexture(gl) {
    return throwIfNull(gl, function () { return gl.createTexture(); }, 'Unable to create WebGLTexture.');
}
exports.createTexture = createTexture;
function validateTextureSize(gl, width, height) {
    var maxTextureSize = queryMaxTextureSize(gl);
    if ((width <= 0) || (height <= 0)) {
        var requested = "[" + width + "x" + height + "]";
        throw new Error('Requested texture size ' + requested + ' is invalid.');
    }
    if ((width > maxTextureSize) || (height > maxTextureSize)) {
        var requested = "[" + width + "x" + height + "]";
        var max = "[" + maxTextureSize + "x" + maxTextureSize + "]";
        throw new Error('Requested texture size ' + requested +
            ' greater than WebGL maximum on this browser / GPU ' + max + '.');
    }
}
exports.validateTextureSize = validateTextureSize;
function createFramebuffer(gl) {
    return throwIfNull(gl, function () { return gl.createFramebuffer(); }, 'Unable to create WebGLFramebuffer.');
}
exports.createFramebuffer = createFramebuffer;
function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {
    var loc = gl.getAttribLocation(program, attribute);
    if (loc === -1) {
        return false;
    }
    callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, buffer); });
    callAndCheck(gl, function () { return gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes); });
    callAndCheck(gl, function () { return gl.enableVertexAttribArray(loc); });
    return true;
}
exports.bindVertexBufferToProgramAttribute = bindVertexBufferToProgramAttribute;
function bindTextureUnit(gl, texture, textureUnit) {
    validateTextureUnit(gl, textureUnit);
    callAndCheck(gl, function () { return gl.activeTexture(gl.TEXTURE0 + textureUnit); });
    callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });
}
exports.bindTextureUnit = bindTextureUnit;
function unbindTextureUnit(gl, textureUnit) {
    validateTextureUnit(gl, textureUnit);
    callAndCheck(gl, function () { return gl.activeTexture(gl.TEXTURE0 + textureUnit); });
    callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
}
exports.unbindTextureUnit = unbindTextureUnit;
function getProgramUniformLocationOrThrow(gl, program, uniformName) {
    return throwIfNull(gl, function () { return gl.getUniformLocation(program, uniformName); }, 'uniform "' + uniformName + '" not present in program.');
}
exports.getProgramUniformLocationOrThrow = getProgramUniformLocationOrThrow;
function getProgramUniformLocation(gl, program, uniformName) {
    return gl.getUniformLocation(program, uniformName);
}
exports.getProgramUniformLocation = getProgramUniformLocation;
function bindTextureToProgramUniformSampler(gl, program, texture, uniformSamplerLocation, textureUnit) {
    callAndCheck(gl, function () { return bindTextureUnit(gl, texture, textureUnit); });
    callAndCheck(gl, function () { return gl.uniform1i(uniformSamplerLocation, textureUnit); });
}
exports.bindTextureToProgramUniformSampler = bindTextureToProgramUniformSampler;
function bindCanvasToFramebuffer(gl) {
    callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, null); });
    callAndCheck(gl, function () { return gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); });
    callAndCheck(gl, function () { return gl.scissor(0, 0, gl.canvas.width, gl.canvas.height); });
}
exports.bindCanvasToFramebuffer = bindCanvasToFramebuffer;
function bindColorTextureToFramebuffer(gl, texture, framebuffer) {
    callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer); });
    callAndCheck(gl, function () { return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); });
}
exports.bindColorTextureToFramebuffer = bindColorTextureToFramebuffer;
function unbindColorTextureFromFramebuffer(gl, framebuffer) {
    callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer); });
    callAndCheck(gl, function () { return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0); });
}
exports.unbindColorTextureFromFramebuffer = unbindColorTextureFromFramebuffer;
function validateFramebuffer(gl) {
    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    if (status !== gl.FRAMEBUFFER_COMPLETE) {
        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));
    }
}
exports.validateFramebuffer = validateFramebuffer;
function getFramebufferErrorMessage(gl, status) {
    switch (status) {
        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';
        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';
        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';
        case gl.FRAMEBUFFER_UNSUPPORTED:
            return 'FRAMEBUFFER_UNSUPPORTED';
        default:
            return "unknown error " + status;
    }
}
exports.getFramebufferErrorMessage = getFramebufferErrorMessage;
function throwIfNull(gl, returnTOrNull, failureMessage) {
    var tOrNull = callAndCheck(gl, function () { return returnTOrNull(); });
    if (tOrNull == null) {
        throw new Error(failureMessage);
    }
    return tOrNull;
}
function validateTextureUnit(gl, textureUnit) {
    var maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
    var glTextureUnit = textureUnit + gl.TEXTURE0;
    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {
        var textureUnitRange = "[gl.TEXTURE0, gl.TEXTURE" + maxTextureUnit + "]";
        throw new Error("textureUnit must be in " + textureUnitRange + ".");
    }
}
function getTextureShapeFromLogicalShape(gl, logShape) {
    if (logShape.length !== 2) {
        var squeezeResult = util.squeezeShape(logShape);
        logShape = squeezeResult.newShape;
    }
    var maxTexSize = queryMaxTextureSize(gl);
    var size = util.sizeFromShape(logShape);
    if (logShape.length <= 1 && size <= maxTexSize) {
        return [size, 1];
    }
    else if (logShape.length === 2 && logShape[0] <= maxTexSize &&
        logShape[1] <= maxTexSize) {
        return logShape;
    }
    else if (logShape.length === 3 && logShape[0] <= maxTexSize &&
        logShape[1] * logShape[2] <= maxTexSize) {
        return [logShape[0], logShape[1] * logShape[2]];
    }
    else if (logShape.length === 4 && logShape[0] <= maxTexSize &&
        logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {
        return [logShape[0], logShape[1] * logShape[2] * logShape[3]];
    }
    else {
        return util.sizeToSquarishShape(size);
    }
}
exports.getTextureShapeFromLogicalShape = getTextureShapeFromLogicalShape;

},{"../../util":114,"../../environment":111}],135:[function(require,module,exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../../environment");
var tex_util = require("./tex_util");
var webgl_util = require("./webgl_util");
function getWebGLContextAttributes() {
    return {
        alpha: false,
        antialias: false,
        premultipliedAlpha: false,
        preserveDrawingBuffer: false,
        depth: false,
        stencil: false,
        failIfMajorPerformanceCaveat: true
    };
}
exports.getWebGLContextAttributes = getWebGLContextAttributes;
function createWebGLContext(canvas) {
    var attributes = getWebGLContextAttributes();
    var gl;
    if (canvas != null) {
        gl = webgl_util.createWebGLRenderingContextFromCanvas(canvas, attributes);
    }
    else {
        gl = webgl_util.createWebGLRenderingContext(attributes);
    }
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.DEPTH_TEST); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.STENCIL_TEST); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.BLEND); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.DITHER); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.POLYGON_OFFSET_FILL); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.SAMPLE_COVERAGE); });
    webgl_util.callAndCheck(gl, function () { return gl.enable(gl.SCISSOR_TEST); });
    webgl_util.callAndCheck(gl, function () { return gl.enable(gl.CULL_FACE); });
    webgl_util.callAndCheck(gl, function () { return gl.cullFace(gl.BACK); });
    return gl;
}
exports.createWebGLContext = createWebGLContext;
function createVertexShader(gl) {
    var vertexShaderSource = "\n    precision highp float;\n    attribute vec3 clipSpacePos;\n    attribute vec2 uv;\n    varying vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }";
    return webgl_util.createVertexShader(gl, vertexShaderSource);
}
exports.createVertexShader = createVertexShader;
function createVertexBuffer(gl) {
    var vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
    return webgl_util.createStaticVertexBuffer(gl, vertexArray);
}
exports.createVertexBuffer = createVertexBuffer;
function createIndexBuffer(gl) {
    var triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);
    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);
}
exports.createIndexBuffer = createIndexBuffer;
function getTextureInternalFormat(gl, numChannels) {
    if (!environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        return gl.RGBA;
    }
    if (environment_1.ENV.get('WEBGL_VERSION') === 2) {
        if (numChannels === 4) {
            return gl.RGBA32F;
        }
        return gl.R32F;
    }
    return gl.RGBA;
}
function getTextureFormat(gl, numChannels) {
    if (!environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        return gl.RGBA;
    }
    if (environment_1.ENV.get('WEBGL_VERSION') === 2) {
        if (numChannels === 4) {
            return gl.RGBA;
        }
        return gl.RED;
    }
    return gl.RGBA;
}
function getTextureType(gl) {
    if (!environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        return gl.UNSIGNED_BYTE;
    }
    return gl.FLOAT;
}
function createAndConfigureTexture(gl, width, height, numChannels) {
    webgl_util.validateTextureSize(gl, width, height);
    var texture = webgl_util.createTexture(gl);
    var tex2d = gl.TEXTURE_2D;
    var internalFormat = getTextureInternalFormat(gl, numChannels);
    var format = getTextureFormat(gl, numChannels);
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(tex2d, texture); });
    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); });
    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); });
    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST); });
    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST); });
    webgl_util.callAndCheck(gl, function () { return gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, format, getTextureType(gl), null); });
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
    return texture;
}
function createMatrixTexture(gl, rows, columns) {
    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
    var numChannels = 1;
    return createAndConfigureTexture(gl, width, height, numChannels);
}
exports.createMatrixTexture = createMatrixTexture;
function createColorMatrixTexture(gl, rows, columns) {
    var _a = tex_util.getColorMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
    var numChannels = 4;
    return createAndConfigureTexture(gl, width, height, numChannels);
}
exports.createColorMatrixTexture = createColorMatrixTexture;
function createPackedMatrixTexture(gl, rows, columns) {
    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
    var numChannels = 4;
    return createAndConfigureTexture(gl, width, height, numChannels);
}
exports.createPackedMatrixTexture = createPackedMatrixTexture;
function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {
    var posOffset = 0;
    var uvOffset = 3 * 4;
    var stride = (3 * 4) + (2 * 4);
    webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer); });
    var success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);
    return success &&
        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);
}
exports.bindVertexProgramAttributeStreams = bindVertexProgramAttributeStreams;
function uploadPixelDataToTexture(gl, texture, pixels) {
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });
    webgl_util.callAndCheck(gl, function () { return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels); });
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
}
exports.uploadPixelDataToTexture = uploadPixelDataToTexture;
function uploadDataToTexture(gl, texture, width, height, data, numChannels) {
    var textureFormat = getTextureFormat(gl, numChannels);
    webgl_util.validateTextureSize(gl, width, height);
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });
    webgl_util.callAndCheck(gl, function () { return gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, textureFormat, getTextureType(gl), data); });
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
}
function uploadMatrixToTexture(gl, texture, rows, columns, matrix, numChannels) {
    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    var unpackedArray;
    if (environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        var channelsPerTexture = numChannels === 1 ? webgl_util.getChannelsPerTexture() : numChannels;
        if (channelsPerTexture === 1) {
            unpackedArray = matrix;
        }
        else {
            unpackedArray =
                new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture));
            tex_util.encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture);
        }
    }
    else {
        unpackedArray = tex_util.encodeFloatArray(matrix);
    }
    uploadDataToTexture(gl, texture, w, h, unpackedArray, numChannels);
}
exports.uploadMatrixToTexture = uploadMatrixToTexture;
function uploadMatrixToPackedTexture(gl, texture, rows, columns, matrix) {
    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));
    tex_util.encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA);
    var numChannels = 4;
    uploadDataToTexture(gl, texture, w, h, packedRGBA, numChannels);
}
exports.uploadMatrixToPackedTexture = uploadMatrixToPackedTexture;
function getDownloadTargetArrayBuffer(rows, columns, channelsPerTexture) {
    var isFloatTexture = environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');
    var downloadTarget;
    if (isFloatTexture) {
        downloadTarget =
            new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, channelsPerTexture));
    }
    else {
        downloadTarget = new Uint8Array(rows * columns * channelsPerTexture);
    }
    return downloadTarget;
}
function decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel) {
    var isFloatTexture = environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');
    if (isFloatTexture) {
        var matrix = new Float32Array(rows * columns);
        tex_util.decodeMatrixFromUnpackedArray(downloadTarget, matrix, channelsPerPixel);
        return matrix;
    }
    else {
        return tex_util.decodeToFloatArray(downloadTarget);
    }
}
function downloadMatrixFromOutputTextureAsync(gl, getBufferSubDataAsyncExtension, rows, columns) {
    return __awaiter(this, void 0, void 0, function () {
        var gl2, channelsPerPixel, downloadTarget, bufferSizeBytes, buffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    gl2 = gl;
                    channelsPerPixel = 4;
                    downloadTarget = getDownloadTargetArrayBuffer(rows, columns, channelsPerPixel);
                    bufferSizeBytes = downloadTarget instanceof Float32Array ?
                        downloadTarget.length * 4 :
                        downloadTarget;
                    buffer = gl.createBuffer();
                    webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer); });
                    webgl_util.callAndCheck(gl, function () { return gl.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl.STATIC_DRAW); });
                    webgl_util.callAndCheck(gl, function () {
                        return gl2.readPixels(0, 0, columns, rows, gl.RGBA, getTextureType(gl), 0);
                    });
                    return [4, getBufferSubDataAsyncExtension.getBufferSubDataAsync(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget)];
                case 1:
                    _a.sent();
                    return [2, decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel)];
            }
        });
    });
}
exports.downloadMatrixFromOutputTextureAsync = downloadMatrixFromOutputTextureAsync;
function downloadMatrixFromOutputTexture(gl, rows, columns) {
    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    var channelsPerPixel = 4;
    var downloadTarget = getDownloadTargetArrayBuffer(rows, columns, channelsPerPixel);
    webgl_util.callAndCheck(gl, function () { return gl.readPixels(0, 0, w, h, gl.RGBA, getTextureType(gl), downloadTarget); });
    return decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel);
}
exports.downloadMatrixFromOutputTexture = downloadMatrixFromOutputTexture;
function downloadMatrixFromRGBAColorTexture(gl, rows, columns, channels) {
    var size = rows * columns * 4;
    var downloadTarget = new Uint8Array(size);
    webgl_util.callAndCheck(gl, function () { return gl.readPixels(0, 0, columns, rows, gl.RGBA, gl.UNSIGNED_BYTE, downloadTarget); });
    var packedRGBA = new Float32Array(size);
    for (var i = 0; i < downloadTarget.length; i++) {
        packedRGBA[i] = downloadTarget[i];
    }
    var matrix = new Float32Array(rows * columns * channels);
    tex_util.decodeMatrixFromUnpackedColorRGBAArray(packedRGBA, matrix, channels);
    return matrix;
}
exports.downloadMatrixFromRGBAColorTexture = downloadMatrixFromRGBAColorTexture;
function downloadMatrixFromPackedOutputTexture(gl, rows, columns) {
    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));
    webgl_util.callAndCheck(gl, function () { return gl.readPixels(0, 0, w, h, gl.RGBA, getTextureType(gl), packedRGBA); });
    var matrix = new Float32Array(rows * columns);
    return tex_util.decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix);
}
exports.downloadMatrixFromPackedOutputTexture = downloadMatrixFromPackedOutputTexture;

},{"../../environment":111,"./tex_util":257,"./webgl_util":136}],242:[function(require,module,exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../../environment");
var util = require("../../util");
var gpgpu_util = require("./gpgpu_util");
var tex_util = require("./tex_util");
var webgl_util = require("./webgl_util");
var GPGPUContext = (function () {
    function GPGPUContext(gl) {
        this.outputTexture = null;
        this.program = null;
        this.disposed = false;
        this.autoDebugValidate = false;
        this.vertexAttrsAreBound = false;
        if (gl != null) {
            this.gl = gl;
        }
        else {
            this.gl = gpgpu_util.createWebGLContext();
        }
        if (environment_1.ENV.get('WEBGL_VERSION') === 1) {
            this.textureFloatExtension =
                webgl_util.getExtensionOrThrow(this.gl, 'OES_texture_float');
            this.colorBufferFloatExtension =
                this.gl.getExtension('WEBGL_color_buffer_float');
        }
        else {
            this.colorBufferFloatExtension =
                webgl_util.getExtensionOrThrow(this.gl, 'EXT_color_buffer_float');
        }
        this.loseContextExtension =
            webgl_util.getExtensionOrThrow(this.gl, 'WEBGL_lose_context');
        if (environment_1.ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) {
            this.getBufferSubDataAsyncExtension =
                this.gl.getExtension('WEBGL_get_buffer_sub_data_async');
        }
        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);
        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);
        this.framebuffer = webgl_util.createFramebuffer(this.gl);
    }
    GPGPUContext.prototype.dispose = function () {
        var _this = this;
        if (this.disposed) {
            return;
        }
        if (this.program != null) {
            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +
                ' This is probably a resource leak, delete the program with ' +
                'GPGPUContext.deleteProgram before disposing.');
        }
        if (this.outputTexture != null) {
            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +
                'texture.  This is probably a resource leak, delete the output ' +
                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +
                'disposing.');
        }
        var gl = this.gl;
        webgl_util.callAndCheck(gl, function () { return gl.finish(); });
        webgl_util.callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, null); });
        webgl_util.callAndCheck(gl, function () { return gl.deleteFramebuffer(_this.framebuffer); });
        webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, null); });
        webgl_util.callAndCheck(gl, function () { return gl.deleteBuffer(_this.vertexBuffer); });
        webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null); });
        webgl_util.callAndCheck(gl, function () { return gl.deleteBuffer(_this.indexBuffer); });
        this.loseContextExtension.loseContext();
        this.disposed = true;
    };
    GPGPUContext.prototype.enableAutomaticDebugValidation = function (enabled) {
        this.autoDebugValidate = enabled;
        webgl_util.enableDebugWebGLErrorChecking(enabled);
    };
    GPGPUContext.prototype.createMatrixTexture = function (rows, columns) {
        this.throwIfDisposed();
        return gpgpu_util.createMatrixTexture(this.gl, rows, columns);
    };
    GPGPUContext.prototype.uploadPixelDataToTexture = function (texture, pixels) {
        this.throwIfDisposed();
        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);
    };
    GPGPUContext.prototype.createPackedMatrixTexture = function (rows, columns) {
        this.throwIfDisposed();
        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns);
    };
    GPGPUContext.prototype.deleteMatrixTexture = function (texture) {
        var _this = this;
        this.throwIfDisposed();
        if (this.outputTexture === texture) {
            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
            this.outputTexture = null;
        }
        webgl_util.callAndCheck(this.gl, function () { return _this.gl.deleteTexture(texture); });
    };
    GPGPUContext.prototype.uploadMatrixToTexture = function (texture, rows, columns, matrix) {
        this.throwIfDisposed();
        var numChannels = 1;
        return gpgpu_util.uploadMatrixToTexture(this.gl, texture, rows, columns, matrix, numChannels);
    };
    GPGPUContext.prototype.uploadMatrixToPackedTexture = function (texture, rows, columns, matrix) {
        this.throwIfDisposed();
        return gpgpu_util.uploadMatrixToPackedTexture(this.gl, texture, rows, columns, matrix);
    };
    GPGPUContext.prototype.downloadMatrixFromTexture = function (texture, rows, columns) {
        var _this = this;
        return this.downloadMatrixDriver(texture, function () {
            return gpgpu_util.downloadMatrixFromOutputTexture(_this.gl, rows, columns);
        });
    };
    GPGPUContext.prototype.downloadMatrixFromTextureAsync = function (texture, rows, columns) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.getBufferSubDataAsyncExtension == null) {
                    throw new Error("Cannot download matrix from output texture asynchronously, " +
                        "WEBGL_get_buffer_sub_data_async is not enabled.");
                }
                return [2, this.downloadMatrixDriverAsync(texture, function () { return gpgpu_util.downloadMatrixFromOutputTextureAsync(_this.gl, _this.getBufferSubDataAsyncExtension, rows, columns); })];
            });
        });
    };
    GPGPUContext.prototype.downloadMatrixFromRGBAColorTexture = function (texture, rows, columns, channels) {
        var _this = this;
        return this.downloadMatrixDriver(texture, function () { return gpgpu_util.downloadMatrixFromRGBAColorTexture(_this.gl, rows, columns, channels); });
    };
    GPGPUContext.prototype.downloadMatrixFromPackedTexture = function (texture, rows, columns) {
        var _this = this;
        return this.downloadMatrixDriver(texture, function () { return gpgpu_util.downloadMatrixFromPackedOutputTexture(_this.gl, rows, columns); });
    };
    GPGPUContext.prototype.createProgram = function (fragmentShaderSource) {
        this.throwIfDisposed();
        var gl = this.gl;
        var fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);
        var vertexShader = gpgpu_util.createVertexShader(gl);
        var program = webgl_util.createProgram(gl);
        webgl_util.callAndCheck(gl, function () { return gl.attachShader(program, vertexShader); });
        webgl_util.callAndCheck(gl, function () { return gl.attachShader(program, fragmentShader); });
        webgl_util.linkProgram(gl, program);
        if (this.autoDebugValidate) {
            webgl_util.validateProgram(gl, program);
        }
        if (!this.vertexAttrsAreBound) {
            this.setProgram(program);
            this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);
        }
        return program;
    };
    GPGPUContext.prototype.deleteProgram = function (program) {
        var _this = this;
        this.throwIfDisposed();
        if (program === this.program) {
            this.program = null;
        }
        if (program != null) {
            webgl_util.callAndCheck(this.gl, function () { return _this.gl.deleteProgram(program); });
        }
    };
    GPGPUContext.prototype.setProgram = function (program) {
        var _this = this;
        this.throwIfDisposed();
        this.program = program;
        if ((this.program != null) && this.autoDebugValidate) {
            webgl_util.validateProgram(this.gl, this.program);
        }
        webgl_util.callAndCheck(this.gl, function () { return _this.gl.useProgram(program); });
    };
    GPGPUContext.prototype.getUniformLocation = function (program, uniformName, shouldThrow) {
        if (shouldThrow === void 0) { shouldThrow = true; }
        this.throwIfDisposed();
        if (shouldThrow) {
            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);
        }
        else {
            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);
        }
    };
    GPGPUContext.prototype.getAttributeLocation = function (program, attribute) {
        var _this = this;
        this.throwIfDisposed();
        return webgl_util.callAndCheck(this.gl, function () { return _this.gl.getAttribLocation(program, attribute); });
    };
    GPGPUContext.prototype.getUniformLocationNoThrow = function (program, uniformName) {
        this.throwIfDisposed();
        return this.gl.getUniformLocation(program, uniformName);
    };
    GPGPUContext.prototype.setInputMatrixTexture = function (inputMatrixTexture, uniformLocation, textureUnit) {
        this.throwIfDisposed();
        this.throwIfNoProgram();
        webgl_util.bindTextureToProgramUniformSampler(this.gl, this.program, inputMatrixTexture, uniformLocation, textureUnit);
    };
    GPGPUContext.prototype.setOutputMatrixTexture = function (outputMatrixTexture, rows, columns) {
        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);
    };
    GPGPUContext.prototype.setOutputPackedMatrixTexture = function (outputPackedMatrixTexture, rows, columns) {
        this.throwIfDisposed();
        var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);
    };
    GPGPUContext.prototype.setOutputMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {
        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);
    };
    GPGPUContext.prototype.setOutputPackedMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {
        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');
    };
    GPGPUContext.prototype.debugValidate = function () {
        if (this.program != null) {
            webgl_util.validateProgram(this.gl, this.program);
        }
        webgl_util.validateFramebuffer(this.gl);
    };
    GPGPUContext.prototype.executeProgram = function () {
        this.throwIfDisposed();
        this.throwIfNoProgram();
        var gl = this.gl;
        if (this.autoDebugValidate) {
            this.debugValidate();
        }
        webgl_util.callAndCheck(gl, function () { return gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0); });
    };
    GPGPUContext.prototype.blockUntilAllProgramsCompleted = function () {
        var _this = this;
        this.throwIfDisposed();
        webgl_util.callAndCheck(this.gl, function () { return _this.gl.finish(); });
    };
    GPGPUContext.prototype.getQueryTimerExtension = function () {
        if (this.disjointQueryTimerExtension == null) {
            this.disjointQueryTimerExtension =
                webgl_util.getExtensionOrThrow(this.gl, environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?
                    'EXT_disjoint_timer_query_webgl2' :
                    'EXT_disjoint_timer_query');
        }
        return this.disjointQueryTimerExtension;
    };
    GPGPUContext.prototype.getQueryTimerExtensionWebGL2 = function () {
        return this.getQueryTimerExtension();
    };
    GPGPUContext.prototype.getQueryTimerExtensionWebGL1 = function () {
        return this.getQueryTimerExtension();
    };
    GPGPUContext.prototype.runQuery = function (queryFn) {
        var query = this.beginQuery();
        queryFn();
        this.endQuery();
        return this.pollQueryTime(query);
    };
    GPGPUContext.prototype.beginQuery = function () {
        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
            var gl2 = this.gl;
            var ext_1 = this.getQueryTimerExtensionWebGL2();
            var query_1 = gl2.createQuery();
            gl2.beginQuery(ext_1.TIME_ELAPSED_EXT, query_1);
            return query_1;
        }
        var ext = this.getQueryTimerExtensionWebGL1();
        var query = ext.createQueryEXT();
        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);
        return query;
    };
    GPGPUContext.prototype.endQuery = function () {
        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
            var gl2 = this.gl;
            var ext_2 = this.getQueryTimerExtensionWebGL2();
            gl2.endQuery(ext_2.TIME_ELAPSED_EXT);
            return;
        }
        var ext = this.getQueryTimerExtensionWebGL1();
        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);
    };
    GPGPUContext.prototype.isQueryAvailable = function (query, queryTimerVersion) {
        if (queryTimerVersion === 0) {
            return true;
        }
        if (queryTimerVersion === 2) {
            var gl2 = this.gl;
            var ext = this.getQueryTimerExtensionWebGL2();
            var available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);
            var disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
            return available && !disjoint;
        }
        else {
            var ext = this.getQueryTimerExtensionWebGL1();
            var available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);
            var disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
            return available && !disjoint;
        }
    };
    GPGPUContext.prototype.pollQueryTime = function (query) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var resolveWithWarning = function () {
                console.warn('Disjoint query timer never available.');
                resolve(-1);
            };
            var queryTimerVersion = environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION');
            util.repeatedTry(function () { return _this.isQueryAvailable(query, queryTimerVersion); })
                .then(function () { return resolve(_this.getQueryTime(query, queryTimerVersion)); })
                .catch(resolveWithWarning);
        });
    };
    GPGPUContext.prototype.getQueryTime = function (query, queryTimerVersion) {
        if (queryTimerVersion === 0) {
            return null;
        }
        if (queryTimerVersion === 2) {
            var gl2 = this.gl;
            var timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);
            return timeElapsedNanos / 1000000;
        }
        else {
            var ext = this.getQueryTimerExtensionWebGL1();
            var timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);
            return timeElapsedNanos / 1000000;
        }
    };
    GPGPUContext.prototype.downloadMatrixDriverSetup = function (texture) {
        this.throwIfDisposed();
        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);
        if (this.autoDebugValidate) {
            webgl_util.validateFramebuffer(this.gl);
        }
    };
    GPGPUContext.prototype.downloadMatrixDriverTeardown = function () {
        if (this.outputTexture != null) {
            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);
            if (this.autoDebugValidate) {
                webgl_util.validateFramebuffer(this.gl);
            }
        }
        else {
            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
        }
    };
    GPGPUContext.prototype.downloadMatrixDriver = function (texture, downloadAndDecode) {
        this.downloadMatrixDriverSetup(texture);
        var result = downloadAndDecode();
        this.downloadMatrixDriverTeardown();
        return result;
    };
    GPGPUContext.prototype.downloadMatrixDriverAsync = function (texture, downloadAndDecode) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.downloadMatrixDriverSetup(texture);
                        return [4, downloadAndDecode()];
                    case 1:
                        result = _a.sent();
                        this.downloadMatrixDriverTeardown();
                        return [2, result];
                }
            });
        });
    };
    GPGPUContext.prototype.setOutputMatrixTextureDriver = function (outputMatrixTextureMaybePacked, width, height) {
        this.throwIfDisposed();
        var gl = this.gl;
        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);
        if (this.autoDebugValidate) {
            webgl_util.validateFramebuffer(gl);
        }
        this.outputTexture = outputMatrixTextureMaybePacked;
        webgl_util.callAndCheck(gl, function () { return gl.viewport(0, 0, width, height); });
        webgl_util.callAndCheck(gl, function () { return gl.scissor(0, 0, width, height); });
    };
    GPGPUContext.prototype.setOutputMatrixWriteRegionDriver = function (x, y, width, height) {
        var _this = this;
        this.throwIfDisposed();
        webgl_util.callAndCheck(this.gl, function () { return _this.gl.scissor(x, y, width, height); });
    };
    GPGPUContext.prototype.throwIfDisposed = function () {
        if (this.disposed) {
            throw new Error('Attempted to use disposed GPGPUContext.');
        }
    };
    GPGPUContext.prototype.throwIfNoProgram = function () {
        if (this.program == null) {
            throw new Error('No GPU program is currently set.');
        }
    };
    return GPGPUContext;
}());
exports.GPGPUContext = GPGPUContext;

},{"../../environment":111,"../../util":114,"./gpgpu_util":135,"./tex_util":257,"./webgl_util":136}],243:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../../environment");
var util = require("../../util");
var shader_compiler = require("./shader_compiler");
var NAN_UNIFORM_NAME = 'NaN';
function shouldUploadNaNUniform() {
    return !environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');
}
function compileProgram(gpgpu, program, inputs, output) {
    var userCode = program.userCode;
    var inputInfos = inputs.map(function (input, i) {
        var shapeInfo = {
            logicalShape: input.tensor.shape,
            texShape: input.texData.texShape
        };
        return { name: program.variableNames[i], shapeInfo: shapeInfo };
    });
    var inShapeInfos = inputInfos.map(function (x) { return x.shapeInfo; });
    var outShapeInfo = {
        logicalShape: output.tensor.shape,
        texShape: output.texData.texShape
    };
    var source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.supportsBroadcasting === true);
    var webGLProgram = gpgpu.createProgram(source);
    var uniformLocations = {};
    for (var i = 0; i < program.variableNames.length; i++) {
        var uniformName = program.variableNames[i];
        uniformLocations[uniformName] =
            gpgpu.getUniformLocation(webGLProgram, uniformName);
    }
    if (shouldUploadNaNUniform()) {
        var throwIfNaNUniformIsNotUsed = false;
        uniformLocations[NAN_UNIFORM_NAME] = gpgpu.getUniformLocation(webGLProgram, NAN_UNIFORM_NAME, throwIfNaNUniformIsNotUsed);
    }
    return {
        program: program,
        source: source,
        webGLProgram: webGLProgram,
        uniformLocations: uniformLocations,
        gpgpu: gpgpu,
        inShapeInfos: inShapeInfos,
        outShapeInfo: outShapeInfo
    };
}
exports.compileProgram = compileProgram;
function validateBinaryAndProgram(shapeInfos, inputs) {
    if (shapeInfos.length !== inputs.length) {
        throw Error("Binary was compiled with " + shapeInfos.length + " inputs, but " +
            ("was executed with " + inputs.length + " inputs"));
    }
    shapeInfos.forEach(function (s, i) {
        var shapeA = s.logicalShape;
        var texShapeA = s.texShape;
        var shapeB = inputs[i].tensor.shape;
        var texShapeB = inputs[i].texData.texShape;
        if (!util.arraysEqual(shapeA, shapeB)) {
            throw Error("Binary was compiled with different shapes than " +
                ("the current args. Shapes " + shapeA + " and " + shapeB + " must match"));
        }
        if (!util.arraysEqual(texShapeA, texShapeB)) {
            throw Error("Binary was compiled with different texture shapes than the" +
                (" current args. Shape " + texShapeA + " and " + texShapeB + " must match"));
        }
    });
}
function runProgram(binary, inputs, output, customSetup) {
    validateBinaryAndProgram(binary.inShapeInfos, inputs);
    validateBinaryAndProgram([binary.outShapeInfo], [output]);
    var outTex = output.texData.texture;
    var outTexShape = output.texData.texShape;
    var gpgpu = binary.gpgpu;
    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
    gpgpu.setProgram(binary.webGLProgram);
    inputs.forEach(function (input, i) {
        var tex = input.texData.texture;
        var variableName = binary.program.variableNames[i];
        var variableUniformLocation = binary.uniformLocations[variableName];
        gpgpu.setInputMatrixTexture(tex, variableUniformLocation, i);
    });
    if (shouldUploadNaNUniform()) {
        gpgpu.gl.uniform1f(binary.uniformLocations[NAN_UNIFORM_NAME], NaN);
    }
    if (customSetup != null) {
        customSetup(gpgpu, binary.webGLProgram);
    }
    gpgpu.executeProgram();
}
exports.runProgram = runProgram;
function makeShaderKey(program, inputs, output) {
    var keyInputs = '';
    inputs.concat(output).forEach(function (x) {
        keyInputs += x.tensor.shape + "_" + x.texData.texShape;
    });
    var keyUserCode = program.userCode;
    var keyBroadcast = (program.supportsBroadcasting === true).toString();
    var key = program.constructor.name;
    key += '_' + keyBroadcast + '_' + keyInputs + '_' + keyUserCode;
    return key;
}
exports.makeShaderKey = makeShaderKey;

},{"../../environment":111,"../../util":114,"./shader_compiler":318}],244:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shader_compiler_1 = require("./shader_compiler");
var WhereProgram = (function () {
    function WhereProgram(cRank, shape, rank) {
        this.variableNames = ['c', 'a', 'b'];
        this.outputShape = shape;
        var cCoords;
        var abCoords;
        if (rank > 4) {
            throw Error("Where for rank " + rank + " is not yet supported");
        }
        if (rank === 1) {
            abCoords = "resRC";
            cCoords = "resRC";
        }
        else {
            var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
            var cCoordVars = [];
            var abCoordVars = [];
            for (var i = 0; i < shape.length; i++) {
                abCoordVars.push("" + currentCoords[i]);
                if (i < cRank) {
                    cCoordVars.push("" + currentCoords[i]);
                }
            }
            cCoords = cCoordVars.join();
            abCoords = abCoordVars.join();
        }
        var dtype = shader_compiler_1.getCoordsDataType(rank);
        this.userCode = "\n      void main() {\n        " + dtype + " resRC = getOutputCoords();\n        float cVal = getC(" + cCoords + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + abCoords + "));\n        } else {\n          setOutput(getB(" + abCoords + "));\n        }\n      }\n    ";
    }
    return WhereProgram;
}());
exports.WhereProgram = WhereProgram;

},{"./shader_compiler":318}],245:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LRNProgram = (function () {
    function LRNProgram(xShape, radius, bias, alpha, beta) {
        this.variableNames = ['x'];
        this.outputShape = [];
        var rad = radius;
        var maxD = xShape[3] - 1;
        this.outputShape = xShape;
        var powOperator;
        var basis = "float(" + bias + ") + float(" + alpha + ") * sum";
        if (beta === 0.5) {
            powOperator = "inversesqrt(" + basis + ")";
        }
        else if (beta === 1.0) {
            powOperator = "1.0/(" + basis + ")";
        }
        else {
            powOperator = "exp(log(" + basis + ") * float(-" + beta + "));";
        }
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + rad + "; j <= " + rad + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + maxD + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + powOperator + ";\n        setOutput(val);\n      }\n    ";
    }
    return LRNProgram;
}());
exports.LRNProgram = LRNProgram;

},{}],246:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MaxPool2DBackpropProgram = (function () {
    function MaxPool2DBackpropProgram(convInfo) {
        this.variableNames = ['dy', 'maxPos'];
        this.outputShape = convInfo.inShape;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        var lastIndex = filterHeight * filterWidth - 1;
        this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + lastIndex + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + filterWidth + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return MaxPool2DBackpropProgram;
}());
exports.MaxPool2DBackpropProgram = MaxPool2DBackpropProgram;

},{}],247:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MatMulProgram = (function () {
    function MatMulProgram(aShape, bShape, transposeA, transposeB) {
        if (transposeA === void 0) { transposeA = false; }
        if (transposeB === void 0) { transposeB = false; }
        this.variableNames = ['matrixA', 'matrixB'];
        var outerShapeA = transposeA ? aShape[1] : aShape[0];
        var outerShapeB = transposeB ? bShape[0] : bShape[1];
        var sharedDim = transposeA ? aShape[0] : aShape[1];
        this.outputShape = [outerShapeA, outerShapeB];
        var aSnippetFromOffset = function (vec4Offset, indexVar) {
            return transposeA ? indexVar + " + " + vec4Offset + ", aRow" :
                "aRow, " + indexVar + " + " + vec4Offset;
        };
        var bSnippetFromOffset = function (vec4Offset, indexVar) {
            return transposeB ? "bCol, " + indexVar + " + " + vec4Offset :
                indexVar + " + " + vec4Offset + ", bCol";
        };
        var sharedDimNearestVec4 = Math.floor(sharedDim / 4) * 4;
        var sharedDimVec4Remainder = sharedDim % 4;
        this.userCode = " float dotARowBCol(int aRow, int bCol) {\n      float result = 0.0;\n      for (int i = 0; i < " + sharedDimNearestVec4 + "; i += 4) {\n        vec4 a = vec4(\n          getMatrixA(" + aSnippetFromOffset(0, 'i') + "),\n          getMatrixA(" + aSnippetFromOffset(1, 'i') + "),\n          getMatrixA(" + aSnippetFromOffset(2, 'i') + "),\n          getMatrixA(" + aSnippetFromOffset(3, 'i') + ")\n        );\n        vec4 b = vec4(\n          getMatrixB(" + bSnippetFromOffset(0, 'i') + "),\n          getMatrixB(" + bSnippetFromOffset(1, 'i') + "),\n          getMatrixB(" + bSnippetFromOffset(2, 'i') + "),\n          getMatrixB(" + bSnippetFromOffset(3, 'i') + ")\n        );\n\n        result += dot(a, b);\n      }\n\n      if (" + (sharedDimVec4Remainder === 1) + ") {\n        result += getMatrixA(" + aSnippetFromOffset(0, sharedDimNearestVec4) + ") *\n          getMatrixB(" + bSnippetFromOffset(0, sharedDimNearestVec4) + ");\n      } else if (" + (sharedDimVec4Remainder === 2) + ") {\n        vec2 a = vec2(\n          getMatrixA(" + aSnippetFromOffset(0, sharedDimNearestVec4) + "),\n          getMatrixA(" + aSnippetFromOffset(1, sharedDimNearestVec4) + ")\n        );\n        vec2 b = vec2(\n          getMatrixB(" + bSnippetFromOffset(0, sharedDimNearestVec4) + "),\n          getMatrixB(" + bSnippetFromOffset(1, sharedDimNearestVec4) + ")\n        );\n        result += dot(a, b);\n      } else if (" + (sharedDimVec4Remainder === 3) + ") {\n        vec3 a = vec3(\n          getMatrixA(" + aSnippetFromOffset(0, sharedDimNearestVec4) + "),\n          getMatrixA(" + aSnippetFromOffset(1, sharedDimNearestVec4) + "),\n          getMatrixA(" + aSnippetFromOffset(2, sharedDimNearestVec4) + ")\n        );\n        vec3 b = vec3(\n          getMatrixB(" + bSnippetFromOffset(0, sharedDimNearestVec4) + "),\n          getMatrixB(" + bSnippetFromOffset(1, sharedDimNearestVec4) + "),\n          getMatrixB(" + bSnippetFromOffset(2, sharedDimNearestVec4) + ")\n        );\n        result += dot(a, b);\n      }\n\n      return result;\n    }\n\n    void main() {\n      ivec2 resRC = getOutputCoords();\n      setOutput(dotARowBCol(resRC.x, resRC.y));\n    }\n    ";
    }
    return MatMulProgram;
}());
exports.MatMulProgram = MatMulProgram;

},{}],248:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MultinomialProgram = (function () {
    function MultinomialProgram(batchSize, numOutcomes, numSamples) {
        this.variableNames = ['probs'];
        this.outputShape = [batchSize, numSamples];
        this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (numOutcomes - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (numOutcomes - 1) + "));\n      }\n    ";
    }
    MultinomialProgram.prototype.getCustomSetupFunc = function (seed) {
        var _this = this;
        return function (gpgpu, webGLProgram) {
            if (_this.seedLoc == null) {
                _this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');
            }
            gpgpu.gl.uniform1f(_this.seedLoc, seed);
        };
    };
    return MultinomialProgram;
}());
exports.MultinomialProgram = MultinomialProgram;

},{}],249:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var OneHotProgram = (function () {
    function OneHotProgram(numIndices, depth, onValue, offValue) {
        this.variableNames = ['indices'];
        this.outputShape = [numIndices, depth];
        this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + offValue + "), float(" + onValue + "),\n                      float(index == coords.y)));\n      }\n    ";
    }
    return OneHotProgram;
}());
exports.OneHotProgram = OneHotProgram;

},{}],250:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shader_compiler_1 = require("./shader_compiler");
var PadProgram = (function () {
    function PadProgram(xShape, paddings, constantValue) {
        this.variableNames = ['x'];
        this.outputShape = paddings.map(function (p, i) { return p[0] + xShape[i] + p[1]; });
        var rank = xShape.length;
        var type = shader_compiler_1.getCoordsDataType(rank);
        var start = paddings.map(function (p) { return p[0]; }).join(',');
        var end = paddings.map(function (p, i) { return p[0] + xShape[i]; }).join(',');
        var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);
        if (rank === 1) {
            this.userCode = "\n        int start = " + start + ";\n        int end = " + end + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + constantValue + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
            return;
        }
        this.userCode = "\n      " + type + " start = " + type + "(" + start + ");\n      " + type + " end = " + type + "(" + end + ");\n\n      void main() {\n        " + type + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + constantValue + "));\n        } else {\n          " + type + " coords = outC - start;\n          setOutput(getX(" + unpackedCoords + "));\n        }\n      }\n    ";
    }
    return PadProgram;
}());
exports.PadProgram = PadProgram;

},{"./shader_compiler":318}],251:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Pool2DProgram = (function () {
    function Pool2DProgram(convInfo, poolType, computePositions) {
        this.variableNames = ['x'];
        if (poolType === 'avg' && computePositions) {
            throw new Error('Cannot compute positions for average pool.');
        }
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        this.outputShape = convInfo.outShape;
        var isAvgPool = poolType === 'avg';
        var initializationValue = '0.0';
        if (!isAvgPool) {
            initializationValue = '-1.0 / 0.0';
        }
        if (computePositions) {
            var compareOp_1 = '>=';
            this.userCode = "\n        const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n        const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + filterHeight + "; wR++) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + filterWidth + "; wC++) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value " + compareOp_1 + " currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " + filterWidth + " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
            return;
        }
        var compareOp = 'max';
        var returnValue = poolType + "(" + poolType + "(" + poolType + "(" +
            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
        if (poolType === 'avg') {
            returnValue = "avgValue / count";
        }
        var filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
        var filterWidthVec4Remainder = filterWidth % 4;
        var updateSnippet = "\n      if (" + isAvgPool + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = " + compareOp + "(values, minMaxValue);\n      }\n    ";
        this.userCode = "\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n      const float initializationValue = " + initializationValue + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + initializationValue + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + filterWidthNearestVec4 + "; wC += 4) {\n            int xC = xCCorner + wC;\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              getValue(batch, xR, xC + 3, d)\n            );\n\n            " + updateSnippet + "\n          }\n\n          int xC = xCCorner + " + filterWidthNearestVec4 + ";\n          if (" + (filterWidthVec4Remainder === 1) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + updateSnippet + "\n          } else if (" + (filterWidthVec4Remainder === 2) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + updateSnippet + "\n          } else if (" + (filterWidthVec4Remainder === 3) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              initializationValue\n            );\n\n            " + updateSnippet + "\n          }\n        }\n        setOutput(" + returnValue + ");\n      }\n    ";
    }
    return Pool2DProgram;
}());
exports.Pool2DProgram = Pool2DProgram;

},{}],252:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ReduceProgram = (function () {
    function ReduceProgram(reduceInfo, reduceType) {
        this.variableNames = ['x'];
        var windowSize = reduceInfo.windowSize;
        var batchSize = reduceInfo.batchSize;
        var inSize = reduceInfo.inSize;
        var outSize = Math.ceil(inSize / windowSize);
        this.outputShape = [batchSize, outSize];
        var isReduceSum = reduceType === 'sum';
        var initializationValue = '0.0';
        if (!isReduceSum) {
            if (reduceType === 'min') {
                initializationValue = '1.0 / 0.0';
            }
            else {
                initializationValue = '-1.0 / 0.0';
            }
        }
        var compareOp = reduceType === 'min' ? 'min' : 'max';
        var returnValue = reduceType + "(" + reduceType + "(" + reduceType + "(" +
            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
        if (reduceType === 'sum') {
            returnValue = "sumValue";
        }
        var windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
        var windowSizeVec4Remainder = windowSize % 4;
        var updateSnippet = "\n      if (" + isReduceSum + ") {\n        sumValue += dot(values, ones);\n      } else {\n        minMaxValue = " + compareOp + "(values, minMaxValue);\n      }\n    ";
        var checkOutOfBounds = '';
        if (inSize % windowSize > 0) {
            checkOutOfBounds = "\n        if (inIdx < 0 || inIdx >= " + inSize + ") {\n          return initializationValue;\n        }\n      ";
        }
        this.userCode = "\n      const float initializationValue = " + initializationValue + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + checkOutOfBounds + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + windowSize + ";\n\n        vec4 minMaxValue = vec4(" + initializationValue + ");\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + windowSizeNearestVec4 + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + updateSnippet + "\n        }\n\n        int inIdx = inOffset + " + windowSizeNearestVec4 + ";\n        if (" + (windowSizeVec4Remainder === 1) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n          " + updateSnippet + "\n        } else if (" + (windowSizeVec4Remainder === 2) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n          " + updateSnippet + "\n        } else if (" + (windowSizeVec4Remainder === 3) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n          " + updateSnippet + "\n        }\n        setOutput(" + returnValue + ");\n      }\n    ";
    }
    return ReduceProgram;
}());
exports.ReduceProgram = ReduceProgram;

},{}],253:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ResizeBilinearProgram = (function () {
    function ResizeBilinearProgram(inputShape, newHeight, newWidth, alignCorners) {
        this.variableNames = ['A'];
        this.outputShape = [];
        var batch = inputShape[0], oldHeight = inputShape[1], oldWidth = inputShape[2], depth = inputShape[3];
        this.outputShape = [batch, newHeight, newWidth, depth];
        var effectiveInSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];
        var effectiveOutSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + effectiveInSize[0] / effectiveOutSize[0] + ",\n          " + effectiveInSize[1] / effectiveOutSize[1] + ");\n      const vec2 inputShapeRC = vec2(" + oldHeight + ".0, " + oldWidth + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
    }
    return ResizeBilinearProgram;
}());
exports.ResizeBilinearProgram = ResizeBilinearProgram;

},{}],254:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ResizeNearestNeighborProgram = (function () {
    function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners) {
        this.variableNames = ['A'];
        this.outputShape = [];
        var batch = inputShape[0], oldHeight = inputShape[1], oldWidth = inputShape[2], depth = inputShape[3];
        this.outputShape = [batch, newHeight, newWidth, depth];
        var effectiveInSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];
        var effectiveOutSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + effectiveInSize[0] / effectiveOutSize[0] + ",\n          " + effectiveInSize[1] / effectiveOutSize[1] + ");\n      const vec2 inputShapeRC = vec2(" + oldHeight + ".0, " + oldWidth + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + 0.5)));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
    }
    return ResizeNearestNeighborProgram;
}());
exports.ResizeNearestNeighborProgram = ResizeNearestNeighborProgram;

},{}],255:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shader_compiler_1 = require("./shader_compiler");
var ReverseProgram = (function () {
    function ReverseProgram(xShape, axis) {
        this.variableNames = ['x'];
        var rank = xShape.length;
        if (rank > 4) {
            throw new Error("WebGL backend: Reverse of rank-" + rank + " tensor is not yet supported");
        }
        this.outputShape = xShape;
        if (rank === 1) {
            this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + xShape[0] + " - coord - 1));\n        }\n      ";
            return;
        }
        var getInCoord = function (i) {
            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
                return xShape[i] + " - coords[" + i + "] - 1";
            }
            return "coords[" + i + "]";
        };
        var inCoords = xShape.map(function (_, i) { return getInCoord(i); }).join(',');
        var type = shader_compiler_1.getCoordsDataType(rank);
        this.userCode = "\n      void main() {\n        " + type + " coords = getOutputCoords();\n        setOutput(getX(" + inCoords + "));\n      }\n    ";
    }
    return ReverseProgram;
}());
exports.ReverseProgram = ReverseProgram;

},{"./shader_compiler":318}],256:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shader_compiler_1 = require("./shader_compiler");
var SliceProgram = (function () {
    function SliceProgram(destSize) {
        this.variableNames = ['source'];
        this.outputShape = destSize;
        this.rank = destSize.length;
        var dtype = shader_compiler_1.getCoordsDataType(this.rank);
        var sourceCoords = getCoords(this.rank);
        this.userCode = "\n      uniform " + dtype + " start;\n\n      void main() {\n        " + dtype + " sourceLoc = start + getOutputCoords();\n        setOutput(getSource(" + sourceCoords + "));\n      }\n    ";
    }
    SliceProgram.prototype.getCustomSetupFunc = function (start) {
        var _this = this;
        if (start.length !== this.rank) {
            throw Error("The rank (" + this.rank + ") of the program must match the " +
                ("length of start (" + start.length + ")"));
        }
        return function (gpgpu, webGLProgram) {
            if (_this.startLoc == null) {
                _this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');
                if (_this.startLoc == null) {
                    return;
                }
            }
            if (_this.rank === 1) {
                gpgpu.gl.uniform1i(_this.startLoc, start[0]);
            }
            else if (_this.rank === 2) {
                gpgpu.gl.uniform2i(_this.startLoc, start[0], start[1]);
            }
            else if (_this.rank === 3) {
                gpgpu.gl.uniform3i(_this.startLoc, start[0], start[1], start[2]);
            }
            else if (_this.rank === 4) {
                gpgpu.gl.uniform4i(_this.startLoc, start[0], start[1], start[2], start[3]);
            }
            else {
                throw Error("Slicing for rank " + _this.rank + " is not yet supported");
            }
        };
    };
    return SliceProgram;
}());
exports.SliceProgram = SliceProgram;
function getCoords(rank) {
    if (rank === 1) {
        return 'sourceLoc';
    }
    else if (rank === 2) {
        return 'sourceLoc.x, sourceLoc.y';
    }
    else if (rank === 3) {
        return 'sourceLoc.x, sourceLoc.y, sourceLoc.z';
    }
    else if (rank === 4) {
        return 'sourceLoc.x, sourceLoc.y, sourceLoc.z, sourceLoc.w';
    }
    else {
        throw Error("Slicing for rank " + rank + " is not yet supported");
    }
}

},{"./shader_compiler":318}],258:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tex_util_1 = require("./tex_util");
var TextureManager = (function () {
    function TextureManager(gpgpu) {
        this.gpgpu = gpgpu;
        this.numUsedTextures = 0;
        this.numFreeTextures = 0;
        this.freeTextures = {};
        this.logEnabled = false;
        this.allocatedTextures = [];
        this.usedTextureCount = {};
    }
    TextureManager.prototype.acquireTexture = function (shapeRC, texType) {
        if (texType === void 0) { texType = tex_util_1.TextureType.FLOAT; }
        var shapeKey = getKeyFromTextureShape(shapeRC, texType);
        if (!(shapeKey in this.freeTextures)) {
            this.freeTextures[shapeKey] = [];
        }
        if (!(shapeKey in this.usedTextureCount)) {
            this.usedTextureCount[shapeKey] = 0;
        }
        this.usedTextureCount[shapeKey]++;
        if (this.freeTextures[shapeKey].length > 0) {
            this.numFreeTextures--;
            this.numUsedTextures++;
            this.log();
            return this.freeTextures[shapeKey].shift();
        }
        this.numUsedTextures++;
        this.log();
        var newTexture = this.gpgpu.createMatrixTexture(shapeRC[0], shapeRC[1]);
        this.allocatedTextures.push(newTexture);
        return newTexture;
    };
    TextureManager.prototype.releaseTexture = function (texture, shape, texType) {
        if (texType === void 0) { texType = tex_util_1.TextureType.FLOAT; }
        var shapeKey = getKeyFromTextureShape(shape, texType);
        if (!(shapeKey in this.freeTextures)) {
            this.freeTextures[shapeKey] = [];
        }
        this.freeTextures[shapeKey].push(texture);
        this.numFreeTextures++;
        this.numUsedTextures--;
        this.usedTextureCount[shapeKey]--;
        this.log();
    };
    TextureManager.prototype.log = function () {
        if (!this.logEnabled) {
            return;
        }
        var total = this.numFreeTextures + this.numUsedTextures;
        console.log('Free/Used', this.numFreeTextures + " / " + this.numUsedTextures, "(" + total + ")");
    };
    TextureManager.prototype.getNumUsedTextures = function () {
        return this.numUsedTextures;
    };
    TextureManager.prototype.getNumFreeTextures = function () {
        return this.numFreeTextures;
    };
    TextureManager.prototype.dispose = function () {
        var _this = this;
        if (this.allocatedTextures == null) {
            return;
        }
        this.allocatedTextures.forEach(function (texture) {
            _this.gpgpu.deleteMatrixTexture(texture);
        });
        this.freeTextures = null;
        this.allocatedTextures = null;
        this.usedTextureCount = null;
        this.numUsedTextures = 0;
        this.numFreeTextures = 0;
    };
    return TextureManager;
}());
exports.TextureManager = TextureManager;
function getKeyFromTextureShape(shapeRowsCol, texType) {
    return shapeRowsCol[0] + "_" + shapeRowsCol[1] + "_" + texType;
}

},{"./tex_util":257}],259:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shader_compiler_1 = require("./shader_compiler");
var TileProgram = (function () {
    function TileProgram(aShape, reps) {
        this.variableNames = ['A'];
        var outputShape = new Array(aShape.length);
        for (var i = 0; i < outputShape.length; i++) {
            outputShape[i] = aShape[i] * reps[i];
        }
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        var dtype = shader_compiler_1.getCoordsDataType(this.rank);
        var sourceCoords = getSourceCoords(aShape);
        this.userCode = "\n      void main() {\n        " + dtype + " resRC = getOutputCoords();\n        setOutput(getA(" + sourceCoords + "));\n      }\n    ";
    }
    return TileProgram;
}());
exports.TileProgram = TileProgram;
function getSourceCoords(aShape) {
    var rank = aShape.length;
    if (rank > 4) {
        throw Error("Tile for rank " + rank + " is not yet supported");
    }
    if (rank === 1) {
        return "imod(resRC, " + aShape[0] + ")";
    }
    var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
    var sourceCoords = [];
    for (var i = 0; i < aShape.length; i++) {
        sourceCoords.push("imod(" + currentCoords[i] + ", " + aShape[i] + ")");
    }
    return sourceCoords.join();
}

},{"./shader_compiler":318}],260:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shader_compiler_1 = require("./shader_compiler");
var TransposeProgram = (function () {
    function TransposeProgram(aShape, newDim) {
        this.variableNames = ['A'];
        var outputShape = new Array(aShape.length);
        for (var i = 0; i < outputShape.length; i++) {
            outputShape[i] = aShape[newDim[i]];
        }
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        var dtype = shader_compiler_1.getCoordsDataType(this.rank);
        var switched = getSwitchedCoords(newDim);
        this.userCode = "\n    void main() {\n      " + dtype + " resRC = getOutputCoords();\n      setOutput(getA(" + switched + "));\n    }\n    ";
    }
    return TransposeProgram;
}());
exports.TransposeProgram = TransposeProgram;
function getSwitchedCoords(newDim) {
    var rank = newDim.length;
    if (rank > 4) {
        throw Error("Transpose for rank " + rank + " is not yet supported");
    }
    var originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
    var switchedCoords = new Array(rank);
    for (var i = 0; i < newDim.length; i++) {
        switchedCoords[newDim[i]] = originalOrder[i];
    }
    return switchedCoords.join();
}

},{"./shader_compiler":318}],224:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERF_P = 0.3275911;
exports.ERF_A1 = 0.254829592;
exports.ERF_A2 = -0.284496736;
exports.ERF_A3 = 1.421413741;
exports.ERF_A4 = -1.453152027;
exports.ERF_A5 = 1.061405429;

},{}],261:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var selu_util = require("../../ops/selu_util");
var erf_util = require("../../ops/erf_util");
var UnaryOpProgram = (function () {
    function UnaryOpProgram(aShape, opSnippet) {
        this.variableNames = ['A'];
        this.outputShape = aShape;
        this.userCode = "\n      float unaryOperation(float x) {\n        " + opSnippet + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
    }
    return UnaryOpProgram;
}());
exports.UnaryOpProgram = UnaryOpProgram;
var CHECK_NAN_SNIPPET = "if (isNaN(x)) return x;";
exports.ABS = "return abs(x);";
exports.RELU = "return (x < 0.0) ? 0.0 : x;";
exports.ELU = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
exports.SELU = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + selu_util.SELU_SCALEALPHA + ";\n  float scale = " + selu_util.SELU_SCALE + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";
function STEP(alpha) {
    if (alpha === void 0) { alpha = 0.0; }
    return CHECK_NAN_SNIPPET + ("\n    return x > 0.0 ? 1.0 : float(" + alpha + ");\n  ");
}
exports.STEP = STEP;
exports.NEG = "return -x;";
exports.CEIL = "return ceil(x);";
exports.FLOOR = "return floor(x);";
exports.SIGN = "return sign(x);";
exports.ROUND = "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n";
exports.EXP = "return exp(x);";
exports.EXPM1 = "return exp(x) - 1.0;";
exports.LOG = "return log(x);";
exports.LOG1P = "return log(1.0 + x);";
exports.SQRT = "return sqrt(x);";
exports.RSQRT = "return inversesqrt(x);";
exports.SIGMOID = "return 1.0 / (1.0 + exp(-1.0 * x));";
exports.SOFTPLUS = "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n";
exports.SIN = "return sin(x);";
exports.COS = "return cos(x);";
exports.TAN = "return tan(x);";
exports.ASIN = "return asin(x);";
exports.ACOS = "return acos(x);";
exports.ATAN = CHECK_NAN_SNIPPET + "\n  return atan(x);\n";
exports.SINH = "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n";
exports.COSH = "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n";
exports.TANH = "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n";
exports.ASINH = "return log(x + sqrt(x * x + 1.0));";
exports.ACOSH = "return log(x + sqrt(x * x - 1.0));";
exports.ATANH = "return (log(1.0 + x) - log(1.0 - x)) / 2.0;";
exports.ERF = "\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas, \n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = " + erf_util.ERF_P + ";\n  float a1 = " + erf_util.ERF_A1 + ";\n  float a2 = " + erf_util.ERF_A2 + ";\n  float a3 = " + erf_util.ERF_A3 + ";\n  float a4 = " + erf_util.ERF_A4 + ";\n  float a5 = " + erf_util.ERF_A5 + ";\n  \n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n";
exports.SQUARE = "return x * x;";
exports.RECIPROCAL = "return 1.0 / x;";
exports.LOGICAL_NOT = "return float(!(x >= 1.0));";
exports.TO_INT = "return float(int(x));";

},{"../../ops/selu_util":223,"../../ops/erf_util":224}],122:[function(require,module,exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../environment");
var axis_util = require("../ops/axis_util");
var ops = require("../ops/ops");
var reduce_util = require("../ops/reduce_util");
var tensor_1 = require("../tensor");
var types = require("../types");
var util = require("../util");
var backend_util = require("./backend_util");
var argminmax_gpu_1 = require("./webgl/argminmax_gpu");
var avg_pool_backprop_gpu_1 = require("./webgl/avg_pool_backprop_gpu");
var batchnorm_gpu_1 = require("./webgl/batchnorm_gpu");
var binaryop_gpu = require("./webgl/binaryop_gpu");
var binaryop_gpu_1 = require("./webgl/binaryop_gpu");
var clip_gpu_1 = require("./webgl/clip_gpu");
var concat_gpu_1 = require("./webgl/concat_gpu");
var conv_backprop_gpu_1 = require("./webgl/conv_backprop_gpu");
var conv_gpu_1 = require("./webgl/conv_gpu");
var conv_gpu_depthwise_1 = require("./webgl/conv_gpu_depthwise");
var from_pixels_gpu_1 = require("./webgl/from_pixels_gpu");
var gather_gpu_1 = require("./webgl/gather_gpu");
var gpgpu_context_1 = require("./webgl/gpgpu_context");
var gpgpu_math = require("./webgl/gpgpu_math");
var logical_gpu_1 = require("./webgl/logical_gpu");
var lrn_gpu_1 = require("./webgl/lrn_gpu");
var max_pool_backprop_gpu_1 = require("./webgl/max_pool_backprop_gpu");
var mulmat_gpu_1 = require("./webgl/mulmat_gpu");
var multinomial_gpu_1 = require("./webgl/multinomial_gpu");
var onehot_gpu_1 = require("./webgl/onehot_gpu");
var pad_gpu_1 = require("./webgl/pad_gpu");
var pool_gpu_1 = require("./webgl/pool_gpu");
var reduce_gpu_1 = require("./webgl/reduce_gpu");
var resize_bilinear_gpu_1 = require("./webgl/resize_bilinear_gpu");
var resize_nearest_neighbor_gpu_1 = require("./webgl/resize_nearest_neighbor_gpu");
var reverse_gpu_1 = require("./webgl/reverse_gpu");
var slice_gpu_1 = require("./webgl/slice_gpu");
var tex_util_1 = require("./webgl/tex_util");
var texture_manager_1 = require("./webgl/texture_manager");
var tile_gpu_1 = require("./webgl/tile_gpu");
var transpose_gpu_1 = require("./webgl/transpose_gpu");
var unary_op = require("./webgl/unaryop_gpu");
var unaryop_gpu_1 = require("./webgl/unaryop_gpu");
var webgl_util = require("./webgl/webgl_util");
var MathBackendWebGL = (function () {
    function MathBackendWebGL(gpgpu, delayedStorage) {
        if (delayedStorage === void 0) { delayedStorage = true; }
        this.gpgpu = gpgpu;
        this.delayedStorage = delayedStorage;
        this.texData = new WeakMap();
        this.uploadWaitMs = 0;
        this.downloadWaitMs = 0;
        this.binaryCache = {};
        this.disposed = false;
        if (environment_1.ENV.get('WEBGL_VERSION') < 1) {
            throw new Error('WebGL is not supported on this device');
        }
        if (gpgpu == null) {
            this.gpgpu = new gpgpu_context_1.GPGPUContext();
            this.gpgpuCreatedLocally = true;
        }
        else {
            this.gpgpuCreatedLocally = false;
        }
        if (typeof document !== 'undefined') {
            this.canvas = document.createElement('canvas');
        }
        this.textureManager = new texture_manager_1.TextureManager(this.gpgpu);
    }
    MathBackendWebGL.prototype.register = function (dataId, shape, dtype) {
        if (this.texData.has(dataId)) {
            throw new Error('Data buffer is already registered');
        }
        this.texData.set(dataId, {
            shape: shape,
            dtype: dtype,
            values: null,
            texture: null,
            texShape: null,
            texType: tex_util_1.TextureType.FLOAT
        });
    };
    MathBackendWebGL.prototype.fromPixels = function (pixels, numChannels) {
        if (pixels == null) {
            throw new Error('MathBackendWebGL.writePixels(): pixels can not be null');
        }
        var texShape = [pixels.height, pixels.width];
        var outShape = [pixels.height, pixels.width, numChannels];
        if (pixels instanceof HTMLVideoElement) {
            if (this.canvas == null) {
                throw new Error('Can\'t read pixels from HTMLImageElement outside ' +
                    'the browser.');
            }
            this.canvas.width = pixels.width;
            this.canvas.height = pixels.height;
            this.canvas.getContext('2d').drawImage(pixels, 0, 0, pixels.width, pixels.height);
            pixels = this.canvas;
        }
        var tempPixelArray = tensor_1.Tensor.make(texShape, {}, 'int32');
        this.texData.get(tempPixelArray.dataId).texType = tex_util_1.TextureType.UNSIGNED_BYTE;
        this.gpgpu.uploadPixelDataToTexture(this.getTexture(tempPixelArray.dataId), pixels);
        var program = new from_pixels_gpu_1.FromPixelsProgram(outShape);
        var res = this.compileAndRun(program, [tempPixelArray]);
        tempPixelArray.dispose();
        return res;
    };
    MathBackendWebGL.prototype.write = function (dataId, values) {
        if (values == null) {
            throw new Error('MathBackendWebGL.write(): values can not be null');
        }
        this.throwIfNoData(dataId);
        var texData = this.texData.get(dataId);
        var texture = texData.texture, texShape = texData.texShape, texType = texData.texType;
        if (texture != null) {
            this.textureManager.releaseTexture(texture, texShape, texType);
            texData.texture = null;
            texData.texShape = null;
        }
        texData.values = values;
        if (!this.delayedStorage) {
            this.uploadToGPU(dataId);
        }
    };
    MathBackendWebGL.prototype.readSync = function (dataId) {
        this.throwIfNoData(dataId);
        var texData = this.texData.get(dataId);
        var texture = texData.texture, values = texData.values, texShape = texData.texShape;
        if (values != null) {
            this.cacheOnCPU(dataId);
            return values;
        }
        var shouldTimeProgram = this.activeTimers != null;
        var start;
        if (shouldTimeProgram) {
            start = performance.now();
        }
        var float32Values = this.gpgpu.downloadMatrixFromTexture(texture, texShape[0], texShape[1]);
        if (shouldTimeProgram) {
            this.downloadWaitMs += performance.now() - start;
        }
        this.cacheOnCPU(dataId, float32Values);
        return texData.values;
    };
    MathBackendWebGL.prototype.read = function (dataId) {
        return __awaiter(this, void 0, void 0, function () {
            var texData, texture, values, texShape, float32Values;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.throwIfNoData(dataId);
                        texData = this.texData.get(dataId);
                        texture = texData.texture, values = texData.values, texShape = texData.texShape;
                        if (values != null) {
                            this.cacheOnCPU(dataId);
                            return [2, values];
                        }
                        if (!environment_1.ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) return [3, 2];
                        return [4, this.gpgpu.downloadMatrixFromTextureAsync(texture, texShape[0], texShape[1])];
                    case 1:
                        float32Values = _a.sent();
                        this.cacheOnCPU(dataId, float32Values);
                        return [2, texData.values];
                    case 2:
                        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 0) {
                            return [2, this.readSync(dataId)];
                        }
                        return [4, this.gpgpu.runQuery(function () { })];
                    case 3:
                        _a.sent();
                        return [2, this.readSync(dataId)];
                }
            });
        });
    };
    MathBackendWebGL.prototype.time = function (f) {
        return __awaiter(this, void 0, void 0, function () {
            var oldActiveTimers, newActiveTimers, outerMostTime, flattenedActiveTimers, kernelMs, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oldActiveTimers = this.activeTimers;
                        newActiveTimers = [];
                        outerMostTime = false;
                        if (this.programTimersStack == null) {
                            this.programTimersStack = newActiveTimers;
                            outerMostTime = true;
                        }
                        else {
                            this.activeTimers.push(newActiveTimers);
                        }
                        this.activeTimers = newActiveTimers;
                        f();
                        flattenedActiveTimers = util.flatten(this.activeTimers);
                        this.activeTimers = oldActiveTimers;
                        if (outerMostTime) {
                            this.programTimersStack = null;
                        }
                        return [4, Promise.all(flattenedActiveTimers).then(function (results) {
                                var sum = 0;
                                results.forEach(function (result) { return sum += result; });
                                return sum;
                            })];
                    case 1:
                        kernelMs = _a.sent();
                        res = {
                            uploadWaitMs: this.uploadWaitMs,
                            downloadWaitMs: this.downloadWaitMs,
                            kernelMs: kernelMs,
                            wallMs: null
                        };
                        this.uploadWaitMs = 0;
                        this.downloadWaitMs = 0;
                        return [2, res];
                }
            });
        });
    };
    MathBackendWebGL.prototype.memory = function () {
        return { unreliable: false };
    };
    MathBackendWebGL.prototype.startTimer = function () {
        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
            return this.gpgpu.beginQuery();
        }
        return { startMs: performance.now(), endMs: null };
    };
    MathBackendWebGL.prototype.endTimer = function (query) {
        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
            this.gpgpu.endQuery();
            return query;
        }
        query.endMs = performance.now();
        return query;
    };
    MathBackendWebGL.prototype.getQueryTime = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var timerQuery;
            return __generator(this, function (_a) {
                if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
                    return [2, this.gpgpu.pollQueryTime(query)];
                }
                timerQuery = query;
                return [2, timerQuery.endMs - timerQuery.startMs];
            });
        });
    };
    MathBackendWebGL.prototype.disposeData = function (dataId) {
        if (this.texData.has(dataId)) {
            var _a = this.texData.get(dataId), texture = _a.texture, texShape = _a.texShape, texType = _a.texType;
            if (texture != null) {
                this.textureManager.releaseTexture(texture, texShape, texType);
            }
            this.texData.delete(dataId);
        }
    };
    MathBackendWebGL.prototype.getTexture = function (dataId) {
        this.uploadToGPU(dataId);
        return this.texData.get(dataId).texture;
    };
    MathBackendWebGL.prototype.getTextureData = function (dataId) {
        this.uploadToGPU(dataId);
        return this.texData.get(dataId);
    };
    MathBackendWebGL.prototype.getGPGPUContext = function () {
        return this.gpgpu;
    };
    MathBackendWebGL.prototype.slice = function (x, begin, size) {
        var program = new slice_gpu_1.SliceProgram(size);
        var customSetup = program.getCustomSetupFunc(begin);
        return this.compileAndRun(program, [x], null, customSetup);
    };
    MathBackendWebGL.prototype.reverse = function (x, axis) {
        var program = new reverse_gpu_1.ReverseProgram(x.shape, axis);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.concat = function (a, b) {
        var program = new concat_gpu_1.ConcatProgram(a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.neg = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.NEG);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.matMul = function (a, b, transposeA, transposeB) {
        var program = new mulmat_gpu_1.MatMulProgram(a.shape, b.shape, transposeA, transposeB);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.multiply = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {
        var inputs = [x, mean, variance];
        var offsetShape = null;
        if (offset != null) {
            offsetShape = offset.shape;
            inputs.push(offset);
        }
        var scaleShape = null;
        if (scale != null) {
            scaleShape = scale.shape;
            inputs.push(scale);
        }
        var program = new batchnorm_gpu_1.BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
        return this.compileAndRun(program, inputs);
    };
    MathBackendWebGL.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {
        var program = new lrn_gpu_1.LRNProgram(x.shape, radius, bias, alpha, beta);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.tile = function (x, reps) {
        var program = new tile_gpu_1.TileProgram(x.shape, reps);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.pad = function (x, paddings, constantValue) {
        var program = new pad_gpu_1.PadProgram(x.shape, paddings, constantValue);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.transpose = function (x, perm) {
        var program = new transpose_gpu_1.TransposeProgram(x.shape, perm);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.gather = function (x, indices, axis) {
        var program = new gather_gpu_1.GatherProgram(x.shape, indices.size, axis);
        return this.compileAndRun(program, [x, indices]);
    };
    MathBackendWebGL.prototype.reduce = function (x, reduceType, dtype) {
        var batchSize = x.shape[0];
        var inSize = x.shape[1];
        var windowSize = reduce_util.computeOptimalWindowSize(inSize);
        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };
        var program = new reduce_gpu_1.ReduceProgram(reduceInfo, reduceType);
        var _a = program.outputShape, rows = _a[0], cols = _a[1];
        var output = this.makeOutputArray([rows, cols], dtype);
        this.compileAndRun(program, [x], output);
        if (output.shape[1] === 1) {
            return output;
        }
        return this.reduce(output, reduceType, dtype);
    };
    MathBackendWebGL.prototype.argReduce = function (x, reduceType, bestIndicesA) {
        if (bestIndicesA === void 0) { bestIndicesA = null; }
        var batchSize = x.shape[0];
        var inSize = x.shape[1];
        if (bestIndicesA != null) {
            batchSize = bestIndicesA.shape[0];
            inSize = bestIndicesA.shape[1];
        }
        var windowSize = reduce_util.computeOptimalWindowSize(inSize);
        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };
        var program = new argminmax_gpu_1.ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);
        var _a = program.outputShape, rows = _a[0], cols = _a[1];
        var output = this.makeOutputArray([rows, cols], 'int32');
        var inputs = [x];
        if (bestIndicesA != null) {
            inputs.push(bestIndicesA);
        }
        this.compileAndRun(program, inputs, output);
        if (output.shape[1] === 1) {
            return output;
        }
        return this.argReduce(x, reduceType, output);
    };
    MathBackendWebGL.prototype.sum = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        var outputDType = types.sumOutType(x.dtype);
        return this.reduce(a2D, 'sum', outputDType).reshape(outShape);
    };
    MathBackendWebGL.prototype.argMin = function (x, axis) {
        var axes = [axis];
        axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        return this.argReduce(a2D, 'min').reshape(outShape);
    };
    MathBackendWebGL.prototype.argMax = function (x, axis) {
        var axes = [axis];
        axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        return this.argReduce(a2D, 'max').reshape(outShape);
    };
    MathBackendWebGL.prototype.equal = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.notEqual = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.less = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.lessEqual = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.greater = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.greaterEqual = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.logicalNot = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.logicalAnd = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.logicalOr = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.where = function (condition, a, b, dtype) {
        var program = new logical_gpu_1.WhereProgram(condition.rank, a.shape, a.rank);
        var output = this.makeOutputArray(program.outputShape, dtype);
        return this.compileAndRun(program, [condition, a, b], output);
    };
    MathBackendWebGL.prototype.topKValues = function (x, k) {
        throw new Error('topKValues GPU not yet implemented!');
    };
    MathBackendWebGL.prototype.topKIndices = function (x, k) {
        throw new Error('topKIndices GPU not yet implemented!');
    };
    MathBackendWebGL.prototype.min = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);
    };
    MathBackendWebGL.prototype.minimum = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.mod = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.max = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        return this.reduce(a2D, 'max', a2D.dtype).reshape(outShape);
    };
    MathBackendWebGL.prototype.maximum = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.squaredDifference = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.SQUARED_DIFFERENCE, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.divide = function (a, b) {
        var op;
        var outputDtype;
        if (a.dtype === 'int32' && b.dtype === 'int32') {
            op = binaryop_gpu.INT_DIV;
            outputDtype = 'int32';
        }
        else {
            op = binaryop_gpu.DIV;
            outputDtype = 'float32';
        }
        var program = new binaryop_gpu_1.BinaryOpProgram(op, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, outputDtype);
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.add = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.subtract = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.pow = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.ceil = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.CEIL);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.floor = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.FLOOR);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.sign = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SIGN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.round = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ROUND);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.exp = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.EXP);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.expm1 = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.EXPM1);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.log = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LOG);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.log1p = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LOG1P);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.sqrt = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SQRT);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.rsqrt = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.RSQRT);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.square = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SQUARE);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.reciprocal = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.RECIPROCAL);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.relu = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.RELU);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.elu = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ELU);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.eluDer = function (dy, y) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);
        return this.compileAndRun(program, [dy, y]);
    };
    MathBackendWebGL.prototype.selu = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SELU);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.int = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.TO_INT);
        var output = this.makeOutputArray(program.outputShape, 'int32');
        return this.compileAndRun(program, [x], output);
    };
    MathBackendWebGL.prototype.clip = function (x, min, max) {
        var program = new clip_gpu_1.ClipProgram(x.shape, min, max);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.abs = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ABS);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.sigmoid = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SIGMOID);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.softplus = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SOFTPLUS);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.sin = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SIN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.cos = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.COS);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.tan = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.TAN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.asin = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ASIN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.acos = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ACOS);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.atan = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ATAN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.atan2 = function (a, b) {
        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.sinh = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SINH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.cosh = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.COSH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.tanh = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.TANH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.asinh = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ASINH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.acosh = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ACOSH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.atanh = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ATANH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.erf = function (x) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ERF);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.step = function (x, alpha) {
        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.STEP(alpha));
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.conv2d = function (x, filter, convInfo) {
        var program = new conv_gpu_1.Conv2DProgram(convInfo);
        return this.compileAndRun(program, [x, filter]);
    };
    MathBackendWebGL.prototype.conv2dDerInput = function (dy, filter, convInfo) {
        var program = new conv_backprop_gpu_1.Conv2DDerInputProgram(convInfo);
        return this.compileAndRun(program, [dy, filter]);
    };
    MathBackendWebGL.prototype.conv2dDerFilter = function (x, dy, convInfo) {
        var program = new conv_backprop_gpu_1.Conv2DDerFilterProgram(convInfo);
        return this.compileAndRun(program, [x, dy]);
    };
    MathBackendWebGL.prototype.depthwiseConv2D = function (x, filter, convInfo) {
        var program = new conv_gpu_depthwise_1.DepthwiseConv2DProgram(convInfo);
        return this.compileAndRun(program, [x, filter]);
    };
    MathBackendWebGL.prototype.maxPool = function (x, convInfo) {
        var program = new pool_gpu_1.Pool2DProgram(convInfo, 'max', false);
        var output = this.makeOutputArray(program.outputShape, x.dtype);
        return this.compileAndRun(program, [x], output);
    };
    MathBackendWebGL.prototype.avgPool = function (x, convInfo) {
        var program = new pool_gpu_1.Pool2DProgram(convInfo, 'avg', false);
        var output = this.makeOutputArray(program.outputShape, 'float32');
        return this.compileAndRun(program, [x], output);
    };
    MathBackendWebGL.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {
        var getPositions = true;
        var maxPoolPositionsProgram = new pool_gpu_1.Pool2DProgram(convInfo, 'max', getPositions);
        var maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);
        var maxPoolBackPropProgram = new max_pool_backprop_gpu_1.MaxPool2DBackpropProgram(convInfo);
        var output = this.makeOutputArray(maxPoolBackPropProgram.outputShape, x.dtype);
        var result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], output);
        maxPoolPositions.dispose();
        return result;
    };
    MathBackendWebGL.prototype.avgPoolBackprop = function (dy, x, convInfo) {
        var avgPoolBackpropProgram = new avg_pool_backprop_gpu_1.AvgPool2DBackpropProgram(convInfo);
        var output = this.makeOutputArray(avgPoolBackpropProgram.outputShape, x.dtype);
        return this.compileAndRun(avgPoolBackpropProgram, [dy], output);
    };
    MathBackendWebGL.prototype.cast = function (x, dtype) {
        return backend_util.castTensor(x, dtype, this);
    };
    MathBackendWebGL.prototype.reshape = function (x, shape) {
        return backend_util.reshapeTensor(x, shape);
    };
    MathBackendWebGL.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {
        var program = new resize_bilinear_gpu_1.ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {
        var program = new resize_nearest_neighbor_gpu_1.ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.multinomial = function (logits, normalized, numSamples, seed) {
        var probs = normalized ? logits : ops.softmax(logits);
        var batchSize = probs.shape[0];
        var numOutcomes = probs.shape[1];
        var program = new multinomial_gpu_1.MultinomialProgram(batchSize, numOutcomes, numSamples);
        var output = this.makeOutputArray(program.outputShape, 'int32');
        var customSetup = program.getCustomSetupFunc(seed);
        return this.compileAndRun(program, [probs], output, customSetup);
    };
    MathBackendWebGL.prototype.oneHot = function (indices, depth, onValue, offValue) {
        var program = new onehot_gpu_1.OneHotProgram(indices.size, depth, onValue, offValue);
        return this.compileAndRun(program, [indices]);
    };
    MathBackendWebGL.prototype.makeOutputArray = function (shape, dtype) {
        return tensor_1.Tensor.make(shape, {}, dtype);
    };
    MathBackendWebGL.prototype.compileAndRun = function (program, inputs, output, customSetup) {
        var _this = this;
        if (output == null) {
            output = this.makeOutputArray(program.outputShape, inputs[0].dtype);
        }
        var inputsData = inputs.map(function (input) {
            _this.uploadToGPU(input.dataId);
            return { tensor: input, texData: _this.texData.get(input.dataId) };
        });
        this.uploadToGPU(output.dataId);
        var outputData = {
            tensor: output,
            texData: this.texData.get(output.dataId)
        };
        var key = gpgpu_math.makeShaderKey(program, inputsData, outputData);
        var binary = this.getAndSaveBinary(key, function () {
            return gpgpu_math.compileProgram(_this.gpgpu, program, inputsData, outputData);
        });
        var shouldTimeProgram = this.activeTimers != null;
        var query;
        if (shouldTimeProgram) {
            query = this.startTimer();
        }
        gpgpu_math.runProgram(binary, inputsData, outputData, customSetup);
        if (shouldTimeProgram) {
            query = this.endTimer(query);
            this.activeTimers.push(this.getQueryTime(query));
        }
        return output;
    };
    MathBackendWebGL.prototype.getAndSaveBinary = function (key, getBinary) {
        if (!(key in this.binaryCache)) {
            this.binaryCache[key] = getBinary();
        }
        return this.binaryCache[key];
    };
    MathBackendWebGL.prototype.getTextureManager = function () {
        return this.textureManager;
    };
    MathBackendWebGL.prototype.dispose = function () {
        if (this.disposed) {
            return;
        }
        for (var key in this.binaryCache) {
            this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);
        }
        this.textureManager.dispose();
        this.canvas.remove();
        if (this.gpgpuCreatedLocally) {
            this.gpgpu.dispose();
        }
        this.disposed = true;
    };
    MathBackendWebGL.prototype.throwIfNoData = function (dataId) {
        if (!this.texData.has(dataId)) {
            throw new Error("WebGL backend: No data found for this tensor. " +
                "Did you change your backend in the middle of the program? " +
                "New backends can't use Tensors created with previous backends");
        }
    };
    MathBackendWebGL.prototype.uploadToGPU = function (dataId) {
        this.throwIfNoData(dataId);
        var texData = this.texData.get(dataId);
        var shape = texData.shape, values = texData.values, texture = texData.texture, dtype = texData.dtype, texType = texData.texType;
        if (texture != null) {
            return;
        }
        var shouldTimeProgram = this.activeTimers != null;
        var start;
        if (shouldTimeProgram) {
            start = performance.now();
        }
        var texShape = webgl_util.getTextureShapeFromLogicalShape(this.gpgpu.gl, shape);
        texData.texShape = texShape;
        var newTexture = this.textureManager.acquireTexture(texShape, texType);
        texData.texture = newTexture;
        if (values != null) {
            this.gpgpu.uploadMatrixToTexture(newTexture, texShape[0], texShape[1], typedArrayToFloat32(values, dtype));
            texData.values = null;
            if (shouldTimeProgram) {
                this.uploadWaitMs += performance.now() - start;
            }
        }
    };
    MathBackendWebGL.prototype.cacheOnCPU = function (dataId, float32Values) {
        var dontKeepCopyOnGPU = this.delayedStorage;
        var texData = this.texData.get(dataId);
        var texture = texData.texture, texShape = texData.texShape, dtype = texData.dtype, texType = texData.texType;
        if (dontKeepCopyOnGPU && texture != null) {
            this.textureManager.releaseTexture(texture, texShape, texType);
            texData.texture = null;
            texData.texShape = null;
        }
        if (float32Values != null) {
            texData.values = float32ToTypedArray(float32Values, dtype);
        }
    };
    return MathBackendWebGL;
}());
exports.MathBackendWebGL = MathBackendWebGL;
environment_1.ENV.registerBackend('webgl', function () { return new MathBackendWebGL(); }, 2);
function float32ToTypedArray(a, dtype) {
    if (dtype === 'float32') {
        return a;
    }
    else if (dtype === 'int32' || dtype === 'bool') {
        var result = (dtype === 'int32') ? new Int32Array(a.length) :
            new Uint8Array(a.length);
        for (var i = 0; i < result.length; ++i) {
            result[i] = Math.round(a[i]);
        }
        return result;
    }
    else {
        throw new Error("Unknown dtype " + dtype);
    }
}
function typedArrayToFloat32(a, dtype) {
    return (a instanceof Float32Array) ? a : new Float32Array(a);
}

},{"../environment":111,"../ops/axis_util":220,"../ops/ops":132,"../ops/reduce_util":230,"../tensor":117,"../types":116,"../util":114,"./backend_util":225,"./webgl/argminmax_gpu":231,"./webgl/avg_pool_backprop_gpu":232,"./webgl/batchnorm_gpu":233,"./webgl/binaryop_gpu":234,"./webgl/clip_gpu":235,"./webgl/concat_gpu":236,"./webgl/conv_backprop_gpu":237,"./webgl/conv_gpu":238,"./webgl/conv_gpu_depthwise":239,"./webgl/from_pixels_gpu":240,"./webgl/gather_gpu":241,"./webgl/gpgpu_context":242,"./webgl/gpgpu_math":243,"./webgl/logical_gpu":244,"./webgl/lrn_gpu":245,"./webgl/max_pool_backprop_gpu":246,"./webgl/mulmat_gpu":247,"./webgl/multinomial_gpu":248,"./webgl/onehot_gpu":249,"./webgl/pad_gpu":250,"./webgl/pool_gpu":251,"./webgl/reduce_gpu":252,"./webgl/resize_bilinear_gpu":253,"./webgl/resize_nearest_neighbor_gpu":254,"./webgl/reverse_gpu":255,"./webgl/slice_gpu":256,"./webgl/tex_util":257,"./webgl/texture_manager":258,"./webgl/tile_gpu":259,"./webgl/transpose_gpu":260,"./webgl/unaryop_gpu":261,"./webgl/webgl_util":136}],123:[function(require,module,exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var seedrandom = require("seedrandom");
var environment_1 = require("../environment");
var axis_util = require("../ops/axis_util");
var broadcast_util = require("../ops/broadcast_util");
var concat_util = require("../ops/concat_util");
var ops = require("../ops/ops");
var ops_1 = require("../ops/ops");
var selu_util = require("../ops/selu_util");
var erf_util = require("../ops/erf_util");
var tensor_1 = require("../tensor");
var types = require("../types");
var util = require("../util");
var backend_util = require("./backend_util");
var MathBackendCPU = (function () {
    function MathBackendCPU() {
        this.data = new WeakMap();
        if (typeof document !== 'undefined') {
            this.canvas = document.createElement('canvas');
        }
    }
    MathBackendCPU.prototype.register = function (dataId, shape, dtype) {
        if (this.data.has(dataId)) {
            throw new Error("Data buffer is already registered");
        }
        this.data.set(dataId, null);
    };
    MathBackendCPU.prototype.write = function (dataId, values) {
        if (values == null) {
            throw new Error('MathBackendCPU.write(): values can not be null');
        }
        this.throwIfNoData(dataId);
        this.data.set(dataId, values);
    };
    MathBackendCPU.prototype.fromPixels = function (pixels, numChannels) {
        if (pixels == null) {
            throw new Error('MathBackendCPU.writePixels(): pixels can not be null');
        }
        var vals;
        if (pixels instanceof ImageData) {
            vals = pixels.data;
        }
        else if (pixels instanceof HTMLCanvasElement) {
            vals = pixels.getContext('2d')
                .getImageData(0, 0, pixels.width, pixels.height)
                .data;
        }
        else if (pixels instanceof HTMLImageElement ||
            pixels instanceof HTMLVideoElement) {
            if (this.canvas == null) {
                throw new Error('Can\'t read pixels from HTMLImageElement outside ' +
                    'the browser.');
            }
            this.canvas.width = pixels.width;
            this.canvas.height = pixels.height;
            this.canvas.getContext('2d').drawImage(pixels, 0, 0, pixels.width, pixels.height);
            vals = this.canvas.getContext('2d')
                .getImageData(0, 0, pixels.width, pixels.height)
                .data;
        }
        else {
            throw new Error("pixels is of unknown type: " + pixels.constructor.name);
        }
        var values;
        if (numChannels === 4) {
            values = new Int32Array(vals);
        }
        else {
            var numPixels = pixels.width * pixels.height;
            values = new Int32Array(numPixels * numChannels);
            for (var i = 0; i < numPixels; i++) {
                for (var channel = 0; channel < numChannels; ++channel) {
                    values[i * numChannels + channel] = vals[i * 4 + channel];
                }
            }
        }
        var outShape = [pixels.height, pixels.width, numChannels];
        return ops_1.tensor3d(values, outShape, 'int32');
    };
    MathBackendCPU.prototype.read = function (dataId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.readSync(dataId)];
            });
        });
    };
    MathBackendCPU.prototype.readSync = function (dataId) {
        this.throwIfNoData(dataId);
        return this.data.get(dataId);
    };
    MathBackendCPU.prototype.disposeData = function (dataId) {
        if (this.data.has(dataId)) {
            this.data.delete(dataId);
        }
    };
    MathBackendCPU.prototype.time = function (f) {
        return __awaiter(this, void 0, void 0, function () {
            var start, kernelMs;
            return __generator(this, function (_a) {
                start = performance.now();
                f();
                kernelMs = performance.now() - start;
                return [2, { kernelMs: kernelMs }];
            });
        });
    };
    MathBackendCPU.prototype.memory = function () {
        return {
            unreliable: true
        };
    };
    MathBackendCPU.prototype.throwIfNoData = function (dataId) {
        if (!this.data.has(dataId)) {
            throw new Error("CPU backend: No data found for this tensor. " +
                "Did you change your backend in the middle of the program? " +
                "New backends can't use Tensors created with previous backends");
        }
    };
    MathBackendCPU.prototype.slice = function (x, begin, size) {
        var buffer = ops.buffer(size, x.dtype);
        for (var i = 0; i < buffer.size; ++i) {
            var loc = buffer.indexToLoc(i);
            var xLoc = loc.map(function (idx, j) { return idx + begin[j]; });
            buffer.set.apply(buffer, [x.get.apply(x, xLoc)].concat(loc));
        }
        return buffer.toTensor();
    };
    MathBackendCPU.prototype.reverse = function (x, axis) {
        var buffer = ops.buffer(x.shape, x.dtype);
        var xBuffer = x.buffer();
        var _loop_1 = function (i) {
            var outLoc = buffer.indexToLoc(i);
            var inLoc = outLoc.slice();
            axis.forEach(function (ax) { return inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]; });
            buffer.set.apply(buffer, [xBuffer.get.apply(xBuffer, inLoc)].concat(outLoc));
        };
        for (var i = 0; i < buffer.size; i++) {
            _loop_1(i);
        }
        return buffer.toTensor();
    };
    MathBackendCPU.prototype.concat = function (a, b) {
        var outShape = concat_util.computeOutShape(a.shape, b.shape, 1);
        var buffer = ops.buffer(outShape, a.dtype);
        if (a.shape[0] === 1 && b.shape[0] === 1) {
            var aVals = a.dataSync();
            var bVals = b.dataSync();
            var vals = buffer.values;
            vals.set(aVals, 0);
            vals.set(bVals, a.size);
            return buffer.toTensor();
        }
        for (var i = 0; i < outShape[0]; ++i) {
            for (var j = 0; j < a.shape[1]; ++j) {
                buffer.set(a.get(i, j), i, j);
            }
            for (var j = 0; j < b.shape[1]; ++j) {
                buffer.set(b.get(i, j), i, j + a.shape[1]);
            }
        }
        return buffer.toTensor();
    };
    MathBackendCPU.prototype.neg = function (x) {
        return this.multiply(ops.scalar(-1), x);
    };
    MathBackendCPU.prototype.add = function (a, b) {
        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) { return aValue + bValue; });
    };
    MathBackendCPU.prototype.subtract = function (a, b) {
        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) { return aValue - bValue; });
    };
    MathBackendCPU.prototype.pow = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aValue, bValue) { return Math.pow(aValue, bValue); });
    };
    MathBackendCPU.prototype.matMul = function (a, b, transposeA, transposeB) {
        var sharedDim = transposeA ? a.shape[0] : a.shape[1];
        var leftDim = transposeA ? a.shape[1] : a.shape[0];
        var rightDim = transposeB ? b.shape[0] : b.shape[1];
        var aValues = a.dataSync();
        var bValues = b.dataSync();
        var _a = transposeA ? [1, a.strides[0]] : [a.strides[0], 1], aOuterStep = _a[0], aInnerStep = _a[1];
        var _b = transposeB ? [b.strides[0], 1] : [1, b.strides[0]], bOuterStep = _b[0], bInnerStep = _b[1];
        var aOuterEnd = leftDim * aOuterStep;
        var bOuterEnd = rightDim * bOuterStep;
        var result = new Float32Array(leftDim * rightDim);
        var resultIndex = 0;
        for (var aOuter = 0; aOuter < aOuterEnd; aOuter += aOuterStep) {
            for (var bOuter = 0; bOuter < bOuterEnd; bOuter += bOuterStep) {
                var aInner = aOuter;
                var bInner = bOuter;
                var sum = 0;
                for (var k = 0; k < sharedDim; ++k) {
                    sum += aValues[aInner] * bValues[bInner];
                    aInner += aInnerStep;
                    bInner += bInnerStep;
                }
                result[resultIndex++] = sum;
            }
        }
        return ops.tensor2d(result, [leftDim, rightDim]);
    };
    MathBackendCPU.prototype.multiply = function (a, b) {
        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) { return aValue * bValue; });
    };
    MathBackendCPU.prototype.divide = function (a, b) {
        var op;
        var outputDtype;
        if (a.dtype === 'int32' && b.dtype === 'int32') {
            outputDtype = 'int32';
            op = function (a, b) { return Math.floor(a / b); };
        }
        else {
            outputDtype = 'float32';
            op = function (a, b) { return a / b; };
        }
        return this.broadcastedBinaryOp(a, b, outputDtype, op);
    };
    MathBackendCPU.prototype.sum = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var resultDtype = types.upcastType(x.dtype, 'int32');
        var result = ops.zeros(outShape, resultDtype);
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var sum = 0;
            for (var j = 0; j < reduceSize; ++j) {
                sum += aVals[offset + j];
            }
            vals[i] = sum;
        }
        return result;
    };
    MathBackendCPU.prototype.argMin = function (x, axis) {
        var axes = [axis];
        axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var result = ops.zeros(outShape, 'int32');
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var min = aVals[offset];
            var minIndex = 0;
            for (var j = 0; j < reduceSize; ++j) {
                var value = aVals[offset + j];
                if (value < min) {
                    min = value;
                    minIndex = j;
                }
            }
            vals[i] = minIndex;
        }
        return result;
    };
    MathBackendCPU.prototype.argMax = function (x, axis) {
        var axes = [axis];
        axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var result = ops.zeros(outShape, 'int32');
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var max = aVals[offset];
            var maxIndex = 0;
            for (var j = 0; j < reduceSize; ++j) {
                var value = aVals[offset + j];
                if (value > max) {
                    max = value;
                    maxIndex = j;
                }
            }
            vals[i] = maxIndex;
        }
        return result;
    };
    MathBackendCPU.prototype.equal = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return (aVal === bVal) ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.notEqual = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return (aVal !== bVal) ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.less = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return (aVal < bVal) ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.lessEqual = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return (aVal <= bVal) ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.greater = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return (aVal > bVal) ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.greaterEqual = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return (aVal >= bVal) ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.logicalNot = function (x) {
        var values = x.dataSync();
        var newValues = new Int32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = values[i] ? 0 : 1;
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues }, 'bool');
    };
    MathBackendCPU.prototype.logicalAnd = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal && bVal;
        });
    };
    MathBackendCPU.prototype.logicalOr = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal || bVal;
        });
    };
    MathBackendCPU.prototype.where = function (condition, a, b, dtype) {
        var values = condition.dataSync();
        var aValues = a.dataSync();
        var bValues = b.dataSync();
        var result = ops.zeros(a.shape, dtype);
        var newValues = result.dataSync();
        var index = 0;
        var offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?
            1 :
            a.shape[1];
        for (var i = 0; i < values.length; i++) {
            for (var j = 0; j < offset; j++) {
                if (values[i] === 1) {
                    newValues[index++] = aValues[i];
                }
                else {
                    newValues[index++] = bValues[i];
                }
            }
        }
        return result;
    };
    MathBackendCPU.prototype.topKValues = function (x, k) {
        return this.topK(x, k).values;
    };
    MathBackendCPU.prototype.topKIndices = function (x, k) {
        return this.topK(x, k).indices;
    };
    MathBackendCPU.prototype.topK = function (x, k) {
        var values = x.dataSync();
        var valuesAndIndices = [];
        for (var i = 0; i < values.length; i++) {
            valuesAndIndices.push({ value: values[i], index: i });
        }
        valuesAndIndices.sort(function (a, b) {
            return b.value - a.value;
        });
        var topkValues = util.getTypedArrayFromDType(x.dtype, k);
        var topkIndices = new Int32Array(k);
        for (var i = 0; i < k; i++) {
            topkValues[i] = valuesAndIndices[i].value;
            topkIndices[i] = valuesAndIndices[i].index;
        }
        return {
            values: ops.tensor1d(topkValues, x.dtype),
            indices: ops.tensor1d(topkIndices, 'int32')
        };
    };
    MathBackendCPU.prototype.min = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var result = ops.zeros(outShape, x.dtype);
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var min = aVals[0];
            for (var j = 0; j < reduceSize; ++j) {
                var value = aVals[offset + j];
                if (value < min) {
                    min = value;
                }
            }
            vals[i] = min;
        }
        return result;
    };
    MathBackendCPU.prototype.minimum = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) { return Math.min(aVal, bVal); });
    };
    MathBackendCPU.prototype.mod = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {
            var rem = aVal % bVal;
            if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {
                return rem;
            }
            else {
                return (rem + bVal) % bVal;
            }
        });
    };
    MathBackendCPU.prototype.max = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
        var result = ops.zeros(outShape, x.dtype);
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var max = aVals[offset];
            for (var j = 0; j < reduceSize; ++j) {
                var value = aVals[offset + j];
                if (value > max) {
                    max = value;
                }
            }
            vals[i] = max;
        }
        return result;
    };
    MathBackendCPU.prototype.maximum = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) { return Math.max(aVal, bVal); });
    };
    MathBackendCPU.prototype.squaredDifference = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {
            var diff = aVal - bVal;
            return diff * diff;
        });
    };
    MathBackendCPU.prototype.ceil = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = Math.ceil(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.floor = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = Math.floor(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.sign = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            if (values[i] < 0) {
                newValues[i] = -1;
            }
            else if (values[i] > 0) {
                newValues[i] = 1;
            }
            else {
                newValues[i] = 0;
            }
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.round = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var base = Math.floor(values[i]);
            if (values[i] - base < 0.5) {
                newValues[i] = Math.floor(values[i]);
            }
            else if (values[i] - base > 0.5) {
                newValues[i] = Math.ceil(values[i]);
            }
            else {
                if (base % 2.0 === 0.0) {
                    newValues[i] = base;
                }
                else {
                    newValues[i] = base + 1.0;
                }
            }
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.exp = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = Math.exp(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.expm1 = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = Math.expm1(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.log = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = Math.log(value);
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.log1p = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = Math.log1p(value);
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.sqrt = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = Math.sqrt(value);
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.rsqrt = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = 1 / Math.sqrt(value);
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.square = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = value * value;
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.reciprocal = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = 1 / values[i];
        }
        return tensor_1.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.relu = function (x) {
        var res = ops.zeros(x.shape, x.dtype);
        var resVals = res.dataSync();
        var inVals = x.dataSync();
        for (var i = 0; i < inVals.length; ++i) {
            resVals[i] = Math.max(0, inVals[i]);
        }
        return res;
    };
    MathBackendCPU.prototype.elu = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var v = values[i];
            if (v >= 0) {
                resultValues[i] = v;
            }
            else {
                resultValues[i] = (Math.exp(v) - 1);
            }
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.eluDer = function (dy, y) {
        var resultValues = new Float32Array(y.size);
        var values = y.dataSync();
        var dyValues = dy.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var v = values[i];
            if (v >= 1) {
                resultValues[i] = dyValues[i];
            }
            else {
                resultValues[i] = dyValues[i] * (v + 1);
            }
        }
        return tensor_1.Tensor.make(y.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.selu = function (x) {
        var scaleAlpha = selu_util.SELU_SCALEALPHA;
        var scale = selu_util.SELU_SCALE;
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var v = values[i];
            if (v >= 0) {
                resultValues[i] = scale * v;
            }
            else {
                resultValues[i] = scaleAlpha * (Math.exp(v) - 1);
            }
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.clip = function (x, min, max) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.min(max, Math.max(min, values[i]));
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.abs = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.abs(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.int = function (x) {
        var resultValues = new Int32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = values[i];
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues }, 'int32');
    };
    MathBackendCPU.prototype.sigmoid = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = 1 / (1 + Math.exp(-values[i]));
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.softplus = function (x) {
        var epsilon = 1.1920928955078125e-7;
        var threshold = Math.log(epsilon) + 2.0;
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var tooLarge = values[i] > -threshold;
            var tooSmall = values[i] < threshold;
            var expX = Math.exp(values[i]);
            var result = void 0;
            if (tooSmall) {
                result = expX;
            }
            else if (tooLarge) {
                result = values[i];
            }
            else {
                result = Math.log(1.0 + expX);
            }
            resultValues[i] = result;
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.sin = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.sin(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.cos = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.cos(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.tan = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.tan(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.asin = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.asin(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.acos = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.acos(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.atan = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.atan(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.atan2 = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aValue, bValue) { return Math.atan2(aValue, bValue); });
    };
    MathBackendCPU.prototype.sinh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.sinh(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.cosh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.cosh(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.tanh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = util.tanh(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.asinh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.asinh(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.acosh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.acosh(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.atanh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.atanh(values[i]);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.erf = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        var p = erf_util.ERF_P;
        var a1 = erf_util.ERF_A1;
        var a2 = erf_util.ERF_A2;
        var a3 = erf_util.ERF_A3;
        var a4 = erf_util.ERF_A4;
        var a5 = erf_util.ERF_A5;
        for (var i = 0; i < values.length; ++i) {
            var v = values[i];
            var t = 1.0 / (1.0 + p * v);
            resultValues[i]
                = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-v * v);
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.step = function (x, alpha) {
        if (alpha === void 0) { alpha = 0; }
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            if (isNaN(value)) {
                resultValues[i] = NaN;
            }
            else {
                resultValues[i] = value > 0 ? 1 : alpha;
            }
        }
        return tensor_1.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.conv2d = function (x, filter, convInfo) {
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var dilationHeight = convInfo.dilationHeight;
        var dilationWidth = convInfo.dilationWidth;
        var padLeft = convInfo.padInfo.left;
        var padTop = convInfo.padInfo.top;
        var y = ops.buffer(convInfo.outShape, x.dtype);
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {
                for (var yR = 0; yR < convInfo.outHeight; ++yR) {
                    var xRCorner = yR * convInfo.strideHeight - padLeft;
                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {
                        var xCCorner = yC * convInfo.strideWidth - padTop;
                        var dotProd = 0;
                        for (var wR = 0; wR < filterHeight; wR++) {
                            var xR = xRCorner + wR * dilationHeight;
                            if (xR < 0 || xR >= convInfo.inHeight) {
                                continue;
                            }
                            for (var wC = 0; wC < filterWidth; wC++) {
                                var xC = xCCorner + wC * dilationWidth;
                                if (xC < 0 || xC >= convInfo.inWidth) {
                                    continue;
                                }
                                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {
                                    var pixel = x.get(b, xR, xC, d1);
                                    var weight = filter.get(wR, wC, d1, d2);
                                    dotProd += pixel * weight;
                                }
                            }
                        }
                        y.set(dotProd, b, yR, yC, d2);
                    }
                }
            }
        }
        return y.toTensor();
    };
    MathBackendCPU.prototype.conv2dDerInput = function (dy, filter, convInfo) {
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var topPad = filterHeight - 1 - convInfo.padInfo.top;
        var leftPad = filterWidth - 1 - convInfo.padInfo.left;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var dx = ops.buffer(convInfo.inShape, 'float32');
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {
                for (var xR = 0; xR < convInfo.inHeight; ++xR) {
                    var xRCorner = xR - leftPad;
                    var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                    var yRMax = Math.min(convInfo.outHeight, (filterHeight + xRCorner) / strideHeight);
                    for (var xC = 0; xC < convInfo.inWidth; ++xC) {
                        var xCCorner = xC - topPad;
                        var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                        var yCMax = Math.min(convInfo.outWidth, (filterWidth + xCCorner) / strideWidth);
                        var dotProd = 0;
                        for (var yR = xRMin; yR < yRMax; ++yR) {
                            var wR = yR * strideHeight - xRCorner;
                            for (var yC = xCMin; yC < yCMax; ++yC) {
                                var wC = yC * strideWidth - xCCorner;
                                for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {
                                    var pixel = dy.get(b, yR, yC, d2);
                                    var weight = filter.get(filterHeight - 1 - wR, filterWidth - 1 - wC, d1, d2);
                                    dotProd += pixel * weight;
                                }
                            }
                        }
                        dx.set(dotProd, b, xR, xC, d1);
                    }
                }
            }
        }
        return dx.toTensor();
    };
    MathBackendCPU.prototype.conv2dDerFilter = function (x, dy, convInfo) {
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var dW = ops.buffer(convInfo.filterShape, 'float32');
        var leftPad = convInfo.padInfo.left;
        var topPad = convInfo.padInfo.top;
        for (var wR = 0; wR < filterHeight; ++wR) {
            var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
            var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
            for (var wC = 0; wC < filterWidth; ++wC) {
                var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {
                    for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {
                        var dotProd = 0;
                        for (var b = 0; b < convInfo.batchSize; ++b) {
                            for (var yR = yRMin; yR < yRMax; ++yR) {
                                var xR = wR + yR * strideHeight - topPad;
                                for (var yC = yCMin; yC < yCMax; ++yC) {
                                    var xC = wC + yC * strideWidth - leftPad;
                                    dotProd += x.get(b, xR, xC, d1) * dy.get(b, yR, yC, d2);
                                }
                            }
                        }
                        dW.set(dotProd, wR, wC, d1, d2);
                    }
                }
            }
        }
        return dW.toTensor();
    };
    MathBackendCPU.prototype.depthwiseConv2D = function (x, filter, convInfo) {
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var dilationHeight = convInfo.dilationHeight;
        var dilationWidth = convInfo.dilationWidth;
        var padLeft = convInfo.padInfo.left;
        var padTop = convInfo.padInfo.top;
        var chMul = convInfo.outChannels / convInfo.inChannels;
        var y = ops.buffer(convInfo.outShape, x.dtype);
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {
                for (var yR = 0; yR < convInfo.outHeight; ++yR) {
                    var xRCorner = yR * convInfo.strideHeight - padLeft;
                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {
                        var xCCorner = yC * convInfo.strideWidth - padTop;
                        for (var q = 0; q < chMul; ++q) {
                            var dotProd = 0;
                            for (var wR = 0; wR < filterHeight; ++wR) {
                                var xR = xRCorner + wR * dilationHeight;
                                if (xR < 0 || xR >= convInfo.inHeight) {
                                    continue;
                                }
                                for (var wC = 0; wC < filterWidth; ++wC) {
                                    var xC = xCCorner + wC * dilationWidth;
                                    if (xC < 0 || xC >= convInfo.inWidth) {
                                        continue;
                                    }
                                    var pixel = x.get(b, xR, xC, d1);
                                    var weight = filter.get(wR, wC, d1, q);
                                    dotProd += pixel * weight;
                                }
                            }
                            y.set(dotProd, b, yR, yC, d1 * chMul + q);
                        }
                    }
                }
            }
        }
        return y.toTensor();
    };
    MathBackendCPU.prototype.tile = function (x, reps) {
        var newShape = new Array(x.rank);
        for (var i = 0; i < newShape.length; i++) {
            newShape[i] = x.shape[i] * reps[i];
        }
        var result = ops.buffer(newShape, x.dtype);
        var xBuf = x.buffer();
        for (var i = 0; i < result.values.length; ++i) {
            var newLoc = result.indexToLoc(i);
            var originalLoc = new Array(x.rank);
            for (var i_1 = 0; i_1 < originalLoc.length; i_1++) {
                originalLoc[i_1] = newLoc[i_1] % x.shape[i_1];
            }
            var originalIndex = xBuf.locToIndex(originalLoc);
            result.values[i] = xBuf.values[originalIndex];
        }
        return result.toTensor();
    };
    MathBackendCPU.prototype.pad = function (x, paddings, constantValue) {
        var outShape = paddings.map(function (p, i) { return p[0] + x.shape[i] + p[1]; });
        var start = paddings.map(function (p) { return p[0]; });
        var xBuffer = x.buffer();
        var buffer = ops.buffer(outShape, x.dtype);
        if (constantValue !== 0) {
            buffer.values.fill(constantValue);
        }
        for (var i = 0; i < x.size; i++) {
            var coords = xBuffer.indexToLoc(i);
            var outCoords = coords.map(function (c, i) { return c + start[i]; });
            buffer.set.apply(buffer, [x.get.apply(x, coords)].concat(outCoords));
        }
        return buffer.toTensor();
    };
    MathBackendCPU.prototype.transpose = function (x, perm) {
        var newShape = new Array(x.rank);
        for (var i = 0; i < newShape.length; i++) {
            newShape[i] = x.shape[perm[i]];
        }
        var values = x.dataSync();
        var result = ops_1.buffer(newShape, x.dtype);
        var xBuf = x.buffer();
        for (var i = 0; i < x.size; ++i) {
            var loc = xBuf.indexToLoc(i);
            var newLoc = new Array(loc.length);
            for (var i_2 = 0; i_2 < newLoc.length; i_2++) {
                newLoc[i_2] = loc[perm[i_2]];
            }
            var newIndex = result.locToIndex(newLoc);
            result.values[newIndex] = values[i];
        }
        return result.toTensor();
    };
    MathBackendCPU.prototype.gather = function (x, indices, axis) {
        var newShape = x.shape.slice();
        var indicesValues = indices.dataSync();
        newShape[axis] = indicesValues.length;
        var result = ops_1.buffer(newShape, x.dtype);
        var xBuf = x.buffer();
        for (var i = 0; i < result.size; ++i) {
            var newLoc = result.indexToLoc(i);
            var originalLoc = newLoc.slice();
            originalLoc[axis] = indicesValues[newLoc[axis]];
            var originalIndex = xBuf.locToIndex(originalLoc);
            result.values[i] = xBuf.values[originalIndex];
        }
        return result.toTensor();
    };
    MathBackendCPU.prototype.pool = function (x, convInfo, poolType) {
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var y = ops.buffer(convInfo.outShape, 'float32');
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d = 0; d < convInfo.inChannels; ++d) {
                for (var yR = 0; yR < convInfo.outHeight; ++yR) {
                    var xRCorner = yR * strideHeight - padTop;
                    var xRMin = Math.max(0, xRCorner);
                    var xRMax = Math.min(convInfo.inHeight, filterHeight + xRCorner);
                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {
                        var xCCorner = yC * strideWidth - padLeft;
                        var xCMin = Math.max(0, xCCorner);
                        var xCMax = Math.min(convInfo.inWidth, filterWidth + xCCorner);
                        var minMaxValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :
                            Number.POSITIVE_INFINITY);
                        var avgValue = 0;
                        var count = 0;
                        for (var xR = xRMin; xR < xRMax; ++xR) {
                            for (var xC = xCMin; xC < xCMax; ++xC) {
                                var pixel = x.get(b, xR, xC, d);
                                if ((poolType === 'max' && pixel > minMaxValue)) {
                                    minMaxValue = pixel;
                                }
                                else if (poolType === 'avg') {
                                    avgValue += pixel;
                                    count++;
                                }
                            }
                            if (isNaN(minMaxValue)) {
                                break;
                            }
                        }
                        y.set(poolType === 'avg' ? avgValue / count : minMaxValue, b, yR, yC, d);
                    }
                }
            }
        }
        return y.toTensor();
    };
    MathBackendCPU.prototype.maxPool = function (x, convInfo) {
        return this.pool(x, convInfo, 'max');
    };
    MathBackendCPU.prototype.maxPoolPositions = function (x, convInfo) {
        var maxPositions = ops.buffer(convInfo.outShape, 'int32');
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d = 0; d < convInfo.inChannels; ++d) {
                for (var yR = 0; yR < convInfo.outHeight; ++yR) {
                    var xRCorner = yR * strideHeight - padTop;
                    var xRMin = Math.max(0, xRCorner);
                    var xRMax = Math.min(convInfo.inHeight, filterHeight + xRCorner);
                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {
                        var xCCorner = yC * strideWidth - padLeft;
                        var xCMin = Math.max(0, xCCorner);
                        var xCMax = Math.min(convInfo.inWidth, filterWidth + xCCorner);
                        var maxValue = Number.NEGATIVE_INFINITY;
                        var maxPosition = -1;
                        for (var xR = xRMin; xR < xRMax; ++xR) {
                            var wR = xR - xRCorner;
                            for (var xC = xCMin; xC < xCMax; ++xC) {
                                var wC = xC - xCCorner;
                                var pixel = x.get(b, xR, xC, d);
                                if (pixel > maxValue) {
                                    maxValue = pixel;
                                    maxPosition = wR * filterWidth + wC;
                                }
                            }
                        }
                        maxPositions.set(maxPosition, b, yR, yC, d);
                    }
                }
            }
        }
        return maxPositions.toTensor();
    };
    MathBackendCPU.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {
        var maxPositions = this.maxPoolPositions(x, convInfo);
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var dx = ops.buffer(x.shape, 'float32');
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d = 0; d < convInfo.inChannels; ++d) {
                for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {
                    for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {
                        var dyRCorner = dxR - padTop;
                        var dyCCorner = dxC - padLeft;
                        var dotProd = 0;
                        for (var wR = 0; wR < filterHeight; ++wR) {
                            var dyR = (dyRCorner + wR) / strideHeight;
                            if (dyR < 0 || dyR >= convInfo.outHeight ||
                                Math.floor(dyR) !== dyR) {
                                continue;
                            }
                            for (var wC = 0; wC < filterWidth; ++wC) {
                                var dyC = (dyCCorner + wC) / strideWidth;
                                if (dyC < 0 || dyC >= convInfo.outWidth ||
                                    Math.floor(dyC) !== dyC) {
                                    continue;
                                }
                                var maxPos = filterHeight * filterWidth - 1 -
                                    maxPositions.get(b, dyR, dyC, d);
                                var curPos = wR * filterWidth + wC;
                                var mask = maxPos === curPos ? 1 : 0;
                                if (mask === 0) {
                                    continue;
                                }
                                var pixel = dy.get(b, dyR, dyC, d);
                                dotProd += pixel * mask;
                            }
                        }
                        dx.set(dotProd, b, dxR, dxC, d);
                    }
                }
            }
        }
        return dx.toTensor();
    };
    MathBackendCPU.prototype.avgPoolBackprop = function (dy, x, convInfo) {
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var dx = ops.buffer(x.shape, 'float32');
        var avgMultiplier = 1 / (filterHeight * filterWidth);
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d = 0; d < convInfo.inChannels; ++d) {
                for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {
                    for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {
                        var dyRCorner = dxR - padTop;
                        var dyCCorner = dxC - padLeft;
                        var dotProd = 0;
                        for (var wR = 0; wR < filterHeight; ++wR) {
                            var dyR = (dyRCorner + wR) / strideHeight;
                            if (dyR < 0 || dyR >= convInfo.outHeight ||
                                Math.floor(dyR) !== dyR) {
                                continue;
                            }
                            for (var wC = 0; wC < filterWidth; ++wC) {
                                var dyC = (dyCCorner + wC) / strideWidth;
                                if (dyC < 0 || dyC >= convInfo.outWidth ||
                                    Math.floor(dyC) !== dyC) {
                                    continue;
                                }
                                var pixel = dy.get(b, dyR, dyC, d);
                                dotProd += pixel;
                            }
                        }
                        dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);
                    }
                }
            }
        }
        return dx.toTensor();
    };
    MathBackendCPU.prototype.cast = function (x, dtype) {
        return backend_util.castTensor(x, dtype, this);
    };
    MathBackendCPU.prototype.reshape = function (x, shape) {
        return backend_util.reshapeTensor(x, shape);
    };
    MathBackendCPU.prototype.avgPool = function (x, convInfo) {
        return this.pool(x, convInfo, 'avg').toFloat();
    };
    MathBackendCPU.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {
        var _a = x.shape, batch = _a[0], oldHeight = _a[1], oldWidth = _a[2], numChannels = _a[3];
        var output = ops.buffer([batch, newHeight, newWidth, numChannels], x.dtype);
        var effectiveInputSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];
        var effectiveOutputSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];
        for (var b = 0; b < batch; b++) {
            for (var r = 0; r < newHeight; r++) {
                for (var c = 0; c < newWidth; c++) {
                    for (var d = 0; d < numChannels; d++) {
                        var sourceFracRow = (effectiveInputSize[0]) * r / (effectiveOutputSize[0]);
                        var sourceFracCol = (effectiveInputSize[1]) * c / (effectiveOutputSize[1]);
                        var sourceRowFloor = Math.floor(sourceFracRow);
                        var sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));
                        var sourceColFloor = Math.floor(sourceFracCol);
                        var sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));
                        var topLeft = x.get(b, sourceRowFloor, sourceColFloor, d);
                        var bottomLeft = x.get(b, sourceRowCeil, sourceColFloor, d);
                        var topRight = x.get(b, sourceRowFloor, sourceColCeil, d);
                        var bottomRight = x.get(b, sourceRowCeil, sourceColCeil, d);
                        var rowFrac = sourceFracRow - sourceRowFloor;
                        var colFrac = sourceFracCol - sourceColFloor;
                        var top_1 = topLeft + (topRight - topLeft) * colFrac;
                        var bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;
                        var newValue = top_1 + (bottom - top_1) * rowFrac;
                        output.set(newValue, b, r, c, d);
                    }
                }
            }
        }
        return output.toTensor();
    };
    MathBackendCPU.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {
        var _a = x.shape, batch = _a[0], oldHeight = _a[1], oldWidth = _a[2], numChannels = _a[3];
        var output = ops.buffer([batch, newHeight, newWidth, numChannels], x.dtype);
        var effectiveInputSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];
        var effectiveOutputSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];
        for (var b = 0; b < batch; b++) {
            for (var r = 0; r < newHeight; r++) {
                for (var c = 0; c < newWidth; c++) {
                    for (var d = 0; d < numChannels; d++) {
                        var sourceFracRow = (effectiveInputSize[0]) * r / (effectiveOutputSize[0]);
                        var sourceFracCol = (effectiveInputSize[1]) * c / (effectiveOutputSize[1]);
                        var sourceNearestRow = Math.min(oldHeight - 1, Math.round(sourceFracRow));
                        var sourceNearestCol = Math.min(oldWidth - 1, Math.round(sourceFracCol));
                        var newValue = x.get(b, sourceNearestRow, sourceNearestCol, d);
                        output.set(newValue, b, r, c, d);
                    }
                }
            }
        }
        return output.toTensor();
    };
    MathBackendCPU.prototype.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {
        var xValues = x.dataSync();
        var meanValues = mean.dataSync();
        var varianceValues = variance.dataSync();
        var scaleValues = scale ? scale.dataSync() : new Float32Array([1]);
        var offsetValues = offset ? offset.dataSync() : new Float32Array([0]);
        var outValues = new Float32Array(xValues.length);
        for (var i = 0; i < xValues.length; i++) {
            outValues[i] = offsetValues[i % offsetValues.length] +
                (xValues[i] - meanValues[i % meanValues.length]) *
                    scaleValues[i % scaleValues.length] /
                    Math.sqrt(varianceValues[i % varianceValues.length] + varianceEpsilon);
        }
        return ops_1.tensor4d(outValues, x.shape);
    };
    MathBackendCPU.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {
        var output = ops.buffer(x.shape, 'float32');
        var rad = radius;
        var maxD = output.shape[3] - 1;
        function sumAcrossChannels(b, r, c, d) {
            var sum = 0.0;
            for (var j = Math.max(0, d - rad); j <= Math.min(d + rad, maxD); j++) {
                var z = x.get(b, r, c, j);
                sum += z * z;
            }
            return sum;
        }
        for (var b = 0; b < output.shape[0]; b++) {
            for (var r = 0; r <= output.shape[1]; r++) {
                for (var c = 0; c < output.shape[2]; c++) {
                    for (var d = 0; d < output.shape[3]; d++) {
                        var sum = sumAcrossChannels(b, r, c, d);
                        var val = x.get(b, r, c, d) * Math.pow(bias + alpha * sum, -beta);
                        output.set(val, b, r, c, d);
                    }
                }
            }
        }
        return output.toTensor();
    };
    MathBackendCPU.prototype.multinomial = function (logits, normalized, numSamples, seed) {
        var probabilities = normalized ? logits : ops.softmax(logits);
        var batchSize = probabilities.shape[0];
        var numEvents = probabilities.shape[1];
        var res = ops.zeros([batchSize, numSamples], 'int32');
        var resVals = res.dataSync();
        var probVals = probabilities.dataSync();
        for (var b = 0; b < batchSize; ++b) {
            var offset = b * numEvents;
            var cdf = new Float32Array(numEvents - 1);
            cdf[0] = probVals[offset];
            for (var event_1 = 1; event_1 < cdf.length; ++event_1) {
                cdf[event_1] = cdf[event_1 - 1] + probVals[offset + event_1];
            }
            var random = seedrandom.alea(seed.toString());
            var outOffset = b * numSamples;
            for (var sampleId = 0; sampleId < numSamples; ++sampleId) {
                var r = random();
                resVals[outOffset + sampleId] = cdf.length;
                for (var event_2 = 0; event_2 < cdf.length; event_2++) {
                    if (r < cdf[event_2]) {
                        resVals[outOffset + sampleId] = event_2;
                        break;
                    }
                }
            }
        }
        return res;
    };
    MathBackendCPU.prototype.oneHot = function (indices, depth, onValue, offValue) {
        var res = new Float32Array(indices.size * depth);
        res.fill(offValue);
        for (var event_3 = 0; event_3 < indices.size; ++event_3) {
            res[event_3 * depth + indices.get(event_3)] = onValue;
        }
        return ops.tensor2d(res, [indices.size, depth]);
    };
    MathBackendCPU.prototype.broadcastedBinaryOp = function (a, b, dtype, op) {
        var newShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var result = ops.buffer(newShape, dtype);
        var aValues = a.dataSync();
        var bValues = b.dataSync();
        var aBroadcastDims = broadcast_util.getBroadcastDims(a.shape, newShape);
        var bBroadcastDims = broadcast_util.getBroadcastDims(b.shape, newShape);
        var aBuf = a.buffer();
        var bBuf = b.buffer();
        var _loop_2 = function (i) {
            var loc = result.indexToLoc(i);
            var aLoc = loc.slice(-a.rank);
            aBroadcastDims.forEach(function (d) { return aLoc[d] = 0; });
            var aIndex = aBuf.locToIndex(aLoc);
            var bLoc = loc.slice(-b.rank);
            bBroadcastDims.forEach(function (d) { return bLoc[d] = 0; });
            var bIndex = bBuf.locToIndex(bLoc);
            result.values[i] = op(aValues[aIndex], bValues[bIndex]);
        };
        for (var i = 0; i < result.values.length; ++i) {
            _loop_2(i);
        }
        return result.toTensor();
    };
    MathBackendCPU.prototype.dispose = function () { };
    return MathBackendCPU;
}());
exports.MathBackendCPU = MathBackendCPU;
environment_1.ENV.registerBackend('cpu', function () { return new MathBackendCPU(); }, 1);

},{"seedrandom":228,"../environment":111,"../ops/axis_util":220,"../ops/broadcast_util":221,"../ops/concat_util":222,"../ops/ops":132,"../ops/selu_util":223,"../ops/erf_util":224,"../tensor":117,"../types":116,"../util":114,"./backend_util":225}],112:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("./doc");
var BrowserUtil = (function () {
    function BrowserUtil() {
    }
    BrowserUtil.nextFrame = function () {
        return new Promise(function (resolve) { return requestAnimationFrame(function () { return resolve(); }); });
    };
    __decorate([
        doc_1.doc({ heading: 'Performance', subheading: 'Timing' })
    ], BrowserUtil, "nextFrame", null);
    return BrowserUtil;
}());
exports.BrowserUtil = BrowserUtil;

},{"./doc":121}],113:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tensor_1 = require("./tensor");
var util = require("./util");
exports.WEBGL_ENVS = {
    'BACKEND': 'test-webgl'
};
exports.CPU_ENVS = {
    'BACKEND': 'test-cpu'
};
exports.ALL_ENVS = {};
exports.TEST_EPSILON = 1e-3;
function expectArraysClose(actual, expected, epsilon) {
    if (epsilon === void 0) { epsilon = exports.TEST_EPSILON; }
    if (!(actual instanceof tensor_1.Tensor) && !(expected instanceof tensor_1.Tensor)) {
        var aType = actual.constructor.name;
        var bType = expected.constructor.name;
        if (aType !== bType) {
            throw new Error("Arrays are of different type actual: " + aType + " " +
                ("vs expected: " + bType));
        }
    }
    else if (actual instanceof tensor_1.Tensor && expected instanceof tensor_1.Tensor) {
        if (actual.dtype !== expected.dtype) {
            throw new Error("Arrays are of different type actual: " + actual.dtype + " " +
                ("vs expected: " + expected.dtype + "."));
        }
        if (!util.arraysEqual(actual.shape, expected.shape)) {
            throw new Error("Arrays are of different shape actual: " + actual.shape + " " +
                ("vs expected: " + expected.shape + "."));
        }
    }
    var actualValues;
    var expectedValues;
    if (actual instanceof tensor_1.Tensor) {
        actualValues = actual.dataSync();
    }
    else {
        actualValues = actual;
    }
    if (expected instanceof tensor_1.Tensor) {
        expectedValues = expected.dataSync();
    }
    else {
        expectedValues = expected;
    }
    if (actualValues.length !== expectedValues.length) {
        throw new Error("Arrays have different lengths actual: " + actualValues.length + " vs " +
            ("expected: " + expectedValues.length + ".\n") +
            ("Actual:   " + actualValues + ".\n") +
            ("Expected: " + expectedValues + "."));
    }
    for (var i = 0; i < expectedValues.length; ++i) {
        var a = actualValues[i];
        var e = expectedValues[i];
        if (!areClose(a, Number(e), epsilon)) {
            throw new Error("Arrays differ: actual[" + i + "] = " + a + ", expected[" + i + "] = " + e + ".\n" +
                ("Actual:   " + actualValues + ".\n") +
                ("Expected: " + expectedValues + "."));
        }
    }
}
exports.expectArraysClose = expectArraysClose;
function expectPromiseToFail(fn, done) {
    fn().then(function () { return done.fail(); }, function () { return done(); });
}
exports.expectPromiseToFail = expectPromiseToFail;
function expectArraysEqual(actual, expected) {
    return expectArraysClose(actual, expected, 0);
}
exports.expectArraysEqual = expectArraysEqual;
function expectNumbersClose(a, e, epsilon) {
    if (epsilon === void 0) { epsilon = exports.TEST_EPSILON; }
    if (!areClose(a, e, epsilon)) {
        throw new Error("Numbers differ: actual === " + a + ", expected === " + e);
    }
}
exports.expectNumbersClose = expectNumbersClose;
function areClose(a, e, epsilon) {
    if (isNaN(a) && isNaN(e)) {
        return true;
    }
    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {
        return false;
    }
    return true;
}
function expectValuesInRange(actual, low, high) {
    var actualVals;
    if (actual instanceof tensor_1.Tensor) {
        actualVals = actual.dataSync();
    }
    else {
        actualVals = actual;
    }
    for (var i = 0; i < actualVals.length; i++) {
        if (actualVals[i] < low || actualVals[i] > high) {
            throw new Error("Value out of range:" + actualVals[i] + " low: " + low + ", high: " + high);
        }
    }
}
exports.expectValuesInRange = expectValuesInRange;

},{"./tensor":117,"./util":114}],115:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var version = '0.8.4';
exports.version = version;

},{}],129:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var globals_1 = require("../globals");
var Optimizer = (function () {
    function Optimizer() {
    }
    Optimizer.prototype.minimize = function (f, returnCost, varList) {
        if (returnCost === void 0) { returnCost = false; }
        var _a = this.computeGradients(f, varList), value = _a.value, grads = _a.grads;
        this.applyGradients(grads);
        var varNames = Object.keys(grads);
        varNames.forEach(function (varName) { return grads[varName].dispose(); });
        if (returnCost) {
            return value;
        }
        else {
            value.dispose();
            return null;
        }
    };
    Optimizer.prototype.computeGradients = function (f, varList) {
        return globals_1.variableGrads(f, varList);
    };
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Optimizers' })
    ], Optimizer.prototype, "minimize", null);
    Optimizer = __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Classes', namespace: 'train' })
    ], Optimizer);
    return Optimizer;
}());
exports.Optimizer = Optimizer;

},{"../doc":121,"../globals":120}],124:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../environment");
var globals_1 = require("../globals");
var ops_1 = require("../ops/ops");
var optimizer_1 = require("./optimizer");
var AdadeltaOptimizer = (function (_super) {
    __extends(AdadeltaOptimizer, _super);
    function AdadeltaOptimizer(learningRate, rho, epsilon) {
        if (epsilon === void 0) { epsilon = 1e-8; }
        var _this = _super.call(this) || this;
        _this.accumulatedGrads = {};
        _this.accumulatedUpdates = {};
        _this.c = globals_1.keep(ops_1.scalar(-learningRate));
        _this.epsilon = globals_1.keep(ops_1.scalar(epsilon));
        _this.rho = globals_1.keep(ops_1.scalar(rho));
        _this.oneMinusRho = globals_1.keep(ops_1.scalar(1 - rho));
        return _this;
    }
    AdadeltaOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var _loop_1 = function (variableName) {
            var value = environment_1.ENV.engine.registeredVariables[variableName];
            if (this_1.accumulatedGrads[variableName] == null) {
                var trainable_1 = false;
                globals_1.tidy(function () {
                    _this.accumulatedGrads[variableName] =
                        ops_1.zerosLike(value).variable(trainable_1);
                });
            }
            if (this_1.accumulatedUpdates[variableName] == null) {
                var trainable_2 = false;
                globals_1.tidy(function () {
                    _this.accumulatedUpdates[variableName] =
                        ops_1.zerosLike(value).variable(trainable_2);
                });
            }
            var gradient = variableGradients[variableName];
            var accumulatedGrad = this_1.accumulatedGrads[variableName];
            var accumulatedUpdate = this_1.accumulatedUpdates[variableName];
            globals_1.tidy(function () {
                var newAccumulatedGrad = _this.rho.mul(accumulatedGrad)
                    .add(_this.oneMinusRho.mul(gradient.square()));
                var updates = accumulatedUpdate.add(_this.epsilon)
                    .sqrt()
                    .div(accumulatedGrad.add(_this.epsilon).sqrt())
                    .mul(gradient);
                var newAccumulatedUpdate = _this.rho.mul(accumulatedUpdate)
                    .add(_this.oneMinusRho.mul(updates.square()));
                _this.accumulatedGrads[variableName].assign(newAccumulatedGrad);
                _this.accumulatedUpdates[variableName].assign(newAccumulatedUpdate);
                var newValue = _this.c.mul(updates).add(value);
                value.assign(newValue);
            });
        };
        var this_1 = this;
        for (var variableName in variableGradients) {
            _loop_1(variableName);
        }
    };
    AdadeltaOptimizer.prototype.dispose = function () {
        var _this = this;
        this.c.dispose();
        this.epsilon.dispose();
        this.rho.dispose();
        this.oneMinusRho.dispose();
        if (this.accumulatedUpdates != null) {
            Object.keys(this.accumulatedUpdates)
                .forEach(function (name) { return _this.accumulatedUpdates[name].dispose(); });
            Object.keys(this.accumulatedGrads)
                .forEach(function (name) { return _this.accumulatedGrads[name].dispose(); });
        }
    };
    return AdadeltaOptimizer;
}(optimizer_1.Optimizer));
exports.AdadeltaOptimizer = AdadeltaOptimizer;

},{"../environment":111,"../globals":120,"../ops/ops":132,"./optimizer":129}],126:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../environment");
var globals_1 = require("../globals");
var ops_1 = require("../ops/ops");
var optimizer_1 = require("./optimizer");
var AdagradOptimizer = (function (_super) {
    __extends(AdagradOptimizer, _super);
    function AdagradOptimizer(learningRate, initialAccumulatorValue) {
        if (initialAccumulatorValue === void 0) { initialAccumulatorValue = 0.1; }
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.initialAccumulatorValue = initialAccumulatorValue;
        _this.accumulatedGrads = {};
        _this.c = globals_1.keep(ops_1.scalar(-learningRate));
        _this.epsilon = globals_1.keep(ops_1.scalar(1e-8));
        return _this;
    }
    AdagradOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var _loop_1 = function (variableName) {
            var value = environment_1.ENV.engine.registeredVariables[variableName];
            if (this_1.accumulatedGrads[variableName] == null) {
                var trainable_1 = false;
                globals_1.tidy(function () {
                    _this.accumulatedGrads[variableName] =
                        ops_1.fill(value.shape, _this.initialAccumulatorValue)
                            .variable(trainable_1);
                });
            }
            var gradient = variableGradients[variableName];
            var accumulatedGrad = this_1.accumulatedGrads[variableName];
            globals_1.tidy(function () {
                var newAccumulatedGrad = accumulatedGrad.add(gradient.square());
                _this.accumulatedGrads[variableName].assign(newAccumulatedGrad);
                var newValue = _this.c
                    .mul(gradient.div(newAccumulatedGrad.add(_this.epsilon).sqrt()))
                    .add(value);
                value.assign(newValue);
            });
        };
        var this_1 = this;
        for (var variableName in variableGradients) {
            _loop_1(variableName);
        }
    };
    AdagradOptimizer.prototype.dispose = function () {
        var _this = this;
        this.epsilon.dispose();
        this.c.dispose();
        if (this.accumulatedGrads != null) {
            Object.keys(this.accumulatedGrads)
                .forEach(function (name) { return _this.accumulatedGrads[name].dispose(); });
        }
    };
    return AdagradOptimizer;
}(optimizer_1.Optimizer));
exports.AdagradOptimizer = AdagradOptimizer;

},{"../environment":111,"../globals":120,"../ops/ops":132,"./optimizer":129}],125:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../environment");
var globals_1 = require("../globals");
var ops_1 = require("../ops/ops");
var optimizer_1 = require("./optimizer");
var AdamOptimizer = (function (_super) {
    __extends(AdamOptimizer, _super);
    function AdamOptimizer(learningRate, beta1, beta2, epsilon) {
        if (epsilon === void 0) { epsilon = 1e-8; }
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.accumulatedFirstMoment = {};
        _this.accumulatedSecondMoment = {};
        _this.c = globals_1.keep(ops_1.scalar(-learningRate));
        _this.eps = globals_1.keep(ops_1.scalar(epsilon));
        _this.beta1 = globals_1.keep(ops_1.scalar(beta1));
        _this.beta2 = globals_1.keep(ops_1.scalar(beta2));
        globals_1.tidy(function () {
            _this.accBeta1 = ops_1.scalar(beta1).variable();
            _this.accBeta2 = ops_1.scalar(beta2).variable();
        });
        _this.oneMinusBeta1 = globals_1.keep(ops_1.scalar(1 - beta1));
        _this.oneMinusBeta2 = globals_1.keep(ops_1.scalar(1 - beta2));
        _this.one = globals_1.keep(ops_1.scalar(1));
        return _this;
    }
    AdamOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        globals_1.tidy(function () {
            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);
            var oneMinusAccBeta2 = _this.one.sub(_this.accBeta2);
            for (var variableName in variableGradients) {
                var value = environment_1.ENV.engine.registeredVariables[variableName];
                if (_this.accumulatedFirstMoment[variableName] == null) {
                    var trainable = false;
                    _this.accumulatedFirstMoment[variableName] =
                        ops_1.zerosLike(value).variable(trainable);
                }
                if (_this.accumulatedSecondMoment[variableName] == null) {
                    var trainable = false;
                    _this.accumulatedSecondMoment[variableName] =
                        ops_1.zerosLike(value).variable(trainable);
                }
                var gradient = variableGradients[variableName];
                var firstMoment = _this.accumulatedFirstMoment[variableName];
                var secondMoment = _this.accumulatedSecondMoment[variableName];
                var newFirstMoment = _this.beta1.mul(firstMoment).add(_this.oneMinusBeta1.mul(gradient));
                var newSecondMoment = _this.beta2.mul(secondMoment)
                    .add(_this.oneMinusBeta2.mul(gradient.square()));
                var biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);
                var biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);
                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);
                _this.accumulatedSecondMoment[variableName].assign(newSecondMoment);
                var newValue = _this.c
                    .mul(biasCorrectedFirstMoment.div(_this.eps.add(biasCorrectedSecondMoment.sqrt())))
                    .add(value);
                value.assign(newValue);
            }
            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1));
            _this.accBeta2.assign(_this.accBeta2.mul(_this.beta2));
        });
    };
    AdamOptimizer.prototype.dispose = function () {
        var _this = this;
        this.c.dispose();
        this.eps.dispose();
        this.beta1.dispose();
        this.beta2.dispose();
        this.accBeta1.dispose();
        this.accBeta2.dispose();
        this.oneMinusBeta1.dispose();
        this.oneMinusBeta2.dispose();
        this.one.dispose();
        if (this.accumulatedFirstMoment != null) {
            Object.keys(this.accumulatedFirstMoment)
                .forEach(function (name) { return _this.accumulatedFirstMoment[name].dispose(); });
        }
        if (this.accumulatedSecondMoment != null) {
            Object.keys(this.accumulatedSecondMoment)
                .forEach(function (name) { return _this.accumulatedSecondMoment[name].dispose(); });
        }
    };
    return AdamOptimizer;
}(optimizer_1.Optimizer));
exports.AdamOptimizer = AdamOptimizer;

},{"../environment":111,"../globals":120,"../ops/ops":132,"./optimizer":129}],127:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../environment");
var globals_1 = require("../globals");
var ops_1 = require("../ops/ops");
var optimizer_1 = require("./optimizer");
var AdamaxOptimizer = (function (_super) {
    __extends(AdamaxOptimizer, _super);
    function AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay) {
        if (epsilon === void 0) { epsilon = 1e-8; }
        if (decay === void 0) { decay = 0.0; }
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.accumulatedFirstMoment = {};
        _this.accumulatedWeightedInfNorm = {};
        _this.c = globals_1.keep(ops_1.scalar(-learningRate));
        _this.eps = globals_1.keep(ops_1.scalar(epsilon));
        _this.beta1 = globals_1.keep(ops_1.scalar(beta1));
        _this.beta2 = globals_1.keep(ops_1.scalar(beta2));
        _this.decay = globals_1.keep(ops_1.scalar(decay));
        globals_1.tidy(function () {
            _this.iteration = ops_1.scalar(0).variable();
            _this.accBeta1 = ops_1.scalar(beta1).variable();
        });
        _this.oneMinusBeta1 = globals_1.keep(ops_1.scalar(1 - beta1));
        _this.one = globals_1.keep(ops_1.scalar(1));
        return _this;
    }
    AdamaxOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        globals_1.tidy(function () {
            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);
            var lr = _this.c.div(_this.one.add(_this.decay.mul(_this.iteration)));
            for (var variableName in variableGradients) {
                var value = environment_1.ENV.engine.registeredVariables[variableName];
                if (_this.accumulatedFirstMoment[variableName] == null) {
                    var trainable = false;
                    _this.accumulatedFirstMoment[variableName] =
                        ops_1.zerosLike(value).variable(trainable);
                }
                if (_this.accumulatedWeightedInfNorm[variableName] == null) {
                    var trainable = false;
                    _this.accumulatedWeightedInfNorm[variableName] =
                        ops_1.zerosLike(value).variable(trainable);
                }
                var gradient = variableGradients[variableName];
                var firstMoment = _this.accumulatedFirstMoment[variableName];
                var weightedInfNorm = _this.accumulatedWeightedInfNorm[variableName];
                var newFirstMoment = _this.beta1.mul(firstMoment).add(_this.oneMinusBeta1.mul(gradient));
                var ut0 = _this.beta2.mul(weightedInfNorm);
                var ut1 = gradient.abs();
                var newWeightedInfNorm = ut0.maximum(ut1);
                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);
                _this.accumulatedWeightedInfNorm[variableName].assign(newWeightedInfNorm);
                var newValue = lr.div(oneMinusAccBeta1)
                    .mul(newFirstMoment.div(_this.eps.add(newWeightedInfNorm)))
                    .add(value);
                value.assign(newValue);
            }
            _this.iteration.assign(_this.iteration.add(_this.one));
            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1));
        });
    };
    AdamaxOptimizer.prototype.dispose = function () {
        var _this = this;
        this.c.dispose();
        this.eps.dispose();
        this.accBeta1.dispose();
        this.beta1.dispose();
        this.beta2.dispose();
        this.oneMinusBeta1.dispose();
        this.decay.dispose();
        this.iteration.dispose();
        this.one.dispose();
        if (this.accumulatedFirstMoment != null) {
            Object.keys(this.accumulatedFirstMoment)
                .forEach(function (name) { return _this.accumulatedFirstMoment[name].dispose(); });
        }
        if (this.accumulatedWeightedInfNorm != null) {
            Object.keys(this.accumulatedWeightedInfNorm)
                .forEach(function (name) { return _this.accumulatedWeightedInfNorm[name].dispose(); });
        }
    };
    return AdamaxOptimizer;
}(optimizer_1.Optimizer));
exports.AdamaxOptimizer = AdamaxOptimizer;

},{"../environment":111,"../globals":120,"../ops/ops":132,"./optimizer":129}],131:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../environment");
var globals_1 = require("../globals");
var ops_1 = require("../ops/ops");
var optimizer_1 = require("./optimizer");
var SGDOptimizer = (function (_super) {
    __extends(SGDOptimizer, _super);
    function SGDOptimizer(learningRate) {
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.setLearningRate(learningRate);
        return _this;
    }
    SGDOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var varNames = Object.keys(variableGradients);
        varNames.forEach(function (varName) {
            var gradient = variableGradients[varName];
            var value = environment_1.ENV.engine.registeredVariables[varName];
            globals_1.tidy(function () {
                var newValue = _this.c.mul(gradient).add(value);
                value.assign(newValue);
            });
        });
    };
    SGDOptimizer.prototype.setLearningRate = function (learningRate) {
        this.learningRate = learningRate;
        if (this.c != null) {
            this.c.dispose();
        }
        this.c = globals_1.keep(ops_1.scalar(-learningRate));
    };
    SGDOptimizer.prototype.dispose = function () {
        this.c.dispose();
    };
    return SGDOptimizer;
}(optimizer_1.Optimizer));
exports.SGDOptimizer = SGDOptimizer;

},{"../environment":111,"../globals":120,"../ops/ops":132,"./optimizer":129}],128:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../environment");
var globals_1 = require("../globals");
var ops_1 = require("../ops/ops");
var sgd_optimizer_1 = require("./sgd_optimizer");
var MomentumOptimizer = (function (_super) {
    __extends(MomentumOptimizer, _super);
    function MomentumOptimizer(learningRate, momentum, useNesterov) {
        if (useNesterov === void 0) { useNesterov = false; }
        var _this = _super.call(this, learningRate) || this;
        _this.learningRate = learningRate;
        _this.momentum = momentum;
        _this.useNesterov = useNesterov;
        _this.m = ops_1.scalar(_this.momentum);
        _this.accumulations = {};
        return _this;
    }
    MomentumOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var _loop_1 = function (variableName) {
            var value = environment_1.ENV.engine.registeredVariables[variableName];
            if (this_1.accumulations[variableName] == null) {
                var trainable_1 = false;
                globals_1.tidy(function () {
                    _this.accumulations[variableName] =
                        ops_1.zerosLike(value).variable(trainable_1);
                });
            }
            var accumulation = this_1.accumulations[variableName];
            var gradient = variableGradients[variableName];
            globals_1.tidy(function () {
                var newValue;
                var newAccumulation = _this.m.mul(accumulation).add(gradient);
                if (_this.useNesterov) {
                    newValue =
                        _this.c.mul(gradient.add(newAccumulation.mul(_this.m))).add(value);
                }
                else {
                    newValue = _this.c.mul(newAccumulation).add(value);
                }
                _this.accumulations[variableName].assign(newAccumulation);
                value.assign(newValue);
            });
        };
        var this_1 = this;
        for (var variableName in variableGradients) {
            _loop_1(variableName);
        }
    };
    MomentumOptimizer.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.m.dispose();
        if (this.accumulations != null) {
            for (var variableName in this.accumulations) {
                this.accumulations[variableName].dispose();
            }
        }
    };
    MomentumOptimizer.prototype.setMomentum = function (momentum) {
        this.momentum = momentum;
    };
    return MomentumOptimizer;
}(sgd_optimizer_1.SGDOptimizer));
exports.MomentumOptimizer = MomentumOptimizer;

},{"../environment":111,"../globals":120,"../ops/ops":132,"./sgd_optimizer":131}],130:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var environment_1 = require("../environment");
var globals_1 = require("../globals");
var ops_1 = require("../ops/ops");
var optimizer_1 = require("./optimizer");
var RMSPropOptimizer = (function (_super) {
    __extends(RMSPropOptimizer, _super);
    function RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered) {
        if (decay === void 0) { decay = 0.9; }
        if (momentum === void 0) { momentum = 0.0; }
        if (epsilon === void 0) { epsilon = 1e-8; }
        if (centered === void 0) { centered = false; }
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.accumulatedMeanSquares = {};
        _this.accumulatedMeanGrads = {};
        _this.accumulatedMoments = {};
        _this.c = globals_1.keep(ops_1.scalar(learningRate));
        _this.epsilon = globals_1.keep(ops_1.scalar(epsilon));
        _this.decay = globals_1.keep(ops_1.scalar(decay));
        _this.momentum = globals_1.keep(ops_1.scalar(momentum));
        _this.oneMinusDecay = globals_1.keep(ops_1.scalar(1 - decay));
        _this.centered = centered;
        return _this;
    }
    RMSPropOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var _loop_1 = function (variableName) {
            var value = environment_1.ENV.engine.registeredVariables[variableName];
            if (this_1.accumulatedMeanSquares[variableName] == null) {
                var trainable_1 = false;
                globals_1.tidy(function () {
                    _this.accumulatedMeanSquares[variableName] =
                        ops_1.zerosLike(value).variable(trainable_1);
                });
            }
            if (this_1.accumulatedMeanGrads[variableName] == null && this_1.centered) {
                var trainable_2 = false;
                globals_1.tidy(function () {
                    _this.accumulatedMeanGrads[variableName] =
                        ops_1.zerosLike(value).variable(trainable_2);
                });
            }
            if (this_1.accumulatedMoments[variableName] == null) {
                var trainable_3 = false;
                globals_1.tidy(function () {
                    _this.accumulatedMoments[variableName] =
                        ops_1.zerosLike(value).variable(trainable_3);
                });
            }
            var accumulatedMeanSquare = this_1.accumulatedMeanSquares[variableName];
            var accumulatedMeanGrad = this_1.accumulatedMeanGrads[variableName];
            var accumulatedMoments = this_1.accumulatedMoments[variableName];
            var gradient = variableGradients[variableName];
            globals_1.tidy(function () {
                var newAccumulatedMeanSquare = _this.decay.mul(accumulatedMeanSquare)
                    .add(_this.oneMinusDecay.mul(gradient.square()));
                if (_this.centered) {
                    var newAccumulatedMeanGrad = _this.decay.mul(accumulatedMeanGrad)
                        .add(_this.oneMinusDecay.mul(gradient));
                    var newAccumulatedMoments = _this.momentum.mul(accumulatedMoments)
                        .add(_this.c.mul(gradient).div(newAccumulatedMeanSquare.sub(newAccumulatedMeanGrad.square().add(_this.epsilon)).sqrt()));
                    _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare);
                    _this.accumulatedMeanGrads[variableName].assign(newAccumulatedMeanGrad);
                    _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);
                    var newValue = value.sub(newAccumulatedMoments);
                    value.assign(newValue);
                }
                else {
                    var newAccumulatedMeanSquare_1 = _this.decay.mul(accumulatedMeanSquare)
                        .add(_this.oneMinusDecay.mul(gradient.square()));
                    var newAccumulatedMoments = _this.momentum.mul(accumulatedMoments)
                        .add(_this.c.mul(gradient).div(newAccumulatedMeanSquare_1.add(_this.epsilon).sqrt()));
                    _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare_1);
                    _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);
                    var newValue = value.sub(newAccumulatedMoments);
                    value.assign(newValue);
                }
            });
        };
        var this_1 = this;
        for (var variableName in variableGradients) {
            _loop_1(variableName);
        }
    };
    RMSPropOptimizer.prototype.dispose = function () {
        var _this = this;
        this.c.dispose();
        this.epsilon.dispose();
        this.decay.dispose();
        this.momentum.dispose();
        this.oneMinusDecay.dispose();
        if (this.accumulatedMeanSquares != null) {
            Object.keys(this.accumulatedMeanSquares)
                .forEach(function (name) { return _this.accumulatedMeanSquares[name].dispose(); });
        }
        if (this.accumulatedMeanGrads != null && this.centered) {
            Object.keys(this.accumulatedMeanGrads)
                .forEach(function (name) { return _this.accumulatedMeanGrads[name].dispose(); });
        }
        if (this.accumulatedMoments != null) {
            Object.keys(this.accumulatedMoments)
                .forEach(function (name) { return _this.accumulatedMoments[name].dispose(); });
        }
    };
    return RMSPropOptimizer;
}(optimizer_1.Optimizer));
exports.RMSPropOptimizer = RMSPropOptimizer;

},{"../environment":111,"../globals":120,"../ops/ops":132,"./optimizer":129}],118:[function(require,module,exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ops_1 = require("./ops/ops");
var util = require("./util");
var DTYPE_VALUE_SIZE_MAP = {
    'float32': 4,
    'int32': 4
};
function loadWeights(manifest, filePathPrefix, weightNames, requestOptions) {
    if (filePathPrefix === void 0) { filePathPrefix = ''; }
    return __awaiter(this, void 0, void 0, function () {
        var groupIndicesToFetchMap, groupWeightsToFetch, weightsFound, allManifestWeightNames, weightsNotFound, groupIndicesToFetch, requests, responses, buffers, weightsTensorMap, bufferIndexOffset;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    groupIndicesToFetchMap = manifest.map(function () { return false; });
                    groupWeightsToFetch = {};
                    weightsFound = weightNames != null ? weightNames.map(function () { return false; }) : [];
                    allManifestWeightNames = [];
                    manifest.forEach(function (manifestGroupConfig, groupIndex) {
                        var groupOffset = 0;
                        manifestGroupConfig.weights.forEach(function (weightsEntry) {
                            var weightsBytes = DTYPE_VALUE_SIZE_MAP[weightsEntry.dtype] *
                                util.sizeFromShape(weightsEntry.shape);
                            var enqueueWeightsForFetchingFn = function () {
                                groupIndicesToFetchMap[groupIndex] = true;
                                if (groupWeightsToFetch[groupIndex] == null) {
                                    groupWeightsToFetch[groupIndex] = [];
                                }
                                groupWeightsToFetch[groupIndex].push({
                                    manifestEntry: weightsEntry,
                                    groupOffset: groupOffset,
                                    sizeBytes: weightsBytes
                                });
                            };
                            if (weightNames != null) {
                                weightNames.forEach(function (weightName, weightIndex) {
                                    if (weightName === weightsEntry.name) {
                                        enqueueWeightsForFetchingFn();
                                        weightsFound[weightIndex] = true;
                                    }
                                });
                            }
                            else {
                                enqueueWeightsForFetchingFn();
                            }
                            allManifestWeightNames.push(weightsEntry.name);
                            groupOffset += weightsBytes;
                        });
                    });
                    if (!weightsFound.every(function (found) { return found; })) {
                        weightsNotFound = weightNames.filter(function (weight, i) { return !weightsFound[i]; });
                        throw new Error("Could not find weights in manifest with names: " +
                            (weightsNotFound.join(', ') + ". \n") +
                            "Manifest JSON has weights with names: " +
                            (allManifestWeightNames.join(', ') + "."));
                    }
                    groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {
                        if (shouldFetch) {
                            accumulator.push(i);
                        }
                        return accumulator;
                    }, []);
                    requests = [];
                    groupIndicesToFetch.forEach(function (i) {
                        manifest[i].paths.forEach(function (filepath) {
                            var fetchUrl = filePathPrefix +
                                (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;
                            requests.push(fetch(fetchUrl, requestOptions));
                        });
                    });
                    return [4, Promise.all(requests)];
                case 1:
                    responses = _a.sent();
                    return [4, Promise.all(responses.map(function (response) { return response.arrayBuffer(); }))];
                case 2:
                    buffers = _a.sent();
                    weightsTensorMap = {};
                    bufferIndexOffset = 0;
                    groupIndicesToFetch.forEach(function (i) {
                        var numBuffers = manifest[i].paths.length;
                        var groupBytes = 0;
                        for (var i_1 = 0; i_1 < numBuffers; i_1++) {
                            groupBytes += buffers[bufferIndexOffset + i_1].byteLength;
                        }
                        var groupBuffer = new ArrayBuffer(groupBytes);
                        var groupByteBuffer = new Uint8Array(groupBuffer);
                        var groupBufferOffset = 0;
                        for (var i_2 = 0; i_2 < numBuffers; i_2++) {
                            var buffer = new Uint8Array(buffers[bufferIndexOffset + i_2]);
                            groupByteBuffer.set(buffer, groupBufferOffset);
                            groupBufferOffset += buffer.byteLength;
                        }
                        var weightsEntries = groupWeightsToFetch[i];
                        weightsEntries.forEach(function (weightsEntry) {
                            var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
                            var typedArray;
                            if (weightsEntry.manifestEntry.dtype === 'float32') {
                                typedArray = new Float32Array(byteBuffer);
                            }
                            else if (weightsEntry.manifestEntry.dtype === 'int32') {
                                typedArray = new Int32Array(byteBuffer);
                            }
                            else {
                                throw new Error("Weight " + weightsEntry.manifestEntry.name + " has unknown dtype " +
                                    (weightsEntry.manifestEntry.dtype + "."));
                            }
                            var weightName = weightsEntry.manifestEntry.name;
                            if (weightsTensorMap[weightName] != null) {
                                throw new Error("Duplicate weight with name " + weightName + ". " +
                                    "Please make sure weights names are unique in the manifest JSON.");
                            }
                            weightsTensorMap[weightName] = ops_1.tensor(typedArray, weightsEntry.manifestEntry.shape, weightsEntry.manifestEntry.dtype);
                        });
                        bufferIndexOffset += numBuffers;
                    });
                    return [2, weightsTensorMap];
            }
        });
    });
}
exports.loadWeights = loadWeights;

},{"./ops/ops":132,"./util":114}],219:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var adadelta_optimizer_1 = require("./adadelta_optimizer");
var adagrad_optimizer_1 = require("./adagrad_optimizer");
var adam_optimizer_1 = require("./adam_optimizer");
var adamax_optimizer_1 = require("./adamax_optimizer");
var momentum_optimizer_1 = require("./momentum_optimizer");
var rmsprop_optimizer_1 = require("./rmsprop_optimizer");
var sgd_optimizer_1 = require("./sgd_optimizer");
var OptimizerConstructors = (function () {
    function OptimizerConstructors() {
    }
    OptimizerConstructors.sgd = function (learningRate) {
        return new sgd_optimizer_1.SGDOptimizer(learningRate);
    };
    OptimizerConstructors.momentum = function (learningRate, momentum, useNesterov) {
        if (useNesterov === void 0) { useNesterov = false; }
        return new momentum_optimizer_1.MomentumOptimizer(learningRate, momentum, useNesterov);
    };
    OptimizerConstructors.rmsprop = function (learningRate, decay, momentum, epsilon, centered) {
        if (decay === void 0) { decay = .9; }
        if (momentum === void 0) { momentum = 0.0; }
        if (epsilon === void 0) { epsilon = 1e-8; }
        if (centered === void 0) { centered = false; }
        return new rmsprop_optimizer_1.RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered);
    };
    OptimizerConstructors.adam = function (learningRate, beta1, beta2, epsilon) {
        if (learningRate === void 0) { learningRate = 0.001; }
        if (beta1 === void 0) { beta1 = 0.9; }
        if (beta2 === void 0) { beta2 = 0.999; }
        if (epsilon === void 0) { epsilon = 1e-8; }
        return new adam_optimizer_1.AdamOptimizer(learningRate, beta1, beta2, epsilon);
    };
    OptimizerConstructors.adadelta = function (learningRate, rho, epsilon) {
        if (learningRate === void 0) { learningRate = .001; }
        if (rho === void 0) { rho = .95; }
        if (epsilon === void 0) { epsilon = 1e-8; }
        return new adadelta_optimizer_1.AdadeltaOptimizer(learningRate, rho, epsilon);
    };
    OptimizerConstructors.adamax = function (learningRate, beta1, beta2, epsilon, decay) {
        if (learningRate === void 0) { learningRate = 0.002; }
        if (beta1 === void 0) { beta1 = 0.9; }
        if (beta2 === void 0) { beta2 = 0.999; }
        if (epsilon === void 0) { epsilon = 1e-8; }
        if (decay === void 0) { decay = 0.0; }
        return new adamax_optimizer_1.AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);
    };
    OptimizerConstructors.adagrad = function (learningRate, initialAccumulatorValue) {
        if (initialAccumulatorValue === void 0) { initialAccumulatorValue = 0.1; }
        return new adagrad_optimizer_1.AdagradOptimizer(learningRate, initialAccumulatorValue);
    };
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })
    ], OptimizerConstructors, "sgd", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })
    ], OptimizerConstructors, "momentum", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })
    ], OptimizerConstructors, "rmsprop", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })
    ], OptimizerConstructors, "adam", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })
    ], OptimizerConstructors, "adadelta", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })
    ], OptimizerConstructors, "adamax", null);
    __decorate([
        doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })
    ], OptimizerConstructors, "adagrad", null);
    return OptimizerConstructors;
}());
exports.OptimizerConstructors = OptimizerConstructors;

},{"../doc":121,"./adadelta_optimizer":124,"./adagrad_optimizer":126,"./adam_optimizer":125,"./adamax_optimizer":127,"./momentum_optimizer":128,"./rmsprop_optimizer":130,"./sgd_optimizer":131}],119:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var adadelta_optimizer_1 = require("./optimizers/adadelta_optimizer");
var adagrad_optimizer_1 = require("./optimizers/adagrad_optimizer");
var adam_optimizer_1 = require("./optimizers/adam_optimizer");
var adamax_optimizer_1 = require("./optimizers/adamax_optimizer");
var momentum_optimizer_1 = require("./optimizers/momentum_optimizer");
var optimizer_constructors_1 = require("./optimizers/optimizer_constructors");
var rmsprop_optimizer_1 = require("./optimizers/rmsprop_optimizer");
var sgd_optimizer_1 = require("./optimizers/sgd_optimizer");
[momentum_optimizer_1.MomentumOptimizer, sgd_optimizer_1.SGDOptimizer, adadelta_optimizer_1.AdadeltaOptimizer, adagrad_optimizer_1.AdagradOptimizer,
    rmsprop_optimizer_1.RMSPropOptimizer, adamax_optimizer_1.AdamaxOptimizer, adam_optimizer_1.AdamOptimizer];
exports.train = {
    sgd: optimizer_constructors_1.OptimizerConstructors.sgd,
    momentum: optimizer_constructors_1.OptimizerConstructors.momentum,
    adadelta: optimizer_constructors_1.OptimizerConstructors.adadelta,
    adagrad: optimizer_constructors_1.OptimizerConstructors.adagrad,
    rmsprop: optimizer_constructors_1.OptimizerConstructors.rmsprop,
    adamax: optimizer_constructors_1.OptimizerConstructors.adamax,
    adam: optimizer_constructors_1.OptimizerConstructors.adam
};

},{"./optimizers/adadelta_optimizer":124,"./optimizers/adagrad_optimizer":126,"./optimizers/adam_optimizer":125,"./optimizers/adamax_optimizer":127,"./optimizers/momentum_optimizer":128,"./optimizers/optimizer_constructors":219,"./optimizers/rmsprop_optimizer":130,"./optimizers/sgd_optimizer":131}],64:[function(require,module,exports) {
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
require("./kernels/backend_webgl");
require("./kernels/backend_cpu");
var browser_util_1 = require("./browser_util");
var environment = require("./environment");
exports.environment = environment;
var environment_1 = require("./environment");
var gpgpu_util = require("./kernels/webgl/gpgpu_util");
var webgl_util = require("./kernels/webgl/webgl_util");
var test_util = require("./test_util");
exports.test_util = test_util;
var util = require("./util");
exports.util = util;
var version_1 = require("./version");
exports.version_core = version_1.version;
var adadelta_optimizer_1 = require("./optimizers/adadelta_optimizer");
exports.AdadeltaOptimizer = adadelta_optimizer_1.AdadeltaOptimizer;
var adagrad_optimizer_1 = require("./optimizers/adagrad_optimizer");
exports.AdagradOptimizer = adagrad_optimizer_1.AdagradOptimizer;
var adam_optimizer_1 = require("./optimizers/adam_optimizer");
exports.AdamOptimizer = adam_optimizer_1.AdamOptimizer;
var adamax_optimizer_1 = require("./optimizers/adamax_optimizer");
exports.AdamaxOptimizer = adamax_optimizer_1.AdamaxOptimizer;
var momentum_optimizer_1 = require("./optimizers/momentum_optimizer");
exports.MomentumOptimizer = momentum_optimizer_1.MomentumOptimizer;
var optimizer_1 = require("./optimizers/optimizer");
exports.Optimizer = optimizer_1.Optimizer;
var rmsprop_optimizer_1 = require("./optimizers/rmsprop_optimizer");
exports.RMSPropOptimizer = rmsprop_optimizer_1.RMSPropOptimizer;
var sgd_optimizer_1 = require("./optimizers/sgd_optimizer");
exports.SGDOptimizer = sgd_optimizer_1.SGDOptimizer;
var tensor_1 = require("./tensor");
exports.Tensor = tensor_1.Tensor;
exports.TensorBuffer = tensor_1.TensorBuffer;
exports.variable = tensor_1.variable;
exports.Variable = tensor_1.Variable;
var types_1 = require("./types");
exports.Rank = types_1.Rank;
var weights_loader_1 = require("./weights_loader");
exports.loadWeights = weights_loader_1.loadWeights;
__export(require("./ops/ops"));
var loss_ops_1 = require("./ops/loss_ops");
exports.Reduction = loss_ops_1.Reduction;
__export(require("./train"));
__export(require("./globals"));
var environment_2 = require("./environment");
exports.ENV = environment_2.ENV;
exports.Environment = environment_2.Environment;
exports.setBackend = environment_1.Environment.setBackend;
exports.getBackend = environment_1.Environment.getBackend;
exports.memory = environment_1.Environment.memory;
var doc_1 = require("./doc");
exports.doc = doc_1.doc;
exports.nextFrame = browser_util_1.BrowserUtil.nextFrame;
exports.webgl = {
    webgl_util: webgl_util,
    gpgpu_util: gpgpu_util
};

},{"./kernels/backend_webgl":122,"./kernels/backend_cpu":123,"./browser_util":112,"./environment":111,"./kernels/webgl/gpgpu_util":135,"./kernels/webgl/webgl_util":136,"./test_util":113,"./util":114,"./version":115,"./optimizers/adadelta_optimizer":124,"./optimizers/adagrad_optimizer":126,"./optimizers/adam_optimizer":125,"./optimizers/adamax_optimizer":127,"./optimizers/momentum_optimizer":128,"./optimizers/optimizer":129,"./optimizers/rmsprop_optimizer":130,"./optimizers/sgd_optimizer":131,"./tensor":117,"./types":116,"./weights_loader":118,"./ops/ops":132,"./ops/loss_ops":133,"./train":119,"./globals":120,"./doc":121}],171:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AttributeError = (function (_super) {
    __extends(AttributeError, _super);
    function AttributeError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, AttributeError.prototype);
        return _this;
    }
    return AttributeError;
}(Error));
exports.AttributeError = AttributeError;
var RuntimeError = (function (_super) {
    __extends(RuntimeError, _super);
    function RuntimeError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, RuntimeError.prototype);
        return _this;
    }
    return RuntimeError;
}(Error));
exports.RuntimeError = RuntimeError;
var ValueError = (function (_super) {
    __extends(ValueError, _super);
    function ValueError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, ValueError.prototype);
        return _this;
    }
    return ValueError;
}(Error));
exports.ValueError = ValueError;
var NotImplementedError = (function (_super) {
    __extends(NotImplementedError, _super);
    function NotImplementedError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, NotImplementedError.prototype);
        return _this;
    }
    return NotImplementedError;
}(Error));
exports.NotImplementedError = NotImplementedError;
var AssertionError = (function (_super) {
    __extends(AssertionError, _super);
    function AssertionError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, AssertionError.prototype);
        return _this;
    }
    return AssertionError;
}(Error));
exports.AssertionError = AssertionError;
var IndexError = (function (_super) {
    __extends(IndexError, _super);
    function IndexError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, IndexError.prototype);
        return _this;
    }
    return IndexError;
}(Error));
exports.IndexError = IndexError;

},{}],91:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var common_1 = require("./common");
var DType;
(function (DType) {
    DType["float32"] = "float32";
    DType["int32"] = "int32";
    DType["bool"] = "bool";
})(DType = exports.DType || (exports.DType = {}));
var _nextUniqueTensorId = 0;
var SymbolicTensor = (function () {
    function SymbolicTensor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {
        this.dtype = dtype;
        this.shape = shape;
        this.sourceLayer = sourceLayer;
        this.inputs = inputs;
        this.callArgs = callArgs;
        this.outputTensorIndex = outputTensorIndex;
        this.id = _nextUniqueTensorId++;
        if (name != null) {
            this.originalName = common_1.getScopedTensorName(name);
            this.name = common_1.getUniqueTensorName(this.originalName);
        }
    }
    SymbolicTensor = __decorate([
        tfjs_core_1.doc({ heading: 'Models', 'subheading': 'Classes' })
    ], SymbolicTensor);
    return SymbolicTensor;
}());
exports.SymbolicTensor = SymbolicTensor;
var ConcreteTensor = (function () {
    function ConcreteTensor(val, name) {
        this.dtype = DType.float32;
        this.shape = val.shape;
        this.val = val;
        this.id = _nextUniqueTensorId++;
        if (name != null) {
            this.originalName = common_1.getScopedTensorName(name);
            this.name = common_1.getUniqueTensorName(this.originalName);
        }
    }
    ConcreteTensor.prototype.value = function () {
        return this.val;
    };
    return ConcreteTensor;
}());
exports.ConcreteTensor = ConcreteTensor;
function checkShapesMatch(x, y) {
    if (x.shape.toString() !== y.shape.toString()) {
        throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' +
            JSON.stringify(y.shape));
    }
}
function getValueTensor(val) {
    return val instanceof ConcreteTensor ? val.value() : val;
}
var DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';
var LayerVariable = (function () {
    function LayerVariable(val, dtype, name, trainable, constraint) {
        if (dtype === void 0) { dtype = DType.float32; }
        if (name === void 0) { name = DEFAULT_VARIABLE_NAME_PREFIX; }
        if (trainable === void 0) { trainable = true; }
        if (constraint === void 0) { constraint = null; }
        this.dtype = dtype == null ? DType.float32 : dtype;
        this.shape = val.shape;
        this.id = _nextUniqueTensorId++;
        name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;
        this.originalName = common_1.getScopedTensorName(name);
        this.name = common_1.getUniqueTensorName(this.originalName);
        this.trainable = trainable;
        this.constraint = constraint;
        this.val =
            tfjs_core_1.variable(getValueTensor(val), this.trainable, this.name, this.dtype);
    }
    LayerVariable.prototype.read = function () {
        return this.val;
    };
    LayerVariable.prototype.write = function (newVal) {
        checkShapesMatch(this.val, newVal);
        this.val.assign(getValueTensor(newVal));
        if (this.constraint != null) {
            this.val.assign(this.constraint.apply(this.val));
        }
        return this;
    };
    return LayerVariable;
}());
exports.LayerVariable = LayerVariable;
var Serializable = (function () {
    function Serializable() {
    }
    return Serializable;
}());
exports.Serializable = Serializable;

},{"@tensorflow/tfjs-core":64,"./common":185}],165:[function(require,module,exports) {
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../errors");
var types_1 = require("../types");
function pyListRepeat(value, numValues) {
    if (Array.isArray(value)) {
        var newArray = [];
        for (var i = 0; i < numValues; i++) {
            newArray = newArray.concat(value);
        }
        return newArray;
    }
    else {
        var newArray = new Array(numValues);
        newArray.fill(value);
        return newArray;
    }
}
exports.pyListRepeat = pyListRepeat;
function pyGetAttr(obj, attrName, defaultValue) {
    if (attrName in obj) {
        return obj[attrName];
    }
    if (defaultValue === undefined) {
        throw new errors_1.AttributeError('pyGetAttr: Attempting to get attribute ' + attrName +
            'with no default value defined');
    }
    return defaultValue;
}
exports.pyGetAttr = pyGetAttr;
function pyNormalizeArrayIndex(x, index) {
    if (x == null || index == null) {
        throw new errors_1.ValueError("Must provide a valid array and index for " +
            ("pyNormalizeArrayIndex(). Got array " + x + " and index " + index + "."));
    }
    var errMsg = "Index " + index + " out of range for array of length " + x.length;
    if (index < 0) {
        if (index < -x.length) {
            throw new errors_1.IndexError(errMsg);
        }
        return x.length + index;
    }
    if (index >= x.length) {
        throw new errors_1.IndexError(errMsg);
    }
    return index;
}
exports.pyNormalizeArrayIndex = pyNormalizeArrayIndex;
function assert(val, message) {
    if (!val) {
        throw new errors_1.AssertionError(message);
    }
}
exports.assert = assert;
function count(array, refernce) {
    var counter = 0;
    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var item = array_1[_i];
        if (item === refernce) {
            counter++;
        }
    }
    return counter;
}
exports.count = count;
var ClassNameMap = (function () {
    function ClassNameMap() {
        this.pythonClassNameMap = {};
    }
    ClassNameMap.getMap = function () {
        if (ClassNameMap.instance == null) {
            ClassNameMap.instance = new ClassNameMap();
        }
        return ClassNameMap.instance;
    };
    ClassNameMap.register = function (className, cls) {
        this.getMap().pythonClassNameMap[className] =
            [cls, cls.fromConfig];
    };
    return ClassNameMap;
}());
exports.ClassNameMap = ClassNameMap;
var SerializableEnumRegistry = (function () {
    function SerializableEnumRegistry() {
        this.enumRegistry = {};
    }
    SerializableEnumRegistry.getMap = function () {
        if (SerializableEnumRegistry.instance == null) {
            SerializableEnumRegistry.instance = new SerializableEnumRegistry();
        }
        return SerializableEnumRegistry.instance;
    };
    SerializableEnumRegistry.register = function (fieldName, enumCls) {
        if (SerializableEnumRegistry.contains(fieldName)) {
            throw new errors_1.ValueError("Attempting to register a repeated enum: " + fieldName);
        }
        this.getMap().enumRegistry[fieldName] = enumCls;
    };
    SerializableEnumRegistry.contains = function (fieldName) {
        return fieldName in this.getMap().enumRegistry;
    };
    SerializableEnumRegistry.lookup = function (fieldName, value) {
        return this.getMap().enumRegistry[fieldName][value];
    };
    SerializableEnumRegistry.reverseLookup = function (fieldName, value) {
        var enumMap = this.getMap().enumRegistry[fieldName];
        for (var candidateString in enumMap) {
            if (enumMap[candidateString] === value) {
                return candidateString;
            }
        }
        throw new errors_1.ValueError("Could not find serialization string for " + value);
    };
    return SerializableEnumRegistry;
}());
exports.SerializableEnumRegistry = SerializableEnumRegistry;
function singletonOrArray(xs) {
    if (xs.length === 1) {
        return xs[0];
    }
    return xs;
}
exports.singletonOrArray = singletonOrArray;
function toList(x) {
    if (Array.isArray(x)) {
        return x;
    }
    return [x];
}
exports.toList = toList;
function objectListUid(objs) {
    var objectList = toList(objs);
    var retVal = '';
    for (var _i = 0, objectList_1 = objectList; _i < objectList_1.length; _i++) {
        var obj = objectList_1[_i];
        if (obj.id == null) {
            throw new errors_1.ValueError("Object " + obj + " passed to objectListUid without an id");
        }
        if (retVal !== '') {
            retVal = retVal + ', ';
        }
        retVal = retVal + Math.abs(obj.id);
    }
    return retVal;
}
exports.objectListUid = objectListUid;
function isArrayOfShapes(x) {
    return Array.isArray(x) && Array.isArray(x[0]);
}
exports.isArrayOfShapes = isArrayOfShapes;
function normalizeShapeList(x) {
    if (x.length === 0) {
        return [];
    }
    if (!Array.isArray(x[0])) {
        return [x];
    }
    return x;
}
exports.normalizeShapeList = normalizeShapeList;
function toSnakeCase(name) {
    var intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');
    var insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
    if (insecure[0] !== '_') {
        return insecure;
    }
    return 'private' + insecure;
}
exports.toSnakeCase = toSnakeCase;
function toCamelCase(identifier) {
    if (identifier.length <= 1) {
        return identifier;
    }
    if (identifier.indexOf('_') === -1) {
        return identifier;
    }
    return identifier.replace(/[_]+(\w|$)/g, function (m, p1) { return p1.toUpperCase(); });
}
exports.toCamelCase = toCamelCase;
var _GLOBAL_CUSTOM_OBJECTS = {};
function serializeKerasObject(instance) {
    if (instance === null || instance === undefined) {
        return null;
    }
    return { className: instance.getClassName(), config: instance.getConfig() };
}
exports.serializeKerasObject = serializeKerasObject;
function deserializeKerasObject(identifier, moduleObjects, customObjects, printableModuleName) {
    if (moduleObjects === void 0) { moduleObjects = {}; }
    if (customObjects === void 0) { customObjects = {}; }
    if (printableModuleName === void 0) { printableModuleName = 'object'; }
    if (typeof identifier === 'string') {
        var functionName = identifier;
        var fn = void 0;
        if (functionName in customObjects) {
            fn = customObjects[functionName];
        }
        else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {
            fn = _GLOBAL_CUSTOM_OBJECTS[functionName];
        }
        else {
            fn = moduleObjects[functionName];
            if (fn == null) {
                throw new errors_1.ValueError("Unknown " + printableModuleName + ": " + identifier);
            }
        }
        return fn;
    }
    else {
        var config = identifier;
        if (config.className == null || config.config == null) {
            throw new errors_1.ValueError(printableModuleName + ": Improper config format: " +
                (JSON.stringify(config) + ".\n") +
                "'className' and 'config' must set.");
        }
        var className = config.className;
        var cls = void 0, fromConfig = void 0;
        if (className in customObjects) {
            _a = customObjects.get(className), cls = _a[0], fromConfig = _a[1];
        }
        else if (className in _GLOBAL_CUSTOM_OBJECTS) {
            _b = _GLOBAL_CUSTOM_OBJECTS.className, cls = _b[0], fromConfig = _b[1];
        }
        else if (className in moduleObjects) {
            _c = moduleObjects[className], cls = _c[0], fromConfig = _c[1];
        }
        if (cls == null) {
            throw new errors_1.ValueError("Unknown " + printableModuleName + ": " + className);
        }
        if (fromConfig != null) {
            var customObjectsCombined = {};
            for (var _i = 0, _d = Object.keys(_GLOBAL_CUSTOM_OBJECTS); _i < _d.length; _i++) {
                var key = _d[_i];
                customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];
            }
            for (var _e = 0, _f = Object.keys(customObjects); _e < _f.length; _e++) {
                var key = _f[_e];
                customObjectsCombined[key] = customObjects[key];
            }
            var nestedConfig = config.config;
            nestedConfig.customObjects = customObjectsCombined;
            var backupCustomObjects = __assign({}, _GLOBAL_CUSTOM_OBJECTS);
            for (var _g = 0, _h = Object.keys(customObjects); _g < _h.length; _g++) {
                var key = _h[_g];
                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];
            }
            var returnObj = fromConfig(cls, config.config);
            _GLOBAL_CUSTOM_OBJECTS = __assign({}, backupCustomObjects);
            return returnObj;
        }
        else {
            var backupCustomObjects = __assign({}, _GLOBAL_CUSTOM_OBJECTS);
            for (var _j = 0, _k = Object.keys(customObjects); _j < _k.length; _j++) {
                var key = _k[_j];
                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];
            }
            var returnObj = new cls(config.config);
            _GLOBAL_CUSTOM_OBJECTS = __assign({}, backupCustomObjects);
            return returnObj;
        }
    }
    var _a, _b, _c;
}
exports.deserializeKerasObject = deserializeKerasObject;
function getExactlyOneTensor(xs) {
    var x;
    if (Array.isArray(xs)) {
        if (xs.length !== 1) {
            throw new errors_1.ValueError("Expected Tensor length to be 1; got " + xs.length);
        }
        x = xs[0];
    }
    else {
        x = xs;
    }
    return x;
}
exports.getExactlyOneTensor = getExactlyOneTensor;
function getExactlyOneShape(shapes) {
    if (Array.isArray(shapes) && Array.isArray(shapes[0])) {
        if (shapes.length === 1) {
            shapes = shapes;
            return shapes[0];
        }
        else {
            throw new errors_1.ValueError("Expected exactly 1 Shape; got " + shapes.length);
        }
    }
    else {
        return shapes;
    }
}
exports.getExactlyOneShape = getExactlyOneShape;
function numberCompare(a, b) {
    return (a < b) ? -1 : ((a > b) ? 1 : 0);
}
exports.numberCompare = numberCompare;
function reverseNumberCompare(a, b) {
    return -1 * numberCompare(a, b);
}
exports.reverseNumberCompare = reverseNumberCompare;
function stringToDType(dtype) {
    switch (dtype) {
        case 'float32':
            return types_1.DType.float32;
        default:
            throw new errors_1.ValueError("Invalid dtype: " + dtype);
    }
}
exports.stringToDType = stringToDType;
function stringsEqual(xs, ys) {
    if (xs == null || ys == null) {
        return xs === ys;
    }
    if (xs.length !== ys.length) {
        return false;
    }
    for (var i = 0; i < xs.length; ++i) {
        if (xs[i] !== ys[i]) {
            return false;
        }
    }
    return true;
}
exports.stringsEqual = stringsEqual;
function unique(xs) {
    if (xs == null) {
        return xs;
    }
    var out = [];
    for (var _i = 0, xs_1 = xs; _i < xs_1.length; _i++) {
        var x = xs_1[_i];
        if (out.indexOf(x) === -1) {
            out.push(x);
        }
    }
    return out;
}
exports.unique = unique;
function isObjectEmpty(obj) {
    if (obj == null) {
        throw new errors_1.ValueError("Invalid value in obj: " + JSON.stringify(obj));
    }
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            return false;
        }
    }
    return true;
}
exports.isObjectEmpty = isObjectEmpty;

},{"../errors":171,"../types":91}],185:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("./errors");
var generic_utils_1 = require("./utils/generic_utils");
var nameMap = new Map();
generic_utils_1.SerializableEnumRegistry.register('data_format', { 'channels_first': 'channelsFirst', 'channels_last': 'channelsLast' });
exports.VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast', undefined, null];
function checkDataFormat(value) {
    if (value == null) {
        return;
    }
    if (exports.VALID_DATA_FORMAT_VALUES.indexOf(value) < 0) {
        throw new errors_1.ValueError(value + " is not a valid DataFormat.  Valid values as " + exports.VALID_DATA_FORMAT_VALUES);
    }
}
exports.checkDataFormat = checkDataFormat;
generic_utils_1.SerializableEnumRegistry.register('padding', { 'valid': 'valid', 'same': 'same', 'casual': 'casual' });
exports.VALID_PADDING_MODE_VALUES = ['valid', 'same', 'casual', undefined, null];
function checkPaddingMode(value) {
    if (value == null) {
        return;
    }
    if (exports.VALID_PADDING_MODE_VALUES.indexOf(value) < 0) {
        throw new errors_1.ValueError(value + " is not a valid PaddingMode.  Valid values as " + exports.VALID_PADDING_MODE_VALUES);
    }
}
exports.checkPaddingMode = checkPaddingMode;
exports.VALID_POOL_MODE_VALUES = ['max', 'avg', undefined, null];
function checkPoolMode(value) {
    if (value == null) {
        return;
    }
    if (exports.VALID_POOL_MODE_VALUES.indexOf(value) < 0) {
        throw new errors_1.ValueError(value + " is not a valid PoolMode.  Valid values as " + exports.VALID_POOL_MODE_VALUES);
    }
}
exports.checkPoolMode = checkPoolMode;
var _nameScopeStack = [];
var _nameScopeDivider = '/';
function nameScope(name, fn) {
    _nameScopeStack.push(name);
    try {
        var val = fn();
        _nameScopeStack.pop();
        return val;
    }
    catch (e) {
        _nameScopeStack.pop();
        throw e;
    }
}
exports.nameScope = nameScope;
function currentNameScopePrefix() {
    if (_nameScopeStack.length === 0) {
        return '';
    }
    else {
        return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;
    }
}
function getScopedTensorName(tensorName) {
    if (!isValidTensorName(tensorName)) {
        throw new Error('Not a valid tensor name: \'' + tensorName + '\'');
    }
    return currentNameScopePrefix() + tensorName;
}
exports.getScopedTensorName = getScopedTensorName;
function getUniqueTensorName(scopedName) {
    if (!isValidTensorName(scopedName)) {
        throw new Error('Not a valid tensor name: \'' + scopedName + '\'');
    }
    if (!nameMap.has(scopedName)) {
        nameMap.set(scopedName, 0);
    }
    var index = nameMap.get(scopedName);
    nameMap.set(scopedName, nameMap.get(scopedName) + 1);
    if (index > 0) {
        var result = scopedName + '_' + index;
        nameMap.set(result, 1);
        return result;
    }
    else {
        return scopedName;
    }
}
exports.getUniqueTensorName = getUniqueTensorName;
var tensorNameRegex = new RegExp(/^[A-Za-z][A-Za-z0-9\._\/]*$/);
function isValidTensorName(name) {
    return name.match(tensorNameRegex) ? true : false;
}
exports.isValidTensorName = isValidTensorName;

},{"./errors":171,"./utils/generic_utils":165}],190:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tfc = require("@tensorflow/tfjs-core");
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var errors_1 = require("../errors");
function isInteger(x) {
    return x === parseInt(x.toString(), 10);
}
exports.isInteger = isInteger;
function arrayProd(array, begin, end) {
    if (begin == null) {
        begin = 0;
    }
    if (end == null) {
        end = array.length;
    }
    var prod = 1;
    for (var i = begin; i < end; ++i) {
        prod *= array[i];
    }
    return prod;
}
exports.arrayProd = arrayProd;
function toArray1D(array) {
    array = Array.isArray(array) ? new Float32Array(array) : array;
    return tfjs_core_1.tensor1d(array);
}
function min(array) {
    return tfc.min(toArray1D(array)).dataSync()[0];
}
exports.min = min;
function max(array) {
    return tfc.max(toArray1D(array)).dataSync()[0];
}
exports.max = max;
function sum(array) {
    return tfc.sum(toArray1D(array)).dataSync()[0];
}
exports.sum = sum;
function mean(array) {
    return sum(array) / array.length;
}
exports.mean = mean;
function variance(array) {
    var demeaned = tfc.sub(toArray1D(array), tfjs_core_1.scalar(mean(array)));
    var sumSquare = tfc.sum(tfc.mulStrict(demeaned, demeaned)).dataSync()[0];
    return sumSquare / array.length;
}
exports.variance = variance;
function range(begin, end) {
    if (end < begin) {
        throw new errors_1.ValueError("end (" + end + ") < begin (" + begin + ") is forbidden.");
    }
    var out = [];
    for (var i = begin; i < end; ++i) {
        out.push(i);
    }
    return out;
}
exports.range = range;

},{"@tensorflow/tfjs-core":64,"../errors":171}],191:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _epsilon = 1e-7;
function epsilon() {
    return _epsilon;
}
exports.epsilon = epsilon;
function setEpsilon(e) {
    _epsilon = e;
}
exports.setEpsilon = setEpsilon;
function imageDataFormat() {
    return 'channelsLast';
}
exports.imageDataFormat = imageDataFormat;

},{}],94:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tfc = require("@tensorflow/tfjs-core");
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var common_1 = require("../common");
var errors_1 = require("../errors");
var types_1 = require("../types");
var generic_utils_1 = require("../utils/generic_utils");
var math_utils = require("../utils/math_utils");
var common_2 = require("./common");
var common_3 = require("./common");
var backend = 'webgl';
var DEFAULT_DTYPE = types_1.DType.float32;
function disposeScalarCache() {
    for (var typeKey in scalarCache) {
        for (var key in scalarCache[typeKey]) {
            scalarCache[typeKey][key].dispose();
            delete scalarCache[typeKey][key];
        }
    }
}
exports.disposeScalarCache = disposeScalarCache;
function setBackend(requestedBackend) {
    tfc.setBackend(requestedBackend);
    backend = requestedBackend;
    disposeScalarCache();
}
exports.setBackend = setBackend;
function getBackend() {
    return backend;
}
exports.getBackend = getBackend;
function keep(x) {
    return tfc.keep(x);
}
exports.keep = keep;
var scalarCache = {
    float32: {},
    int32: {}
};
function getScalar(value, dtype) {
    if (dtype === undefined) {
        dtype = DEFAULT_DTYPE;
    }
    if (scalarCache[dtype][value] == null) {
        scalarCache[dtype][value] = tfjs_core_1.scalar(value, dtype);
        tfc.keep(scalarCache[dtype][value]);
    }
    return scalarCache[dtype][value];
}
exports.getScalar = getScalar;
exports.epsilon = common_2.epsilon;
function isBackendSymbolic() {
    return false;
}
exports.isBackendSymbolic = isBackendSymbolic;
function shape(x) {
    return x.shape;
}
exports.shape = shape;
function intShape(x) {
    return x.shape;
}
exports.intShape = intShape;
function ndim(x) {
    return x.shape.length;
}
exports.ndim = ndim;
function dtype(x) {
    return (x instanceof tfjs_core_1.Tensor) ? DEFAULT_DTYPE : x.dtype;
}
exports.dtype = dtype;
function normalizeAxis(x, axis) {
    if (axis == null) {
        return axis;
    }
    var xShape = shape(x);
    if (Array.isArray(axis)) {
        return axis.map(function (thisAxis) { return generic_utils_1.pyNormalizeArrayIndex(xShape, thisAxis); });
    }
    return generic_utils_1.pyNormalizeArrayIndex(xShape, axis);
}
exports.normalizeAxis = normalizeAxis;
function countParams(x) {
    var shape = x.shape;
    if (shape.length > 0) {
        return shape.reduce(function (a, b) { return a * b; });
    }
    else {
        return 1;
    }
}
exports.countParams = countParams;
function cast(x, dtype) {
    return x.asType(dtype);
}
exports.cast = cast;
function reshape(x, shape) {
    return x.reshape(shape);
}
exports.reshape = reshape;
function transpose(x, perm) {
    return tfc.transpose(x, perm);
}
exports.transpose = transpose;
exports.permuteDimensions = transpose;
function reverse(x, axes) {
    return tfc.reverse(x, axes);
}
exports.reverse = reverse;
function expandDims(x, axis) {
    if (axis === void 0) { axis = -1; }
    var outShape = shape(x).slice();
    if (axis < 0) {
        axis = outShape.length + axis + 1;
    }
    outShape.splice(axis, 0, 1);
    return reshape(x, outShape);
}
exports.expandDims = expandDims;
function squeeze(x, axis) {
    return tfc.squeeze(x, [axis]);
}
exports.squeeze = squeeze;
function temporalPadding(x, padding) {
    if (ndim(x) !== 3) {
        throw new errors_1.ValueError("temporalPadding expects input tensor to be 3-D, but received a " +
            (ndim(x) + "-D tensor."));
    }
    if (padding == null) {
        padding = [1, 1];
    }
    if (padding.length !== 2) {
        throw new errors_1.ValueError("temporalPadding expects input padding pattern to be a length-2 " +
            ("array, but received a length-" + padding.length + " array."));
    }
    var pattern = [[0, 0], padding, [0, 0]];
    return tfc.pad(x, pattern);
}
exports.temporalPadding = temporalPadding;
function spatial2dPadding(x, padding, dataFormat) {
    if (ndim(x) !== 4) {
        throw new errors_1.ValueError("temporalPadding expects input tensor to be 4-D, but received a " +
            (ndim(x) + "-D tensor."));
    }
    if (padding == null) {
        padding = [[1, 1], [1, 1]];
    }
    if (padding.length !== 2 || padding[0].length !== 2 ||
        padding[1].length !== 2) {
        throw new errors_1.ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' +
            'each of which is an Array of two integers.');
    }
    if (dataFormat == null) {
        dataFormat = common_3.imageDataFormat();
    }
    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {
        throw new errors_1.ValueError("Unknown data format: " + dataFormat + ". " +
            "Supported data formats are 'channelsLast' and 'channelsFirst.");
    }
    var pattern;
    if (dataFormat === 'channelsFirst') {
        pattern = [[0, 0], [0, 0], padding[0], padding[1]];
    }
    else {
        pattern = [[0, 0], padding[0], padding[1], [0, 0]];
    }
    return tfc.pad(x, pattern);
}
exports.spatial2dPadding = spatial2dPadding;
function repeat(x, n) {
    if (x.shape.length !== 2) {
        throw new errors_1.ValueError("repeat() expects a rank-2 tensor, but received a " +
            ("rank-" + x.shape.length + " tensor."));
    }
    var y = expandDims(x, 1);
    return tile(y, [1, n, 1]);
}
exports.repeat = repeat;
function flatten(x) {
    var newShape = [math_utils.arrayProd(x.shape)];
    return reshape(x, newShape);
}
exports.flatten = flatten;
function batchFlatten(x) {
    if (ndim(x) <= 1) {
        throw new errors_1.ValueError("batchFlatten requires a minimum rank of 2. Got rank: " + ndim(x) + ".");
    }
    var newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];
    return reshape(x, newShape);
}
exports.batchFlatten = batchFlatten;
function sliceAlongFirstAxis(array, start, size) {
    switch (array.rank) {
        case 1:
            return tfc.slice1d(array, start, size);
        case 2:
            return tfc.slice2d(array, [start, 0], [size, array.shape[1]]);
        case 3:
            return tfc.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);
        case 4:
            return tfc.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);
        default:
            throw new errors_1.ValueError("sliceAlongFirstAxis() received an unsupported tensor rank: " +
                ("" + array.rank));
    }
}
exports.sliceAlongFirstAxis = sliceAlongFirstAxis;
function sliceAlongLastAxis(array, start, size) {
    switch (array.rank) {
        case 1:
            return tfc.slice1d(array, start, size);
        case 2:
            return tfc.slice2d(array, [0, start], [array.shape[0], size]);
        case 3:
            return tfc.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);
        case 4:
            return tfc.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);
        default:
            throw new errors_1.ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " +
                ("" + array.rank));
    }
}
exports.sliceAlongLastAxis = sliceAlongLastAxis;
function regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon) {
    if (epsilon === void 0) { epsilon = 1e-3; }
    return tfjs_core_1.tidy(function () {
        var meanAndVariance = tfc.moments(x, reductionAxes);
        var mean = meanAndVariance.mean;
        var variance = meanAndVariance.variance;
        var normed = batchNormalization(x, mean, variance, beta, gamma, epsilon);
        return [normed, mean, variance];
    });
}
function broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon) {
    if (epsilon === void 0) { epsilon = 1e-3; }
    return tfjs_core_1.tidy(function () {
        var meanAndVariance = tfc.moments(x, reductionAxes);
        var mean = meanAndVariance.mean;
        var variance = meanAndVariance.variance;
        var targetShape = [];
        for (var _i = 0, _a = math_utils.range(0, ndim(x)); _i < _a.length; _i++) {
            var axis = _a[_i];
            if (reductionAxes.indexOf(axis) !== -1) {
                targetShape.push(1);
            }
            else {
                targetShape.push(x.shape[axis]);
            }
        }
        var broadcastMean = reshape(mean, targetShape);
        var broadcastVariance = reshape(variance, targetShape);
        var broadcastGamma = gamma == null ? null : reshape(gamma, targetShape);
        var broadcastBeta = beta == null ? null : reshape(beta, targetShape);
        var normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon);
        return [normed, mean, variance];
    });
}
function normalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon) {
    if (epsilon === void 0) { epsilon = 1e-3; }
    if (tfjs_core_1.util.arraysEqual(reductionAxes.slice().sort(), math_utils.range(0, ndim(x) - 1))) {
        return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);
    }
    else {
        return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);
    }
}
exports.normalizeBatchInTraining = normalizeBatchInTraining;
function concatenate(tensors, axis) {
    if (axis === void 0) { axis = -1; }
    var rank;
    if (axis < 0) {
        rank = ndim(tensors[0]);
        if (rank !== 0) {
            axis = rank;
        }
        else {
            axis = 0;
        }
    }
    if (axis === ndim(tensors[0])) {
        axis = -1;
    }
    return tfc.concat(tensors, axis);
}
exports.concatenate = concatenate;
function concatAlongFirstAxis(a, b) {
    switch (a.rank) {
        case 1:
            return tfc.concat1d([a, b]);
        case 2:
            return tfc.concat2d([a, b], 0);
        case 3:
            return tfc.concat3d([a, b], 0);
        case 4:
            return tfc.concat4d([a, b], 0);
        default:
            throw new errors_1.ValueError('concatAlongFirstAxis() received an unsupported tensor rank: ' +
                a.rank);
    }
}
exports.concatAlongFirstAxis = concatAlongFirstAxis;
function tile(x, n) {
    if (!Array.isArray(n)) {
        n = [n];
    }
    if (ndim(x) !== n.length) {
        throw new errors_1.ValueError("The length of input n (" + n.length + ") does not match " +
            ("the number of dimensions in input x (" + ndim(x) + ")"));
    }
    return tfc.tile(x, n);
}
exports.tile = tile;
function variable(x, dtype, name, constraint) {
    return new types_1.LayerVariable(x, dtype, name, true, constraint);
}
exports.variable = variable;
function batchGetValue(xs) {
    return xs.map(function (x) { return x.read(); });
}
exports.batchGetValue = batchGetValue;
function batchSetValue(variablesAndValues) {
    variablesAndValues.map(function (variableAndValue) {
        var variable = variableAndValue[0];
        variable.write(variableAndValue[1]);
    });
}
exports.batchSetValue = batchSetValue;
function zeros(shape, dtype) {
    return tfc.zeros(shape);
}
exports.zeros = zeros;
function zerosVariable(shape, dtype, name) {
    return new types_1.LayerVariable(zeros(shape), dtype, name);
}
exports.zerosVariable = zerosVariable;
function zerosLike(x, dtype, name) {
    return new types_1.LayerVariable(tfc.zerosLike(x), dtype, name);
}
exports.zerosLike = zerosLike;
function ones(shape, dtype) {
    return tfc.ones(shape);
}
exports.ones = ones;
function onesVariable(shape, dtype, name) {
    var allocated = tfc.ones(shape);
    return new types_1.LayerVariable(allocated, dtype, name);
}
exports.onesVariable = onesVariable;
function onesLike(x, dtype, name) {
    var allocated = tfc.onesLike(x);
    return new types_1.LayerVariable(allocated, dtype, name);
}
exports.onesLike = onesLike;
function identity(x) {
    return x.clone();
}
exports.identity = identity;
function eye(size, dtype, name) {
    var buffer = [];
    for (var i = 0; i < size; ++i) {
        for (var j = 0; j < size; ++j) {
            buffer.push(i === j ? 1 : 0);
        }
    }
    return tfjs_core_1.tensor2d(buffer, [size, size]);
}
exports.eye = eye;
function eyeVariable(size, dtype, name) {
    return new types_1.LayerVariable(eye(size, dtype), dtype, name);
}
exports.eyeVariable = eyeVariable;
function neg(x) {
    return tfc.neg(x);
}
exports.neg = neg;
function add(x, y) {
    return tfc.add(x, y);
}
exports.add = add;
function subtract(x, y) {
    return tfc.sub(x, y);
}
exports.subtract = subtract;
function multiply(x, y) {
    return tfc.mul(x, y);
}
exports.multiply = multiply;
function divide(x, y) {
    return tfc.div(x, y);
}
exports.divide = divide;
function scalarTimesArray(c, x) {
    return tfc.mul(c, x);
}
exports.scalarTimesArray = scalarTimesArray;
function scalarPlusArray(c, x) {
    return tfc.add(c, x);
}
exports.scalarPlusArray = scalarPlusArray;
function randomUniform(shape, minval, maxval, dtype, seed) {
    return tfc.randomUniform(shape, minval, maxval);
}
exports.randomUniform = randomUniform;
function randomUniformVariable(shape, minval, maxval, dtype, seed, name) {
    if (name === void 0) { name = 'randomUniform'; }
    return new types_1.LayerVariable(randomUniform(shape, minval, maxval, dtype, seed), dtype, name);
}
exports.randomUniformVariable = randomUniformVariable;
function truncatedNormal(shape, mean, stddev, dtype, seed) {
    if (mean === void 0) { mean = 0.0; }
    if (stddev === void 0) { stddev = 1.0; }
    return tfc.truncatedNormal(shape, mean, stddev);
}
exports.truncatedNormal = truncatedNormal;
function truncatedNormalVariable(shape, mean, stddev, dtype, seed, name) {
    if (mean === void 0) { mean = 0.0; }
    if (stddev === void 0) { stddev = 1.0; }
    if (name === void 0) { name = 'truncatedNormal'; }
    return new types_1.LayerVariable(truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);
}
exports.truncatedNormalVariable = truncatedNormalVariable;
function randomNormal(shape, mean, stddev, dtype, seed) {
    if (mean === void 0) { mean = 0.0; }
    if (stddev === void 0) { stddev = 1.0; }
    if (dtype === types_1.DType.bool) {
        throw new errors_1.NotImplementedError("randomNormal does not support dType bool.");
    }
    var dtypeString = (dtype === types_1.DType.float32) ? 'float32' : 'int32';
    return tfc.randomNormal(shape, mean, stddev, dtypeString, seed);
}
exports.randomNormal = randomNormal;
function randomNormalVariable(shape, mean, stddev, dtype, seed, name) {
    if (mean === void 0) { mean = 0.0; }
    if (stddev === void 0) { stddev = 1.0; }
    if (name === void 0) { name = 'randomNormal'; }
    return new types_1.LayerVariable(randomNormal(shape, mean, stddev, dtype, seed), dtype, name);
}
exports.randomNormalVariable = randomNormalVariable;
function update(x, xNew) {
    return x.write(xNew);
}
exports.update = update;
function updateAdd(x, increment) {
    return x.write(tfc.add(x.read(), increment));
}
exports.updateAdd = updateAdd;
function updateSub(x, decrement) {
    return x.write(tfc.sub(x.read(), decrement));
}
exports.updateSub = updateSub;
function dot(x, y) {
    if (ndim(y) !== 2) {
        throw new errors_1.NotImplementedError("dot support for y other than rank 2 is not yet implemented: " +
            ("y shape = " + shape));
    }
    else {
        if (ndim(x) === 2) {
            return tfc.matMul(x, y);
        }
        else if (ndim(x) === 3) {
            var xShape0 = x.shape[0];
            var xShape1 = x.shape[1];
            var xShape2 = x.shape[2];
            x = x.reshape([xShape0 * xShape1, xShape2]);
            return tfc.matMul(x, y).reshape([
                xShape0, xShape1, y.shape[1]
            ]);
        }
        else {
            throw new errors_1.NotImplementedError("dot support for x of rank " + ndim(x) + " is not yet implemented: " +
                ("x shape = " + shape));
        }
    }
}
exports.dot = dot;
function sign(x) {
    var zerosLikeX = tfjs_core_1.zerosLike(x);
    var onesLikeX = tfjs_core_1.onesLike(x);
    return tfjs_core_1.where(equal(x, zerosLikeX), zerosLikeX, tfjs_core_1.where(greater(x, tfjs_core_1.zerosLike(x)), onesLikeX, scalarTimesArray(getScalar(-1), onesLikeX)));
}
exports.sign = sign;
function qr(x) {
    if (x.shape.length !== 2) {
        throw new errors_1.ValueError("qr() requires a 2D Tensor, but got a " + x.shape.length + "D Tensor.");
    }
    if (x.shape[0] < x.shape[1]) {
        throw new errors_1.ValueError("qr() requires x.shape[0] >= x.shape[1], but got shape: [" + x.shape + "]");
    }
    var m = x.shape[0];
    var n = x.shape[1];
    var q = eye(m);
    var r = x;
    var one2D = tfjs_core_1.tensor2d([[1]], [1, 1]);
    for (var j = 0; j < n; ++j) {
        var rjEnd1 = r.slice([j, j], [m - j, 1]);
        var normX = tfc.norm(rjEnd1);
        var rjj = r.slice([j, j], [1, 1]);
        var s = tfc.neg(sign(rjj));
        var u1 = rjj.sub(multiply(s, normX));
        var wPre = divide(rjEnd1, u1);
        var w = void 0;
        if (wPre.shape[0] === 1) {
            w = one2D;
        }
        else {
            w = one2D.concat(wPre.slice([1, 0], [wPre.shape[0] - 1, wPre.shape[1]]), 0);
        }
        var tau = tfc.neg(divide(tfc.matMul(s, u1), normX));
        var rjEndAll = r.slice([j, 0], [m - j, n]);
        var tauTimesW = tau.mul(w);
        if (j === 0) {
            r = rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll)));
        }
        else {
            r = r.slice([0, 0], [j, n])
                .concat(rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll))), 0);
        }
        var qAllJEnd = q.slice([0, j], [m, q.shape[1] - j]);
        if (j === 0) {
            q = qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose()));
        }
        else {
            q = q.slice([0, 0], [m, j])
                .concat(qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose())), 1);
        }
    }
    return [q, r];
}
exports.qr = qr;
function oneHot(indices, numClasses) {
    if (ndim(indices) !== 1) {
        throw new Error('Only 1D one-hot tensors are supported in the ' +
            'deeplearn backend, at present.');
    }
    indices = indices.toInt();
    return tfc.oneHot(indices, numClasses).toFloat();
}
exports.oneHot = oneHot;
function mean(x, axis, keepDims) {
    axis = normalizeAxis(x, axis);
    return tfc.mean(x, axis, keepDims);
}
exports.mean = mean;
function argmax(x, axis) {
    if (axis === void 0) { axis = -1; }
    return tfc.argMax(x, axis);
}
exports.argmax = argmax;
function gather(reference, indices, axis) {
    if (Array.isArray(indices)) {
        indices = tfjs_core_1.tensor1d(indices, 'int32');
    }
    else {
        indices = indices.toInt();
    }
    return tfc.gather(reference, indices, axis);
}
exports.gather = gather;
function max(x, axis, keepDims) {
    return tfc.max(x, axis, keepDims);
}
exports.max = max;
function min(x, axis, keepDims) {
    return tfc.min(x, axis, keepDims);
}
exports.min = min;
function minimum(x, y) {
    return tfc.minimum(x, y);
}
exports.minimum = minimum;
function sum(x, axis, keepDims) {
    return tfc.sum(x, axis, keepDims);
}
exports.sum = sum;
function abs(x) {
    return tfc.abs(x);
}
exports.abs = abs;
function square(x) {
    return tfc.mulStrict(x, x);
}
exports.square = square;
function sqrt(x) {
    return tfc.sqrt(x);
}
exports.sqrt = sqrt;
function exp(x) {
    return tfc.exp(x);
}
exports.exp = exp;
function log(x) {
    return tfc.log(x);
}
exports.log = log;
function pow(x, a) {
    if (typeof (a) === 'number') {
        a = tfjs_core_1.scalar(Math.round(a), 'int32');
    }
    if (a.dtype !== 'int32') {
        throw new errors_1.NotImplementedError("Non-int32 dtype (" + a.dtype + ") is not supported by pow() yet");
    }
    return tfc.pow(x, a);
}
exports.pow = pow;
function clip(x, minValue, maxValue) {
    return tfc.clipByValue(x, minValue, maxValue);
}
exports.clip = clip;
function equal(x, y) {
    return tfc.equal(x, y);
}
exports.equal = equal;
function greater(x, y) {
    return tfc.greater(x, y);
}
exports.greater = greater;
function greaterEqual(x, y) {
    return tfc.greaterEqual(x, y);
}
exports.greaterEqual = greaterEqual;
function maximum(x, y) {
    return tfc.maximum(x, y);
}
exports.maximum = maximum;
function sin(x) {
    return tfc.sin(x.value());
}
exports.sin = sin;
function cos(x) {
    return tfc.cos(x.value());
}
exports.cos = cos;
function batchNormalization(x, mean, variance, beta, gamma, epsilon) {
    if (epsilon === void 0) { epsilon = 1e-3; }
    var out;
    if (ndim(x) === 2) {
        out = tfc.batchNormalization2d(x, mean, variance, epsilon, gamma, beta);
    }
    else if (ndim(x) === 3) {
        out = tfc.batchNormalization3d(x, mean, variance, epsilon, gamma, beta);
    }
    else if (ndim(x) === 4) {
        out = tfc.batchNormalization4d(x, mean, variance, epsilon, gamma, beta);
    }
    else {
        throw new errors_1.NotImplementedError("batchNormalization is not implememnted for array of rank " + ndim(x) + " " +
            "yet");
    }
    return out;
}
exports.batchNormalization = batchNormalization;
function biasAdd(x, bias, dataFormat) {
    if (dataFormat == null) {
        dataFormat = common_3.imageDataFormat();
    }
    common_1.checkDataFormat(dataFormat);
    if (ndim(bias) !== 1 && ndim(bias) !== ndim(x)) {
        throw new errors_1.ValueError('Unexpected bias dimensions: ' + ndim(bias) +
            '; expected it to be 1 or ' + ndim(x));
    }
    var biasShape = bias.shape;
    var y;
    if (ndim(x) === 5) {
        if (dataFormat === 'channelsFirst') {
            if (biasShape.length === 1) {
                y = x.add(bias.reshape([1, biasShape[0], 1, 1, 1]));
            }
            else {
                y = x.add(bias.reshape([1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]));
            }
        }
        else if (dataFormat === 'channelsLast') {
            if (biasShape.length === 1) {
                y = x.add(bias.reshape([1, 1, 1, 1, biasShape[0]]));
            }
            else {
                y = x.add(bias.reshape([1].concat(biasShape)));
            }
        }
    }
    else if (ndim(x) === 4) {
        if (dataFormat === 'channelsFirst') {
            if (biasShape.length === 1) {
                y = x.add(bias.reshape([1, biasShape[0], 1, 1]));
            }
            else {
                y = x.add(bias.reshape([1, biasShape[2], biasShape[0], biasShape[1]]));
            }
        }
        else if (dataFormat === 'channelsLast') {
            if (biasShape.length === 1) {
                y = x.add(bias.reshape([1, 1, 1, biasShape[0]]));
            }
            else {
                y = x.add(bias.reshape([1].concat(biasShape)));
            }
        }
    }
    else if (ndim(x) === 3) {
        if (dataFormat === 'channelsFirst') {
            if (biasShape.length === 1) {
                y = x.add(bias.reshape([1, biasShape[0], 1]));
            }
            else {
                y = x.add(bias.reshape([1, biasShape[1], biasShape[0]]));
            }
        }
        else if (dataFormat === 'channelsLast') {
            if (biasShape.length === 1) {
                y = x.add(bias.reshape([1, 1, biasShape[0]]));
            }
            else {
                y = x.add(bias.reshape([1].concat(biasShape)));
            }
        }
    }
    else if (ndim(x) < 3) {
        y = x.add(bias);
    }
    else {
        throw new errors_1.ValueError("Unsupported input rank by biasAdd: " + ndim(x));
    }
    return y;
}
exports.biasAdd = biasAdd;
function elu(x, alpha) {
    if (alpha === void 0) { alpha = 1; }
    if (alpha !== 1) {
        throw new errors_1.NotImplementedError("Support for alpha values other than 1 (" + alpha + ") is not implemented " +
            "yet.");
    }
    return tfc.elu(x);
}
exports.elu = elu;
function selu(x) {
    return tfc.selu(x);
}
exports.selu = selu;
function relu(x) {
    return tfc.relu(x);
}
exports.relu = relu;
function softplus(x) {
    return tfc.log(tfc.add(getScalar(1), tfc.exp(x)));
}
exports.softplus = softplus;
function softsign(x) {
    return tfc.div(x, tfc.add(getScalar(1), tfc.abs(x)));
}
exports.softsign = softsign;
function tanh(x) {
    return tfc.tanh(x);
}
exports.tanh = tanh;
function dropout(x, level, noiseShape, seed) {
    if (noiseShape != null && !tfjs_core_1.util.arraysEqual(x.shape, noiseShape)) {
        throw new errors_1.NotImplementedError('Non-default noise shape is not implemented yet: ' +
            JSON.stringify(noiseShape));
    }
    if (seed != null) {
        throw new errors_1.NotImplementedError('seed is not implemented for dropout yet.');
    }
    var multiplier = tfc.step(tfc.add(neg(level), randomUniform(x.shape, 0, 1, types_1.DType.float32)));
    multiplier = tfc.mul(divide(getScalar(1), subtract(getScalar(1), level)), multiplier);
    return tfc.mul(x, multiplier);
}
exports.dropout = dropout;
function l2Normalize(x, axis) {
    var squareSum = sum(square(x), axis, true);
    var epsilonTensor = scalarTimesArray(tfjs_core_1.scalar(exports.epsilon()), tfc.onesLike(x));
    var norm = sqrt(maximum(squareSum, epsilonTensor));
    return divide(x, norm);
}
exports.l2Normalize = l2Normalize;
function preprocessConv2DInput(x, dataFormat) {
    common_1.checkDataFormat(dataFormat);
    if (dataFormat === 'channelsFirst') {
        return tfc.transpose(x, [0, 2, 3, 1]);
    }
    else {
        return x;
    }
}
function conv1dWithBias(x, kernel, bias, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) { strides = 1; }
    if (padding === void 0) { padding = 'valid'; }
    if (dilationRate === void 0) { dilationRate = 1; }
    if (dataFormat == null) {
        dataFormat = common_3.imageDataFormat();
    }
    common_1.checkDataFormat(dataFormat);
    if (x.shape.length !== 3) {
        throw new errors_1.ValueError("The input of a conv1dWithBias operation should be 3, but is " +
            (x.shape.length + " instead."));
    }
    if (kernel.shape.length !== 3) {
        throw new errors_1.ValueError("The kernel for a conv1dWithBias operation should be 3, but is " +
            (kernel.shape.length + " instead"));
    }
    if (bias != null && bias.shape.length !== 1) {
        throw new errors_1.ValueError("The bias for a conv1dWithBias operation should be 1, but is " +
            (kernel.shape.length + " instead"));
    }
    if (dataFormat === 'channelsFirst') {
        x = transpose(x, [0, 2, 1]);
    }
    if (padding === 'casual') {
        throw new errors_1.NotImplementedError('The support for CASUAL padding mode in conv1dWithBias is not ' +
            'implemented yet.');
    }
    var y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);
    if (bias != null) {
        y = biasAdd(y, bias);
    }
    return y;
}
exports.conv1dWithBias = conv1dWithBias;
function conv1d(x, kernel, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) { strides = 1; }
    if (padding === void 0) { padding = 'valid'; }
    if (dilationRate === void 0) { dilationRate = 1; }
    common_1.checkDataFormat(dataFormat);
    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);
}
exports.conv1d = conv1d;
function conv2d(x, kernel, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) { strides = [1, 1]; }
    if (padding === void 0) { padding = 'valid'; }
    common_1.checkDataFormat(dataFormat);
    return conv2dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);
}
exports.conv2d = conv2d;
function conv2dWithBias(x, kernel, bias, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) { strides = [1, 1]; }
    if (padding === void 0) { padding = 'valid'; }
    if (dataFormat == null) {
        dataFormat = common_3.imageDataFormat();
    }
    common_1.checkDataFormat(dataFormat);
    if (ndim(x) !== 3 && ndim(x) !== 4) {
        throw new errors_1.ValueError("conv2dWithBias expects input to be of rank 3 or 4, but received " +
            (ndim(x) + "."));
    }
    if (ndim(kernel) !== 3 && ndim(kernel) !== 4) {
        throw new errors_1.ValueError("conv2dWithBias expects kernel to be of rank 3 or 4, but received " +
            (ndim(x) + "."));
    }
    var y = preprocessConv2DInput(x, dataFormat);
    if (padding === 'casual') {
        throw new errors_1.NotImplementedError('The support for CASUAL padding mode in conv1dWithBias is not ' +
            'implemented yet.');
    }
    y = tfc.conv2d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);
    if (bias != null) {
        y = biasAdd(y, bias);
    }
    if (dataFormat === 'channelsFirst') {
        y = tfc.transpose(y, [0, 3, 1, 2]);
    }
    return y;
}
exports.conv2dWithBias = conv2dWithBias;
function depthwiseConv2d(x, depthwiseKernel, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) { strides = [1, 1]; }
    if (padding === void 0) { padding = 'valid'; }
    if (dataFormat == null) {
        dataFormat = common_3.imageDataFormat();
    }
    common_1.checkDataFormat(dataFormat);
    var y = preprocessConv2DInput(x, dataFormat);
    if (ndim(x) !== 4) {
        throw new errors_1.ValueError("Input for depthwiseConv2d is required to be 4-D, but is instead " +
            (ndim(x) + "-D"));
    }
    if (ndim(depthwiseKernel) !== 4) {
        throw new errors_1.ValueError("depthwiseKernel is required to be 4-D, but is instead " +
            (ndim(depthwiseKernel) + "-D"));
    }
    y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);
    if (dataFormat === 'channelsFirst') {
        y = tfc.transpose(y, [0, 3, 1, 2]);
    }
    return y;
}
exports.depthwiseConv2d = depthwiseConv2d;
function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {
    common_1.checkDataFormat(dataFormat);
    common_1.checkPoolMode(poolMode);
    common_1.checkPaddingMode(padding);
    if (strides == null) {
        strides = [1, 1];
    }
    if (padding == null) {
        padding = 'valid';
    }
    if (dataFormat == null) {
        dataFormat = common_3.imageDataFormat();
    }
    if (poolMode == null) {
        poolMode = 'max';
    }
    x = preprocessConv2DInput(x, dataFormat);
    var y;
    var paddingString = (padding === 'same') ? 'same' : 'valid';
    if (poolMode === 'max') {
        y = tfc.maxPool(x, poolSize, strides, paddingString);
    }
    else {
        y = tfc.avgPool(x, poolSize, strides, paddingString);
    }
    if (dataFormat === 'channelsFirst') {
        y = tfc.transpose(y, [0, 3, 1, 2]);
    }
    return y;
}
exports.pool2d = pool2d;
function nameScope(name, fn) {
    return common_1.nameScope(name, fn);
}
exports.nameScope = nameScope;
function floatx() {
    return types_1.DType.float32;
}
exports.floatx = floatx;
var _uidPrefixes = {};
function getUid(prefix) {
    if (prefix === void 0) { prefix = ''; }
    if (!(prefix in _uidPrefixes)) {
        _uidPrefixes[prefix] = 0;
    }
    _uidPrefixes[prefix] += 1;
    return prefix + _uidPrefixes[prefix].toString();
}
exports.getUid = getUid;
function softmax(x, axis) {
    if (axis === void 0) { axis = -1; }
    return tfc.softmax(x, axis);
}
exports.softmax = softmax;
function categoricalCrossentropy(target, output, fromLogits) {
    if (fromLogits === void 0) { fromLogits = false; }
    if (fromLogits) {
        output = softmax(output);
    }
    else {
        var outputSum = sum(output, shape(output).length - 1, true);
        output = divide(output, outputSum);
    }
    output = clip(output, exports.epsilon(), 1 - exports.epsilon());
    return tfc.neg(tfc.sum(tfc.mul(target.toFloat(), tfc.log(output)), shape(output).length - 1));
}
exports.categoricalCrossentropy = categoricalCrossentropy;
function sparseCategoricalCrossentropy(target, output, fromLogits) {
    if (fromLogits === void 0) { fromLogits = false; }
    var flatTarget = tfc.floor(flatten(target)).toInt();
    var outputShape = shape(output);
    var oneHotTarget = reshape(tfc.oneHot(flatTarget, outputShape[outputShape.length - 1]), outputShape);
    return categoricalCrossentropy(oneHotTarget, output, fromLogits);
}
exports.sparseCategoricalCrossentropy = sparseCategoricalCrossentropy;
function binaryCrossentropy(target, output, fromLogits) {
    if (fromLogits === void 0) { fromLogits = false; }
    var y;
    if (!fromLogits) {
        y = clip(output, exports.epsilon(), 1 - exports.epsilon());
        y = log(divide(y, subtract(tfc.onesLike(y), y)));
    }
    else {
        y = output;
    }
    return sigmoidCrossEntropyWithLogits(target, y);
}
exports.binaryCrossentropy = binaryCrossentropy;
function sigmoidCrossEntropyWithLogits(target, output) {
    var maxOutput = tfc.maximum(output, tfc.zerosLike(output));
    var outputXTarget = tfc.mul(output, target);
    var sigmoidOutput = tfc.log(tfc.add(getScalar(1), tfc.exp(tfc.neg(tfc.abs(output)))));
    var result = tfc.add(tfc.sub(maxOutput, outputXTarget), sigmoidOutput);
    return result;
}
exports.sigmoidCrossEntropyWithLogits = sigmoidCrossEntropyWithLogits;
function sigmoid(x) {
    return tfc.sigmoid(x);
}
exports.sigmoid = sigmoid;
function hardSigmoid(x) {
    var y = scalarPlusArray(tfjs_core_1.scalar(0.5), scalarTimesArray(tfjs_core_1.scalar(0.2), x));
    return clip(y, 0, 1);
}
exports.hardSigmoid = hardSigmoid;
function inTrainPhase(x, alt, training) {
    if (training === void 0) { training = false; }
    return training ? x() : alt();
}
exports.inTrainPhase = inTrainPhase;
function rnn(stepFunction, inputs, initialStates, goBackwards, mask, constants, unroll, inputLength) {
    if (goBackwards === void 0) { goBackwards = false; }
    if (unroll === void 0) { unroll = false; }
    var ndim = inputs.shape.length;
    if (ndim < 3) {
        throw new errors_1.ValueError("Input should be at least 3D, but is " + ndim + "D.");
    }
    var axes = [1, 0].concat(math_utils.range(2, ndim));
    inputs = transpose(inputs, axes);
    if (mask != null) {
        throw new errors_1.NotImplementedError('The rnn() function of the deeplearn.js backend does not support ' +
            'masking yet.');
    }
    if (constants != null) {
        throw new errors_1.NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' +
            'constants yet.');
    }
    if (unroll) {
        console.warn('Backend rnn(): the unroll = true option is not applicable to the ' +
            'imperative deeplearn.js backend.');
    }
    if (goBackwards) {
        inputs = reverse(inputs, 0);
    }
    var outputs;
    var lastOutput;
    var states = initialStates;
    var timeSteps = inputs.shape[0];
    for (var t = 0; t < timeSteps; ++t) {
        var currentInput = sliceAlongFirstAxis(inputs, t, 1);
        currentInput = reshape(currentInput, currentInput.shape.slice(1));
        var stepOutputs = stepFunction(currentInput, states);
        lastOutput = stepOutputs[0];
        if (t === 0) {
            outputs = lastOutput.reshape([1].concat(lastOutput.shape));
        }
        else {
            outputs = concatAlongFirstAxis(outputs, lastOutput.reshape([1].concat(lastOutput.shape)));
        }
        states = stepOutputs[1];
    }
    return [
        lastOutput,
        transpose(outputs, [1, 0].concat(math_utils.range(2, outputs.shape.length))),
        states
    ];
}
exports.rnn = rnn;
function gradients(lossFn, variables) {
    var variableList = variables.map(function (variable) { return variable.read(); });
    var valudAndGrads = tfjs_core_1.variableGrads(lossFn, variableList);
    return variables.map(function (variable) { return valudAndGrads.grads[variable.name]; });
}
exports.gradients = gradients;

},{"@tensorflow/tfjs-core":64,"../common":185,"../errors":171,"../types":91,"../utils/generic_utils":165,"../utils/math_utils":190,"./common":191}],166:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("./backend/tfjs_backend");
var types_1 = require("./types");
var generic_utils_1 = require("./utils/generic_utils");
function calcL2Norms(w, axis) {
    return K.sqrt(K.sum(K.square(w), axis, true));
}
var Constraint = (function (_super) {
    __extends(Constraint, _super);
    function Constraint() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Constraint.prototype.getConfig = function () {
        return {};
    };
    Constraint = __decorate([
        tfjs_core_1.doc({ heading: 'Constraints', subheading: 'Classes', namespace: 'constraints' })
    ], Constraint);
    return Constraint;
}(types_1.Serializable));
exports.Constraint = Constraint;
var MaxNorm = (function (_super) {
    __extends(MaxNorm, _super);
    function MaxNorm(config) {
        var _this = _super.call(this) || this;
        _this.defaultMaxValue = 2;
        _this.defaultAxis = 0;
        _this.maxValue =
            config.maxValue != null ? config.maxValue : _this.defaultMaxValue;
        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;
        return _this;
    }
    MaxNorm.prototype.apply = function (w) {
        var norms = calcL2Norms(w, this.axis);
        var desired = K.clip(norms, 0, this.maxValue);
        return K.multiply(w, K.divide(desired, K.scalarPlusArray(K.getScalar(K.epsilon()), norms)));
    };
    MaxNorm.prototype.getClassName = function () {
        return 'MaxNorm';
    };
    MaxNorm.prototype.getConfig = function () {
        return { maxValue: this.maxValue, axis: this.axis };
    };
    return MaxNorm;
}(Constraint));
exports.MaxNorm = MaxNorm;
generic_utils_1.ClassNameMap.register('MaxNorm', MaxNorm);
var UnitNorm = (function (_super) {
    __extends(UnitNorm, _super);
    function UnitNorm(config) {
        var _this = _super.call(this) || this;
        _this.defaultAxis = 0;
        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;
        return _this;
    }
    UnitNorm.prototype.apply = function (w) {
        return K.divide(w, K.scalarPlusArray(K.getScalar(K.epsilon()), calcL2Norms(w, this.axis)));
    };
    UnitNorm.prototype.getClassName = function () {
        return 'UnitNorm';
    };
    UnitNorm.prototype.getConfig = function () {
        return { axis: this.axis };
    };
    return UnitNorm;
}(Constraint));
exports.UnitNorm = UnitNorm;
generic_utils_1.ClassNameMap.register('UnitNorm', UnitNorm);
var NonNeg = (function (_super) {
    __extends(NonNeg, _super);
    function NonNeg() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NonNeg.prototype.apply = function (w) {
        return K.relu(w);
    };
    NonNeg.prototype.getClassName = function () {
        return 'NonNeg';
    };
    return NonNeg;
}(Constraint));
exports.NonNeg = NonNeg;
generic_utils_1.ClassNameMap.register('NonNeg', NonNeg);
var MinMaxNorm = (function (_super) {
    __extends(MinMaxNorm, _super);
    function MinMaxNorm(config) {
        var _this = _super.call(this) || this;
        _this.defaultMinValue = 0.0;
        _this.defaultMaxValue = 1.0;
        _this.defaultRate = 1.0;
        _this.defaultAxis = 0;
        _this.minValue =
            config.minValue != null ? config.minValue : _this.defaultMinValue;
        _this.maxValue =
            config.maxValue != null ? config.maxValue : _this.defaultMaxValue;
        _this.rate = config.rate != null ? config.rate : _this.defaultRate;
        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;
        return _this;
    }
    MinMaxNorm.prototype.apply = function (w) {
        var norms = calcL2Norms(w, this.axis);
        var desired = K.add(K.scalarTimesArray(K.getScalar(this.rate), K.clip(norms, this.minValue, this.maxValue)), K.scalarTimesArray(K.getScalar(1.0 - this.rate), norms));
        return K.multiply(w, K.divide(desired, K.scalarPlusArray(K.getScalar(K.epsilon()), norms)));
    };
    MinMaxNorm.prototype.getClassName = function () {
        return 'MinMaxNorm';
    };
    MinMaxNorm.prototype.getConfig = function () {
        return {
            minValue: this.minValue,
            maxValue: this.maxValue,
            rate: this.rate,
            axis: this.axis
        };
    };
    return MinMaxNorm;
}(Constraint));
exports.MinMaxNorm = MinMaxNorm;
generic_utils_1.ClassNameMap.register('MinMaxNorm', MinMaxNorm);
exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    'maxNorm': 'MaxNorm',
    'minMaxNorm': 'MinMaxNorm',
    'nonNeg': 'NonNeg',
    'unitNorm': 'UnitNorm'
};
function serializeConstraint(constraint) {
    return generic_utils_1.serializeKerasObject(constraint);
}
exports.serializeConstraint = serializeConstraint;
function deserializeConstraint(config, customObjects) {
    if (customObjects === void 0) { customObjects = {}; }
    return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'constraint');
}
exports.deserializeConstraint = deserializeConstraint;
function getConstraint(identifier) {
    if (identifier == null) {
        return null;
    }
    if (typeof identifier === 'string') {
        var className = identifier in exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?
            exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :
            identifier;
        var config = { className: className, config: {} };
        return deserializeConstraint(config);
    }
    else if (identifier instanceof Constraint) {
        return identifier;
    }
    else {
        return deserializeConstraint(identifier);
    }
}
exports.getConstraint = getConstraint;

},{"@tensorflow/tfjs-core":64,"./backend/tfjs_backend":94,"./types":91,"./utils/generic_utils":165}],183:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var generic_utils_1 = require("../utils/generic_utils");
function deserialize(config, customObjects) {
    if (customObjects === void 0) { customObjects = {}; }
    return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'layer');
}
exports.deserialize = deserialize;

},{"../utils/generic_utils":165}],184:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../errors");
var generic_utils = require("../utils/generic_utils");
function isArrayItemInputOrOutputName(key, index, value) {
    return (key === 'inboundNodes' || key === 'outputLayers' ||
        key === 'inputLayers') &&
        index === 0 && typeof value === 'string';
}
function convertPythonicToTs(pythonicConfig, key) {
    if (pythonicConfig === null) {
        return null;
    }
    else if (typeof pythonicConfig === 'string') {
        return generic_utils.toCamelCase(pythonicConfig);
    }
    else if ((typeof pythonicConfig === 'number') ||
        (typeof pythonicConfig === 'boolean')) {
        return pythonicConfig;
    }
    else if (pythonicConfig instanceof Array) {
        var tsArray = [];
        var arrayLength = pythonicConfig.length;
        for (var i = 0; i < arrayLength; ++i) {
            var item = pythonicConfig[i];
            if (isArrayItemInputOrOutputName(key, i, item)) {
                tsArray.push(item);
            }
            else {
                tsArray.push(convertPythonicToTs(item, key));
            }
        }
        return tsArray;
    }
    else {
        var tsDict = {};
        for (var _i = 0, _a = Object.keys(pythonicConfig); _i < _a.length; _i++) {
            var pythonicKey = _a[_i];
            var pythonicValue = pythonicConfig[pythonicKey];
            if (pythonicKey === 'name' && typeof pythonicValue === 'string') {
                tsDict[pythonicKey] = pythonicValue;
            }
            else {
                var tsKey = generic_utils.toCamelCase(pythonicKey);
                if (generic_utils.SerializableEnumRegistry.contains(pythonicKey) &&
                    (typeof pythonicValue === 'string' || pythonicValue == null)) {
                    var enumValue = generic_utils.SerializableEnumRegistry.lookup(pythonicKey, pythonicValue);
                    if (enumValue != null) {
                        tsDict[tsKey] = enumValue;
                    }
                    else {
                        throw new errors_1.ValueError("Unkown value " + pythonicValue + " for " + pythonicKey + " Enum");
                    }
                }
                else {
                    tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);
                }
            }
        }
        return tsDict;
    }
}
exports.convertPythonicToTs = convertPythonicToTs;
function convertTsToPythonic(tsConfig, key) {
    if (tsConfig === null || tsConfig === undefined) {
        return null;
    }
    else if (typeof tsConfig === 'string') {
        return generic_utils.toSnakeCase(tsConfig);
    }
    else if ((typeof tsConfig === 'number') || (typeof tsConfig === 'boolean')) {
        return tsConfig;
    }
    else if (tsConfig instanceof Array) {
        var pyArray = [];
        var arrayLength = tsConfig.length;
        for (var i = 0; i < arrayLength; ++i) {
            var item = tsConfig[i];
            if (isArrayItemInputOrOutputName(key, i, item)) {
                pyArray.push(item);
            }
            else {
                pyArray.push(convertTsToPythonic(item, key));
            }
        }
        return pyArray;
    }
    else {
        var pyDict = {};
        for (var _i = 0, _a = Object.keys(tsConfig); _i < _a.length; _i++) {
            var tsKey = _a[_i];
            var tsValue = tsConfig[tsKey];
            var pyKey = generic_utils.toSnakeCase(tsKey);
            if ((tsKey === 'name' || tsKey === 'className') &&
                typeof tsValue === 'string') {
                pyDict[pyKey] = tsValue;
            }
            else {
                if (generic_utils.SerializableEnumRegistry.contains(pyKey) &&
                    (typeof tsValue === 'string' || tsValue == null)) {
                    var enumString = generic_utils.SerializableEnumRegistry.reverseLookup(pyKey, tsValue);
                    pyDict[pyKey] = enumString;
                }
                else {
                    pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);
                }
            }
        }
        return pyDict;
    }
}
exports.convertTsToPythonic = convertTsToPythonic;

},{"../errors":171,"../utils/generic_utils":165}],172:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("../backend/tfjs_backend");
var errors_1 = require("../errors");
var serialization_1 = require("../layers/serialization");
var types_1 = require("../types");
var generic_utils = require("../utils/generic_utils");
var serialization_utils_1 = require("../utils/serialization_utils");
var InputSpec = (function () {
    function InputSpec(config) {
        this.dtype = config.dtype;
        this.shape = config.shape;
        if (config.shape != null) {
            this.ndim = config.shape.length;
        }
        else {
            this.ndim = config.ndim;
        }
        this.maxNDim = config.maxNDim;
        this.minNDim = config.minNDim;
        this.axes = config.axes || {};
    }
    return InputSpec;
}());
exports.InputSpec = InputSpec;
var _nextNodeID = 0;
var Node = (function () {
    function Node(config, callArgs) {
        this.callArgs = callArgs;
        this.id = _nextNodeID++;
        this.outboundLayer = config.outboundLayer;
        this.inboundLayers = config.inboundLayers;
        this.nodeIndices = config.nodeIndices;
        this.tensorIndices = config.tensorIndices;
        this.inputTensors = config.inputTensors;
        this.outputTensors = config.outputTensors;
        this.inputMasks = config.inputMasks;
        this.outputMasks = config.outputMasks;
        this.inputShapes = config.inputShapes;
        this.outputShapes = config.outputShapes;
        for (var _i = 0, _a = config.inboundLayers; _i < _a.length; _i++) {
            var layer = _a[_i];
            if (layer != null) {
                layer.outboundNodes.push(this);
            }
        }
        config.outboundLayer.inboundNodes.push(this);
    }
    Node.prototype.getConfig = function () {
        var inboundNames = [];
        for (var _i = 0, _a = this.inboundLayers; _i < _a.length; _i++) {
            var layer = _a[_i];
            if (layer != null) {
                inboundNames.push(layer.name);
            }
            else {
                inboundNames.push(null);
            }
        }
        return {
            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
            inboundLayers: inboundNames,
            nodeIndices: this.nodeIndices,
            tensorIndices: this.tensorIndices
        };
    };
    return Node;
}());
exports.Node = Node;
var _nextLayerID = 0;
var Layer = (function (_super) {
    __extends(Layer, _super);
    function Layer(config) {
        var _this = _super.call(this) || this;
        _this._callHook = null;
        _this._addedWeightNames = [];
        _this._stateful = false;
        _this.id = _nextLayerID++;
        _this.activityRegularizer = null;
        _this.inputSpec = null;
        _this.supportsMasking = false;
        _this._trainableWeights = [];
        _this._nonTrainableWeights = [];
        _this._losses = [];
        _this._updates = [];
        _this._built = false;
        _this.inboundNodes = [];
        _this.outboundNodes = [];
        var name = config.name;
        if (!name) {
            var prefix = _this.getClassName();
            name = generic_utils.toSnakeCase(prefix) + '_' + K.getUid(prefix);
        }
        _this.name = name;
        _this.trainable = generic_utils.pyGetAttr(config, 'trainable', true);
        _this.updatable = generic_utils.pyGetAttr(config, 'updatable', true);
        if (config.inputShape != null || config.batchInputShape != null) {
            var batchInputShape = void 0;
            if (config.batchInputShape != null) {
                batchInputShape = config.batchInputShape;
            }
            else if (config.inputShape != null) {
                var batchSize = null;
                if (config.batchSize != null) {
                    batchSize = config.batchSize;
                }
                batchInputShape = [batchSize].concat(config.inputShape);
            }
            _this.batchInputShape = batchInputShape;
            var dtype = config.dtype;
            if (dtype == null) {
                dtype = config.inputDType;
            }
            if (dtype == null) {
                dtype = K.floatx();
            }
            _this.dtype = dtype;
        }
        if (config.weights != null) {
            _this.initialWeights = config.weights;
        }
        else {
            _this.initialWeights = null;
        }
        return _this;
    }
    Layer.nodeKey = function (layer, nodeIndex) {
        return layer.name + '_ib-' + nodeIndex.toString();
    };
    Layer.prototype.getNodeAtIndex = function (nodeIndex, attrName) {
        if (this.inboundNodes.length === 0) {
            throw new errors_1.RuntimeError('The layer has never been called ' +
                ("and thus has no defined " + attrName + "."));
        }
        if (this.inboundNodes.length <= nodeIndex) {
            throw new errors_1.ValueError("Asked to get " + attrName + " at node " + nodeIndex + ", " +
                ("but the layer has only " + this.inboundNodes.length + " inbound nodes."));
        }
        return this.inboundNodes[nodeIndex];
    };
    Layer.prototype.getInputAt = function (nodeIndex) {
        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'input').inputTensors);
    };
    Layer.prototype.getOutputAt = function (nodeIndex) {
        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'output').outputTensors);
    };
    Object.defineProperty(Layer.prototype, "input", {
        get: function () {
            if (this.inboundNodes.length > 1) {
                throw new errors_1.AttributeError("Layer " + this.name +
                    ' has multiple inbound nodes, ' +
                    'hence the notion of "layer input" ' +
                    'is ill-defined. ' +
                    'Use `getInputAt(nodeIndex)` instead.');
            }
            else if (this.inboundNodes.length === 0) {
                throw new errors_1.AttributeError("Layer " + this.name +
                    ' is not connected, no input to return.');
            }
            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'input').inputTensors);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "output", {
        get: function () {
            if (this.inboundNodes.length === 0) {
                throw new errors_1.AttributeError("Layer " + this.name +
                    ' has no inbound nodes.');
            }
            if (this.inboundNodes.length > 1) {
                throw new errors_1.AttributeError("Layer " + this.name +
                    ' has multiple inbound nodes, ' +
                    'hence the notion of "layer output" ' +
                    'is ill-defined. ' +
                    'Use `getOutputAt(nodeIndex)` instead.');
            }
            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'output').outputTensors);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "losses", {
        get: function () {
            return this._losses;
        },
        enumerable: true,
        configurable: true
    });
    Layer.prototype.calculateLosses = function () {
        return this.losses.map(function (lossFn) { return lossFn(); });
    };
    Object.defineProperty(Layer.prototype, "updates", {
        get: function () {
            return this._updates;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "built", {
        get: function () {
            return this._built;
        },
        set: function (built) {
            this._built = built;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "trainableWeights", {
        get: function () {
            if (this.trainable) {
                return this._trainableWeights;
            }
            else {
                return [];
            }
        },
        set: function (weights) {
            this._trainableWeights = weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "nonTrainableWeights", {
        get: function () {
            if (!this.trainable) {
                return this._trainableWeights.concat(this._nonTrainableWeights);
            }
            else {
                return this._nonTrainableWeights;
            }
        },
        set: function (weights) {
            this._nonTrainableWeights = weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "weights", {
        get: function () {
            return this.trainableWeights.concat(this.nonTrainableWeights);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "stateful", {
        get: function () {
            return this._stateful;
        },
        enumerable: true,
        configurable: true
    });
    Layer.prototype.assertInputCompatibility = function (inputs) {
        inputs = generic_utils.toList(inputs);
        if (this.inputSpec == null || this.inputSpec.length === 0) {
            return;
        }
        var inputSpec = generic_utils.toList(this.inputSpec);
        if (inputs.length !== inputSpec.length) {
            throw new errors_1.ValueError("Layer " + this.name + " expects " + inputSpec.length + " inputs, " +
                ("but it received " + inputs.length + " input tensors. ") +
                ("Input received: " + inputs));
        }
        for (var inputIndex = 0; inputIndex < inputs.length; inputIndex++) {
            var x = inputs[inputIndex];
            var spec = inputSpec[inputIndex];
            if (spec == null) {
                continue;
            }
            var ndim = K.ndim(x);
            if (spec.ndim != null) {
                if (ndim !== spec.ndim) {
                    throw new errors_1.ValueError("Input " + inputIndex + " is incompatible with layer " + this.name + ": " +
                        ("expected ndim=" + spec.ndim + ", found ndim=" + ndim));
                }
            }
            if (spec.maxNDim != null) {
                if (ndim > spec.maxNDim) {
                    throw new errors_1.ValueError("Input " + inputIndex + " is incompatible with layer " + this.name +
                        (": expected max_ndim=" + spec.maxNDim + ", found ndim=" + ndim));
                }
            }
            if (spec.minNDim != null) {
                if (ndim < spec.minNDim) {
                    throw new errors_1.ValueError("Input " + inputIndex + " is incompatible with layer " + this.name +
                        (": expected min_ndim=" + spec.minNDim + ", found ndim=" + ndim + "."));
                }
            }
            if (spec.dtype != null) {
                if (K.dtype(x) !== spec.dtype) {
                    var xDType = K.dtype(x);
                    throw new errors_1.ValueError("Input " + inputIndex + " is incompatible with layer " + this.name + " " +
                        (": expected dtype=" + spec.dtype + ", found dtype=" + xDType + "."));
                }
            }
            if (spec.axes) {
                var xShape = K.intShape(x);
                for (var key in spec.axes) {
                    var axis = Number(key);
                    var value = spec.axes[key];
                    var xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];
                    if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {
                        throw new errors_1.ValueError("Input " + inputIndex + " is incompatible with layer " +
                            (this.name + ": expected axis " + axis + " of input shape to ") +
                            ("have value " + value + " but got shape " + xShape + "."));
                    }
                }
            }
            if (spec.shape != null) {
                var xShape = K.intShape(x);
                for (var i = 0; i < spec.shape.length; ++i) {
                    var specDim = spec.shape[i];
                    var dim = xShape[i];
                    if (specDim != null && dim != null) {
                        if (specDim !== dim) {
                            throw new errors_1.ValueError("Input " + inputIndex + " is incompatible with layer " +
                                (this.name + ": expected shape=" + spec.shape + ", ") +
                                'found shape=${xShape}.');
                        }
                    }
                }
            }
        }
    };
    Layer.prototype.call = function (inputs, kwargs) {
        return inputs;
    };
    Layer.prototype.invokeCallHook = function (inputs, kwargs) {
        if (this._callHook != null) {
            this._callHook(inputs, kwargs);
        }
    };
    Layer.prototype.setCallHook = function (callHook) {
        this._callHook = callHook;
    };
    Layer.prototype.clearCallHook = function () {
        this._callHook = null;
    };
    Layer.prototype.apply = function (inputs, kwargs) {
        var _this = this;
        kwargs = kwargs || {};
        var inputsList = generic_utils.toList(inputs);
        var allAreSymbolic = true;
        for (var _i = 0, inputsList_1 = inputsList; _i < inputsList_1.length; _i++) {
            var input = inputsList_1[_i];
            if (!(input instanceof types_1.SymbolicTensor)) {
                allAreSymbolic = false;
                break;
            }
        }
        var noneAreSymbolic = true;
        for (var _a = 0, inputsList_2 = inputsList; _a < inputsList_2.length; _a++) {
            var input = inputsList_2[_a];
            if (input instanceof types_1.SymbolicTensor) {
                noneAreSymbolic = false;
                break;
            }
        }
        if (allAreSymbolic === noneAreSymbolic) {
            throw new errors_1.ValueError('Arguments to apply() must be all ' +
                'SymbolicTensors or all Tensors');
        }
        return K.nameScope(this.name, function () {
            if (!_this.built) {
                _this.assertInputCompatibility(inputs);
                var inputShapes = [];
                for (var _i = 0, _a = generic_utils.toList(inputs); _i < _a.length; _i++) {
                    var xElem = _a[_i];
                    inputShapes.push(K.intShape(xElem));
                }
                _this.build(generic_utils.singletonOrArray(inputShapes));
                _this.built = true;
                if (_this.initialWeights) {
                    _this.setWeights(_this.initialWeights);
                }
            }
            _this.assertInputCompatibility(inputs);
            if (noneAreSymbolic) {
                var output = _this.call(inputs, kwargs);
                var outputList = generic_utils.toList(output);
                var outputListCopy = [];
                for (var _b = 0, outputList_1 = outputList; _b < outputList_1.length; _b++) {
                    var x = outputList_1[_b];
                    if (inputsList.indexOf(x) !== -1) {
                        x = K.identity(x);
                    }
                    outputListCopy.push(x);
                }
                output = generic_utils.singletonOrArray(outputListCopy);
                if (_this.activityRegularizer != null) {
                    throw new errors_1.NotImplementedError('Layer invocation in the presence of activity ' +
                        'regularizer(s) is not supported yet.');
                }
                return output;
            }
            else {
                var inputShape = collectInputShape(inputs);
                var outputShape = _this.computeOutputShape(inputShape);
                var output = void 0;
                var outputDType_1 = guessOutputDType(inputs);
                if (outputShape != null && outputShape.length > 0 &&
                    Array.isArray(outputShape[0])) {
                    output = outputShape
                        .map(function (shape, index) { return new types_1.SymbolicTensor(outputDType_1, shape, _this, generic_utils.toList(inputs), kwargs, _this.name, index); });
                }
                else {
                    output = new types_1.SymbolicTensor(outputDType_1, outputShape, _this, generic_utils.toList(inputs), kwargs, _this.name);
                }
                _this.addInboundNode(inputs, output, null, null, inputShape, outputShape, kwargs);
                if (_this.activityRegularizer != null) {
                    throw new errors_1.NotImplementedError('Layer invocation in the presence of activity ' +
                        'regularizer(s) is not supported yet.');
                }
                return output;
            }
        });
    };
    Layer.prototype.build = function (inputShape) {
        this.built = true;
    };
    Layer.prototype.getWeights = function () {
        return K.batchGetValue(this.weights);
    };
    Layer.prototype.setWeights = function (weights) {
        var params = this.weights;
        if (params.length !== weights.length) {
            throw new errors_1.ValueError("You called setWeights(weights) on layer \"" + this.name + "\" " +
                ("with a weight list of length " + weights.length + ", ") +
                ("but the layer was expecting " + params.length + " weights. ") +
                ("Provided weights: " + weights + "..."));
        }
        if (params.length === 0) {
            return;
        }
        var weightValueTuples = [];
        var paramValues = K.batchGetValue(params);
        for (var i = 0; i < paramValues.length; ++i) {
            var pv = paramValues[i];
            var p = params[i];
            var w = weights[i];
            if (!tfjs_core_1.util.arraysEqual(pv.shape, w.shape)) {
                throw new errors_1.ValueError("Layer weight shape " + pv.shape + " " +
                    ("not compatible with provided weight shape " + w.shape));
            }
            weightValueTuples.push([p, w]);
        }
        K.batchSetValue(weightValueTuples);
    };
    Layer.prototype.addWeight = function (name, shape, dtype, initializer, regularizer, trainable, constraint) {
        if (this._addedWeightNames.indexOf(name) !== -1) {
            throw new errors_1.ValueError("Duplicate weight name " + name + " for layer " + this.name);
        }
        this._addedWeightNames.push(name);
        if (dtype == null) {
            dtype = K.floatx();
        }
        var weight = new types_1.LayerVariable(initializer.apply(shape, dtype), dtype, name, trainable, constraint);
        if (regularizer != null) {
            this.addLoss(function () { return regularizer.apply(weight.read()); });
        }
        if (trainable == null) {
            trainable = true;
        }
        if (trainable) {
            this._trainableWeights.push(weight);
        }
        else {
            this._nonTrainableWeights.push(weight);
        }
        return weight;
    };
    Layer.prototype.addLoss = function (losses) {
        if (losses == null || Array.isArray(losses) && losses.length === 0) {
            return;
        }
        losses = generic_utils.toList(losses);
        if (this._losses !== undefined && this._losses !== null) {
            (_a = this.losses).push.apply(_a, losses);
        }
        var _a;
    };
    Layer.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    Layer.prototype.computeMask = function (inputs, mask) {
        var _this = this;
        if (!this.supportsMasking) {
            if (mask != null) {
                if (Array.isArray(mask)) {
                    mask.forEach(function (maskElement) {
                        if (maskElement != null) {
                            throw new TypeError("Layer " + _this.name + " does not support masking," +
                                'but was passed an inputMask.');
                        }
                    });
                }
                else {
                    throw new TypeError("Layer " + this.name + " does not support masking," +
                        'but was passed an inputMask.');
                }
            }
            return null;
        }
        return mask;
    };
    Layer.prototype.addInboundNode = function (inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs) {
        if (kwargs === void 0) { kwargs = null; }
        var inputTensorList = generic_utils.toList(inputTensors);
        outputTensors = generic_utils.toList(outputTensors);
        inputMasks = generic_utils.toList(inputMasks);
        outputMasks = generic_utils.toList(outputMasks);
        inputShapes = generic_utils.normalizeShapeList(inputShapes);
        outputShapes = generic_utils.normalizeShapeList(outputShapes);
        var inboundLayers = [];
        var nodeIndices = [];
        var tensorIndices = [];
        for (var _i = 0, inputTensorList_1 = inputTensorList; _i < inputTensorList_1.length; _i++) {
            var x = inputTensorList_1[_i];
            inboundLayers.push(x.sourceLayer);
            nodeIndices.push(x.nodeIndex);
            tensorIndices.push(x.tensorIndex);
        }
        new Node({
            outboundLayer: this,
            inboundLayers: inboundLayers,
            nodeIndices: nodeIndices,
            tensorIndices: tensorIndices,
            inputTensors: inputTensorList,
            outputTensors: outputTensors,
            inputMasks: inputMasks,
            outputMasks: outputMasks,
            inputShapes: inputShapes,
            outputShapes: outputShapes
        }, kwargs);
        for (var i = 0; i < outputTensors.length; i++) {
            outputTensors[i].sourceLayer = this;
            outputTensors[i].nodeIndex = this.inboundNodes.length - 1;
            outputTensors[i].tensorIndex = i;
        }
    };
    Layer.prototype.getConfig = function () {
        var config = { name: this.name, trainable: this.trainable };
        if (this.batchInputShape != null) {
            config['batchInputShape'] = this.batchInputShape;
        }
        if (this.dtype != null) {
            config['dtype'] = this.dtype;
        }
        return config;
    };
    Layer.fromConfig = function (cls, config) {
        return new cls(config);
    };
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', 'subheading': 'Classes' })
    ], Layer.prototype, "apply", null);
    Layer = __decorate([
        tfjs_core_1.doc({ heading: 'Layers', subheading: 'Classes', namespace: 'layers' })
    ], Layer);
    return Layer;
}(types_1.Serializable));
exports.Layer = Layer;
function collectInputShape(inputTensors) {
    inputTensors =
        generic_utils.toList(inputTensors);
    var shapes = [];
    for (var _i = 0, inputTensors_1 = inputTensors; _i < inputTensors_1.length; _i++) {
        var x = inputTensors_1[_i];
        shapes.push(K.intShape(x));
    }
    return generic_utils.singletonOrArray(shapes);
}
function guessOutputDType(inputTensors) {
    return types_1.DType.float32;
}
var InputLayer = (function (_super) {
    __extends(InputLayer, _super);
    function InputLayer(config) {
        var _this = _super.call(this, {
            dtype: config.dtype,
            name: config.name != null ? config.name : K.getUid('input').toString()
        }) || this;
        if (config.batchSize == null) {
            config.batchSize = null;
        }
        if (config.sparse == null) {
            config.sparse = false;
        }
        _this.trainable = false;
        _this.built = true;
        _this.sparse = config.sparse;
        if (config.inputShape != null && config.batchInputShape != null) {
            throw new errors_1.ValueError('Only provide the inputShape OR ' +
                'batchInputShape argument to inputLayer, not both at the same time.');
        }
        var batchInputShape = config.batchInputShape;
        if (batchInputShape == null) {
            if (config.inputShape == null) {
                throw new errors_1.ValueError('An InputLayer should be passed either a ' +
                    '`batchInputShape` or an `inputShape`.');
            }
            else {
                batchInputShape = [config.batchSize].concat(config.inputShape);
            }
        }
        else {
            if (config.batchSize != null) {
                throw new errors_1.ValueError('Cannot specify batchSize if batchInputShape is' +
                    'specified when creating an InputLayer.');
            }
        }
        var dtype = config.dtype || K.floatx();
        _this.batchInputShape = batchInputShape;
        _this.dtype = dtype;
        _this.inputSpec = [{ shape: batchInputShape }];
        var inputTensor = new types_1.SymbolicTensor(_this.dtype, _this.batchInputShape, _this, [], {}, _this.name);
        inputTensor.nodeIndex = 0;
        inputTensor.tensorIndex = 0;
        new Node({
            outboundLayer: _this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: [inputTensor],
            outputTensors: [inputTensor],
            inputMasks: [null],
            outputMasks: [null],
            inputShapes: [batchInputShape],
            outputShapes: [batchInputShape]
        });
        return _this;
    }
    InputLayer.prototype.apply = function (inputs, kwargs) {
        throw new errors_1.ValueError('Cannot pass any input to an ' +
            ("InputLayer's apply() method. InputLayer name: " + this.name));
    };
    InputLayer.prototype.getClassName = function () {
        return 'InputLayer';
    };
    InputLayer.prototype.getConfig = function () {
        return {
            batchInputShape: this.batchInputShape,
            dtype: this.dtype,
            sparse: this.sparse,
            name: this.name
        };
    };
    return InputLayer;
}(Layer));
exports.InputLayer = InputLayer;
generic_utils.ClassNameMap.register('InputLayer', InputLayer);
function Input(config) {
    if (config.batchShape == null && config.shape == null) {
        throw new Error('Please provide to Input either a `shape`' +
            ' or a `batchShape` argument. Note that ' +
            '`shape` does not include the batch ' +
            'dimension.');
    }
    if (config.batchShape != null && config.shape != null) {
        throw new errors_1.ValueError('Please provide either a `shape` or `batchShape` ' +
            'argument to Input, but not both.');
    }
    var batchShape = config.batchShape;
    if (config.shape != null && batchShape == null) {
        batchShape = [null].concat(config.shape);
    }
    var dtype = config.dtype;
    if (dtype == null) {
        dtype = K.floatx();
    }
    var inputLayer = new InputLayer({
        batchInputShape: batchShape,
        name: config.name,
        dtype: dtype,
        sparse: config.sparse
    });
    var outputs = inputLayer.inboundNodes[0].outputTensors;
    return outputs[0];
}
exports.Input = Input;
var Container = (function (_super) {
    __extends(Container, _super);
    function Container(config) {
        var _this = _super.call(this, {}) || this;
        _this.containerNodes = new Set();
        _this.name = config.name;
        if (_this.name == null) {
            var prefix = _this.getClassName().toLowerCase();
            _this.name = K.getUid(prefix);
        }
        _this.supportsMasking = false;
        _this.trainable = true;
        _this.updatable = true;
        if (Array.isArray(config.inputs)) {
            _this.inputs = config.inputs.slice();
        }
        else {
            _this.inputs = [config.inputs];
        }
        if (Array.isArray(config.outputs)) {
            _this.outputs = config.outputs.slice();
        }
        else {
            _this.outputs = [config.outputs];
        }
        if (generic_utils.unique(_this.inputs).length !== _this.inputs.length) {
            throw new errors_1.ValueError('The list of inputs passed to the model is ' +
                'redundant. All inputs should only appear once. Found: ' +
                _this.inputs.map(function (x) { return x.name; }));
        }
        if (generic_utils.unique(_this.outputs).length !== _this.outputs.length) {
            console.warn('The list of outputs passed to the model is redundant. ' +
                'All outputs should only appear once. Found: ' +
                _this.outputs.map(function (x) { return x.name; }));
        }
        _this.inputLayers = [];
        _this.inputLayersNodeIndices = [];
        _this.inputLayersTensorIndices = [];
        _this.outputLayers = [];
        _this.outputLayersNodeIndices = [];
        _this.outputLayersTensorIndices = [];
        _this.layers = [];
        for (var _i = 0, _a = _this.outputs; _i < _a.length; _i++) {
            var x = _a[_i];
            var layer = x.sourceLayer;
            var nodeIndex = x.nodeIndex;
            var tensorIndex = x.tensorIndex;
            _this.outputLayers.push(layer);
            _this.outputLayersNodeIndices.push(nodeIndex);
            _this.outputLayersTensorIndices.push(tensorIndex);
        }
        for (var _b = 0, _c = _this.inputs; _b < _c.length; _b++) {
            var x = _c[_b];
            var layer = x.sourceLayer;
            var nodeIndex = x.nodeIndex;
            var tensorIndex = x.tensorIndex;
            generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');
            generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');
            _this.inputLayers.push(layer);
            _this.inputLayersNodeIndices.push(nodeIndex);
            _this.inputLayersTensorIndices.push(tensorIndex);
        }
        _this.inputNames = [];
        _this.outputNames = [];
        _this.feedInputShapes = [];
        _this.feedInputNames = [];
        _this.feedOutputNames = [];
        for (var i = 0; i < _this.inputLayers.length; i++) {
            var layer = _this.inputLayers[i];
            if (!(layer instanceof InputLayer)) {
                throw new TypeError('Input layers to a Model must be InputLayer objects. ' +
                    ("Received inputs: " + config.inputs + ". ") +
                    ("Input " + i + " (0-based) originates ") +
                    ("from layer type " + layer.getClassName() + "."));
            }
            _this.inputNames.push(layer.name);
            _this.feedInputShapes.push(layer.batchInputShape);
            _this.feedInputNames.push(layer.name);
        }
        for (var _d = 0, _e = _this.outputLayers; _d < _e.length; _d++) {
            var layer = _e[_d];
            _this.outputNames.push(layer.name);
        }
        _this.internalInputShapes = _this.inputs.map(function (x) { return x.shape; });
        _this.internalOutputShapes = _this.outputs.map(function (x) { return x.shape; });
        var nodesDepths = {};
        var nodeIDToNode = {};
        var layersDepths = {};
        var layerIDToLayer = {};
        var layerIndices = {};
        var nodesInDecreasingDepth = [];
        var buildMapOfGraph = function (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex) {
            if (layer == null || nodeIndex == null || tensorIndex == null) {
                layer = tensor.sourceLayer;
                nodeIndex = tensor.nodeIndex;
                tensorIndex = tensor.tensorIndex;
            }
            var node = layer.inboundNodes[nodeIndex];
            if (nodesInProgress.indexOf(node) !== -1) {
                throw new errors_1.RuntimeError("The tensor " + tensor.name + " at layer \"" + layer.name + "\" " +
                    'is part of a cycle.');
            }
            if (finishedNodes.indexOf(node) !== -1) {
                return;
            }
            _this.containerNodes.add(Container.nodeKey(layer, nodeIndex));
            if (!(layer.id in layerIndices)) {
                layerIndices[layer.id] = Object.keys(layerIndices).length;
            }
            if (nodesInProgress.indexOf(node) === -1) {
                nodesInProgress.push(node);
            }
            var numInboundLayers = node.inboundLayers.length;
            for (var i = 0; i < numInboundLayers; i++) {
                var x = node.inputTensors[i];
                var layer_1 = node.inboundLayers[i];
                var nodeIndex_1 = node.nodeIndices[i];
                var tensorIndex_1 = node.tensorIndices[i];
                buildMapOfGraph(x, finishedNodes, nodesInProgress, layer_1, nodeIndex_1, tensorIndex_1);
            }
            finishedNodes.push(node);
            while (nodesInProgress.indexOf(node) >= 0) {
                nodesInProgress.splice(nodesInProgress.indexOf(node), 1);
            }
            nodesInDecreasingDepth.push(node);
        };
        var finishedNodes = [];
        var nodesInProgress = [];
        for (var _f = 0, _g = _this.outputs; _f < _g.length; _f++) {
            var x = _g[_f];
            buildMapOfGraph(x, finishedNodes, nodesInProgress);
        }
        var reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();
        for (var _h = 0, reversedNodesInDecreasingDepth_1 = reversedNodesInDecreasingDepth; _h < reversedNodesInDecreasingDepth_1.length; _h++) {
            var node = reversedNodesInDecreasingDepth_1[_h];
            nodeIDToNode[node.id] = node;
            if (!(node.id in nodesDepths)) {
                nodesDepths[node.id] = 0;
            }
            var depth = nodesDepths[node.id];
            var previousDepth = (layersDepths[node.outboundLayer.id] == null ?
                0 :
                layersDepths[node.outboundLayer.id]);
            depth = Math.max(depth, previousDepth);
            layersDepths[node.outboundLayer.id] = depth;
            layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;
            nodesDepths[node.id] = depth;
            for (var i = 0; i < node.inboundLayers.length; i++) {
                var inboundLayer = node.inboundLayers[i];
                var nodeIndex = node.nodeIndices[i];
                var inboundNode = inboundLayer.inboundNodes[nodeIndex];
                var previousDepth_1 = (nodesDepths[inboundNode.id] == null ? 0 :
                    nodesDepths[inboundNode.id]);
                nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth_1);
                nodeIDToNode[inboundNode.id] = inboundNode;
            }
        }
        var nodesByDepth = {};
        for (var nodeID in nodesDepths) {
            var depth = nodesDepths[nodeID];
            if (!(depth in nodesByDepth)) {
                nodesByDepth[depth] = [];
            }
            nodesByDepth[depth].push(nodeIDToNode[nodeID]);
        }
        var layersByDepth = {};
        for (var layerID in layersDepths) {
            var depth = layersDepths[layerID];
            if (!(depth in layersByDepth)) {
                layersByDepth[depth] = [];
            }
            layersByDepth[depth].push(layerIDToLayer[layerID]);
        }
        var depthKeys = Object.keys(layersByDepth)
            .map(function (x) { return parseInt(x, 10); })
            .sort(generic_utils.reverseNumberCompare);
        _this.layers = [];
        for (var _j = 0, depthKeys_1 = depthKeys; _j < depthKeys_1.length; _j++) {
            var depth = depthKeys_1[_j];
            var layersForDepth = layersByDepth[depth];
            layersForDepth.sort(function (a, b) {
                var aIndex = layerIndices[a.id];
                var bIndex = layerIndices[b.id];
                if (aIndex < bIndex) {
                    return -1;
                }
                if (aIndex > bIndex) {
                    return 1;
                }
                return 0;
            });
            for (var _k = 0, layersForDepth_1 = layersForDepth; _k < layersForDepth_1.length; _k++) {
                var layer = layersForDepth_1[_k];
                _this.layers.push(layer);
            }
        }
        _this.layersByDepth = layersByDepth;
        depthKeys = Object.keys(nodesByDepth)
            .map(function (x) { return parseInt(x, 10); })
            .sort(generic_utils.reverseNumberCompare);
        var computableTensors = _this.inputs.slice();
        var layersWithCompleteInput = [];
        for (var _l = 0, depthKeys_2 = depthKeys; _l < depthKeys_2.length; _l++) {
            var depth = depthKeys_2[_l];
            for (var _m = 0, _o = nodesByDepth[depth]; _m < _o.length; _m++) {
                var node = _o[_m];
                var layer = node.outboundLayer;
                if (layer != null) {
                    for (var _p = 0, _q = node.inputTensors; _p < _q.length; _p++) {
                        var x = _q[_p];
                        if (computableTensors.indexOf(x) === -1) {
                            throw new errors_1.RuntimeError("Graph disconnected: cannot obtain value for tensor " + x +
                                (" at layer \"" + layer.name + "\". ") +
                                'The following previous layers were accessed without ' +
                                ("issue: " + layersWithCompleteInput));
                        }
                    }
                    for (var _r = 0, _s = node.outputTensors; _r < _s.length; _r++) {
                        var x = _s[_r];
                        computableTensors.push(x);
                    }
                    layersWithCompleteInput.push(layer.name);
                }
            }
        }
        _this.nodesByDepth = nodesByDepth;
        var allNames = _this.layers.map(function (x) { return x.name; });
        var _loop_1 = function (name_1) {
            var numOccurrences = allNames.filter(function (x) { return x === name_1; }).length;
            if (numOccurrences !== 1) {
                throw new errors_1.RuntimeError("The name \"" + name_1 + "\" is used " + numOccurrences + " times " +
                    'in the model. All layer names should be unique. Layer names: ' +
                    JSON.stringify(allNames));
            }
        };
        for (var _t = 0, allNames_1 = allNames; _t < allNames_1.length; _t++) {
            var name_1 = allNames_1[_t];
            _loop_1(name_1);
        }
        _this.outboundNodes = [];
        _this.inboundNodes = [];
        new Node({
            outboundLayer: _this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: _this.inputs,
            outputTensors: _this.outputs,
            inputMasks: _this.inputs.map(function (x) { return null; }),
            outputMasks: _this.outputs.map(function (x) { return null; }),
            inputShapes: _this.inputs.map(function (x) { return x.shape; }),
            outputShapes: _this.outputs.map(function (x) { return x.shape; })
        });
        _this.built = true;
        return _this;
    }
    Object.defineProperty(Container.prototype, "trainableWeights", {
        get: function () {
            if (this._trainableWeights.length > 0) {
                throw new errors_1.ValueError('Container instance unexpectedly contains _trainableWeights.' +
                    'The trainable weights of a Container are a union of the ' +
                    'trainable weights of its consituent Layers. Its own ' +
                    '_trainableWeights must remain an empty Array.');
            }
            if (!this.trainable) {
                return [];
            }
            var weights = [];
            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                weights = weights.concat(layer.trainableWeights);
            }
            return weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "nonTrainableWeights", {
        get: function () {
            var weights = [];
            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                weights.push.apply(weights, layer.nonTrainableWeights);
            }
            if (!this.trainable) {
                var trainableWeights = [];
                for (var _b = 0, _c = this.layers; _b < _c.length; _b++) {
                    var layer = _c[_b];
                    trainableWeights.push.apply(trainableWeights, layer.trainableWeights);
                }
                return trainableWeights.concat(weights);
            }
            return weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "weights", {
        get: function () {
            return this.trainableWeights.concat(this.nonTrainableWeights);
        },
        enumerable: true,
        configurable: true
    });
    Container.prototype.loadWeights = function (weightsJSON, skipMismatch, isNamedTensorMap) {
        if (skipMismatch === void 0) { skipMismatch = false; }
        if (isNamedTensorMap === void 0) { isNamedTensorMap = false; }
        if (isNamedTensorMap) {
            loadWeightsFromNamedTensorMap(weightsJSON, this.layers);
        }
        else {
            loadWeightsFromJson(weightsJSON, this.layers, skipMismatch);
        }
    };
    Container.prototype.updatedConfig = function () {
        var theConfig = this.getConfig();
        var modelConfig = {
            className: this.getClassName(),
            config: theConfig,
            kerasVersion: 'tfjs-layers pre-release',
            backend: 'TensorFlow.js'
        };
        return modelConfig;
    };
    Container.prototype.toJSON = function (unused) {
        var modelConfig = this.updatedConfig();
        return JSON.stringify(serialization_utils_1.convertTsToPythonic(modelConfig));
    };
    Container.prototype.call = function (inputs, kwargs) {
        inputs = generic_utils.toList(inputs);
        var masks;
        if ('mask' in kwargs) {
            masks = generic_utils.toList(kwargs['mask']);
        }
        else {
            masks = generic_utils.pyListRepeat(null, inputs.length);
        }
        return this.runInternalGraph(inputs, masks)[0];
    };
    Container.prototype.computeMask = function (inputs, mask) {
        inputs = generic_utils.toList(inputs);
        var masks;
        if (mask == null) {
            masks = generic_utils.pyListRepeat(null, inputs.length);
        }
        else {
            masks = generic_utils.toList(mask);
        }
        return this.runInternalGraph(inputs, masks)[1];
    };
    Container.prototype.computeOutputShape = function (inputShape) {
        var inputShapes = generic_utils.normalizeShapeList(inputShape);
        if (inputShapes.length !== this.inputLayers.length) {
            throw new errors_1.ValueError("Invalid inputShape argument " + inputShape + ": " +
                ("model has " + this.inputLayers.length + " tensor inputs."));
        }
        var layersToOutputShapes = {};
        for (var i = 0; i < inputShapes.length; i++) {
            var layer = this.inputLayers[i];
            var inputShape_1 = inputShapes[i];
            var shapeKey = layer.name + '_0_0';
            layersToOutputShapes[shapeKey] = inputShape_1;
        }
        var depthKeys = Object.keys(this.nodesByDepth)
            .map(function (x) { return parseInt(x, 10); })
            .sort(generic_utils.reverseNumberCompare);
        if (depthKeys.length > 1) {
            for (var _i = 0, depthKeys_3 = depthKeys; _i < depthKeys_3.length; _i++) {
                var depth = depthKeys_3[_i];
                var nodes = this.nodesByDepth[depth];
                for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {
                    var node = nodes_1[_a];
                    var layer = node.outboundLayer;
                    if (this.inputLayers.map(function (x) { return x.id; }).indexOf(layer.id) !== -1) {
                        continue;
                    }
                    var inputShapes_1 = [];
                    for (var j = 0; j < node.inboundLayers.length; j++) {
                        var inboundLayer = node.inboundLayers[j];
                        var nodeIndex_2 = node.nodeIndices[j];
                        var tensorIndex = node.tensorIndices[j];
                        var shapeKey = inboundLayer.name + "_" + nodeIndex_2 + "_" + tensorIndex;
                        var inputShape_2 = layersToOutputShapes[shapeKey];
                        inputShapes_1.push(inputShape_2);
                    }
                    var outputShape = layer.computeOutputShape(generic_utils.singletonOrArray(inputShapes_1));
                    var outputShapes_1 = generic_utils.normalizeShapeList(outputShape);
                    var nodeIndex = layer.inboundNodes.indexOf(node);
                    for (var j = 0; j < outputShapes_1.length; j++) {
                        var shapeKey = layer.name + "_" + nodeIndex + "_" + j;
                        layersToOutputShapes[shapeKey] = outputShapes_1[j];
                    }
                }
            }
        }
        var outputShapes = [];
        var outputShapeKeys = [];
        for (var i = 0; i < this.outputLayers.length; i++) {
            var layer = this.outputLayers[i];
            var nodeIndex = this.outputLayersNodeIndices[i];
            var tensorIndex = this.outputLayersTensorIndices[i];
            var shapeKey = layer.name + "_" + nodeIndex + "_" + tensorIndex;
            outputShapeKeys.push(shapeKey);
        }
        for (var i = 0; i < outputShapeKeys.length; i++) {
            var key = outputShapeKeys[i];
            generic_utils.assert(key in layersToOutputShapes);
            outputShapes.push(layersToOutputShapes[key]);
        }
        return generic_utils.singletonOrArray(outputShapes);
    };
    Container.prototype.runInternalGraph = function (inputs, masks) {
        if (masks == null) {
            masks = generic_utils.pyListRepeat(null, inputs.length);
        }
        var tensorMap = {};
        for (var i = 0; i < this.inputs.length; ++i) {
            var x = this.inputs[i];
            var y = inputs[i];
            var mask = masks[i];
            tensorMap[x.id] = [y, mask];
        }
        var depthKeys = Object.keys(this.nodesByDepth)
            .map(function (x) { return parseInt(x, 10); })
            .sort(generic_utils.reverseNumberCompare);
        for (var _i = 0, depthKeys_4 = depthKeys; _i < depthKeys_4.length; _i++) {
            var depth = depthKeys_4[_i];
            var nodes = this.nodesByDepth[depth];
            for (var _a = 0, nodes_2 = nodes; _a < nodes_2.length; _a++) {
                var node = nodes_2[_a];
                var layer = node.outboundLayer;
                var referenceInputTensors = node.inputTensors;
                var referenceOutputTensors = node.outputTensors;
                var computedData = new Array();
                for (var _b = 0, referenceInputTensors_1 = referenceInputTensors; _b < referenceInputTensors_1.length; _b++) {
                    var x = referenceInputTensors_1[_b];
                    if (x.id in tensorMap) {
                        computedData.push(tensorMap[x.id]);
                    }
                }
                if (computedData.length === referenceInputTensors.length) {
                    var kwargs = {};
                    var computedTensors = void 0;
                    var computedMasks = void 0;
                    var outputTensors_1 = void 0;
                    var outputMasks_1 = void 0;
                    if (node.callArgs != null) {
                        kwargs = node.callArgs;
                    }
                    if (computedData.length === 1) {
                        var _c = computedData[0], computedTensor = _c[0], computedMask = _c[1];
                        if (kwargs.mask == null) {
                            kwargs['mask'] = computedMask;
                        }
                        outputTensors_1 =
                            generic_utils.toList(layer.call(computedTensor, kwargs));
                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensor, computedMask));
                        computedTensors = [computedTensor];
                        computedMasks = [computedMask];
                    }
                    else {
                        computedTensors = computedData.map(function (x) { return x[0]; });
                        computedMasks = computedData.map(function (x) { return x[1]; });
                        if (kwargs.mask == null) {
                            kwargs['mask'] = computedMasks;
                        }
                        outputTensors_1 =
                            generic_utils.toList(layer.call(computedTensors, kwargs));
                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensors, computedMasks));
                    }
                    if (layer.activityRegularizer) {
                        throw new errors_1.NotImplementedError('Model invocation with concrete Tensor value(s) in the ' +
                            'presence of activity regularizer(s) is not supported yet.');
                    }
                    for (var i = 0; i < referenceOutputTensors.length; ++i) {
                        var x = referenceOutputTensors[i];
                        var y = outputTensors_1[i];
                        var mask = outputMasks_1[i];
                        tensorMap[x.id] = [y, mask];
                    }
                }
            }
        }
        var outputTensors = [];
        var outputMasks = [];
        var outputShapes = [];
        for (var _d = 0, _e = this.outputs; _d < _e.length; _d++) {
            var x = _e[_d];
            generic_utils.assert(x.id in tensorMap, "Could not compute output " + x.name + " : " + x.id);
            var _f = tensorMap[x.id], tensor = _f[0], mask = _f[1];
            outputShapes.push(tensor.shape);
            outputTensors.push(tensor);
            outputMasks.push(mask);
        }
        return [outputTensors, outputMasks, outputShapes];
    };
    Container.prototype.buildNodeConversionMap = function (layers) {
        var nodeConversionMap = {};
        var keptNodes;
        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
            var layer = _a[_i];
            keptNodes = layer instanceof Container ? 1 : 0;
            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {
                var nodeKey = Container.nodeKey(layer, originalNodeIndex);
                if (nodeKey in this.containerNodes) {
                    nodeConversionMap[nodeKey] = keptNodes;
                    keptNodes += 1;
                }
            }
        }
        return nodeConversionMap;
    };
    Container.prototype.getLayer = function (name, index) {
        if (index != null) {
            if (this.layers.length <= index) {
                throw new errors_1.ValueError("Was asked to retrieve layer at index " + index + ", but model only " +
                    ("has " + this.layers.length + " layer(s)."));
            }
            else {
                return this.layers[index];
            }
        }
        else {
            if (name == null) {
                throw new errors_1.ValueError('Provide either a layer name or layer index');
            }
        }
        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
            var layer = _a[_i];
            if (layer.name === name) {
                return layer;
            }
        }
        throw new errors_1.ValueError("No such layer: " + name);
    };
    Container.prototype.calculateLosses = function () {
        var _this = this;
        return tfjs_core_1.tidy(function () {
            var losses = [];
            for (var _i = 0, _a = _this.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                for (var nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {
                    var nodeKey = Container.nodeKey(layer, nodeIndex);
                    if (_this.containerNodes.has(nodeKey)) {
                        losses.push.apply(losses, layer.calculateLosses());
                    }
                }
            }
            return losses;
        });
    };
    Container.prototype.getConfig = function () {
        var config = { name: this.name };
        var nodeConversionMap = this.buildNodeConversionMap(this.layers);
        var layerConfigs = [];
        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
            var layer = _a[_i];
            var layerClassName = layer.getClassName();
            var layerConfig = layer.getConfig();
            var filteredInboundNodes = [];
            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {
                var node = layer.inboundNodes[originalNodeIndex];
                var nodeKey = Container.nodeKey(layer, originalNodeIndex);
                var kwargs = {};
                if (this.containerNodes.has(nodeKey)) {
                    if (node.callArgs) {
                        var testString = JSON.stringify(node.callArgs);
                        if (testString.indexOf('undefined') === -1) {
                            kwargs = node.callArgs;
                        }
                        else {
                            console.warn("Layer " + layer.name + " was passed " +
                                "non-serializable keyword arguments: " +
                                (node.callArgs + ". They will not be included ") +
                                "in the serialized model (and thus will be " +
                                "missing at deserialization time).");
                            kwargs = {};
                        }
                    }
                    if (node.inboundLayers.length > 0) {
                        var nodeData = [];
                        for (var i = 0; i < node.inboundLayers.length; i++) {
                            var inboundLayer = node.inboundLayers[i];
                            var nodeIndex = node.nodeIndices[i];
                            var tensorIndex = node.tensorIndices[i];
                            var nodeKey_1 = Container.nodeKey(inboundLayer, nodeIndex);
                            var newNodeIndex = nodeConversionMap[nodeKey_1];
                            if (newNodeIndex === null || newNodeIndex === undefined) {
                                newNodeIndex = 0;
                            }
                            nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);
                        }
                        filteredInboundNodes.push(nodeData);
                    }
                }
            }
            layerConfigs.push({
                name: layer.name,
                className: layerClassName,
                config: layerConfig,
                inboundNodes: filteredInboundNodes
            });
        }
        config['layers'] = layerConfigs;
        var modelInputs = [];
        for (var i = 0; i < this.inputLayers.length; i++) {
            var layer = this.inputLayers[i];
            var nodeIndex = this.inputLayersNodeIndices[i];
            var nodeKey = Container.nodeKey(layer, nodeIndex);
            if (!this.containerNodes.has(nodeKey)) {
                continue;
            }
            var newNodeIndex = nodeConversionMap[nodeKey];
            if (newNodeIndex === null || newNodeIndex === undefined) {
                newNodeIndex = 0;
            }
            var tensorIndex = this.inputLayersTensorIndices[i];
            modelInputs.push([layer.name, newNodeIndex, tensorIndex]);
        }
        config['inputLayers'] = modelInputs;
        var modelOutputs = [];
        for (var i = 0; i < this.outputLayers.length; i++) {
            var layer = this.outputLayers[i];
            var nodeIndex = this.outputLayersNodeIndices[i];
            var nodeKey = Container.nodeKey(layer, nodeIndex);
            if (!this.containerNodes.has(nodeKey)) {
                continue;
            }
            var newNodeIndex = nodeConversionMap[nodeKey];
            if (newNodeIndex === null || newNodeIndex === undefined) {
                newNodeIndex = 0;
            }
            var tensorIndex = this.outputLayersTensorIndices[i];
            modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);
        }
        config['outputLayers'] = modelOutputs;
        return config;
    };
    Container.fromConfig = function (cls, config) {
        var createdLayers = {};
        var unprocessedNodes = {};
        function addUnprocessedNode(layer, nodeData) {
            if (!(layer.name in unprocessedNodes)) {
                unprocessedNodes[layer.name] = [nodeData];
            }
            else {
                unprocessedNodes[layer.name].push(nodeData);
            }
        }
        function processNode(layer, nodeData) {
            var inputTensors = [];
            var kwargs;
            for (var _i = 0, nodeData_1 = nodeData; _i < nodeData_1.length; _i++) {
                var inputData = nodeData_1[_i];
                var inboundLayerName = inputData[0];
                var inboundNodeIndex = inputData[1];
                var inboundTensorIndex = inputData[2];
                if (inputData.length === 3) {
                    kwargs = {};
                }
                else if (inputData.length === 4) {
                    kwargs = inputData[3];
                }
                else {
                    throw new errors_1.ValueError("Improperly formatted model config for layer " + JSON.stringify(layer) + ": " + JSON.stringify(inputData));
                }
                if (!(inboundLayerName in createdLayers)) {
                    addUnprocessedNode(layer, nodeData);
                    return;
                }
                var inboundLayer = createdLayers[inboundLayerName];
                if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {
                    addUnprocessedNode(layer, nodeData);
                    return;
                }
                var inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];
                inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);
            }
            if (inputTensors.length > 0) {
                layer.apply(generic_utils.singletonOrArray(inputTensors), kwargs);
            }
        }
        function processLayer(layerData) {
            var layerName = layerData.name;
            var layer = serialization_1.deserialize(layerData, config.customObjects != null ?
                config.customObjects :
                {});
            createdLayers[layerName] = layer;
            var inboundNodesData = layerData.inboundNodes;
            for (var _i = 0, inboundNodesData_1 = inboundNodesData; _i < inboundNodesData_1.length; _i++) {
                var nodeData = inboundNodesData_1[_i];
                if (!(nodeData instanceof Array)) {
                    throw new errors_1.ValueError("Corrupted configuration, expected array for nodeData: " + nodeData);
                }
                addUnprocessedNode(layer, nodeData);
            }
        }
        var name = config.name;
        var layersFromConfig = config.layers;
        for (var _i = 0, layersFromConfig_1 = layersFromConfig; _i < layersFromConfig_1.length; _i++) {
            var layerData = layersFromConfig_1[_i];
            processLayer(layerData);
        }
        while (!generic_utils.isObjectEmpty(unprocessedNodes)) {
            for (var _a = 0, layersFromConfig_2 = layersFromConfig; _a < layersFromConfig_2.length; _a++) {
                var layerData = layersFromConfig_2[_a];
                var layer = createdLayers[layerData.name];
                if (layer.name in unprocessedNodes) {
                    for (var _b = 0, _c = unprocessedNodes[layer.name]; _b < _c.length; _b++) {
                        var nodeData = _c[_b];
                        processNode(layer, nodeData);
                    }
                    delete unprocessedNodes[layer.name];
                }
            }
        }
        var inputTensors = [];
        var outputTensors = [];
        var inputLayersFromConfig = config.inputLayers;
        for (var _d = 0, inputLayersFromConfig_1 = inputLayersFromConfig; _d < inputLayersFromConfig_1.length; _d++) {
            var layerData = inputLayersFromConfig_1[_d];
            var layerName = layerData[0];
            var nodeIndex = layerData[1];
            var tensorIndex = layerData[2];
            generic_utils.assert(layerName in createdLayers);
            var layer = createdLayers[layerName];
            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;
            inputTensors.push(layerOutputTensors[tensorIndex]);
        }
        var outputLayersFromConfig = config.outputLayers;
        for (var _e = 0, outputLayersFromConfig_1 = outputLayersFromConfig; _e < outputLayersFromConfig_1.length; _e++) {
            var layerData = outputLayersFromConfig_1[_e];
            var layerName = layerData[0];
            var nodeIndex = layerData[1];
            var tensorIndex = layerData[2];
            generic_utils.assert(layerName in createdLayers);
            var layer = createdLayers[layerName];
            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;
            outputTensors.push(layerOutputTensors[tensorIndex]);
        }
        return new cls({ inputs: inputTensors, outputs: outputTensors, name: name });
    };
    Object.defineProperty(Container.prototype, "stateful", {
        get: function () {
            if (this._stateful) {
                throw new errors_1.ValueError('Container instance unexpectedly has _stateful = true. The ' +
                    'statefulness of a Container is determined by the Layers it ' +
                    'contains. Its _stateful property must remain the default false.');
            }
            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                if (layer.stateful) {
                    return true;
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Classes',
            namespace: 'layers',
            subclasses: ['Model']
        })
    ], Container.prototype, "getLayer", null);
    return Container;
}(Layer));
exports.Container = Container;
function getSourceInputs(tensor, layer, nodeIndex) {
    if (layer == null || (nodeIndex != null && nodeIndex > 0)) {
        layer = tensor.sourceLayer;
        nodeIndex = tensor.nodeIndex;
    }
    if (layer.inboundNodes.length === 0) {
        return [tensor];
    }
    else {
        var node = layer.inboundNodes[nodeIndex];
        if (node.inboundLayers.length === 0) {
            return node.inputTensors;
        }
        else {
            var sourceTensors = [];
            for (var i = 0; i < node.inboundLayers.length; i++) {
                var x = node.inputTensors[i];
                var layer_2 = node.inboundLayers[i];
                var nodeIndex_3 = node.nodeIndices[i];
                var previousSources = getSourceInputs(x, layer_2, nodeIndex_3);
                for (var _i = 0, previousSources_1 = previousSources; _i < previousSources_1.length; _i++) {
                    var x_1 = previousSources_1[_i];
                    if (sourceTensors.indexOf(x_1) === -1) {
                        sourceTensors.push(x_1);
                    }
                }
            }
            return sourceTensors;
        }
    }
}
exports.getSourceInputs = getSourceInputs;
function loadTensor(dtype, shape, value) {
    var dataType = generic_utils.stringToDType(dtype);
    return tfjs_core_1.Tensor.make(shape, { values: shape.length === 0 ? value : tfjs_core_1.util.flatten(value) }, dataType);
}
function preprocessWeightsForLoading(layer, weights, originalKerasVersion, originalBackend) {
    if (!originalKerasVersion.startsWith('2.')) {
        throw new errors_1.ValueError('Unsupported Keras version in weights being loaded: ' +
            originalKerasVersion);
    }
    return weights;
}
function loadWeightsFromNamedTensorMap(weights, layers) {
    var nameToWeight = {};
    var totalWeightsCount = 0;
    for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {
        var layer = layers_1[_i];
        for (var _a = 0, _b = layer.weights; _a < _b.length; _a++) {
            var weight = _b[_a];
            if (nameToWeight[weight.name] != null) {
                throw new errors_1.ValueError("Duplicate weight name: " + weight.name);
            }
            nameToWeight[weight.name] = weight;
            totalWeightsCount++;
        }
    }
    var weightValueTuples = [];
    for (var name_2 in weights) {
        weightValueTuples.push([nameToWeight[name_2], weights[name_2]]);
        delete nameToWeight[name_2];
    }
    var unsetNames = [];
    for (var name_3 in nameToWeight) {
        unsetNames.push(name_3);
    }
    if (unsetNames.length > 0) {
        throw new errors_1.ValueError(unsetNames.length + " of " + totalWeightsCount + " weights are not set: " +
            ("" + unsetNames));
    }
    K.batchSetValue(weightValueTuples);
}
exports.loadWeightsFromNamedTensorMap = loadWeightsFromNamedTensorMap;
function loadWeightsFromJson(weightsJSON, layers, skipMismatch) {
    if (skipMismatch === void 0) { skipMismatch = false; }
    var originalKerasVersion = weightsJSON['keras_version'];
    var originalBackend = weightsJSON['backend'];
    var layerNames = layers.map(function (layer) { return layer.name; });
    var index = {};
    for (var _i = 0, layers_2 = layers; _i < layers_2.length; _i++) {
        var layer = layers_2[_i];
        if (layer.name != null) {
            if (index[layer.name] == null) {
                index[layer.name] = [];
            }
            index[layer.name].push(layer);
        }
    }
    var nameToWeights = weightsJSON['weights'];
    var weightValueTuples = [];
    for (var k = 0; k < layerNames.length; ++k) {
        var name_4 = layerNames[k];
        var layerWeights = nameToWeights[name_4];
        if (layerWeights == null) {
            layerWeights = [];
        }
        var weightValues = [];
        for (var n = 0; n < layerWeights.length; ++n) {
            var weightEntry = layerWeights[n];
            weightValues.push(new types_1.LayerVariable(loadTensor(weightEntry['dtype'], weightEntry['shape'], weightEntry['value'])));
        }
        for (var _a = 0, _b = index[name_4]; _a < _b.length; _a++) {
            var layer = _b[_a];
            var symbolicWeights = layer.weights;
            weightValues = preprocessWeightsForLoading(layer, weightValues, originalKerasVersion, originalBackend);
            if (weightValues.length !== symbolicWeights.length) {
                if (skipMismatch) {
                    console.warn("Skipping loading of weights of layer " + layer.name + " " +
                        ("due to mismatch in number of weights: (" + weightValues.length + " ") +
                        ("vs " + symbolicWeights.length + ")."));
                }
                else {
                    throw new errors_1.ValueError("Layer #" + k + " (named \"" + layer.name + "\") expects " +
                        (symbolicWeights.length + " weight(s), but the saved weights ") +
                        ("have " + weightValues.length + " element(s)."));
                }
            }
            for (var i = 0; i < weightValues.length; ++i) {
                if (skipMismatch) {
                    if (!tfjs_core_1.util.arraysEqual(symbolicWeights[i].shape, weightValues[i].shape)) {
                        console.warn("Skipping loading of weights for layer " + layer.name + " due " +
                            ("to mismatch in shape (" + symbolicWeights[i].shape + " vs ") +
                            (weightValues[i].shape + ")"));
                        continue;
                    }
                }
                weightValueTuples.push([symbolicWeights[i], weightValues[i].read()]);
            }
        }
    }
    K.batchSetValue(weightValueTuples);
}
exports.loadWeightsFromJson = loadWeightsFromJson;

},{"@tensorflow/tfjs-core":64,"../backend/tfjs_backend":94,"../errors":171,"../layers/serialization":183,"../types":91,"../utils/generic_utils":165,"../utils/serialization_utils":184}],89:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("./backend/tfjs_backend");
var generic_utils = require("./utils/generic_utils");
var Callback = (function () {
    function Callback() {
        this.validationData = null;
        this.model = null;
    }
    Callback.prototype.setParams = function (params) {
        this.params = params;
    };
    Callback.prototype.setModel = function (model) {
        this.model = model;
    };
    Callback.prototype.onEpochBegin = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2];
        }); });
    };
    Callback.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2];
        }); });
    };
    Callback.prototype.onBatchBegin = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2];
        }); });
    };
    Callback.prototype.onBatchEnd = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2];
        }); });
    };
    Callback.prototype.onTrainBegin = function (logs) {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2];
        }); });
    };
    Callback.prototype.onTrainEnd = function (logs) {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2];
        }); });
    };
    return Callback;
}());
exports.Callback = Callback;
var CallbackList = (function () {
    function CallbackList(callbacks, queueLength) {
        if (queueLength === void 0) { queueLength = 10; }
        if (callbacks == null) {
            callbacks = [];
        }
        this.callbacks = callbacks;
        this.queueLength = queueLength;
    }
    CallbackList.prototype.append = function (callback) {
        this.callbacks.push(callback);
    };
    CallbackList.prototype.setParams = function (params) {
        for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {
            var callback = _a[_i];
            callback.setParams(params);
        }
    };
    CallbackList.prototype.setModel = function (model) {
        for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {
            var callback = _a[_i];
            callback.setModel(model);
        }
    };
    CallbackList.prototype.onEpochBegin = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onEpochBegin(epoch, logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    CallbackList.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onEpochEnd(epoch, logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    CallbackList.prototype.onBatchBegin = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onBatchBegin(batch, logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    CallbackList.prototype.onBatchEnd = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onBatchEnd(batch, logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    CallbackList.prototype.onTrainBegin = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onTrainBegin(logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    CallbackList.prototype.onTrainEnd = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onTrainEnd(logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    return CallbackList;
}());
exports.CallbackList = CallbackList;
var BaseLogger = (function (_super) {
    __extends(BaseLogger, _super);
    function BaseLogger() {
        return _super.call(this) || this;
    }
    BaseLogger.prototype.onEpochBegin = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.seen = 0;
                this.totals = {};
                return [2];
            });
        });
    };
    BaseLogger.prototype.onBatchEnd = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var batchSize, _loop_1, this_1, key;
            return __generator(this, function (_a) {
                if (logs == null) {
                    logs = {};
                }
                batchSize = logs['size'] == null ? 0 : logs['size'];
                this.seen += batchSize;
                _loop_1 = function (key) {
                    var value = logs[key];
                    if (typeof value === 'number') {
                        if (!this_1.totals.hasOwnProperty(key)) {
                            this_1.totals[key] = 0;
                        }
                        this_1.totals[key] = this_1.totals[key] + value * batchSize;
                    }
                    else {
                        if (!this_1.totals.hasOwnProperty(key)) {
                            this_1.totals[key] = K.getScalar(0);
                        }
                        tfjs_core_1.tidy(function () {
                            _this.totals[key] =
                                K.scalarPlusArray(_this.totals[key], K.multiply(value, K.getScalar(batchSize)));
                            K.keep(_this.totals[key]);
                        });
                    }
                };
                this_1 = this;
                for (key in logs) {
                    _loop_1(key);
                }
                return [2];
            });
        });
    };
    BaseLogger.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _loop_2, this_2, _i, _a, key;
            return __generator(this, function (_b) {
                if (logs != null) {
                    _loop_2 = function (key) {
                        if (this_2.totals[key] == null) {
                            return "continue";
                        }
                        if (typeof this_2.totals[key] === 'number') {
                            logs[key] = this_2.totals[key] / this_2.seen;
                        }
                        else {
                            tfjs_core_1.tidy(function () {
                                logs[key] =
                                    K.scalarTimesArray(K.divide(K.getScalar(1), K.getScalar(_this.seen)), _this.totals[key]);
                                K.keep(logs[key]);
                            });
                        }
                    };
                    this_2 = this;
                    for (_i = 0, _a = this.params['metrics']; _i < _a.length; _i++) {
                        key = _a[_i];
                        _loop_2(key);
                    }
                }
                return [2];
            });
        });
    };
    return BaseLogger;
}(Callback));
exports.BaseLogger = BaseLogger;
function resolveScalarsInLogs(logs) {
    return __awaiter(this, void 0, void 0, function () {
        var promises, keys, key, value, valueScalar, values, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (logs == null) {
                        return [2];
                    }
                    promises = [];
                    keys = [];
                    for (key in logs) {
                        value = logs[key];
                        if (typeof value !== 'number') {
                            valueScalar = value;
                            promises.push(valueScalar.data());
                            keys.push(key);
                        }
                    }
                    return [4, Promise.all(promises)];
                case 1:
                    values = _a.sent();
                    for (i = 0; i < values.length; ++i) {
                        logs[keys[i]] = values[i][0];
                    }
                    return [2];
            }
        });
    });
}
exports.resolveScalarsInLogs = resolveScalarsInLogs;
function disposeTensorsInLogs(logs) {
    if (logs == null) {
        return;
    }
    for (var key in logs) {
        var value = logs[key];
        if (typeof value !== 'number') {
            value.dispose();
        }
    }
}
exports.disposeTensorsInLogs = disposeTensorsInLogs;
var History = (function (_super) {
    __extends(History, _super);
    function History() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    History.prototype.onTrainBegin = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.epoch = [];
                this.history = {};
                return [2];
            });
        });
    };
    History.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                if (logs == null) {
                    logs = {};
                }
                this.epoch.push(epoch);
                for (key in logs) {
                    if (this.history[key] == null) {
                        this.history[key] = [];
                    }
                    this.history[key].push(logs[key]);
                }
                return [2];
            });
        });
    };
    History.prototype.syncData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var promises, keys, indices, key, valueArray, i, valueScalar, values, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = [];
                        keys = [];
                        indices = [];
                        for (key in this.history) {
                            valueArray = this.history[key];
                            for (i = 0; i < valueArray.length; ++i) {
                                if (typeof valueArray[i] !== 'number') {
                                    valueScalar = valueArray[i];
                                    promises.push(valueScalar.data());
                                    keys.push(key);
                                    indices.push(i);
                                }
                            }
                        }
                        return [4, Promise.all(promises)];
                    case 1:
                        values = _a.sent();
                        for (n = 0; n < values.length; ++n) {
                            this.history[keys[n]][indices[n]].dispose();
                            this.history[keys[n]][indices[n]] = values[n][0];
                        }
                        return [2];
                }
            });
        });
    };
    return History;
}(Callback));
exports.History = History;
var CustomCallback = (function (_super) {
    __extends(CustomCallback, _super);
    function CustomCallback(config) {
        var _this = _super.call(this) || this;
        _this.trainBegin = config.onTrainBegin;
        _this.trainEnd = config.onTrainEnd;
        _this.epochBegin = config.onEpochBegin;
        _this.epochEnd = config.onEpochEnd;
        _this.batchBegin = config.onBatchBegin;
        _this.batchEnd = config.onBatchEnd;
        return _this;
    }
    CustomCallback.prototype.onEpochBegin = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.epochBegin != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.epochBegin(epoch, logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.epochEnd != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.epochEnd(epoch, logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onBatchBegin = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.batchBegin != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.batchBegin(batch, logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onBatchEnd = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.batchEnd != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.batchEnd(batch, logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onTrainBegin = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.trainBegin != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.trainBegin(logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onTrainEnd = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.trainEnd != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.trainEnd(logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    return CustomCallback;
}(Callback));
exports.CustomCallback = CustomCallback;
function standardizeCallbacks(callbacks) {
    if (callbacks == null) {
        return null;
    }
    if (callbacks instanceof Callback) {
        return [callbacks];
    }
    if (Array.isArray(callbacks) && callbacks[0] instanceof Callback) {
        return callbacks;
    }
    var callbackConfigs = generic_utils.toList(callbacks);
    return callbackConfigs.map(function (callbackConfig) { return new CustomCallback(callbackConfig); });
}
exports.standardizeCallbacks = standardizeCallbacks;

},{"@tensorflow/tfjs-core":64,"./backend/tfjs_backend":94,"./utils/generic_utils":165}],168:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var K = require("./backend/tfjs_backend");
var errors_1 = require("./errors");
function meanSquaredError(yTrue, yPred) {
    return K.mean(K.square(K.subtract(yPred, yTrue)), -1);
}
exports.meanSquaredError = meanSquaredError;
function meanAbsoluteError(yTrue, yPred) {
    return K.mean(K.abs(K.subtract(yPred, yTrue)), -1);
}
exports.meanAbsoluteError = meanAbsoluteError;
function meanAbsolutePercentageError(yTrue, yPred) {
    var diff = K.subtract(yTrue, yPred);
    var clippedTrue = K.clip(K.abs(yTrue), K.epsilon(), Number.MAX_VALUE);
    var absResult = K.abs(K.divide(diff, clippedTrue));
    return K.scalarTimesArray(K.getScalar(100.0), K.mean(absResult, -1));
}
exports.meanAbsolutePercentageError = meanAbsolutePercentageError;
function meanSquaredLogarithmicError(yTrue, yPred) {
    var one = K.getScalar(1.0);
    var clippedPred = K.clip(yPred, K.epsilon(), Number.MAX_VALUE);
    var firstLog = K.log(K.scalarPlusArray(one, clippedPred));
    var clippedTrue = K.clip(yTrue, K.epsilon(), Number.MAX_VALUE);
    var secondLog = K.log(K.scalarPlusArray(one, clippedTrue));
    return K.mean(K.square(K.subtract(firstLog, secondLog)), -1);
}
exports.meanSquaredLogarithmicError = meanSquaredLogarithmicError;
function squaredHinge(yTrue, yPred) {
    var zeroTensor = K.getScalar(0.0);
    var one = K.getScalar(1.0);
    var maxResult = K.maximum(zeroTensor, K.subtract(one, K.multiply(yTrue, yPred)));
    return K.mean(K.square(maxResult), -1);
}
exports.squaredHinge = squaredHinge;
function hinge(yTrue, yPred) {
    var zeroTensor = K.getScalar(0.0);
    var one = K.getScalar(1.0);
    var maxResult = K.maximum(zeroTensor, K.subtract(one, K.multiply(yTrue, yPred)));
    return K.mean(maxResult, -1);
}
exports.hinge = hinge;
function categoricalHinge(yTrue, yPred) {
    var zeroTensor = K.getScalar(0.0);
    var one = K.getScalar(1.0);
    var pos = K.sum(K.multiply(yTrue, yPred), -1);
    var neg = K.max(K.multiply(K.subtract(one, yTrue), yPred), -1);
    return K.maximum(zeroTensor, K.scalarPlusArray(one, K.subtract(neg, pos)));
}
exports.categoricalHinge = categoricalHinge;
function logcosh(yTrue, yPred) {
    var log2 = K.getScalar(Math.log(2.0));
    var predictionDiff = K.subtract(yPred, yTrue);
    var logcoshResult = K.subtract(K.add(predictionDiff, K.softplus(K.scalarTimesArray(K.getScalar(-2.0), predictionDiff))), log2);
    return K.mean(logcoshResult, -1);
}
exports.logcosh = logcosh;
function categoricalCrossentropy(yTrue, yPred) {
    return K.categoricalCrossentropy(yTrue, yPred);
}
exports.categoricalCrossentropy = categoricalCrossentropy;
function sparseCategoricalCrossentropy(yTrue, yPred) {
    return K.sparseCategoricalCrossentropy(yTrue, yPred);
}
exports.sparseCategoricalCrossentropy = sparseCategoricalCrossentropy;
function binaryCrossentropy(yTrue, yPred) {
    return K.mean(K.binaryCrossentropy(yTrue, yPred), -1);
}
exports.binaryCrossentropy = binaryCrossentropy;
function kullbackLeiblerDivergence(yTrue, yPred) {
    var clippedTrue = K.clip(yTrue, K.epsilon(), 1);
    var clippedPred = K.clip(yPred, K.epsilon(), 1);
    return K.sum(K.multiply(yTrue, K.log(K.divide(clippedTrue, clippedPred))), -1);
}
exports.kullbackLeiblerDivergence = kullbackLeiblerDivergence;
function poisson(yTrue, yPred) {
    var logPred = K.log(K.scalarPlusArray(K.getScalar(K.epsilon()), yPred));
    return K.mean(K.subtract(yPred, K.multiply(yTrue, logPred)), -1);
}
exports.poisson = poisson;
function cosineProximity(yTrue, yPred) {
    var trueNormalized = K.l2Normalize(yTrue, -1);
    var predNormalized = K.l2Normalize(yPred, -1);
    var trueXPred = K.multiply(trueNormalized, predNormalized);
    return K.neg(K.sum(trueXPred, -1));
}
exports.cosineProximity = cosineProximity;
exports.mse = meanSquaredError;
exports.MSE = meanSquaredError;
exports.mae = meanAbsoluteError;
exports.MAE = meanAbsoluteError;
exports.mape = meanAbsolutePercentageError;
exports.MAPE = meanAbsolutePercentageError;
exports.msle = meanSquaredLogarithmicError;
exports.MSLE = meanSquaredLogarithmicError;
exports.kld = kullbackLeiblerDivergence;
exports.KLD = kullbackLeiblerDivergence;
exports.cosine = cosineProximity;
function get(identifierOrFn) {
    var lossesMap = {
        meanSquaredError: meanSquaredError,
        meanAbsoluteError: meanAbsoluteError,
        meanAbsolutePercentageError: meanAbsolutePercentageError,
        meanSquaredLogarithmicError: meanSquaredLogarithmicError,
        squaredHinge: squaredHinge,
        hinge: hinge,
        categoricalHinge: categoricalHinge,
        logcosh: logcosh,
        categoricalCrossentropy: categoricalCrossentropy,
        sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,
        binaryCrossentropy: binaryCrossentropy,
        kullbackLeiblerDivergence: kullbackLeiblerDivergence,
        poisson: poisson,
        cosineProximity: cosineProximity
    };
    if (typeof identifierOrFn === 'string') {
        if (identifierOrFn in lossesMap) {
            return lossesMap[identifierOrFn];
        }
        throw new errors_1.ValueError("Unknown loss " + identifierOrFn);
    }
    else {
        return identifierOrFn;
    }
}
exports.get = get;

},{"./backend/tfjs_backend":94,"./errors":171}],169:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("./backend/tfjs_backend");
var errors_1 = require("./errors");
var losses_1 = require("./losses");
function binaryAccuracy(yTrue, yPred) {
    var threshold = K.scalarTimesArray(K.getScalar(0.5), tfjs_core_1.onesLike(yPred));
    var yPredThresholded = K.cast(K.greater(yPred, threshold), yTrue.dtype);
    return K.mean(K.equal(yTrue, yPredThresholded), -1);
}
exports.binaryAccuracy = binaryAccuracy;
function categoricalAccuracy(yTrue, yPred) {
    return K.cast(K.equal(K.argmax(yTrue, -1), K.argmax(yPred, -1)), 'float32');
}
exports.categoricalAccuracy = categoricalAccuracy;
function binaryCrossentropy(yTrue, yPred) {
    return K.mean(K.binaryCrossentropy(yTrue, yPred), -1);
}
exports.binaryCrossentropy = binaryCrossentropy;
function sparseCategoricalAccuracy(yTrue, yPred) {
    throw new errors_1.NotImplementedError();
}
exports.sparseCategoricalAccuracy = sparseCategoricalAccuracy;
function topKCategoricalAccuracy(yTrue, yPred) {
    throw new errors_1.NotImplementedError();
}
exports.topKCategoricalAccuracy = topKCategoricalAccuracy;
function sparseTopKCategoricalAccuracy(yTrue, yPred) {
    throw new errors_1.NotImplementedError();
}
exports.sparseTopKCategoricalAccuracy = sparseTopKCategoricalAccuracy;
exports.mse = losses_1.meanSquaredError;
exports.MSE = losses_1.meanSquaredError;
exports.mae = losses_1.meanAbsoluteError;
exports.MAE = losses_1.meanAbsoluteError;
exports.mape = losses_1.meanAbsolutePercentageError;
exports.MAPE = losses_1.meanAbsolutePercentageError;
exports.categoricalCrossentropy = losses_1.categoricalCrossentropy;
exports.cosine = losses_1.cosineProximity;
exports.sparseCategoricalCrossentropy = losses_1.sparseCategoricalCrossentropy;
function get(identifier) {
    var metricsMap = {
        binaryAccuracy: binaryAccuracy,
        categoricalAccuracy: categoricalAccuracy,
        categoricalCrossentropy: exports.categoricalCrossentropy,
        sparseCategoricalCrossentropy: exports.sparseCategoricalCrossentropy,
        mse: exports.mse,
        MSE: exports.MSE,
        mae: exports.mae,
        MAE: exports.MAE,
        mape: exports.mape,
        MAPE: exports.MAPE,
        cosine: exports.cosine,
    };
    if (typeof identifier === 'string' && identifier in metricsMap) {
        return metricsMap[identifier];
    }
    else if (typeof identifier !== 'string' && identifier != null) {
        return identifier;
    }
    else {
        throw new errors_1.ValueError("Unknown metric " + identifier);
    }
}
exports.get = get;

},{"@tensorflow/tfjs-core":64,"./backend/tfjs_backend":94,"./errors":171,"./losses":168}],189:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("./backend/tfjs_backend");
var errors_1 = require("./errors");
function getOptimizer(identifier) {
    var optimizerMap = {
        'Adagrad': function () { return tfjs_core_1.train.adagrad(.01); },
        'Adam': function () { return tfjs_core_1.train.adam(.001, .9, .999, K.epsilon()); },
        'RMSProp': function () { return tfjs_core_1.train.rmsprop(.001, .9, null, K.epsilon()); },
        'SGD': function () { return tfjs_core_1.train.sgd(.01); }
    };
    optimizerMap['adagrad'] = optimizerMap['Adagrad'];
    optimizerMap['adam'] = optimizerMap['Adam'];
    optimizerMap['rmsprop'] = optimizerMap['RMSProp'];
    optimizerMap['sgd'] = optimizerMap['SGD'];
    if (identifier in optimizerMap) {
        return optimizerMap[identifier]();
    }
    throw new errors_1.ValueError("Unknown Optimizer " + identifier);
}
exports.getOptimizer = getOptimizer;

},{"@tensorflow/tfjs-core":64,"./backend/tfjs_backend":94,"./errors":171}],192:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../errors");
var topology_1 = require("./topology");
function assertFeedCompatibility(key, val) {
    if (key.dtype != null && key.dtype !== val.dtype) {
        throw new errors_1.ValueError("The dtype of the feed (" + val.dtype + ") is incompatible with that of " +
            ("the key '" + key.name + "' (" + key.dtype + ")."));
    }
    if (key.shape != null) {
        if (key.shape.length !== val.shape.length) {
            throw new errors_1.ValueError("The rank of feed (" + val.shape.length + ") does not match the rank of " +
                ("the key (" + key.shape.length + ")."));
        }
        for (var i = 0; i < key.shape.length; ++i) {
            if (key.shape[i] != null && key.shape[i] !== val.shape[i]) {
                throw new errors_1.ValueError("The " + i + "-th dimension of the feed (" + val.shape[i] + ") is " +
                    ("incompatible with that of the key (" + key.shape[i] + ")."));
            }
        }
    }
}
var FeedDict = (function () {
    function FeedDict(feeds) {
        this.id2Value = {};
        if (feeds instanceof FeedDict) {
            for (var id in feeds.id2Value) {
                this.id2Value[id] = feeds.id2Value[id];
            }
        }
        else {
            if (feeds == null) {
                return;
            }
            for (var _i = 0, feeds_1 = feeds; _i < feeds_1.length; _i++) {
                var feed = feeds_1[_i];
                this.add(feed.key, feed.value);
            }
        }
    }
    FeedDict.prototype.add = function (key, value) {
        assertFeedCompatibility(key, value);
        if (this.id2Value[key.id] == null) {
            this.id2Value[key.id] = value;
        }
        else {
            throw new errors_1.ValueError("Duplicate key: name=" + key.name + ", id=" + key.id);
        }
        return this;
    };
    FeedDict.prototype.addFeed = function (feed) {
        this.add(feed.key, feed.value);
    };
    FeedDict.prototype.hasKey = function (key) {
        return this.id2Value[key.id] != null;
    };
    FeedDict.prototype.getValue = function (key) {
        if (this.id2Value[key.id] == null) {
            throw new errors_1.ValueError("Nonexistent key: " + JSON.stringify(key));
        }
        else {
            return this.id2Value[key.id];
        }
    };
    return FeedDict;
}());
exports.FeedDict = FeedDict;
function execute(fetches, feedDict, kwargs) {
    var arrayFetches = Array.isArray(fetches);
    var fetchArray = arrayFetches ? fetches : [fetches];
    var outputs = [];
    var internalFeedDict = new FeedDict(feedDict);
    for (var _i = 0, fetchArray_1 = fetchArray; _i < fetchArray_1.length; _i++) {
        var fetch_1 = fetchArray_1[_i];
        outputs.push(executeInternal(fetch_1, internalFeedDict, kwargs));
    }
    return arrayFetches ? outputs : outputs[0];
}
exports.execute = execute;
function executeInternal(fetch, internalFeedDict, kwargs) {
    if (internalFeedDict.hasKey(fetch)) {
        return internalFeedDict.getValue(fetch);
    }
    if (fetch.sourceLayer instanceof topology_1.InputLayer) {
        throw new errors_1.ValueError("Missing a feed value for SymbolicTensor from InputLayer " +
            ("'" + topology_1.InputLayer.name + "'"));
    }
    var inputs = fetch.inputs;
    var inputValues = [];
    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
        var input = inputs_1[_i];
        var inputVal = executeInternal(input, internalFeedDict, kwargs);
        inputValues.push(inputVal);
    }
    var output = fetch.sourceLayer.apply(inputValues, kwargs);
    if (!Array.isArray(output)) {
        output = [output];
    }
    var layerOutputs = getNodeOutputs(fetch);
    var outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];
    for (var i = 0; i < outputSymbolicTensors.length; ++i) {
        internalFeedDict.add(outputSymbolicTensors[i], output[i]);
    }
    return output.length === 1 ? output[0] : output[fetch.outputTensorIndex];
}
function getNodeOutputs(fetch) {
    var layerOutputs;
    if (fetch.sourceLayer.inboundNodes.length === 1) {
        layerOutputs = fetch.sourceLayer.output;
    }
    else {
        var nodeIndex = null;
        for (var i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {
            for (var _i = 0, _a = fetch.sourceLayer.inboundNodes[i]
                .outputTensors; _i < _a.length; _i++) {
                var outputTensor = _a[_i];
                if (outputTensor.id === fetch.id) {
                    nodeIndex = i;
                    break;
                }
            }
        }
        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);
    }
    return layerOutputs;
}

},{"../errors":171,"./topology":172}],95:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfc = require("@tensorflow/tfjs-core");
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("../backend/tfjs_backend");
var callbacks_1 = require("../callbacks");
var errors_1 = require("../errors");
var losses = require("../losses");
var Metrics = require("../metrics");
var optimizers = require("../optimizers");
var generic_utils_1 = require("../utils/generic_utils");
var math_utils_1 = require("../utils/math_utils");
var executor_1 = require("./executor");
var topology_1 = require("./topology");
function isDataTensor(x) {
    return x instanceof tfjs_core_1.Tensor;
}
exports.isDataTensor = isDataTensor;
function isDataArray(x) {
    return Array.isArray(x);
}
exports.isDataArray = isDataArray;
function isDataDict(x) {
    return !isDataTensor(x) && !isDataArray(x);
}
exports.isDataDict = isDataDict;
function standardizeInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {
    if (checkBatchAxis === void 0) { checkBatchAxis = true; }
    if (exceptionPrefix === void 0) { exceptionPrefix = ''; }
    if (names == null || names.length === 0) {
        if (data != null) {
            var gotUnexpectedData = false;
            if (isDataArray(data) && data.length > 0) {
                gotUnexpectedData = true;
            }
            else if (isDataDict(data)) {
                for (var key in data) {
                    if (data.hasOwnProperty(key)) {
                        gotUnexpectedData = true;
                        break;
                    }
                }
            }
            else {
                gotUnexpectedData = true;
            }
            if (gotUnexpectedData) {
                throw new errors_1.ValueError("Error when checking model " + exceptionPrefix + " expected no data, " +
                    ("but got " + data));
            }
        }
        return [];
    }
    if (data == null) {
        return names.map(function (name) { return null; });
    }
    var arrays;
    if (isDataDict(data)) {
        data = data;
        arrays = [];
        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
            var name_1 = names_1[_i];
            if (data[name_1] == null) {
                throw new errors_1.ValueError("No data provided for \"" + name_1 + "\". Need data for each key in: " +
                    ("" + names));
            }
            arrays.push(data[name_1]);
        }
    }
    else if (isDataArray(data)) {
        data = data;
        if (data.length !== names.length) {
            throw new errors_1.ValueError("Error when checking model " + exceptionPrefix + ": the Array of " +
                "Tensors that you are passing to your model is not the size the " +
                ("model expected. Expected to see " + names.length + " Tensor(s), but ") +
                ("instead got the following list of Tensor(s): " + data));
        }
        arrays = data;
    }
    else {
        data = data;
        if (names.length > 1) {
            throw new errors_1.ValueError("The model " + exceptionPrefix + " expects " + names.length + " Tensor(s), " +
                ("but only received one Tensor. Found: Tensor with shape " + data.shape));
        }
        arrays = [data];
    }
    for (var i = 0; i < names.length; ++i) {
        var array = arrays[i];
        if (array.shape.length === 1) {
            arrays[i] = K.expandDims(array, 1);
        }
    }
    if (shapes != null) {
        for (var i = 0; i < names.length; ++i) {
            if (shapes[i] == null) {
                continue;
            }
            var array = arrays[i];
            if (array.shape.length !== shapes[i].length) {
                throw new errors_1.ValueError("Error when checking " + exceptionPrefix + ": expected " + names[i] + " " +
                    ("to have " + shapes[i].length + " dimension(s). but got array with ") +
                    ("shape " + array.shape));
            }
            for (var j = 0; j < shapes[i].length; ++j) {
                if (j === 0 && !checkBatchAxis) {
                    continue;
                }
                var dim = array.shape[j];
                var refDim = shapes[i][j];
                if (refDim != null && refDim >= 0 && dim !== refDim) {
                    throw new errors_1.ValueError("Error when checking " + exceptionPrefix + ": expected " + names[i] + " " +
                        ("to have shape [" + shapes[i] + "], but got array with shape ") +
                        ("[" + array.shape + "]."));
                }
            }
        }
    }
    return arrays;
}
exports.standardizeInputData = standardizeInputData;
function checkArrayLengths(inputs, targets, weights) {
    var setX = generic_utils_1.unique(inputs.map(function (input) { return input.shape[0]; }));
    setX.sort();
    var setY = generic_utils_1.unique(targets.map(function (target) { return target.shape[0]; }));
    setY.sort();
    if (setX.length > 1) {
        throw new errors_1.ValueError("All input Tensors (x) should have the same number of samples. " +
            "Got array shapes: " +
            ("" + JSON.stringify(inputs.map(function (input) { return input.shape; }))));
    }
    if (setY.length > 1) {
        throw new errors_1.ValueError("All target Tensors (y) should have the same number of samples. " +
            "Got array shapes: " +
            ("" + JSON.stringify(targets.map(function (target) { return target.shape; }))));
    }
    if (setX.length > 0 && setY.length > 0 && !tfjs_core_1.util.arraysEqual(setX, setY)) {
        throw new errors_1.ValueError("Input Tensors should have the same number of samples as target " +
            ("Tensors. Found " + setX[0] + " input sample(s) and " + setY[0] + " target ") +
            "sample(s).");
    }
}
exports.checkArrayLengths = checkArrayLengths;
function checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {
    var keyLosses = [
        losses.meanSquaredError, losses.binaryCrossentropy,
        losses.categoricalCrossentropy
    ];
    for (var i = 0; i < targets.length; ++i) {
        var y = targets[i];
        var loss = lossFns[i];
        var shape = outputShapes[i];
        if (loss == null) {
            continue;
        }
        if (loss === losses.categoricalCrossentropy) {
            if (y.shape[y.shape.length - 1] === 1) {
                throw new errors_1.ValueError("You are passing a target array of shape " + y.shape + " while using " +
                    "a loss 'categorical_crossentropy'. 'categorical_crossentropy'" +
                    "expects targets to be binary matrices (1s and 0s) of shape " +
                    "[samples, classes].");
            }
        }
        if (keyLosses.indexOf(loss) !== -1) {
            var slicedYShape = y.shape.slice(1);
            var slicedShape = shape.slice(1);
            for (var j = 0; j < slicedYShape.length; ++j) {
                var targetDim = slicedYShape[j];
                var outDim = slicedShape[j];
                if (outDim != null && targetDim !== outDim) {
                    throw new errors_1.ValueError("A target Tensor with shape " + y.shape + " was passed for an " +
                        ("output of shape " + shape + ", while using a loss function that ") +
                        "expects targets to have the same shape as the output.");
                }
            }
        }
    }
}
function makeBatches(size, batchSize) {
    var output = [];
    var batchStart = 0;
    var batchEnd = null;
    while (batchStart < size) {
        batchEnd = batchStart + batchSize;
        if (batchEnd >= size) {
            batchEnd = size;
        }
        output.push([batchStart, batchEnd]);
        batchStart = batchEnd;
    }
    return output;
}
exports.makeBatches = makeBatches;
function sliceArrays(arrays, start, stop) {
    if (arrays == null) {
        return [null];
    }
    else if (Array.isArray(arrays)) {
        return arrays.map(function (array) { return K.sliceAlongFirstAxis(array, start, stop - start); });
    }
    else {
        return K.sliceAlongFirstAxis(arrays, start, stop - start);
    }
}
function sliceArraysByIndices(arrays, indices) {
    if (arrays == null) {
        return null;
    }
    else if (Array.isArray(arrays)) {
        return arrays.map(function (array) { return sliceArraysByIndices(array, indices); });
    }
    else {
        return K.gather(arrays, indices.dtype === 'int32' ? indices : indices.toInt());
    }
}
exports.sliceArraysByIndices = sliceArraysByIndices;
function checkInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {
    if (checkBatchAxis === void 0) { checkBatchAxis = true; }
    if (exceptionPrefix === void 0) { exceptionPrefix = ''; }
    var arrays;
    if (Array.isArray(data)) {
        if (data.length !== names.length) {
            throw new errors_1.ValueError("Error when checking model " + exceptionPrefix + ": the Array of " +
                "Tensors that you are passing to your model is not the size the " +
                ("the model expected. Expected to see " + names.length + " Tensor(s),") +
                (" but instead got " + data.length + " Tensors(s)."));
        }
        arrays = data;
    }
    else {
        if (names.length > 1) {
            throw new errors_1.ValueError("The model expects " + names.length + " " + exceptionPrefix + " Tensors, " +
                "but only received one Tensor. Found: array with shape " +
                (JSON.stringify(data.shape) + "."));
        }
        arrays = [data];
    }
    if (shapes != null) {
        for (var i = 0; i < names.length; ++i) {
            if (shapes[i] == null) {
                continue;
            }
            var array = arrays[i];
            if (array.shape.length !== shapes[i].length) {
                throw new errors_1.ValueError("Error when checking " + exceptionPrefix + ": expected " + names[i] + " " +
                    ("to have " + shapes[i].length + " dimension(s), but got array with ") +
                    ("shape " + JSON.stringify(array.shape)));
            }
            for (var j = 0; j < shapes[i].length; ++j) {
                if (j === 0 && !checkBatchAxis) {
                    continue;
                }
                var dim = array.shape[j];
                var refDim = shapes[i][j];
                if (refDim != null) {
                    if (refDim !== dim) {
                        throw new errors_1.ValueError("Error when checking " + exceptionPrefix + ": expected " +
                            (names[i] + " to have shape " + JSON.stringify(shapes[i]) + " but ") +
                            ("got array with shape " + JSON.stringify(array.shape) + "."));
                    }
                }
            }
        }
    }
}
function collectMetrics(metrics, outputNames) {
    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {
        return outputNames.map(function (name) { return []; });
    }
    if (Array.isArray(metrics)) {
        return outputNames.map(function (name) { return metrics; });
    }
    else if (metrics != null) {
        var nestedMetrics = [];
        for (var _i = 0, outputNames_1 = outputNames; _i < outputNames_1.length; _i++) {
            var name_2 = outputNames_1[_i];
            var outputMetrics = metrics.hasOwnProperty(name_2) ? metrics[name_2] : [];
            if (!Array.isArray(outputMetrics)) {
                outputMetrics = [outputMetrics];
            }
            nestedMetrics.push(outputMetrics);
        }
        return nestedMetrics;
    }
    else {
        throw new TypeError('Type of metrics argument not understood. Expected an Array or ' +
            'Object, found: ' + metrics);
    }
}
var ModelLoggingVerbosity;
(function (ModelLoggingVerbosity) {
    ModelLoggingVerbosity[ModelLoggingVerbosity["SILENT"] = 0] = "SILENT";
    ModelLoggingVerbosity[ModelLoggingVerbosity["VERBOSE"] = 1] = "VERBOSE";
})(ModelLoggingVerbosity = exports.ModelLoggingVerbosity || (exports.ModelLoggingVerbosity = {}));
var Model = (function (_super) {
    __extends(Model, _super);
    function Model(config) {
        return _super.call(this, config) || this;
    }
    Model.prototype.getClassName = function () {
        return 'Model';
    };
    Model.prototype.compile = function (config) {
        var _this = this;
        if (config.loss == null) {
            config.loss = [];
        }
        this.loss = config.loss;
        if (typeof config.optimizer === 'string') {
            this.optimizer = optimizers.getOptimizer(config.optimizer);
        }
        else {
            if (!(config.optimizer instanceof tfjs_core_1.Optimizer)) {
                throw new errors_1.ValueError("User-defined optimizer must be an instance of tf.Optimizer.");
            }
            this.optimizer = config.optimizer;
        }
        var lossFunctions = [];
        if (!Array.isArray(config.loss) && typeof config.loss !== 'string' &&
            typeof config.loss !== 'function') {
            config.loss = config.loss;
            for (var name_3 in config.loss) {
                if (this.outputNames.indexOf(name_3) === -1) {
                    throw new errors_1.ValueError("Unknown entry in loss dictionary: \"" + name_3 + "\". Only expect the " +
                        ("following keys: " + this.outputNames));
                }
            }
            for (var name_4 in this.outputNames) {
                if (config.loss[name_4] == null) {
                    console.warn("Output \"" + name_4 + "\" is missing from loss dictionary. We assume " +
                        "this was done on purpose, and we will not be expecting data " +
                        ("to be passed to " + name_4 + " during training"));
                }
                lossFunctions.push(losses.get(config.loss[name_4]));
            }
        }
        else if (Array.isArray(config.loss)) {
            if (config.loss.length !== this.outputs.length) {
                throw new errors_1.ValueError("When passing an Array as loss, it should have one entry per " +
                    ("model output. The model has " + this.outputs.length + " output(s), ") +
                    ("but you passed loss=" + config.loss + "."));
            }
            var theLosses = config.loss;
            lossFunctions = theLosses.map(function (l) { return losses.get(l); });
        }
        else {
            var lossFunction_1 = losses.get(config.loss);
            this.outputs.map(function (layer) {
                lossFunctions.push(lossFunction_1);
            });
        }
        this.lossFunctions = lossFunctions;
        this.feedOutputNames = [];
        this.feedOutputShapes = [];
        this.feedLossFns = [];
        for (var i = 0; i < this.outputs.length; ++i) {
            var shape = this.internalOutputShapes[i];
            var name_5 = this.outputNames[i];
            this.feedOutputNames.push(name_5);
            this.feedOutputShapes.push(shape);
            this.feedLossFns.push(this.lossFunctions[i]);
        }
        var skipTargetIndices = [];
        this.metrics = config.metrics;
        this.metricsNames = ['loss'];
        this.metricsTensors = [];
        K.nameScope('loss', function () {
            for (var i = 0; i < _this.outputs.length; ++i) {
                if (skipTargetIndices.indexOf(i) !== -1) {
                    continue;
                }
                var weightedLoss = _this.lossFunctions[i];
                if (_this.outputs.length > 1) {
                    _this.metricsTensors.push([weightedLoss, i]);
                    _this.metricsNames.push(_this.outputNames[i] + '_loss');
                }
            }
        });
        var nestedMetrics = collectMetrics(config.metrics, this.outputNames);
        var appendMetric = function (outputIndex, metricName, metricTensor) {
            if (_this.outputNames.length > 1) {
                metricName = _this.outputNames[outputIndex] + '_' + metricName;
            }
            _this.metricsNames.push(metricName);
            _this.metricsTensors.push([metricTensor, outputIndex]);
        };
        K.nameScope('metric', function () {
            var _loop_1 = function (i) {
                if (skipTargetIndices.indexOf(i) !== -1) {
                    return "continue";
                }
                var outputMetrics = nestedMetrics[i];
                var handleMetrics = function (metrics) {
                    var metricNamePrefix = '';
                    var metricName;
                    var accFn;
                    var weightedMetricFn;
                    var _loop_2 = function (metric) {
                        if (['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==
                            -1) {
                            var outputShape = _this.internalOutputShapes[i];
                            if (outputShape[outputShape.length - 1] === 1 ||
                                _this.lossFunctions[i] === losses.binaryCrossentropy) {
                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                                    accFn = Metrics.binaryAccuracy;
                                }
                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                                    accFn = Metrics.binaryCrossentropy;
                                }
                            }
                            else if (_this.lossFunctions[i] ===
                                losses.sparseCategoricalCrossentropy) {
                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                                    accFn = Metrics.sparseCategoricalAccuracy;
                                }
                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                                    accFn = Metrics.sparseCategoricalCrossentropy;
                                }
                            }
                            else {
                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                                    accFn = Metrics.categoricalAccuracy;
                                }
                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                                    accFn = Metrics.categoricalCrossentropy;
                                }
                            }
                            var suffix = void 0;
                            if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                                suffix = 'acc';
                            }
                            else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                                suffix = 'ce';
                            }
                            weightedMetricFn = accFn;
                            metricName = metricNamePrefix + suffix;
                        }
                        else {
                            var metricFn = Metrics.get(metric);
                            weightedMetricFn = metricFn;
                            metricName = metricNamePrefix + metric;
                        }
                        var metricResult;
                        K.nameScope(metricName, function () {
                            metricResult = weightedMetricFn;
                        });
                        appendMetric(i, metricName, metricResult);
                    };
                    for (var _i = 0, metrics_1 = metrics; _i < metrics_1.length; _i++) {
                        var metric = metrics_1[_i];
                        _loop_2(metric);
                    }
                };
                handleMetrics(outputMetrics);
            };
            for (var i = 0; i < _this.outputs.length; ++i) {
                _loop_1(i);
            }
        });
        this.collectedTrainableWeights = this.trainableWeights;
    };
    Model.prototype.checkTrainableWeightsConsistency = function () {
        if (this.collectedTrainableWeights == null) {
            return;
        }
        if (this.trainableWeights.length !==
            this.collectedTrainableWeights.length) {
            console.warn('Discrepancy between trainableweights and collected trainable ' +
                'weights. Did you set `model.trainable` without calling ' +
                '`model.compile()` afterwards?');
        }
    };
    Model.prototype.evaluate = function (x, y, config) {
        if (config === void 0) { config = {}; }
        var batchSize = config.batchSize == null ? 32 : config.batchSize;
        var standardizedOuts = this.standardizeUserData(x, y, true, batchSize);
        var ins = standardizedOuts[0].concat(standardizedOuts[1]);
        this.makeTestFunction();
        var f = this.testFunction;
        var testOuts = this.testLoop(f, ins, batchSize, config.verbose, config.steps);
        return generic_utils_1.singletonOrArray(testOuts);
    };
    Model.prototype.checkNumSamples = function (ins, batchSize, steps, stepsName) {
        if (stepsName === void 0) { stepsName = 'steps'; }
        var numSamples;
        if (steps != null) {
            numSamples = null;
            if (batchSize != null) {
                throw new errors_1.ValueError("If " + stepsName + " is set, batchSize must be null or undefined." +
                    ("Got batchSize = " + batchSize));
            }
        }
        else if (ins != null) {
            if (Array.isArray(ins)) {
                numSamples = ins[0].shape[0];
            }
            else {
                numSamples = ins.shape[0];
            }
        }
        else {
            throw new errors_1.ValueError("Either the input data should have a defined shape, or " +
                (stepsName + " shoud be specified."));
        }
        return numSamples;
    };
    Model.prototype.predictLoop = function (ins, batchSize, verbose) {
        var _this = this;
        if (batchSize === void 0) { batchSize = 32; }
        if (verbose === void 0) { verbose = false; }
        var numSamples = this.checkNumSamples(ins);
        if (verbose) {
            throw new errors_1.NotImplementedError('Verbose predictLoop() is not implemented yet.');
        }
        var batches = makeBatches(numSamples, batchSize);
        var outs = [];
        var _loop_3 = function (batchIndex) {
            var batchOuts = tfc.tidy(function () {
                var batchStart = batches[batchIndex][0];
                var batchEnd = batches[batchIndex][1];
                var insBatch = sliceArrays(ins, batchStart, batchEnd);
                var feeds = [];
                if (Array.isArray(insBatch)) {
                    for (var i = 0; i < insBatch.length; ++i) {
                        feeds.push({ key: _this.inputs[i], value: insBatch[i] });
                    }
                }
                else {
                    feeds.push({ key: _this.inputs[0], value: insBatch });
                }
                var feedDict = new executor_1.FeedDict(feeds);
                return executor_1.execute(_this.outputs, feedDict);
            });
            if (batchIndex === 0) {
                for (var _i = 0, batchOuts_1 = batchOuts; _i < batchOuts_1.length; _i++) {
                    var batchOut = batchOuts_1[_i];
                    outs.push(batchOut);
                }
            }
            else {
                for (var i = 0; i < batchOuts.length; ++i) {
                    outs[i] = K.concatAlongFirstAxis(outs[i], batchOuts[i]);
                }
            }
        };
        for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {
            _loop_3(batchIndex);
        }
        return generic_utils_1.singletonOrArray(outs);
    };
    Model.prototype.predict = function (x, config) {
        if (config === void 0) { config = {}; }
        checkInputData(x, this.inputNames, this.feedInputShapes, false);
        var batchSize = config.batchSize == null ? 32 : config.batchSize;
        return this.predictLoop(x, batchSize);
    };
    Model.prototype.predictOnBatch = function (x) {
        checkInputData(x, this.inputNames, this.feedInputShapes, true);
        return this.predictLoop(x, x.shape[0]);
    };
    Model.prototype.standardizeUserData = function (x, y, checkBatchAxis, batchSize) {
        if (checkBatchAxis === void 0) { checkBatchAxis = true; }
        if (this.optimizer == null) {
            throw new errors_1.RuntimeError('You must compile a model before training/testing. Use ' +
                'Model.compile(modelCompileConfig).');
        }
        var outputShapes = [];
        for (var i = 0; i < this.feedOutputShapes.length; ++i) {
            var outputShape = this.feedOutputShapes[i];
            var lossFn = this.feedLossFns[i];
            if (lossFn === losses.sparseCategoricalCrossentropy) {
                outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));
            }
            else {
                outputShapes.push(outputShape);
            }
        }
        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');
        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');
        checkArrayLengths(x, y, null);
        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);
        if (this.stateful && batchSize != null && batchSize > 0) {
            if (x[0].shape[0] % batchSize !== 0) {
                throw new errors_1.ValueError("In a stateful network, you should only pass inputs with a " +
                    "number of samples that is divisible by the batch size " +
                    (batchSize + ". Found: " + x[0].shape[0] + " sample(s)."));
            }
        }
        return [x, y, null];
    };
    Model.prototype.fitLoop = function (f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {
        if (initialEpoch === void 0) { initialEpoch = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var doValidation, numTrainSamples, indexArray, callbackList, _loop_4, epoch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (batchSize == null) {
                            batchSize = 32;
                        }
                        if (epochs == null) {
                            epochs = 100;
                        }
                        if (shuffle == null) {
                            shuffle = true;
                        }
                        if (initialEpoch == null) {
                            initialEpoch = 0;
                        }
                        doValidation = false;
                        if (valF != null && valIns != null) {
                            doValidation = true;
                        }
                        if (validationSteps != null) {
                            doValidation = true;
                            if (stepsPerEpoch == null) {
                                throw new errors_1.ValueError('Can only use `validationSteps` when doing step-wise training, ' +
                                    'i.e., `stepsPerEpoch` must be set.');
                            }
                        }
                        numTrainSamples = this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');
                        if (numTrainSamples != null) {
                            indexArray = math_utils_1.range(0, numTrainSamples);
                        }
                        this.history = new callbacks_1.History();
                        if (callbacks == null) {
                            callbacks = [new callbacks_1.BaseLogger()];
                        }
                        else {
                            callbacks = [new callbacks_1.BaseLogger()].concat(callbacks);
                        }
                        callbacks = callbacks.concat([this.history]);
                        if (verbose > 0) {
                            throw new errors_1.NotImplementedError('Verbose mode is not implemented yet.');
                        }
                        callbackList = new callbacks_1.CallbackList(callbacks);
                        callbackList.setModel(this);
                        callbackList.setParams({
                            epochs: epochs,
                            steps: stepsPerEpoch,
                            verbose: verbose,
                            doValidation: doValidation,
                            metrics: callbackMetrics,
                        });
                        return [4, callbackList.onTrainBegin()];
                    case 1:
                        _a.sent();
                        _loop_4 = function (epoch) {
                            var epochLogs, epochIndexArray1D_1, batches_1, _loop_5, batchIndex;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, callbackList.onEpochBegin(epoch)];
                                    case 1:
                                        _a.sent();
                                        epochLogs = {};
                                        if (!(stepsPerEpoch != null)) return [3, 2];
                                        throw new errors_1.NotImplementedError('stepsPerEpoch mode is not implemented yet.');
                                    case 2:
                                        if (shuffle === 'batch') {
                                            throw new errors_1.NotImplementedError('batch shuffling is not implemneted yet');
                                        }
                                        else if (shuffle) {
                                            tfjs_core_1.util.shuffle(indexArray);
                                        }
                                        epochIndexArray1D_1 = tfjs_core_1.tensor1d(indexArray);
                                        batches_1 = makeBatches(numTrainSamples, batchSize);
                                        _loop_5 = function (batchIndex) {
                                            var batchLogs;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        batchLogs = {};
                                                        return [4, callbackList.onBatchBegin(batchIndex, batchLogs)];
                                                    case 1:
                                                        _a.sent();
                                                        tfc.tidy(function () {
                                                            var batchStart = batches_1[batchIndex][0];
                                                            var batchEnd = batches_1[batchIndex][1];
                                                            var batchIds = K.sliceAlongFirstAxis(epochIndexArray1D_1, batchStart, batchEnd - batchStart);
                                                            batchLogs['batch'] = batchIndex;
                                                            batchLogs['size'] = batchEnd - batchStart;
                                                            var insBatch = sliceArraysByIndices(ins, batchIds);
                                                            var outs = f(insBatch);
                                                            for (var i = 0; i < outLabels.length; ++i) {
                                                                var label = outLabels[i];
                                                                var out = outs[i];
                                                                batchLogs[label] = out;
                                                                K.keep(out);
                                                            }
                                                            if (batchIndex === batches_1.length - 1) {
                                                                if (doValidation) {
                                                                    var valOuts = _this.testLoop(valF, valIns, batchSize);
                                                                    for (var i = 0; i < outLabels.length; ++i) {
                                                                        var label = outLabels[i];
                                                                        var out = valOuts[i];
                                                                        K.keep(out);
                                                                        epochLogs['val_' + label] = out;
                                                                    }
                                                                }
                                                            }
                                                        });
                                                        return [4, callbackList.onBatchEnd(batchIndex, batchLogs)];
                                                    case 2:
                                                        _a.sent();
                                                        callbacks_1.disposeTensorsInLogs(batchLogs);
                                                        return [2];
                                                }
                                            });
                                        };
                                        batchIndex = 0;
                                        _a.label = 3;
                                    case 3:
                                        if (!(batchIndex < batches_1.length)) return [3, 6];
                                        return [5, _loop_5(batchIndex)];
                                    case 4:
                                        _a.sent();
                                        _a.label = 5;
                                    case 5:
                                        ++batchIndex;
                                        return [3, 3];
                                    case 6:
                                        epochIndexArray1D_1.dispose();
                                        _a.label = 7;
                                    case 7: return [4, callbackList.onEpochEnd(epoch, epochLogs)];
                                    case 8:
                                        _a.sent();
                                        return [2];
                                }
                            });
                        };
                        epoch = initialEpoch;
                        _a.label = 2;
                    case 2:
                        if (!(epoch < epochs)) return [3, 5];
                        return [5, _loop_4(epoch)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        ++epoch;
                        return [3, 2];
                    case 5: return [4, callbackList.onTrainEnd()];
                    case 6:
                        _a.sent();
                        return [4, this.history.syncData()];
                    case 7:
                        _a.sent();
                        return [2, this.history];
                }
            });
        });
    };
    Model.prototype.testLoop = function (f, ins, batchSize, verbose, steps) {
        if (verbose === void 0) { verbose = 0; }
        var numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');
        var outs = [];
        if (verbose === 1) {
            throw new errors_1.NotImplementedError('Verbose mode is not implemented yet.');
        }
        if (steps != null) {
            throw new errors_1.NotImplementedError('steps mode in testLoop() is not implemented yet');
        }
        else {
            var batches = makeBatches(numSamples, batchSize);
            var indexArray = tfjs_core_1.tensor1d(math_utils_1.range(0, numSamples));
            for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {
                var batchStart = batches[batchIndex][0];
                var batchEnd = batches[batchIndex][1];
                var batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);
                var insBatch = sliceArraysByIndices(ins, batchIds);
                var batchOuts = f(insBatch);
                if (batchIndex === 0) {
                    for (var i = 0; i < batchOuts.length; ++i) {
                        outs.push(K.getScalar(0));
                    }
                }
                for (var i = 0; i < batchOuts.length; ++i) {
                    var batchOut = batchOuts[i];
                    outs[i] =
                        K.add(outs[i], K.scalarTimesArray(K.getScalar(batchEnd - batchStart), batchOut));
                }
            }
            for (var i = 0; i < outs.length; ++i) {
                outs[i] = K.divide(outs[i], K.getScalar(numSamples));
            }
        }
        return outs;
    };
    Model.prototype.getDedupedMetricsNames = function () {
        var outLabels = this.metricsNames;
        var dedupedOutLabels = [];
        for (var i = 0; i < outLabels.length; ++i) {
            var label = outLabels[i];
            var newLabel = label;
            if (generic_utils_1.count(outLabels, label) > 1) {
                var dupIndex = generic_utils_1.count(outLabels.slice(0, i), label);
                newLabel += "_" + dupIndex;
            }
            dedupedOutLabels.push(newLabel);
        }
        return dedupedOutLabels;
    };
    Model.prototype.makeTestFunction = function () {
        var _this = this;
        this.testFunction = function (data) {
            return tfc.tidy(function () {
                var valOutputs = [];
                var totalLoss;
                var inputs = data.slice(0, _this.inputs.length);
                var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);
                var feeds = [];
                for (var i = 0; i < _this.inputs.length; ++i) {
                    feeds.push({ key: _this.inputs[i], value: inputs[i] });
                }
                var feedDict = new executor_1.FeedDict(feeds);
                var outputs = executor_1.execute(_this.outputs, feedDict);
                for (var i = 0; i < _this.lossFunctions.length; ++i) {
                    var lossFunction = _this.lossFunctions[i];
                    var loss = K.mean(lossFunction(targets[i], outputs[i]));
                    if (i === 0) {
                        totalLoss = loss;
                    }
                    else {
                        totalLoss = K.add(totalLoss, loss);
                    }
                    valOutputs.push(totalLoss);
                }
                for (var i = 0; i < _this.metricsTensors.length; ++i) {
                    var metric = _this.metricsTensors[i][0];
                    var outputIndex = _this.metricsTensors[i][1];
                    var meanMetric = K.mean(metric(targets[outputIndex], outputs[outputIndex]));
                    valOutputs.push(meanMetric);
                }
                return valOutputs;
            });
        };
    };
    Model.prototype.fit = function (x, y, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var batchSize, standardizedOuts, inputs, targets, doValidation, valX, valY, valIns, valStandardized, splitAt, originalBatchSize, ins, trainFunction, outLabels, valFunction, callbackMetrics, callbacks;
            return __generator(this, function (_a) {
                batchSize = config.batchSize == null ? 32 : config.batchSize;
                standardizedOuts = this.standardizeUserData(x, y, false, batchSize);
                inputs = standardizedOuts[0];
                targets = standardizedOuts[1];
                doValidation = false;
                if (config.validationData != null && config.validationData.length > 0) {
                    doValidation = true;
                    if (config.validationData.length === 2) {
                        valX = config.validationData[0];
                        valY = config.validationData[1];
                    }
                    else if (config.validationData.length === 3) {
                        throw new errors_1.NotImplementedError('validationData including sample weights is not supported yet.');
                    }
                    else {
                        throw new errors_1.ValueError("When passing validation data, it must contain 2 (valX, valY) " +
                            "or 3 (valX, valY, valSampleWeight) items; " +
                            (config.validationData + " is invalid."));
                    }
                    valStandardized = this.standardizeUserData(valX, valY, true, batchSize);
                    valX = valStandardized[0];
                    valY = valStandardized[1];
                    valIns = valX.concat(valY);
                }
                else if (config.validationSplit != null && config.validationSplit > 0 &&
                    config.validationSplit < 1) {
                    doValidation = true;
                    splitAt = Math.floor(inputs[0].shape[0] * (1 - config.validationSplit));
                    originalBatchSize = inputs[0].shape[0];
                    valX = sliceArrays(inputs, splitAt, originalBatchSize);
                    inputs = sliceArrays(inputs, 0, splitAt);
                    valY = sliceArrays(targets, splitAt, originalBatchSize);
                    targets = sliceArrays(targets, 0, splitAt);
                    valIns = valX.concat(valY);
                }
                else if (config.validationSteps != null) {
                    doValidation = true;
                }
                ins = inputs.concat(targets);
                this.checkTrainableWeightsConsistency();
                trainFunction = function (data) {
                    var losses = [];
                    var lossValues = [];
                    var inputs = data.slice(0, _this.inputs.length);
                    var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);
                    var metricsValues = [];
                    var totalLossFunction = function () {
                        var feeds = [];
                        for (var i = 0; i < _this.inputs.length; ++i) {
                            feeds.push({ key: _this.inputs[i], value: inputs[i] });
                        }
                        var feedDict = new executor_1.FeedDict(feeds);
                        var outputs = executor_1.execute(_this.outputs, feedDict, { 'training': true });
                        var totalLoss;
                        for (var i = 0; i < _this.lossFunctions.length; ++i) {
                            var lossFunction = _this.lossFunctions[i];
                            var loss = lossFunction(targets[i], outputs[i]);
                            losses.push(loss);
                            var meanLoss = K.mean(loss);
                            lossValues.push(meanLoss);
                            if (i === 0) {
                                totalLoss = loss;
                            }
                            else {
                                totalLoss = K.add(totalLoss, loss);
                            }
                        }
                        for (var i = 0; i < _this.metricsTensors.length; ++i) {
                            var metric = _this.metricsTensors[i][0];
                            var outputIndex = _this.metricsTensors[i][1];
                            var meanMetric = K.mean(metric(targets[outputIndex], outputs[outputIndex]));
                            K.keep(meanMetric);
                            metricsValues.push(meanMetric);
                        }
                        totalLoss = K.mean(totalLoss);
                        _this.calculateLosses().forEach(function (regularizerLoss) {
                            totalLoss = K.add(totalLoss, regularizerLoss);
                        });
                        return totalLoss;
                    };
                    var variables = _this.collectedTrainableWeights.map(function (param) { return param.read(); });
                    var returnCost = true;
                    var totalLossValue = _this.optimizer.minimize(totalLossFunction, returnCost, variables);
                    return [totalLossValue].concat(metricsValues);
                };
                outLabels = this.getDedupedMetricsNames();
                if (doValidation) {
                    this.makeTestFunction();
                    valFunction = this.testFunction;
                    callbackMetrics =
                        outLabels.slice().concat(outLabels.map(function (n) { return 'val_' + n; }));
                }
                else {
                    valFunction = null;
                    valIns = [];
                    callbackMetrics = outLabels.slice();
                }
                callbacks = callbacks_1.standardizeCallbacks(config.callbacks);
                return [2, this.fitLoop(trainFunction, ins, outLabels, batchSize, config.epochs, config.verbose, callbacks, valFunction, valIns, config.shuffle, callbackMetrics, null, null, null)];
            });
        });
    };
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [0] })
    ], Model.prototype, "compile", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })
    ], Model.prototype, "evaluate", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [1] })
    ], Model.prototype, "predict", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })
    ], Model.prototype, "predictOnBatch", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })
    ], Model.prototype, "fit", null);
    Model = __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })
    ], Model);
    return Model;
}(topology_1.Container));
exports.Model = Model;
generic_utils_1.ClassNameMap.register('Model', Model);

},{"@tensorflow/tfjs-core":64,"../backend/tfjs_backend":94,"../callbacks":89,"../errors":171,"../losses":168,"../metrics":169,"../optimizers":189,"../utils/generic_utils":165,"../utils/math_utils":190,"./executor":192,"./topology":172}],167:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("./backend/tfjs_backend");
var common_1 = require("./common");
var errors_1 = require("./errors");
var types_1 = require("./types");
var generic_utils_1 = require("./utils/generic_utils");
var math_utils_1 = require("./utils/math_utils");
generic_utils_1.SerializableEnumRegistry.register('mode', { 'fan_in': 'fanIn', 'fan_out': 'fanOut', 'fan_avg': 'fanAvg' });
exports.VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg', undefined, null];
function checkFanMode(value) {
    if (value == null) {
        return;
    }
    if (exports.VALID_FAN_MODE_VALUES.indexOf(value) < 0) {
        throw new errors_1.ValueError(value + " is not a valid FanMode.  Valid values as " + exports.VALID_FAN_MODE_VALUES);
    }
}
exports.checkFanMode = checkFanMode;
generic_utils_1.SerializableEnumRegistry.register('distribution', { 'normal': 'normal', 'uniform': 'uniform' });
exports.VALID_DISTRIBUTION_VALUES = ['normal', 'uniform', undefined, null];
function checkDistribution(value) {
    if (value == null) {
        return;
    }
    if (exports.VALID_DISTRIBUTION_VALUES.indexOf(value) < 0) {
        throw new errors_1.ValueError(value + " is not a valid Distribution.  Valid values as " + exports.VALID_DISTRIBUTION_VALUES);
    }
}
exports.checkDistribution = checkDistribution;
var Initializer = (function (_super) {
    __extends(Initializer, _super);
    function Initializer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Initializer.fromConfig = function (cls, config) {
        return new cls(config);
    };
    Initializer.prototype.fromConfigUsesCustomObjects = function () {
        return false;
    };
    Initializer.prototype.getConfig = function () {
        return {};
    };
    Initializer = __decorate([
        tfjs_core_1.doc({ heading: 'Initializers', subheading: 'Classes', namespace: 'initializers' })
    ], Initializer);
    return Initializer;
}(types_1.Serializable));
exports.Initializer = Initializer;
var Zeros = (function (_super) {
    __extends(Zeros, _super);
    function Zeros() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Zeros.prototype.getClassName = function () {
        return 'Zeros';
    };
    Zeros.prototype.apply = function (shape, dtype) {
        return K.zeros(shape, dtype);
    };
    return Zeros;
}(Initializer));
exports.Zeros = Zeros;
generic_utils_1.ClassNameMap.register('Zeros', Zeros);
var Ones = (function (_super) {
    __extends(Ones, _super);
    function Ones() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ones.prototype.getClassName = function () {
        return 'Ones';
    };
    Ones.prototype.apply = function (shape, dtype) {
        return K.ones(shape, dtype);
    };
    return Ones;
}(Initializer));
exports.Ones = Ones;
generic_utils_1.ClassNameMap.register('Ones', Ones);
var Constant = (function (_super) {
    __extends(Constant, _super);
    function Constant(config) {
        var _this = _super.call(this) || this;
        _this.value = config.value;
        return _this;
    }
    Constant.prototype.apply = function (shape, dtype) {
        return K.scalarTimesArray(tfjs_core_1.scalar(this.value), K.ones(shape, dtype));
    };
    Constant.prototype.getClassName = function () {
        return 'Constant';
    };
    Constant.prototype.getConfig = function () {
        return {
            value: this.value,
        };
    };
    return Constant;
}(Initializer));
exports.Constant = Constant;
generic_utils_1.ClassNameMap.register('Constant', Constant);
var RandomUniform = (function (_super) {
    __extends(RandomUniform, _super);
    function RandomUniform(config) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_MINVAL = -0.05;
        _this.DEFAULT_MAXVAL = 0.05;
        _this.minval = config.minval || _this.DEFAULT_MINVAL;
        _this.maxval = config.maxval || _this.DEFAULT_MAXVAL;
        _this.seed = config.seed;
        return _this;
    }
    RandomUniform.prototype.apply = function (shape, dtype) {
        return K.randomUniform(shape, this.minval, this.maxval, dtype, this.seed);
    };
    RandomUniform.prototype.getClassName = function () {
        return 'RandomUniform';
    };
    RandomUniform.prototype.getConfig = function () {
        return { minval: this.minval, maxval: this.maxval, seed: this.seed };
    };
    return RandomUniform;
}(Initializer));
exports.RandomUniform = RandomUniform;
generic_utils_1.ClassNameMap.register('RandomUniform', RandomUniform);
var RandomNormal = (function (_super) {
    __extends(RandomNormal, _super);
    function RandomNormal(config) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_MEAN = 0.;
        _this.DEFAULT_STDDEV = 0.05;
        _this.mean = config.mean || _this.DEFAULT_MEAN;
        _this.stddev = config.stddev || _this.DEFAULT_STDDEV;
        _this.seed = config.seed;
        return _this;
    }
    RandomNormal.prototype.apply = function (shape, dtype) {
        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);
    };
    RandomNormal.prototype.getClassName = function () {
        return 'RandomNormal';
    };
    RandomNormal.prototype.getConfig = function () {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
    };
    return RandomNormal;
}(Initializer));
exports.RandomNormal = RandomNormal;
generic_utils_1.ClassNameMap.register('RandomNormal', RandomNormal);
var TruncatedNormal = (function (_super) {
    __extends(TruncatedNormal, _super);
    function TruncatedNormal(config) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_MEAN = 0.;
        _this.DEFAULT_STDDEV = 0.05;
        _this.mean = config.mean || _this.DEFAULT_MEAN;
        _this.stddev = config.stddev || _this.DEFAULT_STDDEV;
        _this.seed = config.seed;
        return _this;
    }
    TruncatedNormal.prototype.apply = function (shape, dtype) {
        return K.truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);
    };
    TruncatedNormal.prototype.getClassName = function () {
        return 'TruncatedNormal';
    };
    TruncatedNormal.prototype.getConfig = function () {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
    };
    return TruncatedNormal;
}(Initializer));
exports.TruncatedNormal = TruncatedNormal;
generic_utils_1.ClassNameMap.register('TruncatedNormal', TruncatedNormal);
var Identity = (function (_super) {
    __extends(Identity, _super);
    function Identity(config) {
        var _this = _super.call(this) || this;
        _this.gain = config.gain != null ? tfjs_core_1.scalar(config.gain) : K.getScalar(1.0);
        return _this;
    }
    Identity.prototype.apply = function (shape, dtype) {
        if (shape.length !== 2 || shape[0] !== shape[1]) {
            throw new errors_1.ValueError('Identity matrix initializer can only be used for' +
                ' 2D square matrices.');
        }
        else {
            return K.scalarTimesArray(this.gain, K.eye(shape[0]));
        }
    };
    Identity.prototype.getClassName = function () {
        return 'Identity';
    };
    Identity.prototype.getConfig = function () {
        return { gain: this.gain.get() };
    };
    return Identity;
}(Initializer));
exports.Identity = Identity;
generic_utils_1.ClassNameMap.register('Identity', Identity);
function computeFans(shape, dataFormat) {
    if (dataFormat === void 0) { dataFormat = 'channelsLast'; }
    var fanIn;
    var fanOut;
    common_1.checkDataFormat(dataFormat);
    if (shape.length === 2) {
        fanIn = shape[0];
        fanOut = shape[1];
    }
    else if ([3, 4, 5].indexOf(shape.length) !== -1) {
        if (dataFormat === 'channelsFirst') {
            var receptiveFieldSize = math_utils_1.arrayProd(shape, 2);
            fanIn = shape[1] * receptiveFieldSize;
            fanOut = shape[0] * receptiveFieldSize;
        }
        else if (dataFormat === 'channelsLast') {
            var receptiveFieldSize = math_utils_1.arrayProd(shape, 0, shape.length - 2);
            fanIn = shape[shape.length - 2] * receptiveFieldSize;
            fanOut = shape[shape.length - 1] * receptiveFieldSize;
        }
    }
    else {
        var shapeProd = math_utils_1.arrayProd(shape);
        fanIn = Math.sqrt(shapeProd);
        fanOut = Math.sqrt(shapeProd);
    }
    return [fanIn, fanOut];
}
var VarianceScaling = (function (_super) {
    __extends(VarianceScaling, _super);
    function VarianceScaling(config) {
        var _this = _super.call(this) || this;
        if (config.scale < 0.0) {
            throw new errors_1.ValueError("scale must be a positive float. Got: " + config.scale);
        }
        _this.scale = config.scale == null ? 1.0 : config.scale;
        _this.mode = config.mode;
        checkFanMode(_this.mode);
        _this.distribution = config.distribution;
        checkDistribution(_this.distribution);
        _this.seed = config.seed;
        return _this;
    }
    VarianceScaling.prototype.apply = function (shape, dtype) {
        var fans = computeFans(shape);
        var fanIn = fans[0];
        var fanOut = fans[1];
        var scale = this.scale;
        if (this.mode === 'fanIn') {
            scale /= Math.max(1, fanIn);
        }
        else if (this.mode === 'fanOut') {
            scale /= Math.max(1, fanOut);
        }
        else {
            scale /= Math.max(1, (fanIn + fanOut) / 2);
        }
        if (this.distribution === 'normal') {
            var stddev = Math.sqrt(scale);
            return K.truncatedNormal(shape, 0, stddev, dtype, this.seed);
        }
        else {
            var limit = Math.sqrt(3 * scale);
            return K.randomUniform(shape, -limit, limit, dtype, this.seed);
        }
    };
    VarianceScaling.prototype.getClassName = function () {
        return 'VarianceScaling';
    };
    VarianceScaling.prototype.getConfig = function () {
        return {
            scale: this.scale,
            mode: this.mode,
            distribution: this.distribution,
            seed: this.seed
        };
    };
    return VarianceScaling;
}(Initializer));
exports.VarianceScaling = VarianceScaling;
generic_utils_1.ClassNameMap.register('VarianceScaling', VarianceScaling);
var GlorotUniform = (function (_super) {
    __extends(GlorotUniform, _super);
    function GlorotUniform(config) {
        return _super.call(this, {
            scale: 1.0,
            mode: 'fanAvg',
            distribution: 'uniform',
            seed: config.seed
        }) || this;
    }
    return GlorotUniform;
}(VarianceScaling));
exports.GlorotUniform = GlorotUniform;
generic_utils_1.ClassNameMap.register('GlorotUniform', GlorotUniform);
var GlorotNormal = (function (_super) {
    __extends(GlorotNormal, _super);
    function GlorotNormal(config) {
        return _super.call(this, {
            scale: 1.0,
            mode: 'fanAvg',
            distribution: 'normal',
            seed: config.seed
        }) || this;
    }
    return GlorotNormal;
}(VarianceScaling));
exports.GlorotNormal = GlorotNormal;
generic_utils_1.ClassNameMap.register('GlorotNormal', GlorotNormal);
var HeNormal = (function (_super) {
    __extends(HeNormal, _super);
    function HeNormal(config) {
        return _super.call(this, { scale: 2.0, mode: 'fanIn', distribution: 'normal', seed: config.seed }) || this;
    }
    return HeNormal;
}(VarianceScaling));
exports.HeNormal = HeNormal;
generic_utils_1.ClassNameMap.register('HeNormal', HeNormal);
var LeCunNormal = (function (_super) {
    __extends(LeCunNormal, _super);
    function LeCunNormal(config) {
        return _super.call(this, { scale: 1.0, mode: 'fanIn', distribution: 'normal', seed: config.seed }) || this;
    }
    return LeCunNormal;
}(VarianceScaling));
exports.LeCunNormal = LeCunNormal;
generic_utils_1.ClassNameMap.register('LeCunNormal', LeCunNormal);
var Orthogonal = (function (_super) {
    __extends(Orthogonal, _super);
    function Orthogonal(config) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_GAIN = 1;
        _this.gain = config.gain == null ? _this.DEFAULT_GAIN : config.gain;
        _this.seed = config.seed;
        if (_this.seed != null) {
            throw new errors_1.NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');
        }
        return _this;
    }
    Orthogonal.prototype.apply = function (shape, dtype) {
        if (shape.length !== 2) {
            throw new errors_1.NotImplementedError('The Orthogonal Initializer does not support non-2D shapes yet.');
        }
        var normalizedShape = shape[0] >= shape[1] ? shape : [shape[1], shape[0]];
        var a = K.randomNormal(normalizedShape, 0, 1, types_1.DType.float32);
        var q = K.qr(a)[0];
        if (q.shape[1] > normalizedShape[1]) {
            q = q.slice([0, 0], normalizedShape);
        }
        if (shape[0] < shape[1]) {
            q = q.transpose();
        }
        return K.scalarTimesArray(K.getScalar(this.gain), q);
    };
    Orthogonal.prototype.getClassName = function () {
        return 'Orthogonal';
    };
    Orthogonal.prototype.getConfig = function () {
        return {
            gain: this.gain,
            seed: this.seed,
        };
    };
    return Orthogonal;
}(Initializer));
exports.Orthogonal = Orthogonal;
generic_utils_1.ClassNameMap.register('Orthogonal', Orthogonal);
exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    'constant': 'Constant',
    'glorotNormal': 'GlorotNormal',
    'glorotUniform': 'GlorotUniform',
    'heNormal': 'HeNormal',
    'identity': 'Identity',
    'leCunNormal': 'LeCunNormal',
    'ones': 'Ones',
    'orthogonal': 'Orthogonal',
    'randomNormal': 'RandomNormal',
    'randomUniform': 'RandomUniform',
    'truncatedNormal': 'TruncatedNormal',
    'varianceScaling': 'VarianceScaling',
    'zeros': 'Zeros'
};
function deserializeInitializer(config, customObjects) {
    if (customObjects === void 0) { customObjects = {}; }
    return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'initializer');
}
function serializeInitializer(initializer) {
    return generic_utils_1.serializeKerasObject(initializer);
}
exports.serializeInitializer = serializeInitializer;
function getInitializer(identifier) {
    if (typeof identifier === 'string') {
        var className = identifier in exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?
            exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :
            identifier;
        var config = { className: className, config: {} };
        return deserializeInitializer(config);
    }
    else if (identifier instanceof Initializer) {
        return identifier;
    }
    else {
        return deserializeInitializer(identifier);
    }
}
exports.getInitializer = getInitializer;

},{"@tensorflow/tfjs-core":64,"./backend/tfjs_backend":94,"./common":185,"./errors":171,"./types":91,"./utils/generic_utils":165,"./utils/math_utils":190}],196:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("./backend/tfjs_backend");
var errors_1 = require("./errors");
function getActivation(activationType) {
    if (activationType == null) {
        return linear;
    }
    else if (activationType.toLowerCase() === 'elu') {
        return elu;
    }
    else if (activationType.toLowerCase() === 'hardsigmoid') {
        return hardSigmoid;
    }
    else if (activationType.toLowerCase() === 'linear') {
        return linear;
    }
    else if (activationType.toLowerCase() === 'relu') {
        return relu;
    }
    else if (activationType.toLowerCase() === 'relu6') {
        return relu6;
    }
    else if (activationType.toLowerCase() === 'selu') {
        return selu;
    }
    else if (activationType.toLowerCase() === 'sigmoid') {
        return sigmoid;
    }
    else if (activationType.toLowerCase() === 'softmax') {
        return softmax;
    }
    else if (activationType.toLowerCase() === 'softplus') {
        return softplus;
    }
    else if (activationType.toLowerCase() === 'softsign') {
        return softsign;
    }
    else if (activationType.toLowerCase() === 'tanh') {
        return tanh;
    }
    else {
        throw new errors_1.ValueError("Unsupported activation function " + activationType);
    }
}
exports.getActivation = getActivation;
function elu(x, alpha) {
    if (alpha === void 0) { alpha = 1; }
    return K.elu(x, alpha);
}
exports.elu = elu;
function selu(x) {
    return K.selu(x);
}
exports.selu = selu;
function relu(x) {
    return K.relu(x);
}
exports.relu = relu;
function relu6(x) {
    return K.minimum(tfjs_core_1.scalar(6.0), K.relu(x));
}
exports.relu6 = relu6;
function linear(x) {
    return x;
}
exports.linear = linear;
function sigmoid(x) {
    return K.sigmoid(x);
}
exports.sigmoid = sigmoid;
function hardSigmoid(x) {
    return K.hardSigmoid(x);
}
exports.hardSigmoid = hardSigmoid;
function softplus(x) {
    return K.softplus(x);
}
exports.softplus = softplus;
function softsign(x) {
    return K.softsign(x);
}
exports.softsign = softsign;
function tanh(x) {
    return K.tanh(x);
}
exports.tanh = tanh;
function softmax(x, axis) {
    if (axis === void 0) { axis = (-1); }
    return K.softmax(x, axis);
}
exports.softmax = softmax;
function serializeActivation(activation) {
    return activation.name;
}
exports.serializeActivation = serializeActivation;

},{"@tensorflow/tfjs-core":64,"./backend/tfjs_backend":94,"./errors":171}],173:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var activations_1 = require("../activations");
var tfjs_backend_1 = require("../backend/tfjs_backend");
var tfjs_backend_2 = require("../backend/tfjs_backend");
var topology_1 = require("../engine/topology");
var errors_1 = require("../errors");
var types_1 = require("../types");
var generic_utils = require("../utils/generic_utils");
var LeakyReLU = (function (_super) {
    __extends(LeakyReLU, _super);
    function LeakyReLU(config) {
        var _this = _super.call(this, config == null ? {} : config) || this;
        _this.DEFAULT_ALPHA = 0.3;
        if (config == null) {
            config = {};
        }
        _this.alpha = config.alpha == null ? _this.DEFAULT_ALPHA : config.alpha;
        return _this;
    }
    LeakyReLU.prototype.call = function (inputs, kwargs) {
        var x = generic_utils.getExactlyOneTensor(inputs);
        return tfjs_core_1.leakyRelu(x, this.alpha);
    };
    LeakyReLU.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    LeakyReLU.prototype.getClassName = function () {
        return 'LeakyReLU';
    };
    LeakyReLU.prototype.getConfig = function () {
        var config = { alpha: this.alpha };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return LeakyReLU;
}(topology_1.Layer));
exports.LeakyReLU = LeakyReLU;
generic_utils.ClassNameMap.register('LeakyReLU', LeakyReLU);
var ELU = (function (_super) {
    __extends(ELU, _super);
    function ELU(config) {
        var _this = _super.call(this, config == null ? {} : config) || this;
        _this.DEFAULT_ALPHA = 1.0;
        if (config == null) {
            config = {};
        }
        if (config.alpha != null && config.alpha !== _this.DEFAULT_ALPHA) {
            throw new errors_1.NotImplementedError("Non-default alpha value (" + config.alpha + ") is not supported by the " +
                "ELU layer yet.");
        }
        _this.alpha = config.alpha == null ? _this.DEFAULT_ALPHA : config.alpha;
        return _this;
    }
    ELU.prototype.call = function (inputs, kwargs) {
        var x = generic_utils.getExactlyOneTensor(inputs);
        return tfjs_core_1.elu(x);
    };
    ELU.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    ELU.prototype.getClassName = function () {
        return 'ELU';
    };
    ELU.prototype.getConfig = function () {
        var config = { alpha: this.alpha };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return ELU;
}(topology_1.Layer));
exports.ELU = ELU;
generic_utils.ClassNameMap.register('ELU', ELU);
var ThresholdedReLU = (function (_super) {
    __extends(ThresholdedReLU, _super);
    function ThresholdedReLU(config) {
        var _this = _super.call(this, config == null ? {} : config) || this;
        _this.DEFAULT_THETA = 1.0;
        if (config == null) {
            config = {};
        }
        _this.theta = config.theta == null ? _this.DEFAULT_THETA : config.theta;
        _this.thetaTensor = tfjs_backend_2.getScalar(_this.theta);
        return _this;
    }
    ThresholdedReLU.prototype.call = function (inputs, kwargs) {
        var x = generic_utils.getExactlyOneTensor(inputs);
        return x.mul(tfjs_backend_1.cast(x.greater(this.thetaTensor), types_1.DType.float32));
    };
    ThresholdedReLU.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    ThresholdedReLU.prototype.getClassName = function () {
        return 'ThresholdedReLU';
    };
    ThresholdedReLU.prototype.getConfig = function () {
        var config = { theta: this.theta };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return ThresholdedReLU;
}(topology_1.Layer));
exports.ThresholdedReLU = ThresholdedReLU;
generic_utils.ClassNameMap.register('ThresholdedReLU', ThresholdedReLU);
var Softmax = (function (_super) {
    __extends(Softmax, _super);
    function Softmax(config) {
        var _this = _super.call(this, config == null ? {} : config) || this;
        _this.DEFAULT_AXIS = 1.0;
        if (config == null) {
            config = {};
        }
        _this.axis = config.theta == null ? _this.DEFAULT_AXIS : config.theta;
        return _this;
    }
    Softmax.prototype.call = function (inputs, kwargs) {
        var x = generic_utils.getExactlyOneTensor(inputs);
        return activations_1.softmax(x, this.axis);
    };
    Softmax.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    Softmax.prototype.getClassName = function () {
        return 'Softmax';
    };
    Softmax.prototype.getConfig = function () {
        var config = { axis: this.axis };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Softmax;
}(topology_1.Layer));
exports.Softmax = Softmax;
generic_utils.ClassNameMap.register('Softmax', Softmax);

},{"@tensorflow/tfjs-core":64,"../activations":196,"../backend/tfjs_backend":94,"../engine/topology":172,"../errors":171,"../types":91,"../utils/generic_utils":165}],170:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("./backend/tfjs_backend");
var types_1 = require("./types");
var generic_utils_1 = require("./utils/generic_utils");
var Regularizer = (function (_super) {
    __extends(Regularizer, _super);
    function Regularizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Regularizer;
}(types_1.Serializable));
exports.Regularizer = Regularizer;
var L1L2 = (function (_super) {
    __extends(L1L2, _super);
    function L1L2(config) {
        var _this = _super.call(this) || this;
        var l1 = config == null || config.l1 == null ? 0.01 : config.l1;
        var l2 = config == null || config.l2 == null ? 0.01 : config.l2;
        _this.hasL1 = l1 !== 0;
        _this.hasL2 = l2 !== 0;
        _this.l1 = K.getScalar(l1);
        _this.l2 = K.getScalar(l2);
        return _this;
    }
    L1L2_1 = L1L2;
    L1L2.prototype.apply = function (x) {
        var regularization = tfjs_core_1.zeros([1]);
        if (this.hasL1) {
            regularization =
                K.add(regularization, K.sum(K.scalarTimesArray(this.l1, K.abs(x))));
        }
        if (this.hasL2) {
            regularization = K.add(regularization, K.sum(K.scalarTimesArray(this.l2, K.square(x))));
        }
        return regularization.asScalar();
    };
    L1L2.prototype.getClassName = function () {
        return 'L1L2';
    };
    L1L2.prototype.getConfig = function () {
        return { 'l1': this.l1.dataSync()[0], 'l2': this.l2.dataSync()[0] };
    };
    L1L2.fromConfig = function (cls, config) {
        return new L1L2_1({ l1: config.l1, l2: config.l2 });
    };
    L1L2 = L1L2_1 = __decorate([
        tfjs_core_1.doc({ heading: 'Regularizers', namespace: 'regularizers' })
    ], L1L2);
    return L1L2;
    var L1L2_1;
}(Regularizer));
exports.L1L2 = L1L2;
generic_utils_1.ClassNameMap.register('L1L2', L1L2);
function l1(config) {
    return new L1L2({ l1: config != null ? config.l1 : null, l2: 0 });
}
exports.l1 = l1;
function l2(config) {
    return new L1L2({ l2: config != null ? config.l2 : null, l1: 0 });
}
exports.l2 = l2;
exports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    'l1l2': 'L1L2'
};
function serializeRegularizer(constraint) {
    return generic_utils_1.serializeKerasObject(constraint);
}
exports.serializeRegularizer = serializeRegularizer;
function deserializeRegularizer(config, customObjects) {
    if (customObjects === void 0) { customObjects = {}; }
    return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'regularizer');
}
exports.deserializeRegularizer = deserializeRegularizer;
function getRegularizer(identifier) {
    if (identifier == null) {
        return null;
    }
    if (typeof identifier === 'string') {
        var className = identifier in exports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?
            exports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :
            identifier;
        var config = { className: className, config: {} };
        return deserializeRegularizer(config);
    }
    else if (identifier instanceof Regularizer) {
        return identifier;
    }
    else {
        return deserializeRegularizer(identifier);
    }
}
exports.getRegularizer = getRegularizer;

},{"@tensorflow/tfjs-core":64,"./backend/tfjs_backend":94,"./types":91,"./utils/generic_utils":165}],302:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../errors");
var generic_utils_1 = require("./generic_utils");
var math_utils_1 = require("./math_utils");
function normalizeArray(value, n, name) {
    if (typeof value === 'number') {
        return generic_utils_1.pyListRepeat(value, n);
    }
    else {
        if (value.length !== n) {
            throw new errors_1.ValueError("The " + name + " argument must be a tuple of " + n + " integers. Received: " +
                (value.length + " elements."));
        }
        for (var i = 0; i < n; ++i) {
            var singleValue = value[i];
            if (!math_utils_1.isInteger(singleValue)) {
                throw new errors_1.ValueError("The " + name + " argument must be a tuple of " + n + " integers. Received: " +
                    (JSON.stringify(value) + " including a non-integer number ") +
                    ("" + singleValue));
            }
        }
        return value;
    }
}
exports.normalizeArray = normalizeArray;
function convOutputLength(inputLength, fliterSize, padding, stride, dilation) {
    if (dilation === void 0) { dilation = 1; }
    if (inputLength == null) {
        return inputLength;
    }
    var dilatedFilterSize = fliterSize + (fliterSize - 1) * (dilation - 1);
    var outputLength;
    if (padding === 'same') {
        outputLength = inputLength;
    }
    else {
        outputLength = inputLength - dilatedFilterSize + 1;
    }
    return Math.floor((outputLength + stride - 1) / stride);
}
exports.convOutputLength = convOutputLength;
function deconvLength(dimSize, strideSize, kernelSize, padding) {
    if (dimSize == null) {
        return null;
    }
    if (padding === 'valid') {
        dimSize = dimSize * strideSize + math_utils_1.max([kernelSize - strideSize, 0]);
    }
    else if (padding === 'same') {
        dimSize = dimSize * strideSize;
    }
    else {
        throw new errors_1.ValueError("Unsupport padding mode: " + padding + ".");
    }
    return dimSize;
}
exports.deconvLength = deconvLength;

},{"../errors":171,"./generic_utils":165,"./math_utils":190}],174:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var activations_1 = require("../activations");
var K = require("../backend/tfjs_backend");
var common_1 = require("../common");
var constraints_1 = require("../constraints");
var topology_1 = require("../engine/topology");
var errors_1 = require("../errors");
var initializers_1 = require("../initializers");
var regularizers_1 = require("../regularizers");
var types_1 = require("../types");
var conv_utils_1 = require("../utils/conv_utils");
var generic_utils = require("../utils/generic_utils");
var Conv = (function (_super) {
    __extends(Conv, _super);
    function Conv(rank, config) {
        var _this = _super.call(this, config) || this;
        _this.kernel = null;
        _this.bias = null;
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        _this.rank = rank;
        if (_this.rank !== 1 && _this.rank !== 2) {
            throw new errors_1.NotImplementedError("Convolution layer for rank other than 1 or 2 (" + _this.rank + ") is " +
                "not implemented yet.");
        }
        _this.filters = config.filters;
        _this.kernelSize = conv_utils_1.normalizeArray(config.kernelSize, rank, 'kernelSize');
        _this.strides = conv_utils_1.normalizeArray(config.strides == null ? 1 : config.strides, rank, 'strides');
        _this.padding = config.padding == null ? 'valid' : config.padding;
        common_1.checkPaddingMode(_this.padding);
        _this.dataFormat =
            config.dataFormat == null ? 'channelsLast' : config.dataFormat;
        common_1.checkDataFormat(_this.dataFormat);
        _this.dilationRate = config.dilationRate == null ? 1 : config.dilationRate;
        if (_this.rank === 1 &&
            (Array.isArray(_this.dilationRate) &&
                _this.dilationRate.length !== 1)) {
            throw new errors_1.ValueError("dilationRate must be a number or an array of a single number " +
                "for 1D convolution, but received " +
                ("" + JSON.stringify(_this.dilationRate)));
        }
        if (_this.rank === 2) {
            if (typeof _this.dilationRate === 'number') {
                _this.dilationRate = [_this.dilationRate, _this.dilationRate];
            }
            else if (_this.dilationRate.length !== 2) {
                throw new errors_1.ValueError("dilationRate must be a number or array of two numbers for 2D " +
                    ("convolution, but received " + JSON.stringify(_this.dilationRate)));
            }
        }
        _this.activation = activations_1.getActivation(config.activation);
        _this.useBias = config.useBias == null ? true : config.useBias;
        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.biasInitializer =
            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);
        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);
        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);
        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);
        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);
        return _this;
    }
    Conv.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
        if (inputShape[channelAxis] == null) {
            throw new errors_1.ValueError("The channel dimension of the input should be defined. " +
                ("Found " + inputShape[channelAxis]));
        }
        var inputDim = inputShape[channelAxis];
        var kernelShape = this.kernelSize.concat([inputDim, this.filters]);
        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        }
        this.inputSpec = [{ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) }];
        this.built = true;
        var _a;
    };
    Conv.prototype.call = function (inputs, kwargs) {
        inputs = generic_utils.getExactlyOneTensor(inputs);
        var outputs;
        var biasValue = this.bias == null ? null : this.bias.read();
        if (this.rank === 1) {
            outputs = K.conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate);
        }
        else if (this.rank === 2) {
            outputs = K.conv2dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);
        }
        else if (this.rank === 3) {
            throw new errors_1.NotImplementedError('3D convolution is not implemented yet.');
        }
        if (this.activation != null) {
            outputs = this.activation(outputs);
        }
        return outputs;
    };
    Conv.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var newSpace = [];
        var space = (this.dataFormat === 'channelsLast') ?
            inputShape.slice(1, inputShape.length - 1) :
            inputShape.slice(2);
        for (var i = 0; i < space.length; ++i) {
            var newDim = conv_utils_1.convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :
                this.dilationRate[i]);
            newSpace.push(newDim);
        }
        var outputShape = [inputShape[0]];
        if (this.dataFormat === 'channelsLast') {
            outputShape = outputShape.concat(newSpace);
            outputShape.push(this.filters);
        }
        else {
            outputShape.push(this.filters);
            outputShape = outputShape.concat(newSpace);
        }
        return outputShape;
    };
    Conv.prototype.getConfig = function () {
        var config = {
            rank: this.rank,
            filters: this.filters,
            kernelSize: this.kernelSize,
            strides: this.strides,
            padding: this.padding,
            dataFormat: this.dataFormat,
            dilationRate: this.dilationRate,
            activation: activations_1.serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),
            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),
            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),
            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),
            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),
            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),
            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint)
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Conv;
}(topology_1.Layer));
exports.Conv = Conv;
var Conv2D = (function (_super) {
    __extends(Conv2D, _super);
    function Conv2D(config) {
        return _super.call(this, 2, config) || this;
    }
    Conv2D.prototype.getClassName = function () {
        return 'Conv2D';
    };
    Conv2D.prototype.getConfig = function () {
        var config = _super.prototype.getConfig.call(this);
        delete config['rank'];
        return config;
    };
    return Conv2D;
}(Conv));
exports.Conv2D = Conv2D;
generic_utils.ClassNameMap.register('Conv2D', Conv2D);
var Conv2DTranspose = (function (_super) {
    __extends(Conv2DTranspose, _super);
    function Conv2DTranspose(config) {
        var _this = _super.call(this, config) || this;
        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];
        if (_this.padding !== 'same' && _this.padding !== 'valid') {
            throw new errors_1.ValueError("Conv2DTranspose currently supports only padding modes 'same' " +
                ("and 'valid', but received padding mode " + _this.padding));
        }
        return _this;
    }
    Conv2DTranspose.prototype.getClassName = function () {
        return 'Conv2DTranspose';
    };
    Conv2DTranspose.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        if (inputShape.length !== 4) {
            throw new errors_1.ValueError('Input should have rank 4; Received input shape: ' +
                JSON.stringify(inputShape));
        }
        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
        if (inputShape[channelAxis] == null) {
            throw new errors_1.ValueError('The channel dimension of the inputs should be defined. ' +
                'Found `None`.');
        }
        var inputDim = inputShape[channelAxis];
        var kernelShape = this.kernelSize.concat([this.filters, inputDim]);
        this.kernel = this.addWeight('kernel', kernelShape, types_1.DType.float32, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.filters], types_1.DType.float32, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        }
        this.inputSpec =
            [new topology_1.InputSpec({ ndim: 4, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];
        this.built = true;
        var _a;
    };
    Conv2DTranspose.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return tfjs_core_1.tidy(function () {
            var input = generic_utils.getExactlyOneTensor(inputs);
            if (input.shape.length !== 4) {
                throw new errors_1.ValueError("Conv2DTranspose.call() expects input tensor to be rank-4, but " +
                    ("received a tensor of rank-" + input.shape.length));
            }
            var inputShape = input.shape;
            var batchSize = inputShape[0];
            var hAxis;
            var wAxis;
            if (_this.dataFormat === 'channelsFirst') {
                hAxis = 2;
                wAxis = 3;
            }
            else {
                hAxis = 1;
                wAxis = 2;
            }
            var height = inputShape[hAxis];
            var width = inputShape[wAxis];
            var kernelH = _this.kernelSize[0];
            var kernelW = _this.kernelSize[1];
            var strideH = _this.strides[0];
            var strideW = _this.strides[1];
            var outHeight = conv_utils_1.deconvLength(height, strideH, kernelH, _this.padding);
            var outWidth = conv_utils_1.deconvLength(width, strideW, kernelW, _this.padding);
            var outputShape = [batchSize, outHeight, outWidth, _this.filters];
            if (_this.dataFormat !== 'channelsLast') {
                input = K.transpose(input, [0, 2, 3, 1]);
            }
            var outputs = tfjs_core_1.conv2dTranspose(input, _this.kernel.read(), outputShape, _this.strides, _this.padding);
            if (_this.dataFormat !== 'channelsLast') {
                outputs = K.transpose(outputs, [0, 3, 1, 2]);
            }
            if (_this.bias != null) {
                outputs =
                    K.biasAdd(outputs, _this.bias.read(), _this.dataFormat);
            }
            if (_this.activation != null) {
                outputs = _this.activation(outputs);
            }
            return outputs;
        });
    };
    Conv2DTranspose.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var outputShape = inputShape.slice();
        var channelAxis;
        var heightAxis;
        var widthAxis;
        if (this.dataFormat === 'channelsFirst') {
            channelAxis = 1;
            heightAxis = 2;
            widthAxis = 3;
        }
        else {
            channelAxis = 3;
            heightAxis = 1;
            widthAxis = 2;
        }
        var kernelH = this.kernelSize[0];
        var kernelW = this.kernelSize[1];
        var strideH = this.strides[0];
        var strideW = this.strides[1];
        outputShape[channelAxis] = this.filters;
        outputShape[heightAxis] =
            conv_utils_1.deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);
        outputShape[widthAxis] =
            conv_utils_1.deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);
        return outputShape;
    };
    Conv2DTranspose.prototype.getConfig = function () {
        var config = _super.prototype.getConfig.call(this);
        delete config['dilationRate'];
        return config;
    };
    return Conv2DTranspose;
}(Conv2D));
exports.Conv2DTranspose = Conv2DTranspose;
generic_utils.ClassNameMap.register('Conv2DTranspose', Conv2DTranspose);
var SeparableConv = (function (_super) {
    __extends(SeparableConv, _super);
    function SeparableConv(rank, config) {
        var _this = _super.call(this, rank, config) || this;
        _this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';
        _this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';
        _this.depthwiseKernel = null;
        _this.pointwiseKernel = null;
        if (config.filters == null) {
            throw new errors_1.ValueError('The `filters` configuration field is required by SeparableConv, ' +
                'but is unspecified.');
        }
        if (config.kernelInitializer != null || config.kernelRegularizer != null ||
            config.kernelConstraint != null) {
            throw new errors_1.ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +
                'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +
                'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +
                'pointwiseRegularizer and pointwiseConstraint instead.');
        }
        if (config.padding != null && config.padding !== 'same' &&
            config.padding !== 'valid') {
            throw new errors_1.ValueError("SeparableConv" + _this.rank + "D supports only padding modes: " +
                ("'same' and 'valid', but received " + JSON.stringify(config.padding)));
        }
        _this.depthMultiplier =
            config.depthMultiplier == null ? 1 : config.depthMultiplier;
        _this.depthwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_DEPTHWISE_INITIALIZER);
        _this.depthwiseRegularizer = regularizers_1.getRegularizer(config.depthwiseRegularizer);
        _this.depthwiseConstraint = constraints_1.getConstraint(config.depthwiseConstraint);
        _this.pointwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_POINTWISE_INITIALIZER);
        _this.pointwiseRegularizer = regularizers_1.getRegularizer(config.pointwiseRegularizer);
        _this.pointwiseConstraint = constraints_1.getConstraint(config.pointwiseConstraint);
        return _this;
    }
    SeparableConv.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        if (inputShape.length < this.rank + 2) {
            throw new errors_1.ValueError("Inputs to SeparableConv" + this.rank + "D should have rank " +
                (this.rank + 2 + ", but received input shape: ") +
                ("" + JSON.stringify(inputShape)));
        }
        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {
            throw new errors_1.ValueError("The channel dimension of the inputs should be defined, " +
                ("but found " + JSON.stringify(inputShape[channelAxis])));
        }
        var inputDim = inputShape[channelAxis];
        var depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);
        var pointwiseKernelShape = [];
        for (var i = 0; i < this.rank; ++i) {
            pointwiseKernelShape.push(1);
        }
        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);
        var trainable = true;
        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, types_1.DType.float32, this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);
        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, types_1.DType.float32, this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.filters], types_1.DType.float32, this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);
        }
        else {
            this.bias = null;
        }
        this.inputSpec =
            [new topology_1.InputSpec({ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];
        this.built = true;
        var _a;
    };
    SeparableConv.prototype.call = function (inputs, kwargs) {
        inputs = generic_utils.getExactlyOneTensor(inputs);
        var output;
        if (this.rank === 1) {
            throw new errors_1.NotImplementedError('1D separable convolution is not implemented yet.');
        }
        else if (this.rank === 2) {
            if (this.dataFormat === 'channelsFirst') {
                inputs = K.transpose(inputs, [0, 2, 3, 1]);
            }
            output = tfjs_core_1.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');
        }
        if (this.useBias) {
            output = K.biasAdd(output, this.bias.read(), this.dataFormat);
        }
        if (this.activation != null) {
            output = this.activation(output);
        }
        if (this.dataFormat === 'channelsFirst') {
            output = K.transpose(output, [0, 3, 1, 2]);
        }
        return output;
    };
    SeparableConv.prototype.getClassName = function () {
        return 'SeparableConv';
    };
    SeparableConv.prototype.getConfig = function () {
        var config = _super.prototype.getConfig.call(this);
        delete config['rank'];
        delete config['kernelInitializer'];
        delete config['kernelRegularizer'];
        delete config['kernelConstraint'];
        config['depthwiseInitializer'] =
            initializers_1.serializeInitializer(this.depthwiseInitializer);
        config['pointwiseInitializer'] =
            initializers_1.serializeInitializer(this.pointwiseInitializer);
        config['depthwiseRegularizer'] =
            regularizers_1.serializeRegularizer(this.depthwiseRegularizer);
        config['pointwiseRegularizer'] =
            regularizers_1.serializeRegularizer(this.pointwiseRegularizer);
        config['depthwiseConstraint'] =
            constraints_1.serializeConstraint(this.depthwiseConstraint);
        config['pointwiseConstraint'] =
            constraints_1.serializeConstraint(this.pointwiseConstraint);
        return config;
    };
    return SeparableConv;
}(Conv));
exports.SeparableConv = SeparableConv;
var SeparableConv2D = (function (_super) {
    __extends(SeparableConv2D, _super);
    function SeparableConv2D(config) {
        return _super.call(this, 2, config) || this;
    }
    SeparableConv2D.prototype.getClassName = function () {
        return 'SeparableConv2D';
    };
    return SeparableConv2D;
}(SeparableConv));
exports.SeparableConv2D = SeparableConv2D;
generic_utils.ClassNameMap.register('SeparableConv2D', SeparableConv2D);
var Conv1D = (function (_super) {
    __extends(Conv1D, _super);
    function Conv1D(config) {
        var _this = _super.call(this, 1, config) || this;
        _this.inputSpec = [{ ndim: 3 }];
        return _this;
    }
    Conv1D.prototype.getClassName = function () {
        return 'Conv1D';
    };
    Conv1D.prototype.getConfig = function () {
        var config = _super.prototype.getConfig.call(this);
        delete config['rank'];
        delete config['dataFormat'];
        return config;
    };
    return Conv1D;
}(Conv));
exports.Conv1D = Conv1D;
generic_utils.ClassNameMap.register('Conv1D', Conv1D);

},{"@tensorflow/tfjs-core":64,"../activations":196,"../backend/tfjs_backend":94,"../common":185,"../constraints":166,"../engine/topology":172,"../errors":171,"../initializers":167,"../regularizers":170,"../types":91,"../utils/conv_utils":302,"../utils/generic_utils":165}],175:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var K = require("../backend/tfjs_backend");
var constraints_1 = require("../constraints");
var errors_1 = require("../errors");
var initializers_1 = require("../initializers");
var regularizers_1 = require("../regularizers");
var conv_utils_1 = require("../utils/conv_utils");
var generic_utils = require("../utils/generic_utils");
var generic_utils_1 = require("../utils/generic_utils");
var convolutional_1 = require("./convolutional");
var DepthwiseConv2D = (function (_super) {
    __extends(DepthwiseConv2D, _super);
    function DepthwiseConv2D(config) {
        var _this = _super.call(this, config) || this;
        _this.depthwiseKernel = null;
        _this.depthMultiplier =
            config.depthMultiplier == null ? 1 : config.depthMultiplier;
        _this.depthwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.depthwiseConstraint = constraints_1.getConstraint(config.depthwiseConstraint);
        _this.depthwiseRegularizer = regularizers_1.getRegularizer(config.depthwiseRegularizer);
        return _this;
    }
    DepthwiseConv2D.prototype.getClassName = function () {
        return 'DepthwiseConv2D';
    };
    DepthwiseConv2D.prototype.build = function (inputShape) {
        inputShape = generic_utils_1.getExactlyOneShape(inputShape);
        if (inputShape.length < 4) {
            throw new errors_1.ValueError("Inputs to DepthwiseConv2D should have rank 4. " +
                ("Received input shape: " + JSON.stringify(inputShape) + "."));
        }
        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;
        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {
            throw new errors_1.ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' +
                ("be defined, but is not (" + inputShape[channelAxis] + ")."));
        }
        var inputDim = inputShape[channelAxis];
        var depthwiseKernelShape = [
            this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier
        ];
        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        }
        else {
            this.bias = null;
        }
        this.built = true;
    };
    DepthwiseConv2D.prototype.call = function (inputs, kwargs) {
        inputs = generic_utils_1.getExactlyOneTensor(inputs);
        var outputs = K.depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
        if (this.useBias) {
            outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);
        }
        if (this.activation != null) {
            outputs = this.activation(outputs);
        }
        return outputs;
    };
    DepthwiseConv2D.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils_1.getExactlyOneShape(inputShape);
        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];
        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];
        var outFilters = this.dataFormat === 'channelsFirst' ?
            inputShape[1] * this.depthMultiplier :
            inputShape[3] * this.depthMultiplier;
        var outRows = conv_utils_1.convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);
        var outCols = conv_utils_1.convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);
        if (this.dataFormat === 'channelsFirst') {
            return [inputShape[0], outFilters, outRows, outCols];
        }
        else {
            return [inputShape[0], outRows, outCols, outFilters];
        }
    };
    return DepthwiseConv2D;
}(convolutional_1.Conv2D));
exports.DepthwiseConv2D = DepthwiseConv2D;
generic_utils.ClassNameMap.register('DepthwiseConv2D', DepthwiseConv2D);

},{"../backend/tfjs_backend":94,"../constraints":166,"../errors":171,"../initializers":167,"../regularizers":170,"../utils/conv_utils":302,"../utils/generic_utils":165,"./convolutional":174}],176:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var activations_1 = require("../activations");
var K = require("../backend/tfjs_backend");
var constraints_1 = require("../constraints");
var topology_1 = require("../engine/topology");
var errors_1 = require("../errors");
var initializers_1 = require("../initializers");
var regularizers_1 = require("../regularizers");
var generic_utils = require("../utils/generic_utils");
var generic_utils_1 = require("../utils/generic_utils");
var math_utils = require("../utils/math_utils");
var Dropout = (function (_super) {
    __extends(Dropout, _super);
    function Dropout(config) {
        var _this = _super.call(this, config) || this;
        _this.rate = Math.max(Math.min(config.rate, 1), 0);
        _this.rateScalar = K.getScalar(_this.rate);
        _this.noiseShape = config.noiseShape;
        _this.seed = config.seed;
        if (_this.seed != null) {
            throw new errors_1.NotImplementedError('Non-default seed is not implemented in Dropout layer yet: ' +
                _this.seed);
        }
        _this.supportsMasking = true;
        return _this;
    }
    Dropout.prototype.getNoiseShape = function (input) {
        if (this.noiseShape == null) {
            return this.noiseShape;
        }
        var inputShape = input.shape;
        var noiseShape = [];
        for (var i = 0; i < this.noiseShape.length; ++i) {
            noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);
        }
        return noiseShape;
    };
    Dropout.prototype.call = function (inputs, kwargs) {
        var _this = this;
        this.invokeCallHook(inputs, kwargs);
        var input = generic_utils.getExactlyOneTensor(inputs);
        if (this.noiseShape != null &&
            !tfjs_core_1.util.arraysEqual(input.shape, this.noiseShape)) {
            throw new errors_1.NotImplementedError('Non-default noise shape is not implemented in Dropout layer yet: ' +
                JSON.stringify(this.noiseShape));
        }
        if (0 < this.rate && this.rate < 1) {
            var training = kwargs['training'] == null ? false : kwargs['training'];
            var noiseShape_1 = this.getNoiseShape(input);
            var output = K.inTrainPhase(function () { return K.dropout(input, _this.rateScalar, noiseShape_1, _this.seed); }, function () { return input; }, training);
            return output;
        }
        return inputs;
    };
    Dropout.prototype.getClassName = function () {
        return 'Dropout';
    };
    Dropout.prototype.getConfig = function () {
        var config = {
            rate: this.rate,
            noiseShape: this.noiseShape,
            seed: this.seed,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Dropout;
}(topology_1.Layer));
exports.Dropout = Dropout;
generic_utils.ClassNameMap.register('Dropout', Dropout);
var Dense = (function (_super) {
    __extends(Dense, _super);
    function Dense(config) {
        var _this = _super.call(this, config) || this;
        _this.activation = null;
        _this.useBias = true;
        _this.kernel = null;
        _this.bias = null;
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        if (config.batchInputShape == null && config.inputShape == null &&
            config.inputDim != null) {
            var batchSize = null;
            if (config.batchSize != null) {
                batchSize = config.batchSize;
            }
            _this.batchInputShape = [batchSize, config.inputDim];
        }
        _this.units = config.units;
        _this.activation = activations_1.getActivation(config.activation);
        if (config.useBias != null) {
            _this.useBias = config.useBias;
        }
        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.biasInitializer =
            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);
        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);
        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);
        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);
        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);
        _this.inputSpec = [{ minNDim: 2 }];
        return _this;
    }
    Dense.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var inputLastDim = inputShape[inputShape.length - 1];
        if (this.kernel == null) {
            this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
            if (this.useBias) {
                this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
            }
        }
        this.inputSpec = [{ minNDim: 2, axes: (_a = {}, _a[-1] = inputLastDim, _a) }];
        this.built = true;
        var _a;
    };
    Dense.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var outputShape = inputShape.slice();
        outputShape[outputShape.length - 1] = this.units;
        return outputShape;
    };
    Dense.prototype.call = function (inputs, kwargs) {
        this.invokeCallHook(inputs, kwargs);
        var input = generic_utils.getExactlyOneTensor(inputs);
        var output = K.dot(input, this.kernel.read());
        if (this.bias != null) {
            output = K.biasAdd(output, this.bias.read());
        }
        if (this.activation != null) {
            output = this.activation(output);
        }
        return output;
    };
    Dense.prototype.getClassName = function () {
        return 'Dense';
    };
    Dense.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: activations_1.serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),
            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),
            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),
            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),
            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),
            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),
            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint)
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Dense;
}(topology_1.Layer));
exports.Dense = Dense;
generic_utils.ClassNameMap.register('Dense', Dense);
var Flatten = (function (_super) {
    __extends(Flatten, _super);
    function Flatten(config) {
        var _this = _super.call(this, config || {}) || this;
        _this.inputSpec = [{ minNDim: 3 }];
        return _this;
    }
    Flatten.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        for (var _i = 0, _a = inputShape.slice(1); _i < _a.length; _i++) {
            var dim = _a[_i];
            if (dim == null) {
                throw new errors_1.ValueError("The shape of the input to \"Flatten\" is not fully defined " +
                    ("(got " + inputShape.slice(1) + "). Make sure to pass a complete ") +
                    "\"input_shape\" or \"batch_input_shape\" argument to the first " +
                    "layer in your model.");
            }
        }
        return [inputShape[0], math_utils.arrayProd(inputShape, 1)];
    };
    Flatten.prototype.getClassName = function () {
        return 'Flatten';
    };
    Flatten.prototype.call = function (inputs, kwargs) {
        this.invokeCallHook(inputs, kwargs);
        return K.batchFlatten(generic_utils.getExactlyOneTensor(inputs));
    };
    return Flatten;
}(topology_1.Layer));
exports.Flatten = Flatten;
generic_utils.ClassNameMap.register('Flatten', Flatten);
var Activation = (function (_super) {
    __extends(Activation, _super);
    function Activation(config) {
        var _this = _super.call(this, config) || this;
        _this.supportsMasking = true;
        _this.activation = activations_1.getActivation(config.activation);
        return _this;
    }
    Activation.prototype.getClassName = function () {
        return 'Activation';
    };
    Activation.prototype.call = function (inputs, kwargs) {
        this.invokeCallHook(inputs, kwargs);
        var input = generic_utils.getExactlyOneTensor(inputs);
        return this.activation(input);
    };
    return Activation;
}(topology_1.Layer));
exports.Activation = Activation;
generic_utils.ClassNameMap.register('Activation', Activation);
var RepeatVector = (function (_super) {
    __extends(RepeatVector, _super);
    function RepeatVector(config) {
        var _this = _super.call(this, config) || this;
        _this.n = config.n;
        _this.inputSpec = [{ ndim: 2 }];
        return _this;
    }
    RepeatVector.prototype.computeOutputShape = function (inputShape) {
        return [inputShape[0], this.n, inputShape[1]];
    };
    RepeatVector.prototype.call = function (inputs, kwargs) {
        inputs = generic_utils_1.getExactlyOneTensor(inputs);
        return K.repeat(inputs, this.n);
    };
    RepeatVector.prototype.getClassName = function () {
        return 'RepeatVector';
    };
    RepeatVector.prototype.getConfig = function () {
        var config = {
            n: this.n,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return RepeatVector;
}(topology_1.Layer));
exports.RepeatVector = RepeatVector;
generic_utils.ClassNameMap.register('RepeatVector', RepeatVector);
var Reshape = (function (_super) {
    __extends(Reshape, _super);
    function Reshape(config) {
        var _this = _super.call(this, config) || this;
        _this.targetShape = config.targetShape;
        for (var i = 0; i < _this.targetShape.length; ++i) {
            if (_this.isUnknown(_this.targetShape[i])) {
                _this.targetShape[i] = null;
            }
        }
        return _this;
    }
    Reshape.prototype.isUnknown = function (dim) {
        return dim < 0 || dim == null;
    };
    Reshape.prototype.fixUnknownDimension = function (inputShape, outputShape) {
        var errorMsg = 'Total size of new array must be unchanged.';
        var finalShape = outputShape.slice();
        var known = 1;
        var unknown = null;
        for (var i = 0; i < finalShape.length; ++i) {
            var dim = finalShape[i];
            if (this.isUnknown(dim)) {
                if (unknown === null) {
                    unknown = i;
                }
                else {
                    throw new errors_1.ValueError('Can only specifiy one unknown dimension.');
                }
            }
            else {
                known *= dim;
            }
        }
        var originalSize = math_utils.arrayProd(inputShape);
        if (unknown !== null) {
            if (known === 0 || originalSize % known !== 0) {
                throw new errors_1.ValueError(errorMsg);
            }
            finalShape[unknown] = originalSize / known;
        }
        else if (originalSize !== known) {
            throw new errors_1.ValueError(errorMsg);
        }
        return finalShape;
    };
    Reshape.prototype.computeOutputShape = function (inputShape) {
        var anyUnknownDims = false;
        for (var i = 0; i < inputShape.length; ++i) {
            if (this.isUnknown(inputShape[i])) {
                anyUnknownDims = true;
                break;
            }
        }
        if (anyUnknownDims) {
            return inputShape.slice(0, 1).concat(this.targetShape);
        }
        else {
            return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));
        }
    };
    Reshape.prototype.getClassName = function () {
        return 'Reshape';
    };
    Reshape.prototype.call = function (inputs, kwargs) {
        this.invokeCallHook(inputs, kwargs);
        var input = generic_utils.getExactlyOneTensor(inputs);
        var inputShape = K.shape(input);
        var outputShape = inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));
        return K.reshape(input, outputShape);
    };
    return Reshape;
}(topology_1.Layer));
exports.Reshape = Reshape;
generic_utils.ClassNameMap.register('Reshape', Reshape);

},{"@tensorflow/tfjs-core":64,"../activations":196,"../backend/tfjs_backend":94,"../constraints":166,"../engine/topology":172,"../errors":171,"../initializers":167,"../regularizers":170,"../utils/generic_utils":165,"../utils/math_utils":190}],177:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var K = require("../backend/tfjs_backend");
var constraints_1 = require("../constraints");
var topology_1 = require("../engine/topology");
var errors_1 = require("../errors");
var initializers_1 = require("../initializers");
var regularizers_1 = require("../regularizers");
var generic_utils = require("../utils/generic_utils");
var generic_utils_1 = require("../utils/generic_utils");
var Embedding = (function (_super) {
    __extends(Embedding, _super);
    function Embedding(config) {
        var _this = _super.call(this, config) || this;
        _this.embeddings = null;
        _this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';
        if (config.batchInputShape == null && config.inputShape == null) {
            var batchSize = null;
            if (config.batchSize != null) {
                batchSize = config.batchSize;
            }
            if (config.inputLength == null) {
                _this.batchInputShape = [batchSize, null];
            }
            else {
                _this.batchInputShape =
                    [batchSize].concat(generic_utils.toList(config.inputLength));
            }
        }
        _this.inputDim = config.inputDim;
        _this.outputDim = config.outputDim;
        _this.embeddingsInitializer = initializers_1.getInitializer(config.embeddingsInitializer || _this.DEFAULT_EMBEDDINGS_INITIALIZER);
        _this.embeddingsRegularizer = regularizers_1.getRegularizer(config.embeddingsRegularizer);
        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);
        _this.embeddingsConstraint = constraints_1.getConstraint(config.embeddingsConstraint);
        _this.maskZero = config.maskZero;
        _this.inputLength = config.inputLength;
        return _this;
    }
    Embedding.prototype.build = function (inputShape) {
        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);
        this.built = true;
    };
    Embedding.prototype.computeMask = function (inputs, mask) {
        throw new errors_1.NotImplementedError('computeMask has not been implemented for Embedding yet');
    };
    Embedding.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        if (this.inputLength == null) {
            return inputShape.concat([this.outputDim]);
        }
        var inLens = generic_utils.toList(this.inputLength);
        if (inLens.length !== inputShape.length - 1) {
            throw new errors_1.ValueError("\"inputLength\" is " + this.inputLength + ", but received " +
                ("input shape has shape " + inputShape));
        }
        else {
            var i = 0;
            for (var k = 0; k < inLens.length; ++k) {
                var s1 = inLens[k];
                var s2 = inputShape[k + 1];
                if ((s1 != null) && (s2 != null) && (s1 !== s2)) {
                    throw new errors_1.ValueError("\"inputLength\" is " + this.inputLength + ", but received " +
                        ("input shape has shape " + inputShape));
                }
                else if (s1 == null) {
                    inLens[i] = s2;
                }
                i++;
            }
        }
        return [inputShape[0]].concat(inLens, [this.outputDim]);
    };
    Embedding.prototype.call = function (inputs, kwargs) {
        this.invokeCallHook(inputs, kwargs);
        var input = generic_utils.getExactlyOneTensor(inputs);
        if (K.dtype(input) !== 'int32') {
            input = K.cast(input, 'int32');
        }
        var output = K.gather(this.embeddings.read(), input.as1D());
        return K.reshape(output, generic_utils_1.getExactlyOneShape(this.computeOutputShape(input.shape)));
    };
    Embedding.prototype.getClassName = function () {
        return 'Embedding';
    };
    Embedding.prototype.getConfig = function () {
        var config = {
            inputDim: this.inputDim,
            outputDim: this.outputDim,
            embeddingsInitializer: initializers_1.serializeInitializer(this.embeddingsInitializer),
            embeddingsRegularizer: regularizers_1.serializeRegularizer(this.embeddingsRegularizer),
            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),
            embeddingsConstraint: constraints_1.serializeConstraint(this.embeddingsConstraint),
            maskZero: this.maskZero,
            inputLength: this.inputLength
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Embedding;
}(topology_1.Layer));
exports.Embedding = Embedding;
generic_utils.ClassNameMap.register('Embedding', Embedding);

},{"../backend/tfjs_backend":94,"../constraints":166,"../engine/topology":172,"../errors":171,"../initializers":167,"../regularizers":170,"../utils/generic_utils":165}],178:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("../backend/tfjs_backend");
var topology_1 = require("../engine/topology");
var errors_1 = require("../errors");
var generic_utils = require("../utils/generic_utils");
var mathUtils = require("../utils/math_utils");
var Merge = (function (_super) {
    __extends(Merge, _super);
    function Merge(config) {
        var _this = _super.call(this, config || {}) || this;
        _this.supportsMasking = true;
        return _this;
    }
    Merge.prototype.getClassName = function () {
        return 'Merge';
    };
    Merge.prototype.mergeFunction = function (inputs) {
        throw new errors_1.NotImplementedError();
    };
    Merge.prototype.computeElementwiseOpOutputShape = function (shape1, shape2) {
        if (shape1 == null || shape2 == null) {
            return null;
        }
        else if (shape1.length < shape2.length) {
            return this.computeElementwiseOpOutputShape(shape2, shape1);
        }
        else if (shape2.length === 0) {
            return shape1;
        }
        var outputShape = shape1.slice(0, shape1.length - shape2.length);
        for (var k = 0; k < shape2.length; ++k) {
            var i = shape1[shape1.length - shape2.length + k];
            var j = shape2[k];
            if (i == null || j == null || i < 0 || j < 0) {
                outputShape.push(null);
            }
            else if (i === 1) {
                outputShape.push(j);
            }
            else if (j === 1) {
                outputShape.push(i);
            }
            else {
                if (i !== j) {
                    throw new errors_1.ValueError('Operands could not be broadcast together with shapes ' +
                        JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));
                }
                outputShape.push(i);
            }
        }
        return outputShape;
    };
    Merge.prototype.build = function (inputShape) {
        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {
            inputShape = [generic_utils.getExactlyOneShape(inputShape)];
        }
        inputShape = inputShape;
        if (inputShape.length < 2) {
            throw new errors_1.ValueError('A merge layer should be called on an Array of at least 2 inputs.' +
                (" Got " + inputShape.length + " input(s)."));
        }
        var batchSizes = [];
        for (var _i = 0, inputShape_1 = inputShape; _i < inputShape_1.length; _i++) {
            var shape = inputShape_1[_i];
            if (shape != null && shape[0] !== null) {
                batchSizes.push(shape[0]);
            }
        }
        batchSizes = generic_utils.unique(batchSizes);
        if (batchSizes.length > 1) {
            throw new errors_1.ValueError("Can not merge tensors with different batch sizes. " +
                ("Got tensors with shapes: " + JSON.stringify(inputShape) + "."));
        }
        var outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);
        for (var i = 1; i < inputShape.length; ++i) {
            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);
            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);
        }
        var allRanks = inputShape.map(function (shape) { return shape.length; });
        if (inputShape.indexOf(null) === -1 &&
            generic_utils.unique(allRanks).length === 1) {
            this.reshapeRequired = false;
        }
        else {
            this.reshapeRequired = true;
        }
    };
    Merge.prototype.call = function (inputs, kwargs) {
        inputs = inputs;
        if (this.reshapeRequired) {
            var reshapedInputs = [];
            var inputDims = inputs.map(function (input) { return K.ndim(input); });
            if (inputDims.indexOf(null) === -1) {
                var maxNDim = mathUtils.max(inputDims);
                for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
                    var x = inputs_1[_i];
                    var xNDim = K.ndim(x);
                    for (var k = 0; k < maxNDim - xNDim; ++k) {
                        x = K.expandDims(x, 1);
                    }
                    reshapedInputs.push(x);
                }
                return this.mergeFunction(reshapedInputs);
            }
            else {
                var transposed = false;
                for (var _a = 0, inputs_2 = inputs; _a < inputs_2.length; _a++) {
                    var x = inputs_2[_a];
                    var xNDim = K.ndim(x);
                    if (xNDim == null) {
                        var xShape = K.shape(x);
                        var batchSize = xShape[0];
                        var newShape = xShape.slice(1).concat([batchSize]);
                        var xTransposed = K.reshape(x, [batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));
                        xTransposed = K.permuteDimensions(xTransposed, [1, 0]);
                        xTransposed = K.reshape(xTransposed, newShape);
                        reshapedInputs.push(xTransposed);
                        transposed = true;
                    }
                    else if (xNDim > 1) {
                        var dims = mathUtils.range(1, xNDim).concat([0]);
                        reshapedInputs.push(K.permuteDimensions(x, dims));
                        transposed = true;
                    }
                    else {
                        reshapedInputs.push(x);
                    }
                }
                var y = this.mergeFunction(reshapedInputs);
                var yNDim = K.ndim(y);
                if (transposed) {
                    if (yNDim == null) {
                        var yShape = K.shape(y);
                        var yNDim_1 = yShape.length;
                        var batchSize = yShape[yNDim_1 - 1];
                        var newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));
                        y = K.reshape(K.permuteDimensions(K.reshape(y, [-1, batchSize]), [1, 0]), newShape);
                    }
                    else if (yNDim > 1) {
                        var dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));
                        y = K.permuteDimensions(y, dims);
                    }
                }
                return y;
            }
        }
        else {
            return this.mergeFunction(inputs);
        }
    };
    Merge.prototype.computeOutputShape = function (inputShape) {
        inputShape = inputShape;
        var outputShape;
        if (inputShape[0] == null) {
            outputShape = null;
        }
        else {
            outputShape = inputShape[0].slice(1);
        }
        for (var i = 1; i < inputShape.length; ++i) {
            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);
            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);
        }
        var batchSizes = [];
        for (var _i = 0, inputShape_2 = inputShape; _i < inputShape_2.length; _i++) {
            var shape = inputShape_2[_i];
            if (shape != null && shape[0] !== null) {
                batchSizes.push(shape[0]);
            }
        }
        batchSizes = generic_utils.unique(batchSizes);
        if (batchSizes.length === 1) {
            outputShape = batchSizes.concat(outputShape);
        }
        else {
            outputShape = [null].concat(outputShape);
        }
        return outputShape;
    };
    return Merge;
}(topology_1.Layer));
exports.Merge = Merge;
var Add = (function (_super) {
    __extends(Add, _super);
    function Add(config) {
        return _super.call(this, config) || this;
    }
    Add.prototype.getClassName = function () {
        return 'Add';
    };
    Add.prototype.mergeFunction = function (inputs) {
        var output = K.zeros(inputs[0].shape);
        for (var _i = 0, inputs_3 = inputs; _i < inputs_3.length; _i++) {
            var input = inputs_3[_i];
            output = K.add(output, input);
        }
        return output;
    };
    return Add;
}(Merge));
exports.Add = Add;
generic_utils.ClassNameMap.register('Add', Add);
function add(config) {
    if (Array.isArray(config)) {
        var layer = new Add({});
        return layer.apply(config);
    }
    else {
        return new Add(config);
    }
}
exports.add = add;
var Multiply = (function (_super) {
    __extends(Multiply, _super);
    function Multiply(config) {
        return _super.call(this, config) || this;
    }
    Multiply.prototype.getClassName = function () {
        return 'Multiply';
    };
    Multiply.prototype.mergeFunction = function (inputs) {
        var output = K.ones(inputs[0].shape);
        for (var _i = 0, inputs_4 = inputs; _i < inputs_4.length; _i++) {
            var input = inputs_4[_i];
            output = K.multiply(output, input);
        }
        return output;
    };
    return Multiply;
}(Merge));
exports.Multiply = Multiply;
generic_utils.ClassNameMap.register('Multiply', Multiply);
function multiply(config) {
    if (Array.isArray(config)) {
        var layer = new Multiply({});
        return layer.apply(config);
    }
    else {
        return new Multiply(config);
    }
}
exports.multiply = multiply;
var Average = (function (_super) {
    __extends(Average, _super);
    function Average(config) {
        return _super.call(this, config) || this;
    }
    Average.prototype.getClassName = function () {
        return 'Average';
    };
    Average.prototype.mergeFunction = function (inputs) {
        var output = K.zeros(inputs[0].shape);
        for (var _i = 0, inputs_5 = inputs; _i < inputs_5.length; _i++) {
            var input = inputs_5[_i];
            output = K.add(output, input);
        }
        return K.scalarTimesArray(K.getScalar(1 / inputs.length), output);
    };
    return Average;
}(Merge));
exports.Average = Average;
generic_utils.ClassNameMap.register('Average', Average);
function average(config) {
    if (Array.isArray(config)) {
        var layer = new Average({});
        return layer.apply(config);
    }
    else {
        return new Average(config);
    }
}
exports.average = average;
var Maximum = (function (_super) {
    __extends(Maximum, _super);
    function Maximum(config) {
        return _super.call(this, config) || this;
    }
    Maximum.prototype.getClassName = function () {
        return 'Maximum';
    };
    Maximum.prototype.mergeFunction = function (inputs) {
        var output = inputs[0];
        for (var i = 1; i < inputs.length; ++i) {
            output = K.maximum(output, inputs[i]);
        }
        return output;
    };
    return Maximum;
}(Merge));
exports.Maximum = Maximum;
generic_utils.ClassNameMap.register('Maximum', Maximum);
function maximum(config) {
    if (Array.isArray(config)) {
        var layer = new Maximum({});
        return layer.apply(config);
    }
    else {
        return new Maximum(config);
    }
}
exports.maximum = maximum;
var Minimum = (function (_super) {
    __extends(Minimum, _super);
    function Minimum(config) {
        return _super.call(this, config) || this;
    }
    Minimum.prototype.getClassName = function () {
        return 'Minimum';
    };
    Minimum.prototype.mergeFunction = function (inputs) {
        var output = inputs[0];
        for (var i = 1; i < inputs.length; ++i) {
            output = K.minimum(output, inputs[i]);
        }
        return output;
    };
    return Minimum;
}(Merge));
exports.Minimum = Minimum;
generic_utils.ClassNameMap.register('Minimum', Minimum);
function minimum(config) {
    if (Array.isArray(config)) {
        var layer = new Minimum({});
        return layer.apply(config);
    }
    else {
        return new Minimum(config);
    }
}
exports.minimum = minimum;
var Concatenate = (function (_super) {
    __extends(Concatenate, _super);
    function Concatenate(config) {
        var _this = _super.call(this, config) || this;
        _this.DEFAULT_AXIS = -1;
        if (config == null) {
            config = {};
        }
        _this.axis = config.axis == null ? _this.DEFAULT_AXIS : config.axis;
        _this.supportsMasking = true;
        _this.reshapeRequired = false;
        return _this;
    }
    Concatenate.prototype.getClassName = function () {
        return 'Concatenate';
    };
    Concatenate.prototype.build = function (inputShape) {
        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||
            inputShape.length === 1) {
            throw new errors_1.ValueError('A `Concatenate` layer should be called on a list of at least 2 ' +
                'inputs');
        }
        inputShape = inputShape;
        var allNoneShape = true;
        for (var _i = 0, inputShape_3 = inputShape; _i < inputShape_3.length; _i++) {
            var shape = inputShape_3[_i];
            if (shape != null) {
                allNoneShape = false;
                break;
            }
        }
        if (allNoneShape) {
            return;
        }
        var shapeSet = [];
        for (var i = 0; i < inputShape.length; ++i) {
            var shapeWithoutConcatAxis = inputShape[i].slice();
            shapeWithoutConcatAxis.splice(this.axis, 1);
            var exists = false;
            for (var _a = 0, shapeSet_1 = shapeSet; _a < shapeSet_1.length; _a++) {
                var shape = shapeSet_1[_a];
                if (tfjs_core_1.util.arraysEqual(shape, shapeWithoutConcatAxis)) {
                    exists = true;
                    break;
                }
            }
            if (!exists) {
                shapeSet.push(shapeWithoutConcatAxis);
            }
        }
        if (shapeSet.length > 1) {
            throw new errors_1.ValueError('A `Concatenate` layer requires inputs with matching shapes ' +
                'except for the concat axis. Got input shapes: ' +
                JSON.stringify(inputShape));
        }
    };
    Concatenate.prototype.mergeFunction = function (inputs) {
        return K.concatenate(inputs, this.axis);
    };
    Concatenate.prototype.computeOutputShape = function (inputShape) {
        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {
            throw new errors_1.ValueError('A `Concatenate` layer should be called on a list of inputs.');
        }
        var inputShapes = inputShape;
        var outputShape = inputShapes[0].slice();
        var axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;
        for (var _i = 0, _a = inputShapes.slice(1); _i < _a.length; _i++) {
            var shape = _a[_i];
            if (outputShape[axis] == null || shape[axis] == null) {
                outputShape[axis] = null;
                break;
            }
            outputShape[axis] += shape[axis];
        }
        return outputShape;
    };
    return Concatenate;
}(Merge));
exports.Concatenate = Concatenate;
generic_utils.ClassNameMap.register('Concatenate', Concatenate);
function concatenate(config) {
    if (Array.isArray(config)) {
        var layer = new Concatenate({});
        return layer.apply(config);
    }
    else {
        return new Concatenate(config);
    }
}
exports.concatenate = concatenate;

},{"@tensorflow/tfjs-core":64,"../backend/tfjs_backend":94,"../engine/topology":172,"../errors":171,"../utils/generic_utils":165,"../utils/math_utils":190}],179:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("../backend/tfjs_backend");
var constraints_1 = require("../constraints");
var topology_1 = require("../engine/topology");
var errors_1 = require("../errors");
var initializers_1 = require("../initializers");
var regularizers_1 = require("../regularizers");
var generic_utils = require("../utils/generic_utils");
var math_utils_1 = require("../utils/math_utils");
var BatchNormalization = (function (_super) {
    __extends(BatchNormalization, _super);
    function BatchNormalization(config) {
        var _this = _super.call(this, config) || this;
        _this.supportsMasking = true;
        _this.axis = config.axis == null ? -1 : config.axis;
        _this.momentum = config.momentum == null ? 0.99 : config.momentum;
        _this.epsilon = config.epsilon == null ? 1e-3 : config.epsilon;
        _this.center = config.center == null ? true : config.center;
        _this.scale = config.scale == null ? true : config.scale;
        _this.betaInitializer = initializers_1.getInitializer(config.betaInitializer || 'zeros');
        _this.gammaInitializer = initializers_1.getInitializer(config.gammaInitializer || 'ones');
        _this.movingMeanInitializer =
            initializers_1.getInitializer(config.movingMeanInitializer || 'zeros');
        _this.movingVarianceInitializer =
            initializers_1.getInitializer(config.movingVarianceInitializer || 'ones');
        _this.betaConstraint = constraints_1.getConstraint(config.betaConstraint);
        _this.gammaConstraint = constraints_1.getConstraint(config.gammaConstraint);
        _this.betaRegularizer = regularizers_1.getRegularizer(config.betaRegularizer);
        _this.gammaRegularizer = regularizers_1.getRegularizer(config.gammaRegularizer);
        _this.stepCount = 0;
        return _this;
    }
    BatchNormalization.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);
        var dim = inputShape[axis];
        if (dim == null) {
            throw new errors_1.ValueError("Axis " + axis + " of input tensor should have a defined dimension but " +
                "the layer received an input with shape " +
                (JSON.stringify(inputShape) + "."));
        }
        this.inputSpec =
            [new topology_1.InputSpec({ ndim: inputShape.length, axes: (_a = {}, _a[axis] = dim, _a) })];
        var shape = [dim];
        if (this.scale) {
            this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);
        }
        if (this.center) {
            this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);
        }
        this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);
        this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);
        this.built = true;
        var _a;
    };
    BatchNormalization.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return tfjs_core_1.tidy(function () {
            var training = kwargs['training'] == null ? false : kwargs['training'];
            var input = generic_utils.getExactlyOneTensor(inputs);
            var inputShape = K.shape(input);
            var ndim = inputShape.length;
            var reductionAxes = math_utils_1.range(0, ndim);
            var axis = _this.axis >= 0 ? _this.axis : (_this.axis + ndim);
            reductionAxes.splice(axis, 1);
            var broadcastShape = generic_utils.pyListRepeat(1, ndim);
            broadcastShape[axis] = inputShape[axis];
            var sortedReductionAxes = reductionAxes.slice();
            sortedReductionAxes.sort();
            var needsBroadcasting = !tfjs_core_1.util.arraysEqual(sortedReductionAxes, math_utils_1.range(0, ndim).slice(0, ndim - 1));
            var normalizeInference = function () {
                if (needsBroadcasting) {
                    var broadcastMovingMean = K.reshape(_this.movingMean.read(), broadcastShape);
                    var broadcastMovingVariance = K.reshape(_this.movingVariance.read(), broadcastShape);
                    var broadcastBeta = _this.center ? K.reshape(_this.beta.read(), broadcastShape) : null;
                    var broadcastGamma = _this.scale ? K.reshape(_this.gamma.read(), broadcastShape) : null;
                    return K.batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, _this.epsilon);
                }
                else {
                    return K.batchNormalization(input, _this.movingMean.read(), _this.movingVariance.read(), _this.beta == null ? null : _this.beta.read(), _this.gamma == null ? null : _this.gamma.read(), _this.epsilon);
                }
            };
            if (!training) {
                return normalizeInference();
            }
            var _a = K.normalizeBatchInTraining(input, _this.gamma.read(), _this.beta.read(), reductionAxes, _this.epsilon), normedTraining = _a[0], mean = _a[1], variance = _a[2];
            var sampleSize = math_utils_1.arrayProd(reductionAxes.map(function (axis) { return input.shape[axis]; }));
            var varianceDebiased = variance.mul(K.getScalar(sampleSize / (sampleSize - (1 + _this.epsilon))));
            var updateMovingMeanAndVariance = function () {
                _this.stepCount++;
                var newMovingMean = tfjs_core_1.movingAverage(_this.movingMean.read(), mean, _this.momentum, _this.stepCount);
                _this.movingMean.write(newMovingMean);
                var newMovingVariance = tfjs_core_1.movingAverage(_this.movingVariance.read(), varianceDebiased, _this.momentum, _this.stepCount);
                _this.movingVariance.write(newMovingVariance);
            };
            updateMovingMeanAndVariance();
            return normedTraining;
        });
    };
    BatchNormalization.prototype.getClassName = function () {
        return 'BatchNormalization';
    };
    BatchNormalization.prototype.getConfig = function () {
        var config = {
            axis: this.axis,
            momentum: this.momentum,
            epsilon: this.epsilon,
            center: this.center,
            scale: this.scale,
            betaInitializer: initializers_1.serializeInitializer(this.betaInitializer),
            gammaInitializer: initializers_1.serializeInitializer(this.gammaInitializer),
            movingMeanInitializer: initializers_1.serializeInitializer(this.movingMeanInitializer),
            movingVarianceInitializer: initializers_1.serializeInitializer(this.movingVarianceInitializer),
            betaRegularizer: regularizers_1.serializeRegularizer(this.betaRegularizer),
            gammaRegularizer: regularizers_1.serializeRegularizer(this.gammaRegularizer),
            betaConstraint: constraints_1.serializeConstraint(this.betaConstraint),
            gammaConstraint: constraints_1.serializeConstraint(this.gammaConstraint)
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return BatchNormalization;
}(topology_1.Layer));
exports.BatchNormalization = BatchNormalization;
generic_utils.ClassNameMap.register('BatchNormalization', BatchNormalization);

},{"@tensorflow/tfjs-core":64,"../backend/tfjs_backend":94,"../constraints":166,"../engine/topology":172,"../errors":171,"../initializers":167,"../regularizers":170,"../utils/generic_utils":165,"../utils/math_utils":190}],180:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../backend/common");
var K = require("../backend/tfjs_backend");
var topology_1 = require("../engine/topology");
var errors_1 = require("../errors");
var generic_utils_1 = require("../utils/generic_utils");
var ZeroPadding2D = (function (_super) {
    __extends(ZeroPadding2D, _super);
    function ZeroPadding2D(config) {
        var _this = this;
        if (config == null) {
            config = {};
        }
        _this = _super.call(this, config) || this;
        _this.dataFormat =
            config.dataFormat == null ? common_1.imageDataFormat() : config.dataFormat;
        if (config.padding == null) {
            _this.padding = [[1, 1], [1, 1]];
        }
        else if (typeof config.padding === 'number') {
            _this.padding =
                [[config.padding, config.padding], [config.padding, config.padding]];
        }
        else {
            config.padding = config.padding;
            if (config.padding.length !== 2) {
                throw new errors_1.ValueError("ZeroPadding2D expects padding to be a length-2 array, but " +
                    ("received a length-" + config.padding.length + " array."));
            }
            var heightPadding = void 0;
            var widthPadding = void 0;
            if (typeof config.padding[0] === 'number') {
                heightPadding =
                    [config.padding[0], config.padding[0]];
                widthPadding =
                    [config.padding[1], config.padding[1]];
            }
            else {
                config.padding = config.padding;
                if (config.padding[0].length !== 2) {
                    throw new errors_1.ValueError("ZeroPadding2D expects height padding to be a length-2 array, " +
                        ("but received a length-" + config.padding[0].length + " array."));
                }
                heightPadding = config.padding[0];
                if (config.padding[1].length !== 2) {
                    throw new errors_1.ValueError("ZeroPadding2D expects width padding to be a length-2 array, " +
                        ("but received a length-" + config.padding[1].length + " array."));
                }
                widthPadding = config.padding[1];
            }
            _this.padding = [heightPadding, widthPadding];
        }
        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];
        return _this;
    }
    ZeroPadding2D.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils_1.getExactlyOneShape(inputShape);
        var rows;
        var cols;
        if (this.dataFormat === 'channelsFirst') {
            if (inputShape[2] != null && inputShape[2] >= 0) {
                rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];
            }
            else {
                rows = null;
            }
            if (inputShape[3] != null && inputShape[3] >= 0) {
                cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];
            }
            else {
                cols = null;
            }
            return [inputShape[0], inputShape[1], rows, cols];
        }
        else {
            if (inputShape[1] != null && inputShape[1] >= 0) {
                rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];
            }
            else {
                rows = null;
            }
            if (inputShape[2] != null && inputShape[2] >= 0) {
                cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];
            }
            else {
                cols = null;
            }
            return [inputShape[0], rows, cols, inputShape[3]];
        }
    };
    ZeroPadding2D.prototype.call = function (inputs, kwargs) {
        return K.spatial2dPadding(generic_utils_1.getExactlyOneTensor(inputs), this.padding, this.dataFormat);
    };
    ZeroPadding2D.prototype.getClassName = function () {
        return 'ZeroPadding2D';
    };
    ZeroPadding2D.prototype.getConfig = function () {
        var config = {
            padding: this.padding,
            dataFormat: this.dataFormat,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return ZeroPadding2D;
}(topology_1.Layer));
exports.ZeroPadding2D = ZeroPadding2D;
generic_utils_1.ClassNameMap.register('ZeroPadding2D', ZeroPadding2D);

},{"../backend/common":191,"../backend/tfjs_backend":94,"../engine/topology":172,"../errors":171,"../utils/generic_utils":165}],181:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var K = require("../backend/tfjs_backend");
var common_1 = require("../common");
var topology_1 = require("../engine/topology");
var topology_2 = require("../engine/topology");
var errors_1 = require("../errors");
var conv_utils_1 = require("../utils/conv_utils");
var generic_utils = require("../utils/generic_utils");
var Pooling1D = (function (_super) {
    __extends(Pooling1D, _super);
    function Pooling1D(config) {
        var _this = this;
        if (config.poolSize == null) {
            config.poolSize = 2;
        }
        _this = _super.call(this, config) || this;
        _this.poolSize = [config.poolSize];
        _this.strides = config.strides == null ? _this.poolSize : [config.strides];
        _this.padding = config.padding == null ? 'valid' : config.padding;
        common_1.checkPaddingMode(_this.padding);
        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];
        return _this;
    }
    Pooling1D.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        length = conv_utils_1.convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);
        return [inputShape[0], length, inputShape[2]];
    };
    Pooling1D.prototype.call = function (inputs, kwargs) {
        this.invokeCallHook(inputs, kwargs);
        inputs = K.expandDims(generic_utils.getExactlyOneTensor(inputs), 2);
        var output = this.poolingFunction(generic_utils.getExactlyOneTensor(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, 'channelsLast');
        return K.squeeze(output, 2);
    };
    Pooling1D.prototype.getConfig = function () {
        var config = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Pooling1D;
}(topology_2.Layer));
exports.Pooling1D = Pooling1D;
var MaxPooling1D = (function (_super) {
    __extends(MaxPooling1D, _super);
    function MaxPooling1D(config) {
        return _super.call(this, config) || this;
    }
    MaxPooling1D.prototype.getClassName = function () {
        return 'MaxPooling1D';
    };
    MaxPooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {
        common_1.checkDataFormat(dataFormat);
        common_1.checkPaddingMode(padding);
        return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');
    };
    return MaxPooling1D;
}(Pooling1D));
exports.MaxPooling1D = MaxPooling1D;
generic_utils.ClassNameMap.register('MaxPooling1D', MaxPooling1D);
var AveragePooling1D = (function (_super) {
    __extends(AveragePooling1D, _super);
    function AveragePooling1D(config) {
        return _super.call(this, config) || this;
    }
    AveragePooling1D.prototype.getClassName = function () {
        return 'AveragePooling1D';
    };
    AveragePooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {
        common_1.checkDataFormat(dataFormat);
        common_1.checkPaddingMode(padding);
        return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');
    };
    return AveragePooling1D;
}(Pooling1D));
exports.AveragePooling1D = AveragePooling1D;
generic_utils.ClassNameMap.register('AveragePooling1D', AveragePooling1D);
var Pooling2D = (function (_super) {
    __extends(Pooling2D, _super);
    function Pooling2D(config) {
        var _this = this;
        if (config.poolSize == null) {
            config.poolSize = [2, 2];
        }
        _this = _super.call(this, config) || this;
        _this.poolSize = Array.isArray(config.poolSize) ?
            config.poolSize :
            [config.poolSize, config.poolSize];
        _this.strides = config.strides == null ? _this.poolSize : config.strides;
        _this.padding = config.padding == null ? 'valid' : config.padding;
        _this.dataFormat =
            config.dataFormat == null ? 'channelsLast' : config.dataFormat;
        common_1.checkDataFormat(_this.dataFormat);
        common_1.checkPaddingMode(_this.padding);
        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];
        return _this;
    }
    Pooling2D.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];
        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];
        rows =
            conv_utils_1.convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);
        cols =
            conv_utils_1.convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);
        if (this.dataFormat === 'channelsFirst') {
            return [inputShape[0], inputShape[1], rows, cols];
        }
        else {
            return [inputShape[0], rows, cols, inputShape[3]];
        }
    };
    Pooling2D.prototype.call = function (inputs, kwargs) {
        this.invokeCallHook(inputs, kwargs);
        return this.poolingFunction(generic_utils.getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);
    };
    Pooling2D.prototype.getConfig = function () {
        var config = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
            dataFormat: this.dataFormat
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Pooling2D;
}(topology_2.Layer));
exports.Pooling2D = Pooling2D;
var MaxPooling2D = (function (_super) {
    __extends(MaxPooling2D, _super);
    function MaxPooling2D(config) {
        return _super.call(this, config) || this;
    }
    MaxPooling2D.prototype.getClassName = function () {
        return 'MaxPooling2D';
    };
    MaxPooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {
        common_1.checkDataFormat(dataFormat);
        common_1.checkPaddingMode(padding);
        return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');
    };
    return MaxPooling2D;
}(Pooling2D));
exports.MaxPooling2D = MaxPooling2D;
generic_utils.ClassNameMap.register('MaxPooling2D', MaxPooling2D);
var AveragePooling2D = (function (_super) {
    __extends(AveragePooling2D, _super);
    function AveragePooling2D(config) {
        return _super.call(this, config) || this;
    }
    AveragePooling2D.prototype.getClassName = function () {
        return 'AveragePooling2D';
    };
    AveragePooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {
        common_1.checkDataFormat(dataFormat);
        common_1.checkPaddingMode(padding);
        return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');
    };
    return AveragePooling2D;
}(Pooling2D));
exports.AveragePooling2D = AveragePooling2D;
generic_utils.ClassNameMap.register('AveragePooling2D', AveragePooling2D);
var GlobalPooling1D = (function (_super) {
    __extends(GlobalPooling1D, _super);
    function GlobalPooling1D(config) {
        var _this = _super.call(this, config) || this;
        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];
        return _this;
    }
    GlobalPooling1D.prototype.computeOutputShape = function (inputShape) {
        return [inputShape[0], inputShape[2]];
    };
    GlobalPooling1D.prototype.call = function (inputs, kwargs) {
        throw new errors_1.NotImplementedError();
    };
    return GlobalPooling1D;
}(topology_2.Layer));
exports.GlobalPooling1D = GlobalPooling1D;
var GlobalAveragePooling1D = (function (_super) {
    __extends(GlobalAveragePooling1D, _super);
    function GlobalAveragePooling1D(config) {
        return _super.call(this, config) || this;
    }
    GlobalAveragePooling1D.prototype.getClassName = function () {
        return 'GlobalAveragePooling1D';
    };
    GlobalAveragePooling1D.prototype.call = function (inputs, kwargs) {
        var input = generic_utils.getExactlyOneTensor(inputs);
        return K.mean(input, 1);
    };
    return GlobalAveragePooling1D;
}(GlobalPooling1D));
exports.GlobalAveragePooling1D = GlobalAveragePooling1D;
generic_utils.ClassNameMap.register('GlobalAveragePooling1D', GlobalAveragePooling1D);
var GlobalMaxPooling1D = (function (_super) {
    __extends(GlobalMaxPooling1D, _super);
    function GlobalMaxPooling1D(config) {
        return _super.call(this, config) || this;
    }
    GlobalMaxPooling1D.prototype.getClassName = function () {
        return 'GlobalMaxPooling1D';
    };
    GlobalMaxPooling1D.prototype.call = function (inputs, kwargs) {
        var input = generic_utils.getExactlyOneTensor(inputs);
        return K.max(input, 1);
    };
    return GlobalMaxPooling1D;
}(GlobalPooling1D));
exports.GlobalMaxPooling1D = GlobalMaxPooling1D;
generic_utils.ClassNameMap.register('GlobalMaxPooling1D', GlobalMaxPooling1D);
var GlobalPooling2D = (function (_super) {
    __extends(GlobalPooling2D, _super);
    function GlobalPooling2D(config) {
        var _this = _super.call(this, config) || this;
        _this.dataFormat =
            config.dataFormat == null ? 'channelsLast' : config.dataFormat;
        common_1.checkDataFormat(_this.dataFormat);
        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];
        return _this;
    }
    GlobalPooling2D.prototype.computeOutputShape = function (inputShape) {
        inputShape = inputShape;
        if (this.dataFormat === 'channelsLast') {
            return [inputShape[0], inputShape[3]];
        }
        else {
            return [inputShape[0], inputShape[1]];
        }
    };
    GlobalPooling2D.prototype.call = function (inputs, kwargs) {
        throw new errors_1.NotImplementedError();
    };
    GlobalPooling2D.prototype.getConfig = function () {
        var config = { dataFormat: this.dataFormat };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return GlobalPooling2D;
}(topology_2.Layer));
exports.GlobalPooling2D = GlobalPooling2D;
var GlobalAveragePooling2D = (function (_super) {
    __extends(GlobalAveragePooling2D, _super);
    function GlobalAveragePooling2D() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalAveragePooling2D.prototype.call = function (inputs, kwargs) {
        var input = generic_utils.getExactlyOneTensor(inputs);
        if (this.dataFormat === 'channelsLast') {
            return K.mean(input, [1, 2]);
        }
        else {
            return K.mean(input, [2, 3]);
        }
    };
    GlobalAveragePooling2D.prototype.getClassName = function () {
        return 'GlobalAveragePooling2D';
    };
    return GlobalAveragePooling2D;
}(GlobalPooling2D));
exports.GlobalAveragePooling2D = GlobalAveragePooling2D;
generic_utils.ClassNameMap.register('GlobalAveragePooling2D', GlobalAveragePooling2D);
var GlobalMaxPooling2D = (function (_super) {
    __extends(GlobalMaxPooling2D, _super);
    function GlobalMaxPooling2D() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalMaxPooling2D.prototype.call = function (inputs, kwargs) {
        var input = generic_utils.getExactlyOneTensor(inputs);
        if (this.dataFormat === 'channelsLast') {
            return K.max(input, [1, 2]);
        }
        else {
            return K.max(input, [2, 3]);
        }
    };
    GlobalMaxPooling2D.prototype.getClassName = function () {
        return 'GlobalMaxPooling2D';
    };
    return GlobalMaxPooling2D;
}(GlobalPooling2D));
exports.GlobalMaxPooling2D = GlobalMaxPooling2D;
generic_utils.ClassNameMap.register('GlobalMaxPooling2D', GlobalMaxPooling2D);

},{"../backend/tfjs_backend":94,"../common":185,"../engine/topology":172,"../errors":171,"../utils/conv_utils":302,"../utils/generic_utils":165}],96:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var activations_1 = require("../activations");
var K = require("../backend/tfjs_backend");
var constraints_1 = require("../constraints");
var topology_1 = require("../engine/topology");
var topology_2 = require("../engine/topology");
var errors_1 = require("../errors");
var initializers_1 = require("../initializers");
var regularizers_1 = require("../regularizers");
var types_1 = require("../types");
var generic_utils = require("../utils/generic_utils");
var math_utils = require("../utils/math_utils");
var serialization_1 = require("./serialization");
var RNN = (function (_super) {
    __extends(RNN, _super);
    function RNN(config) {
        var _this = _super.call(this, config) || this;
        var cell;
        if (config.cell == null) {
            throw new errors_1.ValueError('cell property is missing for the constructor of RNN.');
        }
        else if (Array.isArray(config.cell)) {
            cell = new StackedRNNCells({ cells: config.cell });
        }
        else {
            cell = config.cell;
        }
        if (cell.stateSize == null) {
            throw new errors_1.ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' +
                'integers, one integer per RNN state).');
        }
        _this.cell = cell;
        _this.returnSequences =
            config.returnSequences == null ? false : config.returnSequences;
        _this.returnState = config.returnState == null ? false : config.returnState;
        _this.goBackwards = config.goBackwards == null ? false : config.goBackwards;
        _this._stateful = config.stateful == null ? false : config.stateful;
        _this.unroll = config.unroll == null ? false : config.unroll;
        _this.supportsMasking = true;
        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];
        _this.stateSpec = null;
        _this.states = null;
        _this.numConstants = null;
        return _this;
    }
    RNN.prototype.getStates = function () {
        if (this.states == null) {
            var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
            return math_utils.range(0, numStates).map(function (x) { return null; });
        }
        else {
            return this.states;
        }
    };
    RNN.prototype.setStates = function (states) {
        this.states = states;
    };
    RNN.prototype.computeOutputShape = function (inputShape) {
        if (generic_utils.isArrayOfShapes(inputShape)) {
            inputShape = inputShape[0];
        }
        inputShape = inputShape;
        var stateSize = this.cell.stateSize;
        if (!Array.isArray(stateSize)) {
            stateSize = [stateSize];
        }
        var outputDim = stateSize[0];
        var outputShape;
        if (this.returnSequences) {
            outputShape = [inputShape[0], inputShape[1], outputDim];
        }
        else {
            outputShape = [inputShape[0], outputDim];
        }
        if (this.returnState) {
            var stateShape = [];
            for (var _i = 0, stateSize_1 = stateSize; _i < stateSize_1.length; _i++) {
                var dim = stateSize_1[_i];
                stateShape.push([inputShape[0], dim]);
            }
            return [outputShape].concat(stateShape);
        }
        else {
            return outputShape;
        }
    };
    RNN.prototype.computeMask = function (inputs, mask) {
        throw new errors_1.NotImplementedError('computeMask has not been implemented for RNN yet');
    };
    RNN.prototype.build = function (inputShape) {
        var constantShape = null;
        if (this.numConstants != null) {
            throw new errors_1.NotImplementedError('Constants support is not implemented in RNN yet.');
        }
        if (generic_utils.isArrayOfShapes(inputShape)) {
            inputShape = inputShape[0];
        }
        inputShape = inputShape;
        var batchSize = this.stateful ? inputShape[0] : null;
        var inputDim = inputShape[inputShape.length - 1];
        this.inputSpec[0] = new topology_1.InputSpec({ shape: [batchSize, null, inputDim] });
        var stepInputShape = [inputShape[0]].concat(inputShape.slice(2));
        if (constantShape != null) {
            throw new errors_1.NotImplementedError('Constants support is not implemented in RNN yet.');
        }
        else {
            this.cell.build(stepInputShape);
        }
        var stateSize;
        if (Array.isArray(this.cell.stateSize)) {
            stateSize = this.cell.stateSize;
        }
        else {
            stateSize = [this.cell.stateSize];
        }
        if (this.stateSpec != null) {
            if (!tfjs_core_1.util.arraysEqual(this.stateSpec.map(function (spec) { return spec.shape[spec.shape.length - 1]; }), stateSize)) {
                throw new errors_1.ValueError("An initialState was passed that is not compatible with " +
                    ("cell.stateSize. Received stateSpec=" + this.stateSpec + "; ") +
                    ("However cell.stateSize is " + this.cell.stateSize));
            }
        }
        else {
            this.stateSpec =
                stateSize.map(function (dim) { return new topology_1.InputSpec({ shape: [null, dim] }); });
        }
        if (this.stateful) {
            throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet');
        }
    };
    RNN.prototype.resetStates = function (states) {
        if (!this.stateful) {
            throw new errors_1.AttributeError('Cannot call resetState() on an RNN Layer that is not stateful.');
        }
        var batchSize = this.inputSpec[0].shape[0];
        if (batchSize == null) {
            throw new errors_1.ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' +
                'the batch size of your input tensors: \n' +
                '- If using a Sequential model, specify the batch size by passing ' +
                'a `batchInputShape` option to your first layer.\n' +
                '- If using the functional API, specify the batch size by ' +
                'passing a `batchShape` option to your Input layer.');
        }
        if (this.states == null) {
            if (Array.isArray(this.cell.stateSize)) {
                this.states = this.cell.stateSize.map(function (dim) { return K.zeros([batchSize, dim]); });
            }
            else {
                this.states = [K.zeros([batchSize, this.cell.stateSize])];
            }
        }
        else if (states == null) {
            if (Array.isArray(this.cell.stateSize)) {
                this.states = this.cell.stateSize.map(function (dim) { return K.zeros([batchSize, dim]); });
            }
            else {
                this.states[0] = K.zeros([batchSize, this.cell.stateSize]);
            }
        }
        else {
            if (!Array.isArray(states)) {
                states = [states];
            }
            if (states.length !== this.states.length) {
                throw new errors_1.ValueError("Layer " + this.name + " expects " + this.states.length + " state(s), " +
                    ("but it received " + states.length + " state value(s). Input ") +
                    ("received: " + states));
            }
            for (var index = 0; index < this.states.length; ++index) {
                var value = states[index];
                var dim = Array.isArray(this.cell.stateSize) ?
                    this.cell.stateSize[index] :
                    this.cell.stateSize;
                var expectedShape = [batchSize, dim];
                if (!tfjs_core_1.util.arraysEqual(value.shape, expectedShape)) {
                    throw new errors_1.ValueError("State " + index + " is incompatible with layer " + this.name + ": " +
                        ("expected shape=" + expectedShape + ", received shape=" + value.shape));
                }
                this.states[index] = value;
            }
        }
    };
    RNN.prototype.standardizeArgs = function (inputs, initialState, constants) {
        if (Array.isArray(inputs)) {
            if (initialState != null || constants != null) {
                throw new errors_1.ValueError('When inputs is an array, neither initialState or constants ' +
                    'should be provided');
            }
            if (this.numConstants != null) {
                constants =
                    inputs.slice(inputs.length - this.numConstants, inputs.length);
                inputs = inputs.slice(0, inputs.length - this.numConstants);
            }
            if (inputs.length > 1) {
                initialState = inputs.slice(1, inputs.length);
            }
            inputs = inputs[0];
        }
        function toListOrNull(x) {
            if (x == null || Array.isArray(x)) {
                return x;
            }
            else {
                return [x];
            }
        }
        initialState = toListOrNull(initialState);
        constants = toListOrNull(constants);
        return { inputs: inputs, initialState: initialState, constants: constants };
    };
    RNN.prototype.apply = function (inputs, kwargs) {
        var initialState = kwargs == null ? null : kwargs['initialState'];
        var constants = kwargs == null ? null : kwargs['constants'];
        if (kwargs == null) {
            kwargs = {};
        }
        var standardized = this.standardizeArgs(inputs, initialState, constants);
        inputs = standardized.inputs;
        initialState = standardized.initialState;
        constants = standardized.constants;
        var additionalInputs = [];
        var additionalSpecs = [];
        if (initialState != null) {
            kwargs['initialState'] = initialState;
            additionalInputs = additionalInputs.concat(initialState);
            this.stateSpec = [];
            for (var _i = 0, initialState_1 = initialState; _i < initialState_1.length; _i++) {
                var state = initialState_1[_i];
                this.stateSpec.push(new topology_1.InputSpec({ shape: state.shape }));
            }
            additionalSpecs = additionalSpecs.concat(this.stateSpec);
        }
        if (constants != null) {
            kwargs['constants'] = constants;
            additionalInputs = additionalInputs.concat(constants);
            this.numConstants = constants.length;
        }
        var isTensor = additionalInputs[0] instanceof types_1.SymbolicTensor;
        if (isTensor) {
            var fullInput = [inputs].concat(additionalInputs);
            var fullInputSpec = this.inputSpec.concat(additionalSpecs);
            var originalInputSpec = this.inputSpec;
            this.inputSpec = fullInputSpec;
            var output = _super.prototype.apply.call(this, fullInput, kwargs);
            this.inputSpec = originalInputSpec;
            return output;
        }
        else {
            return _super.prototype.apply.call(this, inputs, kwargs);
        }
    };
    RNN.prototype.call = function (inputs, kwargs) {
        var _this = this;
        var mask = kwargs == null ? null : kwargs['mask'];
        var training = kwargs == null ? null : kwargs['training'];
        var initialState = kwargs == null ? null : kwargs['initialState'];
        inputs = generic_utils.getExactlyOneTensor(inputs);
        if (initialState == null) {
            if (this.stateful) {
                throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet.');
            }
            else {
                initialState = this.getInitialState(inputs);
            }
        }
        if (mask != null) {
            throw new errors_1.NotImplementedError('Masking is not implemented for RNN yet');
        }
        var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
        if (initialState.length !== numStates) {
            throw new errors_1.ValueError("RNN Layer has " + numStates + " state(s) but was passed " +
                (initialState.length + " initial state(s)."));
        }
        var inputShape = inputs.shape;
        var timesteps = inputShape[1];
        if (this.unroll) {
            console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');
        }
        var cellCallKwargs = { training: training };
        var step = function (inputs, states) {
            var outputs = _this.cell.call([inputs].concat(states), cellCallKwargs);
            return [outputs[0], outputs.slice(1)];
        };
        var rnnOutputs = K.rnn(step, inputs, initialState, this.goBackwards, null, null, this.unroll, timesteps);
        var lastOutput = rnnOutputs[0];
        var outputs = rnnOutputs[1];
        var states = rnnOutputs[2];
        if (this.stateful) {
            throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet');
        }
        var output = this.returnSequences ? outputs : lastOutput;
        if (this.returnState) {
            return [output].concat(states);
        }
        else {
            return output;
        }
    };
    RNN.prototype.getInitialState = function (inputs) {
        var initialState = K.zeros(inputs.shape);
        initialState = K.sum(initialState, [1, 2]);
        initialState = K.expandDims(initialState);
        if (Array.isArray(this.cell.stateSize)) {
            return this.cell.stateSize.map(function (dim) { return dim > 1 ? K.tile(initialState, [1, dim]) : initialState; });
        }
        else {
            return this.cell.stateSize > 1 ?
                [K.tile(initialState, [1, this.cell.stateSize])] :
                [initialState];
        }
    };
    Object.defineProperty(RNN.prototype, "trainableWeights", {
        get: function () {
            if (!this.trainable) {
                return [];
            }
            return this.cell.trainableWeights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RNN.prototype, "nonTrainableWeights", {
        get: function () {
            if (!this.trainable) {
                return this.cell.weights;
            }
            return this.cell.nonTrainableWeights;
        },
        enumerable: true,
        configurable: true
    });
    RNN.prototype.getClassName = function () {
        return 'RNN';
    };
    RNN.prototype.getConfig = function () {
        var config = {
            returnSequences: this.returnSequences,
            returnState: this.returnState,
            goBackwards: this.goBackwards,
            stateful: this.stateful,
            unroll: this.unroll,
        };
        if (this.numConstants != null) {
            config.numConstants = this.numConstants;
        }
        var cellConfig = this.cell.getConfig();
        config.cell = {
            className: this.cell.getClassName(),
            config: cellConfig,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return RNN;
}(topology_2.Layer));
exports.RNN = RNN;
generic_utils.ClassNameMap.register('RNN', RNN);
var RNNCell = (function (_super) {
    __extends(RNNCell, _super);
    function RNNCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RNNCell = __decorate([
        tfjs_core_1.doc({ heading: 'Layers', subheading: 'Classes' })
    ], RNNCell);
    return RNNCell;
}(topology_2.Layer));
exports.RNNCell = RNNCell;
var SimpleRNNCell = (function (_super) {
    __extends(SimpleRNNCell, _super);
    function SimpleRNNCell(config) {
        var _this = _super.call(this, config) || this;
        _this.DEFAULT_ACTIVATION = 'tanh';
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        _this.units = config.units;
        _this.activation = activations_1.getActivation(config.activation == null ? _this.DEFAULT_ACTIVATION :
            config.activation);
        _this.useBias = config.useBias == null ? true : config.useBias;
        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);
        _this.biasInitializer =
            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);
        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);
        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);
        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);
        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);
        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);
        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);
        _this.recurrentDropout = math_utils.min([
            1,
            math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])
        ]);
        _this.stateSize = _this.units;
        return _this;
    }
    SimpleRNNCell.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        }
        else {
            this.bias = null;
        }
        this.built = true;
    };
    SimpleRNNCell.prototype.call = function (inputs, kwargs) {
        inputs = inputs;
        if (inputs.length !== 2) {
            throw new errors_1.ValueError("SimpleRNNCell expects 2 input Tensors, got " + inputs.length + ".");
        }
        var prevOutput = inputs[1];
        inputs = inputs[0];
        if (this.dropout !== 0 || this.recurrentDropout !== 0) {
            throw new errors_1.NotImplementedError('Dropout is not implemented for SimpleRNNCell yet');
        }
        var h = K.dot(inputs, this.kernel.read());
        if (this.bias != null) {
            h = K.biasAdd(h, this.bias.read());
        }
        var output = K.add(h, K.dot(prevOutput, this.recurrentKernel.read()));
        if (this.activation != null) {
            output = this.activation(output);
        }
        return [output, output];
    };
    SimpleRNNCell.prototype.getClassName = function () {
        return 'SimpleRNNCell';
    };
    SimpleRNNCell.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: activations_1.serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),
            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),
            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),
            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),
            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),
            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),
            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),
            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return SimpleRNNCell;
}(RNNCell));
exports.SimpleRNNCell = SimpleRNNCell;
generic_utils.ClassNameMap.register('SimpleRNNCell', SimpleRNNCell);
var SimpleRNN = (function (_super) {
    __extends(SimpleRNN, _super);
    function SimpleRNN(config) {
        var _this = this;
        config.cell = new SimpleRNNCell(config);
        _this = _super.call(this, config) || this;
        return _this;
    }
    SimpleRNN.prototype.call = function (inputs, kwargs) {
        var mask = kwargs == null ? null : kwargs['mask'];
        var training = kwargs == null ? null : kwargs['training'];
        var initialState = kwargs == null ? null : kwargs['initialState'];
        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });
    };
    Object.defineProperty(SimpleRNN.prototype, "units", {
        get: function () {
            return this.cell.units;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "activation", {
        get: function () {
            return this.cell.activation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "useBias", {
        get: function () {
            return this.cell.useBias;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "kernelInitializer", {
        get: function () {
            return this.cell.kernelInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "recurrentInitializer", {
        get: function () {
            return this.cell.recurrentInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "biasInitializer", {
        get: function () {
            return this.cell.biasInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "kernelRegularizer", {
        get: function () {
            return this.cell.kernelRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "recurrentRegularizer", {
        get: function () {
            return this.cell.recurrentRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "biasRegularizer", {
        get: function () {
            return this.cell.biasRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "kernelConstraint", {
        get: function () {
            return this.cell.kernelConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "recurrentConstraint", {
        get: function () {
            return this.cell.recurrentConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "biasConstraint", {
        get: function () {
            return this.cell.biasConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "dropout", {
        get: function () {
            return this.cell.dropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "recurrentDropout", {
        get: function () {
            return this.cell.recurrentDropout;
        },
        enumerable: true,
        configurable: true
    });
    SimpleRNN.prototype.getClassName = function () {
        return 'SimpleRNN';
    };
    SimpleRNN.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: activations_1.serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),
            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),
            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),
            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),
            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),
            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),
            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),
            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return SimpleRNN;
}(RNN));
exports.SimpleRNN = SimpleRNN;
generic_utils.ClassNameMap.register('SimpleRNN', SimpleRNN);
var GRUCell = (function (_super) {
    __extends(GRUCell, _super);
    function GRUCell(config) {
        var _this = _super.call(this, config) || this;
        _this.DEFAULT_ACTIVATION = 'tanh';
        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        _this.units = config.units;
        _this.activation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_ACTIVATION :
            config.activation);
        _this.recurrentActivation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION :
            config.recurrentActivation);
        _this.useBias = config.useBias == null ? true : config.useBias;
        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);
        _this.biasInitializer =
            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);
        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);
        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);
        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);
        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);
        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);
        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);
        _this.recurrentDropout = math_utils.min([
            1,
            math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])
        ]);
        _this.implementation = config.implementation;
        _this.stateSize = _this.units;
        return _this;
    }
    GRUCell.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var inputDim = inputShape[inputShape.length - 1];
        this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        }
        else {
            this.bias = null;
        }
        this.built = true;
    };
    GRUCell.prototype.call = function (inputs, kwargs) {
        if (this.dropout !== 0 || this.recurrentDropout !== 0) {
            throw new errors_1.NotImplementedError('Dropout is not implemented for GRUCell yet');
        }
        inputs = inputs;
        if (inputs.length !== 2) {
            throw new errors_1.ValueError("GRUCell expects 2 input Tensors (inputs, h, c), got " +
                (inputs.length + "."));
        }
        var hTMinus1 = inputs[1];
        inputs = inputs[0];
        var z;
        var r;
        var hh;
        if (this.implementation === 1) {
            var kernelZ = K.sliceAlongLastAxis(this.kernel.read(), 0, this.units);
            var kernelR = K.sliceAlongLastAxis(this.kernel.read(), this.units, this.units);
            var kernelH = K.sliceAlongLastAxis(this.kernel.read(), this.units * 2, this.units);
            var recurrentKernelZ = K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units);
            var recurrentKernelR = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units);
            var recurrentKernelH = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 2, this.units);
            var inputsZ = inputs;
            var inputsR = inputs;
            var inputsH = inputs;
            var xZ = K.dot(inputsZ, kernelZ);
            var xR = K.dot(inputsR, kernelR);
            var xH = K.dot(inputsH, kernelH);
            if (this.useBias) {
                var biasZ = K.sliceAlongFirstAxis(this.bias.read(), 0, this.units);
                var biasR = K.sliceAlongFirstAxis(this.bias.read(), this.units, this.units);
                var biasH = K.sliceAlongFirstAxis(this.bias.read(), this.units * 2, this.units);
                xZ = K.biasAdd(xZ, biasZ);
                xR = K.biasAdd(xR, biasR);
                xH = K.biasAdd(xH, biasH);
            }
            var hTMinus1Z = hTMinus1;
            var hTMinus1R = hTMinus1;
            var hTMinus1H = hTMinus1;
            z = this.recurrentActivation(K.add(xZ, K.dot(hTMinus1Z, recurrentKernelZ)));
            r = this.recurrentActivation(K.add(xR, K.dot(hTMinus1R, recurrentKernelR)));
            hh = this.activation(K.add(xH, K.dot(K.multiply(r, hTMinus1H), recurrentKernelH)));
        }
        else {
            var matrixX = K.dot(inputs, this.kernel.read());
            if (this.useBias) {
                matrixX = K.biasAdd(matrixX, this.bias.read());
            }
            var matrixInner = K.dot(hTMinus1, K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, 2 * this.units));
            var xZ = K.sliceAlongLastAxis(matrixX, 0, this.units);
            var xR = K.sliceAlongLastAxis(matrixX, this.units, this.units);
            var recurrentZ = K.sliceAlongLastAxis(matrixInner, 0, this.units);
            var recurrentR = K.sliceAlongLastAxis(matrixInner, this.units, this.units);
            z = this.recurrentActivation(K.add(xZ, recurrentZ));
            r = this.recurrentActivation(K.add(xR, recurrentR));
            var xH = K.sliceAlongLastAxis(matrixX, 2 * this.units, this.units);
            var recurrentH = K.dot(K.multiply(r, hTMinus1), K.sliceAlongLastAxis(this.recurrentKernel.read(), 2 * this.units, this.units));
            hh = this.activation(K.add(xH, recurrentH));
        }
        var h = K.add(K.multiply(z, hTMinus1), K.multiply(K.scalarPlusArray(K.getScalar(1), K.neg(z)), hh));
        return [h, h];
    };
    GRUCell.prototype.getClassName = function () {
        return 'GRUCell';
    };
    GRUCell.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: activations_1.serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),
            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),
            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),
            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),
            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),
            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),
            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),
            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return GRUCell;
}(RNNCell));
exports.GRUCell = GRUCell;
generic_utils.ClassNameMap.register('GRUCell', GRUCell);
var GRU = (function (_super) {
    __extends(GRU, _super);
    function GRU(config) {
        var _this = this;
        if (config.implementation === 0) {
            console.warn('`implementation=0` has been deprecated, and now defaults to ' +
                '`implementation=1`. Please update your layer call.');
        }
        config.cell = new GRUCell(config);
        _this = _super.call(this, config) || this;
        return _this;
    }
    GRU.prototype.call = function (inputs, kwargs) {
        var mask = kwargs == null ? null : kwargs['mask'];
        var training = kwargs == null ? null : kwargs['training'];
        var initialState = kwargs == null ? null : kwargs['initialState'];
        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });
    };
    Object.defineProperty(GRU.prototype, "units", {
        get: function () {
            return this.cell.units;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "activation", {
        get: function () {
            return this.cell.activation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "useBias", {
        get: function () {
            return this.cell.useBias;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "kernelInitializer", {
        get: function () {
            return this.cell.kernelInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "recurrentInitializer", {
        get: function () {
            return this.cell.recurrentInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "biasInitializer", {
        get: function () {
            return this.cell.biasInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "kernelRegularizer", {
        get: function () {
            return this.cell.kernelRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "recurrentRegularizer", {
        get: function () {
            return this.cell.recurrentRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "biasRegularizer", {
        get: function () {
            return this.cell.biasRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "kernelConstraint", {
        get: function () {
            return this.cell.kernelConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "recurrentConstraint", {
        get: function () {
            return this.cell.recurrentConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "biasConstraint", {
        get: function () {
            return this.cell.biasConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "dropout", {
        get: function () {
            return this.cell.dropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "recurrentDropout", {
        get: function () {
            return this.cell.recurrentDropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "implementation", {
        get: function () {
            return this.cell.implementation;
        },
        enumerable: true,
        configurable: true
    });
    GRU.prototype.getClassName = function () {
        return 'GRU';
    };
    GRU.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: activations_1.serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),
            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),
            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),
            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),
            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),
            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),
            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),
            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    GRU.fromConfig = function (cls, config) {
        if (config['implmentation'] === 0) {
            config['implementation'] = 1;
        }
        return new cls(config);
    };
    return GRU;
}(RNN));
exports.GRU = GRU;
generic_utils.ClassNameMap.register('GRU', GRU);
var LSTMCell = (function (_super) {
    __extends(LSTMCell, _super);
    function LSTMCell(config) {
        var _this = _super.call(this, config) || this;
        _this.DEFAULT_ACTIVATION = 'tanh';
        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        _this.units = config.units;
        _this.activation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_ACTIVATION :
            config.activation);
        _this.recurrentActivation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION :
            config.recurrentActivation);
        _this.useBias = config.useBias == null ? true : config.useBias;
        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);
        _this.biasInitializer =
            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.unitForgetBias = config.unitForgetBias;
        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);
        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);
        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);
        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);
        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);
        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);
        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);
        _this.recurrentDropout = math_utils.min([
            1,
            math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])
        ]);
        _this.implementation = config.implementation;
        _this.stateSize = [_this.units, _this.units];
        return _this;
    }
    LSTMCell.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var inputDim = inputShape[inputShape.length - 1];
        this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
        var biasInitializer;
        if (this.useBias) {
            if (this.unitForgetBias) {
                var capturedBiasInit_1 = this.biasInitializer;
                var capturedUnits_1 = this.units;
                biasInitializer = new ((function (_super) {
                    __extends(CustomInit, _super);
                    function CustomInit() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    CustomInit.prototype.apply = function (shape, dtype) {
                        var bI = capturedBiasInit_1.apply([capturedUnits_1]);
                        var bF = (new initializers_1.Ones()).apply([capturedUnits_1]);
                        var bCAndH = capturedBiasInit_1.apply([capturedUnits_1 * 2]);
                        return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);
                    };
                    CustomInit.prototype.getClassName = function () {
                        return 'CustomInit';
                    };
                    return CustomInit;
                }(initializers_1.Initializer)))();
            }
            else {
                biasInitializer = this.biasInitializer;
            }
            this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        }
        else {
            this.bias = null;
        }
        this.built = true;
    };
    LSTMCell.prototype.call = function (inputs, kwargs) {
        if (this.dropout !== 0 || this.recurrentDropout !== 0) {
            throw new errors_1.NotImplementedError('Dropout is not implemented for LSTMCell yet');
        }
        inputs = inputs;
        if (inputs.length !== 3) {
            throw new errors_1.ValueError("LSTMCell expects 3 input Tensors (inputs, h, c), got " +
                (inputs.length + "."));
        }
        var hTMinus1 = inputs[1];
        var cTMinus1 = inputs[2];
        inputs = inputs[0];
        var i;
        var f;
        var c;
        var o;
        if (this.implementation === 1) {
            var kernelI = K.sliceAlongLastAxis(this.kernel.read(), 0, this.units);
            var kernelF = K.sliceAlongLastAxis(this.kernel.read(), this.units, this.units);
            var kernelC = K.sliceAlongLastAxis(this.kernel.read(), this.units * 2, this.units);
            var kernelO = K.sliceAlongLastAxis(this.kernel.read(), this.units * 3, this.units);
            var recurrentKernelI = K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units);
            var recurrentKernelF = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units);
            var recurrentKernelC = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 2, this.units);
            var recurrentKernelO = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 3, this.units);
            var inputsI = inputs;
            var inputsF = inputs;
            var inputsC = inputs;
            var inputsO = inputs;
            var xI = K.dot(inputsI, kernelI);
            var xF = K.dot(inputsF, kernelF);
            var xC = K.dot(inputsC, kernelC);
            var xO = K.dot(inputsO, kernelO);
            if (this.useBias) {
                var biasI = K.sliceAlongFirstAxis(this.bias.read(), 0, this.units);
                var biasF = K.sliceAlongFirstAxis(this.bias.read(), this.units, this.units);
                var biasC = K.sliceAlongFirstAxis(this.bias.read(), this.units * 2, this.units);
                var biasO = K.sliceAlongFirstAxis(this.bias.read(), this.units * 3, this.units);
                xI = K.biasAdd(xI, biasI);
                xF = K.biasAdd(xF, biasF);
                xC = K.biasAdd(xC, biasC);
                xO = K.biasAdd(xO, biasO);
            }
            var hTMinus1I = hTMinus1;
            var hTMinus1F = hTMinus1;
            var hTMinus1C = hTMinus1;
            var hTMinus1O = hTMinus1;
            i = this.recurrentActivation(K.add(xI, K.dot(hTMinus1I, recurrentKernelI)));
            f = this.recurrentActivation(K.add(xF, K.dot(hTMinus1F, recurrentKernelF)));
            c = K.add(K.multiply(f, cTMinus1), K.multiply(i, this.activation(K.add(xC, K.dot(hTMinus1C, recurrentKernelC)))));
            o = this.recurrentActivation(K.add(xO, K.dot(hTMinus1O, recurrentKernelO)));
        }
        else {
            var z = K.dot(inputs, this.kernel.read());
            z = K.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));
            if (this.useBias) {
                z = K.biasAdd(z, this.bias.read());
            }
            var z0 = K.sliceAlongLastAxis(z, 0, this.units);
            var z1 = K.sliceAlongLastAxis(z, this.units, this.units);
            var z2 = K.sliceAlongLastAxis(z, this.units * 2, this.units);
            var z3 = K.sliceAlongLastAxis(z, this.units * 3, this.units);
            i = this.recurrentActivation(z0);
            f = this.recurrentActivation(z1);
            c = K.add(K.multiply(f, cTMinus1), K.multiply(i, this.activation(z2)));
            o = this.recurrentActivation(z3);
        }
        var h = K.multiply(o, this.activation(c));
        return [h, h, c];
    };
    LSTMCell.prototype.getClassName = function () {
        return 'LSTMCell';
    };
    LSTMCell.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: activations_1.serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),
            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),
            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),
            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),
            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),
            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),
            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return LSTMCell;
}(RNNCell));
exports.LSTMCell = LSTMCell;
generic_utils.ClassNameMap.register('LSTMCell', LSTMCell);
var LSTM = (function (_super) {
    __extends(LSTM, _super);
    function LSTM(config) {
        var _this = this;
        if (config.implementation === 0) {
            console.warn('`implementation=0` has been deprecated, and now defaults to ' +
                '`implementation=1`. Please update your layer call.');
        }
        config.cell = new LSTMCell(config);
        _this = _super.call(this, config) || this;
        return _this;
    }
    LSTM.prototype.call = function (inputs, kwargs) {
        var mask = kwargs == null ? null : kwargs['mask'];
        var training = kwargs == null ? null : kwargs['training'];
        var initialState = kwargs == null ? null : kwargs['initialState'];
        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });
    };
    Object.defineProperty(LSTM.prototype, "units", {
        get: function () {
            return this.cell.units;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "activation", {
        get: function () {
            return this.cell.activation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "useBias", {
        get: function () {
            return this.cell.useBias;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "kernelInitializer", {
        get: function () {
            return this.cell.kernelInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "recurrentInitializer", {
        get: function () {
            return this.cell.recurrentInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "biasInitializer", {
        get: function () {
            return this.cell.biasInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "unitForgetBias", {
        get: function () {
            return this.cell.unitForgetBias;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "kernelRegularizer", {
        get: function () {
            return this.cell.kernelRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "recurrentRegularizer", {
        get: function () {
            return this.cell.recurrentRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "biasRegularizer", {
        get: function () {
            return this.cell.biasRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "kernelConstraint", {
        get: function () {
            return this.cell.kernelConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "recurrentConstraint", {
        get: function () {
            return this.cell.recurrentConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "biasConstraint", {
        get: function () {
            return this.cell.biasConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "dropout", {
        get: function () {
            return this.cell.dropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "recurrentDropout", {
        get: function () {
            return this.cell.recurrentDropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "implementation", {
        get: function () {
            return this.cell.implementation;
        },
        enumerable: true,
        configurable: true
    });
    LSTM.prototype.getClassName = function () {
        return 'LSTM';
    };
    LSTM.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: activations_1.serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),
            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),
            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),
            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),
            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),
            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),
            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    LSTM.fromConfig = function (cls, config) {
        if (config['implmentation'] === 0) {
            config['implementation'] = 1;
        }
        return new cls(config);
    };
    return LSTM;
}(RNN));
exports.LSTM = LSTM;
generic_utils.ClassNameMap.register('LSTM', LSTM);
var StackedRNNCells = (function (_super) {
    __extends(StackedRNNCells, _super);
    function StackedRNNCells(config) {
        var _this = _super.call(this, config) || this;
        _this.cells = config.cells;
        return _this;
    }
    Object.defineProperty(StackedRNNCells.prototype, "stateSize", {
        get: function () {
            var stateSize = [];
            for (var _i = 0, _a = this.cells.slice().reverse(); _i < _a.length; _i++) {
                var cell = _a[_i];
                if (Array.isArray(cell.stateSize)) {
                    stateSize.push.apply(stateSize, cell.stateSize);
                }
                else {
                    stateSize.push(cell.stateSize);
                }
            }
            return stateSize;
        },
        enumerable: true,
        configurable: true
    });
    StackedRNNCells.prototype.call = function (inputs, kwargs) {
        inputs = inputs;
        var states = inputs.slice(1);
        var nestedStates = [];
        for (var _i = 0, _a = this.cells.slice().reverse(); _i < _a.length; _i++) {
            var cell = _a[_i];
            if (Array.isArray(cell.stateSize)) {
                nestedStates.push(states.splice(0, cell.stateSize.length));
            }
            else {
                nestedStates.push(states.splice(0, 1));
            }
        }
        nestedStates.reverse();
        var newNestedStates = [];
        var callInputs;
        for (var i = 0; i < this.cells.length; ++i) {
            var cell = this.cells[i];
            states = nestedStates[i];
            if (i === 0) {
                callInputs = [inputs[0]].concat(states);
            }
            else {
                callInputs = [callInputs[0]].concat(states);
            }
            callInputs = cell.call(callInputs, kwargs);
            newNestedStates.push(callInputs.slice(1));
        }
        states = [];
        for (var _b = 0, _c = newNestedStates.slice().reverse(); _b < _c.length; _b++) {
            var cellStates = _c[_b];
            states.push.apply(states, cellStates);
        }
        return [callInputs[0]].concat(states);
    };
    StackedRNNCells.prototype.build = function (inputShape) {
        if (generic_utils.isArrayOfShapes(inputShape)) {
            inputShape = inputShape[0];
        }
        inputShape = inputShape;
        var outputDim;
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            cell.build(inputShape);
            if (Array.isArray(cell.stateSize)) {
                outputDim = cell.stateSize[0];
            }
            else {
                outputDim = cell.stateSize;
            }
            inputShape = [inputShape[0], outputDim];
        }
        this.built = true;
    };
    StackedRNNCells.prototype.getClassName = function () {
        return 'StackedRNNCells';
    };
    StackedRNNCells.prototype.getConfig = function () {
        var cellConfigs = [];
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            cellConfigs.push({
                'className': this.getClassName(),
                'config': cell.getConfig(),
            });
        }
        var config = { 'cells': cellConfigs };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    StackedRNNCells.fromConfig = function (cls, config, customObjects) {
        if (customObjects === void 0) { customObjects = {}; }
        var cells = [];
        for (var _i = 0, _a = config['cells']; _i < _a.length; _i++) {
            var cellConfig = _a[_i];
            cells.push(serialization_1.deserialize(cellConfig, customObjects));
        }
        return new cls({ cells: cells });
    };
    Object.defineProperty(StackedRNNCells.prototype, "trainableWeights", {
        get: function () {
            if (!this.trainable) {
                return [];
            }
            var weights = [];
            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
                var cell = _a[_i];
                weights.push.apply(weights, cell.trainableWeights);
            }
            return weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StackedRNNCells.prototype, "nonTrainableWeights", {
        get: function () {
            var weights = [];
            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
                var cell = _a[_i];
                weights.push.apply(weights, cell.nonTrainableWeights);
            }
            if (!this.trainable) {
                var trainableWeights = [];
                for (var _b = 0, _c = this.cells; _b < _c.length; _b++) {
                    var cell = _c[_b];
                    trainableWeights.push.apply(trainableWeights, cell.trainableWeights);
                }
                return trainableWeights.concat(weights);
            }
            return weights;
        },
        enumerable: true,
        configurable: true
    });
    StackedRNNCells.prototype.getWeights = function () {
        var weights = [];
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            weights.push.apply(weights, cell.weights);
        }
        return K.batchGetValue(weights);
    };
    StackedRNNCells.prototype.setWeights = function (weights) {
        var tuples = [];
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            var numParams = cell.weights.length;
            var inputWeights = weights.splice(numParams);
            for (var i = 0; i < cell.weights.length; ++i) {
                tuples.push([cell.weights[i], inputWeights[i]]);
            }
        }
        K.batchSetValue(tuples);
    };
    return StackedRNNCells;
}(RNNCell));
exports.StackedRNNCells = StackedRNNCells;
generic_utils.ClassNameMap.register('StackedRNNCells', StackedRNNCells);

},{"@tensorflow/tfjs-core":64,"../activations":196,"../backend/tfjs_backend":94,"../constraints":166,"../engine/topology":172,"../errors":171,"../initializers":167,"../regularizers":170,"../types":91,"../utils/generic_utils":165,"../utils/math_utils":190,"./serialization":183}],182:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var K = require("../backend/tfjs_backend");
var topology_1 = require("../engine/topology");
var errors_1 = require("../errors");
var generic_utils = require("../utils/generic_utils");
var serialization_1 = require("./serialization");
var Wrapper = (function (_super) {
    __extends(Wrapper, _super);
    function Wrapper(config) {
        var _this = _super.call(this, config) || this;
        _this.layer = config.layer;
        return _this;
    }
    Wrapper.prototype.build = function (inputShape) {
        this.built = true;
    };
    Object.defineProperty(Wrapper.prototype, "trainable", {
        get: function () {
            if (this.layer != null) {
                return this.layer.trainable;
            }
            else {
                return false;
            }
        },
        set: function (value) {
            if (this.layer != null) {
                this.layer.trainable = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wrapper.prototype, "trainableWeights", {
        get: function () {
            return this.layer.trainableWeights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wrapper.prototype, "nonTrainableWeights", {
        get: function () {
            return this.layer.nonTrainableWeights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wrapper.prototype, "updates", {
        get: function () {
            return this.layer._updates;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wrapper.prototype, "losses", {
        get: function () {
            return this.layer.losses;
        },
        enumerable: true,
        configurable: true
    });
    Wrapper.prototype.getWeights = function () {
        return this.layer.getWeights();
    };
    Wrapper.prototype.setWeights = function (weights) {
        this.layer.setWeights(weights);
    };
    Wrapper.prototype.getConfig = function () {
        var config = {
            'layer': {
                'className': this.layer.getClassName(),
                'config': this.layer.getConfig(),
            }
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Wrapper.fromConfig = function (cls, config, customObjects) {
        if (customObjects === void 0) { customObjects = {}; }
        var layerConfig = config['layer'];
        var layer = serialization_1.deserialize(layerConfig, customObjects);
        delete config['layer'];
        var newConfig = { layer: layer };
        Object.assign(newConfig, config);
        return new cls(newConfig);
    };
    return Wrapper;
}(topology_1.Layer));
exports.Wrapper = Wrapper;
var TimeDistributed = (function (_super) {
    __extends(TimeDistributed, _super);
    function TimeDistributed(config) {
        var _this = _super.call(this, config) || this;
        _this.supportsMasking = true;
        return _this;
    }
    TimeDistributed.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        if (inputShape.length < 3) {
            throw new errors_1.ValueError("TimeDistributed layer expects an input shape >= 3D, but received " +
                ("input shape " + JSON.stringify(inputShape)));
        }
        this.inputSpec = [{ shape: inputShape }];
        var childInputShape = [inputShape[0]].concat(inputShape.slice(2));
        if (!this.layer.built) {
            this.layer.build(childInputShape);
            this.layer.built = true;
        }
        _super.prototype.build.call(this, inputShape);
    };
    TimeDistributed.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var childInputShape = [inputShape[0]].concat(inputShape.slice(2));
        var childOutputShape = this.layer.computeOutputShape(childInputShape);
        var timesteps = inputShape[1];
        return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));
    };
    TimeDistributed.prototype.call = function (inputs, kwargs) {
        var _this = this;
        inputs = generic_utils.getExactlyOneTensor(inputs);
        var step = function (inputs, states) {
            var output = _this.layer.call(inputs, kwargs);
            return [output, []];
        };
        var rnnOutputs = K.rnn(step, inputs, [], false, null, null, false, inputs.shape[1]);
        var y = rnnOutputs[1];
        return y;
    };
    TimeDistributed.prototype.getClassName = function () {
        return 'TimeDistributed';
    };
    return TimeDistributed;
}(Wrapper));
exports.TimeDistributed = TimeDistributed;
generic_utils.ClassNameMap.register('TimeDistributed', TimeDistributed);
var BidirectionalMergeMode;
(function (BidirectionalMergeMode) {
    BidirectionalMergeMode[BidirectionalMergeMode["SUM"] = 0] = "SUM";
    BidirectionalMergeMode[BidirectionalMergeMode["MUL"] = 1] = "MUL";
    BidirectionalMergeMode[BidirectionalMergeMode["CONCAT"] = 2] = "CONCAT";
    BidirectionalMergeMode[BidirectionalMergeMode["AVE"] = 3] = "AVE";
})(BidirectionalMergeMode = exports.BidirectionalMergeMode || (exports.BidirectionalMergeMode = {}));
generic_utils.SerializableEnumRegistry.register('merge_mode', {
    'sum': BidirectionalMergeMode.SUM,
    'mul': BidirectionalMergeMode.MUL,
    'concat': BidirectionalMergeMode.CONCAT,
    'ave': BidirectionalMergeMode.AVE,
});
var Bidirectional = (function (_super) {
    __extends(Bidirectional, _super);
    function Bidirectional(config) {
        var _this = _super.call(this, config) || this;
        _this.forwardLayer = config.layer;
        var layerConfig = config.layer.getConfig();
        layerConfig['goBackwards'] =
            layerConfig['goBackwards'] === true ? false : true;
        _this.backwardLayer =
            serialization_1.deserialize({ className: config.layer.getClassName(), config: layerConfig });
        _this.forwardLayer.name = 'forward_' + _this.forwardLayer.name;
        _this.backwardLayer.name = 'backward_' + _this.backwardLayer.name;
        _this.mergeMode = config.mergeMode;
        if (config.weights) {
            throw new errors_1.NotImplementedError('weights support is not implemented for Bidirectional layer yet.');
        }
        _this._stateful = config.layer.stateful;
        _this.returnSequences = config.layer.returnSequences;
        _this.returnState = config.layer.returnState;
        _this.supportsMasking = true;
        _this._trainable = true;
        _this.inputSpec = config.layer.inputSpec;
        return _this;
    }
    Object.defineProperty(Bidirectional.prototype, "trainable", {
        get: function () {
            return this._trainable;
        },
        set: function (value) {
            this._trainable = value;
            if (this.forwardLayer != null) {
                this.forwardLayer.trainable = value;
            }
            if (this.backwardLayer != null) {
                this.backwardLayer.trainable = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Bidirectional.prototype.getWeights = function () {
        return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
    };
    Bidirectional.prototype.setWeights = function (weights) {
        var numWeights = weights.length;
        var numeightsOver2 = Math.floor(numWeights / 2);
        this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));
        this.backwardLayer.setWeights(weights.slice(numeightsOver2));
    };
    Bidirectional.prototype.computeOutputShape = function (inputShape) {
        var layerShapes = this.forwardLayer.computeOutputShape(inputShape);
        if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {
            layerShapes = [layerShapes];
        }
        layerShapes = layerShapes;
        var outputShape;
        var outputShapes;
        var stateShape;
        if (this.returnState) {
            stateShape = layerShapes.slice(1);
            outputShape = layerShapes[0];
        }
        else {
            outputShape = layerShapes[0];
        }
        outputShape = outputShape;
        if (this.mergeMode === BidirectionalMergeMode.CONCAT) {
            outputShape[outputShape.length - 1] *= 2;
            outputShapes = [outputShape];
        }
        else if (this.mergeMode == null) {
            outputShapes = [outputShape, outputShape.slice()];
        }
        else {
            outputShapes = [outputShape];
        }
        if (this.returnState) {
            if (this.mergeMode == null) {
                return outputShapes.concat(stateShape).concat(stateShape.slice());
            }
            return [outputShape].concat(stateShape).concat(stateShape.slice());
        }
        return generic_utils.singletonOrArray(outputShapes);
    };
    Bidirectional.prototype.apply = function (inputs, kwargs) {
        var initialState = null;
        if (kwargs != null) {
            initialState = kwargs['initialState'];
        }
        if (Array.isArray(inputs)) {
            initialState = inputs.slice(1);
            inputs = inputs[0];
        }
        if (initialState == null || initialState.length === 0) {
            var applyOutputs = _super.prototype.apply.call(this, inputs, kwargs);
            return applyOutputs;
        }
        else {
            throw new errors_1.NotImplementedError('The support for initial states is not implemented for ' +
                'Bidirectional layers yet.');
        }
    };
    Bidirectional.prototype.call = function (inputs, kwargs) {
        if (kwargs['mask'] != null) {
            throw new errors_1.NotImplementedError('The support for masking is not implemented for ' +
                'Bidirectional layers yet.');
        }
        if (kwargs['initialState'] != null) {
            throw new errors_1.NotImplementedError('The support for initial states is not implemented for ' +
                'Bidirectional layers yet.');
        }
        var y = this.forwardLayer.call(inputs, kwargs);
        var yRev = this.backwardLayer.call(inputs, kwargs);
        var states;
        if (this.returnState) {
            if (Array.isArray(y)) {
                states = y.slice(1).concat(yRev.slice(1));
            }
            else {
            }
            y = y[0];
            yRev = yRev[0];
        }
        if (this.returnSequences) {
            yRev = K.reverse(yRev, 1);
        }
        var output;
        if (this.mergeMode === BidirectionalMergeMode.CONCAT) {
            output = K.concatenate([y, yRev]);
        }
        else if (this.mergeMode === BidirectionalMergeMode.SUM) {
            output = K.add(y, yRev);
        }
        else if (this.mergeMode === BidirectionalMergeMode.AVE) {
            output = K.scalarTimesArray(K.getScalar(0.5), K.add(y, yRev));
        }
        else if (this.mergeMode === BidirectionalMergeMode.MUL) {
            output = K.multiply(y, yRev);
        }
        else if (this.mergeMode == null) {
            output = [y, yRev];
        }
        if (this.returnState) {
            if (this.mergeMode == null) {
                return output.concat(states);
            }
            return [output].concat(states);
        }
        return output;
    };
    Bidirectional.prototype.resetStates = function (states) {
        this.forwardLayer.resetStates();
        this.backwardLayer.resetStates();
    };
    Bidirectional.prototype.build = function (inputShape) {
        var _this = this;
        K.nameScope(this.forwardLayer.name, function () {
            _this.forwardLayer.build(inputShape);
        });
        K.nameScope(this.backwardLayer.name, function () {
            _this.backwardLayer.build(inputShape);
        });
        this.built = true;
    };
    Object.defineProperty(Bidirectional.prototype, "trainableWeights", {
        get: function () {
            return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bidirectional.prototype, "nonTrainableWeights", {
        get: function () {
            return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
        },
        enumerable: true,
        configurable: true
    });
    Bidirectional.prototype.getClassName = function () {
        return 'Bidirectional';
    };
    return Bidirectional;
}(Wrapper));
exports.Bidirectional = Bidirectional;
generic_utils.ClassNameMap.register('Bidirectional', Bidirectional);

},{"../backend/tfjs_backend":94,"../engine/topology":172,"../errors":171,"../utils/generic_utils":165,"./serialization":183}],90:[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var K = require("./backend/tfjs_backend");
var topology_1 = require("./engine/topology");
var training_1 = require("./engine/training");
var errors_1 = require("./errors");
var serialization_1 = require("./layers/serialization");
var generic_utils = require("./utils/generic_utils");
var serialization_utils_1 = require("./utils/serialization_utils");
function modelFromJSON(modelAndWeightsConfig, customObjects) {
    return __awaiter(this, void 0, void 0, function () {
        var modelTopology, tsConfig, model, weightValues, uniqueWeightValues, _i, _a, weight, skipMismatches, isNamedTensorMap;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    modelTopology = modelAndWeightsConfig.modelTopology;
                    if (modelTopology['model_config'] != null) {
                        modelTopology = modelTopology['model_config'];
                    }
                    tsConfig = serialization_utils_1.convertPythonicToTs(modelTopology);
                    model = serialization_1.deserialize(tsConfig, customObjects);
                    if (!(modelAndWeightsConfig.weightsManifest != null)) return [3, 2];
                    return [4, tfjs_core_1.loadWeights(modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix, model.weights.map(function (weight) { return weight.originalName; }))];
                case 1:
                    weightValues = _b.sent();
                    uniqueWeightValues = {};
                    for (_i = 0, _a = model.weights; _i < _a.length; _i++) {
                        weight = _a[_i];
                        uniqueWeightValues[weight.name] = weightValues[weight.originalName];
                    }
                    skipMismatches = null;
                    isNamedTensorMap = true;
                    model.loadWeights(uniqueWeightValues, skipMismatches, isNamedTensorMap);
                    _b.label = 2;
                case 2: return [2, model];
            }
        });
    });
}
exports.modelFromJSON = modelFromJSON;
function loadModelInternal(modelConfigPath) {
    return __awaiter(this, void 0, void 0, function () {
        var modelConfigRequest, modelConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, fetch(modelConfigPath)];
                case 1:
                    modelConfigRequest = _a.sent();
                    return [4, modelConfigRequest.json()];
                case 2:
                    modelConfig = _a.sent();
                    if (modelConfig['modelTopology'] == null) {
                        throw new errors_1.ValueError('Missing field "modelTopology" from model JSON at path' +
                            modelConfigPath);
                    }
                    if (modelConfig['weightsManifest'] == null) {
                        throw new errors_1.ValueError('Missing field "weightsManifest" from model JSON at path' +
                            modelConfigPath);
                    }
                    modelConfig.pathPrefix =
                        modelConfigPath.substring(0, modelConfigPath.lastIndexOf('/'));
                    return [2, modelFromJSON(modelConfig)];
            }
        });
    });
}
exports.loadModelInternal = loadModelInternal;
var Sequential = (function (_super) {
    __extends(Sequential, _super);
    function Sequential(config) {
        var _this = _super.call(this, { inputs: [], outputs: [] }) || this;
        config = config || {};
        _this.trainable = true;
        _this._updatable = true;
        _this.built = false;
        _this.name = (config.name != null) ? config.name : K.getUid('sequential_');
        if (config.layers != null) {
            for (var _i = 0, _a = config.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                _this.add(layer);
            }
        }
        return _this;
    }
    Sequential_1 = Sequential;
    Sequential.prototype.getClassName = function () {
        return 'Sequential';
    };
    Sequential.prototype.add = function (layer) {
        if (this.outputs.length === 0) {
            if (layer.inboundNodes.length === 0) {
                if (layer.batchInputShape == null) {
                    throw new errors_1.ValueError('The first layer in a Sequential model must ' +
                        'get an `inputShape` or `batchInputShape` argument.');
                }
                var x = topology_1.Input({
                    batchShape: layer.batchInputShape,
                    dtype: layer.dtype,
                    name: layer.name + '_input'
                });
                layer.apply(x);
            }
            if (layer.inboundNodes.length !== 1) {
                throw new errors_1.ValueError('A layer added to a Sequential model must not already be ' +
                    ("connected somewhere else. Model received layer " + layer.name + " ") +
                    ("which has " + layer.inboundNodes.length + " pre-existing inbound ") +
                    'connections.');
            }
            if (layer.inboundNodes[0].outputTensors.length !== 1) {
                throw new errors_1.ValueError('All layers in a Sequential model ' +
                    'should have a single output tensor. ' +
                    'For multi-output layers, ' +
                    'use the functional API.');
            }
            this.outputs = [layer.inboundNodes[0].outputTensors[0]];
            this.inputs = topology_1.getSourceInputs(this.outputs[0]);
            new topology_1.Node({
                outboundLayer: this,
                inboundLayers: [],
                nodeIndices: [],
                tensorIndices: [],
                inputTensors: this.inputs,
                outputTensors: this.outputs,
                inputMasks: generic_utils.pyListRepeat(null, this.inputs.length),
                outputMasks: [null],
                inputShapes: this.inputs.map(function (x) { return x.shape; }),
                outputShapes: this.outputs[0].shape
            });
        }
        else {
            var outputTensor = layer.apply(this.outputs[0]);
            if (Array.isArray(outputTensor)) {
                throw new TypeError('All layers in a Sequential model ' +
                    'should have a single output tensor. ' +
                    'For multi-output layers, ' +
                    'use the functional API.');
            }
            this.outputs = [outputTensor];
            this.inboundNodes[0].outputTensors = this.outputs;
            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
        }
        this.layers.push(layer);
        this.built = false;
    };
    Sequential.prototype.pop = function () {
        if (this.layers.length === 0) {
            throw new TypeError('There are no layers in the model.');
        }
        this.layers.pop();
        if (this.layers.length === 0) {
            this.outputs = [];
            this.inboundNodes = [];
            this.outboundNodes = [];
        }
        else {
            var lastLayerIndex = this.layers.length - 1;
            this.layers[lastLayerIndex].outboundNodes = [];
            this.outputs = [this.layers[lastLayerIndex].output];
            this.inboundNodes[0].outputTensors = this.outputs;
            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
        }
    };
    Sequential.prototype.call = function (inputs, kwargs) {
        if (this.model == null) {
            this.build();
        }
        return this.model.call(inputs, kwargs);
    };
    Sequential.prototype.build = function (inputShape) {
        if (this.inputs.length === 0 || this.outputs.length === 0) {
            throw new TypeError('Sequential model cannot be built: model is empty.' +
                ' Add some layers first.');
        }
        this.model = new training_1.Model({
            inputs: this.inputs,
            outputs: this.outputs[0],
            name: this.name + '_model'
        });
        this.model.trainable = this.trainable;
        this.model.updatable = this.updatable;
        this.supportsMasking = this.model.supportsMasking;
        this.inputLayers = this.model.inputLayers;
        this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;
        this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;
        this.outputLayers = this.model.outputLayers;
        this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;
        this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;
        this.nodesByDepth = this.model.nodesByDepth;
        this.containerNodes = this.model.containerNodes;
        this.outputNames = this.model.outputNames;
        this.inputNames = this.model.inputNames;
        this.built = true;
    };
    Sequential.prototype.setWeights = function (weights) {
        if (this.model == null) {
            this.build();
        }
        this.model.setWeights(weights);
    };
    Object.defineProperty(Sequential.prototype, "updatable", {
        get: function () {
            return this._updatable;
        },
        set: function (value) {
            if (this.built) {
                this.model.updatable = value;
            }
            this._updatable = value;
        },
        enumerable: true,
        configurable: true
    });
    Sequential.prototype.evaluate = function (x, y, config) {
        if (config === void 0) { config = {}; }
        if (!this.built) {
            throw new errors_1.RuntimeError('The model needs to be compiled before being used.');
        }
        return this.model.evaluate(x, y, config);
    };
    Sequential.prototype.predict = function (x, config) {
        if (config === void 0) { config = {}; }
        if (this.model == null) {
            this.build();
        }
        return this.model.predict(x, config);
    };
    Sequential.prototype.predictOnBatch = function (x) {
        if (this.model == null) {
            this.build();
        }
        return this.model.predictOnBatch(x);
    };
    Sequential.prototype.compile = function (config) {
        this.build();
        this.model.compile(config);
        this.optimizer = this.model.optimizer;
        this.loss = this.model.loss;
        this.metrics = this.model.metrics;
        this.metricsTensors = this.model.metricsTensors;
        this.metricsNames = this.model.metricsNames;
    };
    Sequential.prototype.fit = function (x, y, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.built) {
                    throw new errors_1.RuntimeError('The model needs to be compiled before ' +
                        'being used.');
                }
                return [2, this.model.fit(x, y, config)];
            });
        });
    };
    Sequential.fromConfig = function (cls, config) {
        var model = new cls({});
        if (!(model instanceof Sequential_1)) {
            throw new errors_1.ValueError("Sequential.fromConfig called on non-Sequential input: " + model);
        }
        if (!(config instanceof Array)) {
            throw new errors_1.ValueError("Sequential.fromConfig called without an array of configs");
        }
        if (!(config[0].className != null) || config[0]['className'] === 'Merge') {
            throw new errors_1.ValueError('Legacy serialization format not supported yet.');
        }
        for (var _i = 0, _a = config; _i < _a.length; _i++) {
            var conf = _a[_i];
            var layer = serialization_1.deserialize(conf);
            model.add(layer);
        }
        return model;
    };
    Sequential.prototype.getConfig = function () {
        var config = [];
        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
            var layer = _a[_i];
            config.push({
                className: layer.getClassName(),
                config: layer.getConfig(),
            });
        }
        return config;
    };
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })
    ], Sequential.prototype, "add", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })
    ], Sequential.prototype, "evaluate", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [1] })
    ], Sequential.prototype, "predict", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })
    ], Sequential.prototype, "fit", null);
    Sequential = Sequential_1 = __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })
    ], Sequential);
    return Sequential;
    var Sequential_1;
}(training_1.Model));
exports.Sequential = Sequential;
generic_utils.ClassNameMap.register('Sequential', Sequential);

},{"@tensorflow/tfjs-core":64,"./backend/tfjs_backend":94,"./engine/topology":172,"./engine/training":95,"./errors":171,"./layers/serialization":183,"./utils/generic_utils":165,"./utils/serialization_utils":184}],88:[function(require,module,exports) {
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var constraints_1 = require("./constraints");
var topology_1 = require("./engine/topology");
var training_1 = require("./engine/training");
var initializers_1 = require("./initializers");
var advanced_activations_1 = require("./layers/advanced_activations");
var convolutional_1 = require("./layers/convolutional");
var convolutional_depthwise_1 = require("./layers/convolutional_depthwise");
var core_1 = require("./layers/core");
var embeddings_1 = require("./layers/embeddings");
var merge_1 = require("./layers/merge");
var normalization_1 = require("./layers/normalization");
var padding_1 = require("./layers/padding");
var pooling_1 = require("./layers/pooling");
var recurrent_1 = require("./layers/recurrent");
var wrappers_1 = require("./layers/wrappers");
var losses_1 = require("./losses");
var metrics_1 = require("./metrics");
var models_1 = require("./models");
var regularizers_1 = require("./regularizers");
var ModelExports = (function () {
    function ModelExports() {
    }
    ModelExports.model = function (config) {
        return new training_1.Model(config);
    };
    ModelExports.sequential = function (config) {
        return new models_1.Sequential(config);
    };
    ModelExports.loadModel = function (modelConfigPath) {
        return models_1.loadModelInternal(modelConfigPath);
    };
    ModelExports.input = function (config) {
        return topology_1.Input(config);
    };
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Creation', configParamIndices: [0] })
    ], ModelExports, "model", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Models', subheading: 'Creation', configParamIndices: [0] })
    ], ModelExports, "sequential", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Models',
            subheading: 'Loading',
            useDocsFrom: 'loadModelInternal'
        })
    ], ModelExports, "loadModel", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Models',
            subheading: 'Inputs',
            useDocsFrom: 'Input',
            configParamIndices: [0]
        })
    ], ModelExports, "input", null);
    return ModelExports;
}());
exports.ModelExports = ModelExports;
var LayerExports = (function () {
    function LayerExports() {
    }
    LayerExports.inputLayer = function (config) {
        return new topology_1.InputLayer(config);
    };
    LayerExports.elu = function (config) {
        return new advanced_activations_1.ELU(config);
    };
    LayerExports.leakyReLU = function (config) {
        return new advanced_activations_1.LeakyReLU(config);
    };
    LayerExports.softmax = function (config) {
        return new advanced_activations_1.Softmax(config);
    };
    LayerExports.thresholdedReLU = function (config) {
        return new advanced_activations_1.ThresholdedReLU(config);
    };
    LayerExports.conv1d = function (config) {
        return new convolutional_1.Conv1D(config);
    };
    LayerExports.conv2d = function (config) {
        return new convolutional_1.Conv2D(config);
    };
    LayerExports.conv2dTranspose = function (config) {
        return new convolutional_1.Conv2DTranspose(config);
    };
    LayerExports.separableConv2d = function (config) {
        return new convolutional_1.SeparableConv2D(config);
    };
    LayerExports.depthwiseConv2d = function (config) {
        return new convolutional_depthwise_1.DepthwiseConv2D(config);
    };
    LayerExports.activation = function (config) {
        return new core_1.Activation(config);
    };
    LayerExports.dense = function (config) {
        return new core_1.Dense(config);
    };
    LayerExports.dropout = function (config) {
        return new core_1.Dropout(config);
    };
    LayerExports.flatten = function (config) {
        return new core_1.Flatten(config);
    };
    LayerExports.repeatVector = function (config) {
        return new core_1.RepeatVector(config);
    };
    LayerExports.reshape = function (config) {
        return new core_1.Reshape(config);
    };
    LayerExports.embedding = function (config) {
        return new embeddings_1.Embedding(config);
    };
    LayerExports.add = function (config) {
        return new merge_1.Add(config);
    };
    LayerExports.average = function (config) {
        return new merge_1.Average(config);
    };
    LayerExports.concatenate = function (config) {
        return new merge_1.Concatenate(config);
    };
    LayerExports.maximum = function (config) {
        return new merge_1.Maximum(config);
    };
    LayerExports.minimum = function (config) {
        return new merge_1.Minimum(config);
    };
    LayerExports.multiply = function (config) {
        return new merge_1.Multiply(config);
    };
    LayerExports.batchNormalization = function (config) {
        return new normalization_1.BatchNormalization(config);
    };
    LayerExports.zeroPadding2d = function (config) {
        return new padding_1.ZeroPadding2D(config);
    };
    LayerExports.averagePooling1d = function (config) {
        return new pooling_1.AveragePooling1D(config);
    };
    LayerExports.avgPool1d = function (config) {
        return LayerExports.averagePooling1d(config);
    };
    LayerExports.avgPooling1d = function (config) {
        return LayerExports.averagePooling1d(config);
    };
    LayerExports.averagePooling2d = function (config) {
        return new pooling_1.AveragePooling2D(config);
    };
    LayerExports.avgPool2d = function (config) {
        return LayerExports.averagePooling2d(config);
    };
    LayerExports.avgPooling2d = function (config) {
        return LayerExports.averagePooling2d(config);
    };
    LayerExports.globalAveragePooling1d = function (config) {
        return new pooling_1.GlobalAveragePooling1D(config);
    };
    LayerExports.globalAveragePooling2d = function (config) {
        return new pooling_1.GlobalAveragePooling2D(config);
    };
    LayerExports.globalMaxPooling1d = function (config) {
        return new pooling_1.GlobalMaxPooling1D(config);
    };
    LayerExports.globalMaxPooling2d = function (config) {
        return new pooling_1.GlobalMaxPooling2D(config);
    };
    LayerExports.maxPooling1d = function (config) {
        return new pooling_1.MaxPooling1D(config);
    };
    LayerExports.maxPooling2d = function (config) {
        return new pooling_1.MaxPooling2D(config);
    };
    LayerExports.gru = function (config) {
        return new recurrent_1.GRU(config);
    };
    LayerExports.gruCell = function (config) {
        return new recurrent_1.GRUCell(config);
    };
    LayerExports.lstm = function (config) {
        return new recurrent_1.LSTM(config);
    };
    LayerExports.lstmCell = function (config) {
        return new recurrent_1.LSTMCell(config);
    };
    LayerExports.simpleRNN = function (config) {
        return new recurrent_1.SimpleRNN(config);
    };
    LayerExports.simpleRNNCell = function (config) {
        return new recurrent_1.SimpleRNNCell(config);
    };
    LayerExports.rnn = function (config) {
        return new recurrent_1.RNN(config);
    };
    LayerExports.stackedRNNCells = function (config) {
        return new recurrent_1.StackedRNNCells(config);
    };
    LayerExports.bidirectional = function (config) {
        return new wrappers_1.Bidirectional(config);
    };
    LayerExports.timeDistributed = function (config) {
        return new wrappers_1.TimeDistributed(config);
    };
    LayerExports.Layer = topology_1.Layer;
    LayerExports.RNNCell = recurrent_1.RNNCell;
    LayerExports.input = ModelExports.input;
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Inputs',
            namespace: 'layers',
            useDocsFrom: 'InputLayer',
            configParamIndices: [0]
        })
    ], LayerExports, "inputLayer", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Advanced Activation',
            namespace: 'layers',
            useDocsFrom: 'ELU',
            configParamIndices: [0]
        })
    ], LayerExports, "elu", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Advanced Activation',
            namespace: 'layers',
            useDocsFrom: 'LeakyReLU',
            configParamIndices: [0]
        })
    ], LayerExports, "leakyReLU", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Advanced Activation',
            namespace: 'layers',
            useDocsFrom: 'Softmax',
            configParamIndices: [0]
        })
    ], LayerExports, "softmax", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Advanced Activation',
            namespace: 'layers',
            useDocsFrom: 'ThresholdedReLU',
            configParamIndices: [0]
        })
    ], LayerExports, "thresholdedReLU", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Convolutional',
            namespace: 'layers',
            useDocsFrom: 'Conv1D',
            configParamIndices: [0]
        })
    ], LayerExports, "conv1d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Convolutional',
            namespace: 'layers',
            useDocsFrom: 'Conv2D',
            configParamIndices: [0]
        })
    ], LayerExports, "conv2d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Convolutional',
            namespace: 'layers',
            useDocsFrom: 'Conv2DTranspose',
            configParamIndices: [0]
        })
    ], LayerExports, "conv2dTranspose", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Convolutional',
            namespace: 'layers',
            useDocsFrom: 'SeparableConv2D',
            configParamIndices: [0]
        })
    ], LayerExports, "separableConv2d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Convolutional',
            namespace: 'layers',
            useDocsFrom: 'DepthwiseConv2D',
            configParamIndices: [0]
        })
    ], LayerExports, "depthwiseConv2d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Basic',
            namespace: 'layers',
            useDocsFrom: 'Activation',
            configParamIndices: [0]
        })
    ], LayerExports, "activation", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Basic',
            namespace: 'layers',
            useDocsFrom: 'Dense',
            configParamIndices: [0]
        })
    ], LayerExports, "dense", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Basic',
            namespace: 'layers',
            useDocsFrom: 'Dropout',
            configParamIndices: [0]
        })
    ], LayerExports, "dropout", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Basic',
            namespace: 'layers',
            useDocsFrom: 'Flatten',
            configParamIndices: [0]
        })
    ], LayerExports, "flatten", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Basic',
            namespace: 'layers',
            useDocsFrom: 'RepeatVector',
            configParamIndices: [0]
        })
    ], LayerExports, "repeatVector", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Basic',
            namespace: 'layers',
            useDocsFrom: 'Reshape',
            configParamIndices: [0]
        })
    ], LayerExports, "reshape", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Basic',
            namespace: 'layers',
            useDocsFrom: 'Embedding',
            configParamIndices: [0]
        })
    ], LayerExports, "embedding", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Merge',
            namespace: 'layers',
            useDocsFrom: 'Add',
            configParamIndices: [0]
        })
    ], LayerExports, "add", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Merge',
            namespace: 'layers',
            useDocsFrom: 'Average',
            configParamIndices: [0]
        })
    ], LayerExports, "average", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Merge',
            namespace: 'layers',
            useDocsFrom: 'Concatenate',
            configParamIndices: [0]
        })
    ], LayerExports, "concatenate", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Merge',
            namespace: 'layers',
            useDocsFrom: 'Maximum',
            configParamIndices: [0]
        })
    ], LayerExports, "maximum", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Merge',
            namespace: 'layers',
            useDocsFrom: 'Minimum',
            configParamIndices: [0]
        })
    ], LayerExports, "minimum", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Merge',
            namespace: 'layers',
            useDocsFrom: 'Multiply',
            configParamIndices: [0]
        })
    ], LayerExports, "multiply", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Normalization',
            namespace: 'layers',
            useDocsFrom: 'BatchNormalization',
            configParamIndices: [0]
        })
    ], LayerExports, "batchNormalization", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Padding',
            namespace: 'layers',
            useDocsFrom: 'ZeroPadding2D',
            configParamIndices: [0]
        })
    ], LayerExports, "zeroPadding2d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Pooling',
            namespace: 'layers',
            useDocsFrom: 'AveragePooling1D',
            configParamIndices: [0]
        })
    ], LayerExports, "averagePooling1d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Pooling',
            namespace: 'layers',
            useDocsFrom: 'AveragePooling2D',
            configParamIndices: [0]
        })
    ], LayerExports, "averagePooling2d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Pooling',
            namespace: 'layers',
            useDocsFrom: 'GlobalAveragePooling1D',
            configParamIndices: [0]
        })
    ], LayerExports, "globalAveragePooling1d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Pooling',
            namespace: 'layers',
            useDocsFrom: 'GlobalAveragePooling2D',
            configParamIndices: [0]
        })
    ], LayerExports, "globalAveragePooling2d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Pooling',
            namespace: 'layers',
            useDocsFrom: 'GlobalMaxPooling1D',
            configParamIndices: [0]
        })
    ], LayerExports, "globalMaxPooling1d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Pooling',
            namespace: 'layers',
            useDocsFrom: 'GlobalMaxPooling2D',
            configParamIndices: [0]
        })
    ], LayerExports, "globalMaxPooling2d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Pooling',
            namespace: 'layers',
            useDocsFrom: 'MaxPooling1D',
            configParamIndices: [0]
        })
    ], LayerExports, "maxPooling1d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Pooling',
            namespace: 'layers',
            useDocsFrom: 'MaxPooling2D',
            configParamIndices: [0]
        })
    ], LayerExports, "maxPooling2d", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Recurrent',
            namespace: 'layers',
            useDocsFrom: 'GRU',
            configParamIndices: [0]
        })
    ], LayerExports, "gru", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Recurrent',
            namespace: 'layers',
            useDocsFrom: 'GRUCell',
            configParamIndices: [0]
        })
    ], LayerExports, "gruCell", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Recurrent',
            namespace: 'layers',
            useDocsFrom: 'LSTM',
            configParamIndices: [0]
        })
    ], LayerExports, "lstm", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Recurrent',
            namespace: 'layers',
            useDocsFrom: 'LSTMCell',
            configParamIndices: [0]
        })
    ], LayerExports, "lstmCell", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Recurrent',
            namespace: 'layers',
            useDocsFrom: 'SimpleRNN',
            configParamIndices: [0]
        })
    ], LayerExports, "simpleRNN", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Recurrent',
            namespace: 'layers',
            useDocsFrom: 'SimpleRNNCell',
            configParamIndices: [0]
        })
    ], LayerExports, "simpleRNNCell", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Recurrent',
            namespace: 'layers',
            useDocsFrom: 'RNN',
            configParamIndices: [0]
        })
    ], LayerExports, "rnn", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Recurrent',
            namespace: 'layers',
            useDocsFrom: 'RNN',
            configParamIndices: [0]
        })
    ], LayerExports, "stackedRNNCells", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Wrapper',
            namespace: 'layers',
            useDocsFrom: 'Bidirectional',
            configParamIndices: [0]
        })
    ], LayerExports, "bidirectional", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Layers',
            subheading: 'Wrapper',
            namespace: 'layers',
            useDocsFrom: 'TimeDistributed',
            configParamIndices: [0]
        })
    ], LayerExports, "timeDistributed", null);
    return LayerExports;
}());
exports.LayerExports = LayerExports;
var ConstraintExports = (function () {
    function ConstraintExports() {
    }
    ConstraintExports.maxNorm = function (config) {
        return new constraints_1.MaxNorm(config);
    };
    ConstraintExports.unitNorm = function (config) {
        return new constraints_1.UnitNorm(config);
    };
    ConstraintExports.nonNeg = function () {
        return new constraints_1.NonNeg();
    };
    ConstraintExports.minMaxNorm = function (config) {
        return new constraints_1.MinMaxNorm(config);
    };
    __decorate([
        tfjs_core_1.doc({
            heading: 'Constraints',
            namespace: 'constraints',
            useDocsFrom: 'MaxNorm',
            configParamIndices: [0]
        })
    ], ConstraintExports, "maxNorm", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Constraints',
            namespace: 'constraints',
            useDocsFrom: 'UnitNorm',
            configParamIndices: [0]
        })
    ], ConstraintExports, "unitNorm", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Constraints', namespace: 'constraints', useDocsFrom: 'NonNeg' })
    ], ConstraintExports, "nonNeg", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Constraints',
            namespace: 'constraints',
            useDocsFrom: 'MinMaxNormConfig',
            configParamIndices: [0]
        })
    ], ConstraintExports, "minMaxNorm", null);
    return ConstraintExports;
}());
exports.ConstraintExports = ConstraintExports;
var InitializerExports = (function () {
    function InitializerExports() {
    }
    InitializerExports.zeros = function () {
        return new initializers_1.Zeros();
    };
    InitializerExports.ones = function () {
        return new initializers_1.Ones();
    };
    InitializerExports.constant = function (config) {
        return new initializers_1.Constant(config);
    };
    InitializerExports.randomUniform = function (config) {
        return new initializers_1.RandomUniform(config);
    };
    InitializerExports.randomNormal = function (config) {
        return new initializers_1.RandomNormal(config);
    };
    InitializerExports.truncatedNormal = function (config) {
        return new initializers_1.TruncatedNormal(config);
    };
    InitializerExports.identity = function (config) {
        return new initializers_1.Identity(config);
    };
    InitializerExports.varianceScaling = function (config) {
        return new initializers_1.VarianceScaling(config);
    };
    InitializerExports.glorotUniform = function (config) {
        return new initializers_1.GlorotUniform(config);
    };
    InitializerExports.glorotNormal = function (config) {
        return new initializers_1.GlorotNormal(config);
    };
    InitializerExports.heNormal = function (config) {
        return new initializers_1.HeNormal(config);
    };
    InitializerExports.leCunNormal = function (config) {
        return new initializers_1.LeCunNormal(config);
    };
    InitializerExports.orthogonal = function (config) {
        return new initializers_1.Orthogonal(config);
    };
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'Zeros'
        })
    ], InitializerExports, "zeros", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Initializers', namespace: 'initializers', useDocsFrom: 'Ones' })
    ], InitializerExports, "ones", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'Constant',
            configParamIndices: [0]
        })
    ], InitializerExports, "constant", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'RandomUniform',
            configParamIndices: [0]
        })
    ], InitializerExports, "randomUniform", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'RandomNormal',
            configParamIndices: [0]
        })
    ], InitializerExports, "randomNormal", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'TruncatedNormal',
            configParamIndices: [0]
        })
    ], InitializerExports, "truncatedNormal", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'Identity',
            configParamIndices: [0]
        })
    ], InitializerExports, "identity", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'VarianceScaling',
            configParamIndices: [0]
        })
    ], InitializerExports, "varianceScaling", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'GlorotUniform',
            configParamIndices: [0]
        })
    ], InitializerExports, "glorotUniform", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'GlorotNormal',
            configParamIndices: [0]
        })
    ], InitializerExports, "glorotNormal", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'HeNormal',
            configParamIndices: [0]
        })
    ], InitializerExports, "heNormal", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'LeCunNormal',
            configParamIndices: [0]
        })
    ], InitializerExports, "leCunNormal", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Initializers',
            namespace: 'initializers',
            useDocsFrom: 'Orthogonal',
            configParamIndices: [0]
        })
    ], InitializerExports, "orthogonal", null);
    return InitializerExports;
}());
exports.InitializerExports = InitializerExports;
var MetricExports = (function () {
    function MetricExports() {
    }
    MetricExports.binaryAccuracy = function (yTrue, yPred) {
        return metrics_1.binaryAccuracy(yTrue, yPred);
    };
    MetricExports.binaryCrossentropy = function (yTrue, yPred) {
        return metrics_1.binaryCrossentropy(yTrue, yPred);
    };
    MetricExports.categoricalAccuracy = function (yTrue, yPred) {
        return metrics_1.categoricalAccuracy(yTrue, yPred);
    };
    MetricExports.categoricalCrossentropy = function (yTrue, yPred) {
        return losses_1.categoricalCrossentropy(yTrue, yPred);
    };
    MetricExports.cosineProximity = function (yTrue, yPred) {
        return losses_1.cosineProximity(yTrue, yPred);
    };
    MetricExports.prototype.meanAbsoluteError = function (yTrue, yPred) {
        return losses_1.meanAbsoluteError(yTrue, yPred);
    };
    MetricExports.prototype.meanAbsolutePercentageError = function (yTrue, yPred) {
        return losses_1.meanAbsolutePercentageError(yTrue, yPred);
    };
    MetricExports.prototype.MAPE = function (yTrue, yPred) {
        return losses_1.meanAbsolutePercentageError(yTrue, yPred);
    };
    MetricExports.prototype.mape = function (yTrue, yPred) {
        return losses_1.meanAbsolutePercentageError(yTrue, yPred);
    };
    MetricExports.meanSquaredError = function (yTrue, yPred) {
        return losses_1.meanSquaredError(yTrue, yPred);
    };
    MetricExports.MSE = function (yTrue, yPred) {
        return losses_1.meanSquaredError(yTrue, yPred);
    };
    MetricExports.mse = function (yTrue, yPred) {
        return losses_1.meanSquaredError(yTrue, yPred);
    };
    __decorate([
        tfjs_core_1.doc({
            heading: 'Metrics',
            namespace: 'metrics',
            useDocsFrom: 'meanAbsoluteError'
        })
    ], MetricExports.prototype, "meanAbsoluteError", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Metrics',
            namespace: 'metrics',
            useDocsFrom: 'meanAbsolutePercentageError'
        })
    ], MetricExports.prototype, "meanAbsolutePercentageError", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Metrics', namespace: 'metrics', useDocsFrom: 'binaryAccuracy' })
    ], MetricExports, "binaryAccuracy", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Metrics',
            namespace: 'metrics',
            useDocsFrom: 'binaryCrossentropy'
        })
    ], MetricExports, "binaryCrossentropy", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Metrics',
            namespace: 'metrics',
            useDocsFrom: 'categoricalAccuracy'
        })
    ], MetricExports, "categoricalAccuracy", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Metrics',
            namespace: 'metrics',
            useDocsFrom: 'categoricalCrossentropy'
        })
    ], MetricExports, "categoricalCrossentropy", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Metrics',
            namespace: 'metrics',
            useDocsFrom: 'cosineProximity'
        })
    ], MetricExports, "cosineProximity", null);
    __decorate([
        tfjs_core_1.doc({
            heading: 'Metrics',
            namespace: 'metrics',
            useDocsFrom: 'meanSquaredError'
        })
    ], MetricExports, "meanSquaredError", null);
    return MetricExports;
}());
exports.MetricExports = MetricExports;
var RegularizerExports = (function () {
    function RegularizerExports() {
    }
    RegularizerExports.l1l2 = function (config) {
        return new regularizers_1.L1L2(config);
    };
    RegularizerExports.l1 = function (config) {
        return regularizers_1.l1(config);
    };
    RegularizerExports.l2 = function (config) {
        return regularizers_1.l2(config);
    };
    __decorate([
        tfjs_core_1.doc({ heading: 'Regularizers', namespace: 'regularizers', useDocsFrom: 'L1L2' })
    ], RegularizerExports, "l1l2", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Regularizers', namespace: 'regularizers', useDocsFrom: 'L1L2' })
    ], RegularizerExports, "l1", null);
    __decorate([
        tfjs_core_1.doc({ heading: 'Regularizers', namespace: 'regularizers', useDocsFrom: 'L1L2' })
    ], RegularizerExports, "l2", null);
    return RegularizerExports;
}());
exports.RegularizerExports = RegularizerExports;

},{"@tensorflow/tfjs-core":64,"./constraints":166,"./engine/topology":172,"./engine/training":95,"./initializers":167,"./layers/advanced_activations":173,"./layers/convolutional":174,"./layers/convolutional_depthwise":175,"./layers/core":176,"./layers/embeddings":177,"./layers/merge":178,"./layers/normalization":179,"./layers/padding":180,"./layers/pooling":181,"./layers/recurrent":96,"./layers/wrappers":182,"./losses":168,"./metrics":169,"./models":90,"./regularizers":170}],92:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var version = '0.5.3';
exports.version = version;

},{}],65:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var backend = require("./backend/tfjs_backend");
exports.backend = backend;
var exports_1 = require("./exports");
var callbacks_1 = require("./callbacks");
exports.Callback = callbacks_1.Callback;
exports.CallbackList = callbacks_1.CallbackList;
exports.CustomCallback = callbacks_1.CustomCallback;
var training_1 = require("./engine/training");
exports.Model = training_1.Model;
var recurrent_1 = require("./layers/recurrent");
exports.RNN = recurrent_1.RNN;
var models_1 = require("./models");
exports.Sequential = models_1.Sequential;
var types_1 = require("./types");
exports.SymbolicTensor = types_1.SymbolicTensor;
var version_1 = require("./version");
exports.version_layers = version_1.version;
exports.model = exports_1.ModelExports.model;
exports.sequential = exports_1.ModelExports.sequential;
exports.loadModel = exports_1.ModelExports.loadModel;
exports.input = exports_1.ModelExports.input;
exports.layers = exports_1.LayerExports;
exports.constraints = exports_1.ConstraintExports;
exports.initializers = exports_1.InitializerExports;
exports.metrics = exports_1.MetricExports;
exports.regularizers = exports_1.RegularizerExports;

},{"./backend/tfjs_backend":94,"./exports":88,"./callbacks":89,"./engine/training":95,"./layers/recurrent":96,"./models":90,"./types":91,"./version":92}],50:[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var version = '0.10.3';
exports.version = version;

},{}],39:[function(require,module,exports) {
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("@tensorflow/tfjs-core"));
__export(require("@tensorflow/tfjs-layers"));
var tfjs_core_1 = require("@tensorflow/tfjs-core");
var tfjs_layers_1 = require("@tensorflow/tfjs-layers");
var version_1 = require("./version");
exports.version = {
    'tfjs-core': tfjs_core_1.version_core,
    'tfjs-layers': tfjs_layers_1.version_layers,
    'tfjs': version_1.version
};

},{"@tensorflow/tfjs-core":64,"@tensorflow/tfjs-layers":65,"./version":50}],12:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Webcam = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _tfjs = require('@tensorflow/tfjs');

var tf = _interopRequireWildcard(_tfjs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// const tf = document.tf;


/**
 * A class that wraps webcam video elements to capture Tensor4Ds.
 */
var Webcam = exports.Webcam = function () {

    // class Webcam {

    /**
     * @param {HTMLVideoElement} webcamElement A HTMLVideoElement representing the webcam feed.
     */
    function Webcam(webcamElement) {
        (0, _classCallCheck3.default)(this, Webcam);

        this.webcamElement = webcamElement;
    }

    /**
     * Captures a frame from the webcam and normalizes it between -1 and 1.
     * Returns a batched image (1-element batch) of shape [1, w, h, c].
     */


    (0, _createClass3.default)(Webcam, [{
        key: 'capture',
        value: function capture() {
            var _this = this;

            return tf.tidy(function () {
                // Reads the image as a Tensor from the webcam <video> element.
                var webcamImage = tf.fromPixels(_this.webcamElement);

                // Crop the image so we're using the center square of the rectangular
                // webcam.
                var croppedImage = _this.cropImage(webcamImage);

                // Expand the outer most dimension so we have a batch size of 1.
                var batchedImage = croppedImage.expandDims(0);

                // Normalize the image between -1 and 1. The image comes in between 0-255,
                // so we divide by 127 and subtract 1.
                return batchedImage.toFloat().div(tf.scalar(127)).sub(tf.scalar(1));
            });
        }

        /**
         * Crops an image tensor so we get a square image with no white space.
         * @param {Tensor4D} img An input image Tensor to crop.
         */

    }, {
        key: 'cropImage',
        value: function cropImage(img) {
            var size = Math.min(img.shape[0], img.shape[1]);
            var centerHeight = img.shape[0] / 2;
            var beginHeight = centerHeight - size / 2;
            var centerWidth = img.shape[1] / 2;
            var beginWidth = centerWidth - size / 2;
            return img.slice([beginHeight, beginWidth, 0], [size, size, 3]);
        }

        /**
         * Adjusts the video size so we can make a centered square crop without
         * including whitespace.
         * @param {number} width The real width of the video element.
         * @param {number} height The real height of the video element.
         */

    }, {
        key: 'adjustVideoSize',
        value: function adjustVideoSize(width, height) {
            var aspectRatio = width / height;
            if (width >= height) {
                this.webcamElement.width = aspectRatio * this.webcamElement.height;
            } else if (width < height) {
                this.webcamElement.height = this.webcamElement.width / aspectRatio;
            }
        }
    }, {
        key: 'setup',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var _this2 = this;

                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                return _context2.abrupt('return', new _promise2.default(function (resolve, reject) {
                                    var navigatorAny = navigator;
                                    navigator.getUserMedia = navigator.getUserMedia || navigatorAny.webkitGetUserMedia || navigatorAny.mozGetUserMedia || navigatorAny.msGetUserMedia;
                                    if (navigator.getUserMedia) {
                                        navigator.getUserMedia({
                                            video: true
                                        }, function (stream) {
                                            _this2.webcamElement.srcObject = stream;
                                            _this2.webcamElement.addEventListener('loadeddata', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                                                return _regenerator2.default.wrap(function _callee$(_context) {
                                                    while (1) {
                                                        switch (_context.prev = _context.next) {
                                                            case 0:
                                                                _this2.adjustVideoSize(_this2.webcamElement.videoWidth, _this2.webcamElement.videoHeight);
                                                                resolve();

                                                            case 2:
                                                            case 'end':
                                                                return _context.stop();
                                                        }
                                                    }
                                                }, _callee, _this2);
                                            })), false);
                                        }, function (error) {
                                            document.querySelector('#no-webcam').style.display = 'block';
                                        });
                                    } else {
                                        reject();
                                    }
                                }));

                            case 1:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function setup() {
                return _ref.apply(this, arguments);
            }

            return setup;
        }()
    }]);
    return Webcam;
}();

// const scanner = new Webcam(document.getElementById('#videoElement'));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// import * as tf from 'https://cdn.jsdelivr.net/npm/@tensorflow/tfjs';
},{"babel-runtime/regenerator":79,"babel-runtime/core-js/promise":33,"babel-runtime/helpers/asyncToGenerator":13,"babel-runtime/helpers/classCallCheck":37,"babel-runtime/helpers/createClass":38,"@tensorflow/tfjs":39}],5:[function(require,module,exports) {
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

// loading the model

var kerasMod = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var model, isPredictingm, predictedClass, classId;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return tf.loadModel('kerasModel/model.json');

          case 2:
            model = _context.sent;


            console.log(model);

            // const model = await loadFrozenModel(MODEL_URL, WEIGHTS_URL)};
            // {const model = await loadFrozenModel(MODEL_URL, WEIGHTS_URL)}catch(error){console.log(err)};


            console.log('before predict');

            isPredictingm = true;

            //THE LOOP FOR LOGGIN PREDICTIONS

          case 6:
            if (!isPredicting) {
              _context.next = 16;
              break;
            }

            predictedClass = tf.tidy(function () {
              var img = webcam.capture();
              //   const activation = mobilenet.predict(img);
              //   const predictions = model.predict(activation);
              var predictions = model.predict(img);
              return predictions.as1D().argMax();
            });

            // console.log(predictedClass);

            _context.next = 10;
            return predictedClass.data();

          case 10:
            classId = _context.sent[0];


            console.log(classId);
            // ui.predictClass(classId);
            _context.next = 14;
            return tf.nextFrame();

          case 14:
            _context.next = 6;
            break;

          case 16:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function kerasMod() {
    return _ref.apply(this, arguments);
  };
}();

var load = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    var MODEL_URL, WEIGHTS_URL, model;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            MODEL_URL = "./model/web_model.pb";
            WEIGHTS_URL = "./model/weights_manifest.json";

            // const MODEL_URL = "model/tensorflowjs_model.pb";
            // const WEIGHTS_URL = "model/weights_manifest.json";

            // const MODEL_URL = "https://radhorizon.com/ML/tensorflowjs_model.pb";
            // const WEIGHTS_URL = "https://radhorizon.com/ML/weights_manifest.json";

            console.log(MODEL_URL);
            console.log(WEIGHTS_URL);

            console.log('before loadFrozenModel');
            _context2.next = 7;
            return loadFrozenModel(MODEL_URL, WEIGHTS_URL);

          case 7:
            model = _context2.sent;

            console.log('after loadFrozenModel');

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function load() {
    return _ref2.apply(this, arguments);
  };
}();

// load();


var runMod = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
    var MODEL_URL, WEIGHTS_URL, model, isPredictingm, predictedClass, classId;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            console.log('before load');

            MODEL_URL = "./model/tensorflowjs_model.pb";
            WEIGHTS_URL = "./model/weights_manifest.json";


            console.log(MODEL_URL);

            console.log(WEIGHTS_URL);

            console.log('before loadFrozenModel');

            _context3.next = 8;
            return loadFrozenModel(MODEL_URL, WEIGHTS_URL);

          case 8:
            model = _context3.sent;


            // const model = await tf.loadModel(WEIGHTS_URL);


            console.log(model);

            // const model = await loadFrozenModel(MODEL_URL, WEIGHTS_URL)};
            // {const model = await loadFrozenModel(MODEL_URL, WEIGHTS_URL)}catch(error){console.log(err)};


            console.log('before predict');

            isPredictingm = true;

            //THE LOOP FOR LOGGIN PREDICTIONS

          case 12:
            if (!isPredicting) {
              _context3.next = 22;
              break;
            }

            predictedClass = tf.tidy(function () {
              var img = webcam.capture();
              //   const activation = mobilenet.predict(img);
              //   const predictions = model.predict(activation);
              var predictions = model.predict(img);
              return predictions.as1D().argMax();
            });

            // console.log(predictedClass);

            _context3.next = 16;
            return predictedClass.data();

          case 16:
            classId = _context3.sent[0];


            console.log(classId);
            // ui.predictClass(classId);
            _context3.next = 20;
            return tf.nextFrame();

          case 20:
            _context3.next = 12;
            break;

          case 22:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function runMod() {
    return _ref3.apply(this, arguments);
  };
}();

// runMod();
// import leftPad from './leftpad';

// const serNos = [6934, 23111, 23114, 1001, 211161];
// const strSNos = serNos.map(sn => leftPad(sn, 8, '0'));
// console.log(strSNos);

// import * as tfc from './@tensorflow/tfjs-core';
// import * as tf from '@tensorflow/tfjs';
// import { loadFrozenModel } from '@tensorflow/tfjs-converter';

// import * as tfc from './@tensorflow/tfjs-core';


// import { loadFrozenModel } from './tfjs-converter@0.2.0';

var _tfjs = require('./tfjs');

var tf = _interopRequireWildcard(_tfjs);

var _tensorcam = require('./tensorcam');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//to instantiate a new webcam tensorcam
var webcam = new _tensorcam.Webcam(document.getElementById('#videoElement'));
console.log(webcam);

console.log('hello world');

kerasMod();
},{"babel-runtime/regenerator":79,"babel-runtime/helpers/asyncToGenerator":13,"./tfjs":11,"./tensorcam":12}],333:[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';

var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };

  module.bundle.hotData = null;
}

module.bundle.Module = Module;

var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = '' || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + '51885' + '/');
  ws.onmessage = function (event) {
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      data.assets.forEach(function (asset) {
        hmrApply(global.parcelRequire, asset);
      });

      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          hmrAccept(global.parcelRequire, asset.id);
        }
      });
      // Clear the console after HMR
      console.clear();
    }

    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');

      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);

      removeErrorOverlay();

      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;

  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';

  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(+k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAccept(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAccept(bundle.parent, id);
  }

  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);

  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAccept(global.parcelRequire, id);
  });
}
},{}]},{},[333,5], null)
//# sourceMappingURL=/radlense.434aa555.map